// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

package com.github.icedland.iced.x86.asm;

import com.github.icedland.iced.x86.ICRegister;
import com.github.icedland.iced.x86.Register;

/**
 * An assembler register used with {@link CodeAssembler}.
 */
public final class AsmRegisterST {
	/**
	 * Creates a new instance.
	 *
	 * @param register Register
	 */
	public AsmRegisterST(ICRegister register) {
		if (!Register.isST(register.get()))
			throw new IllegalArgumentException("Invalid register value. Must be a ST register");
		this.register = register;
	}

	private final ICRegister register;

	/**
	 * The register value
	 */
	public ICRegister get() {
		return register;
	}

	/**
	 * The register value (a {@link com.github.icedland.iced.x86.Register} enum variant)
	 */
	public int getRegister() {
		return register.get();
	}

	/** Checks if {@code obj} equals this object */
	@Override
	public boolean equals(Object obj) {
		if (obj == null || getClass() != obj.getClass())
			return false;
		AsmRegisterST other = (AsmRegisterST)obj;
		return register.get() == other.register.get();
	}

	/** Gets the hash code */
	@Override
	public int hashCode() {
		return register.get();
	}

	/** toString() */
	@Override
	public String toString() {
		return String.format("Register %d", getRegister());
	}
}
