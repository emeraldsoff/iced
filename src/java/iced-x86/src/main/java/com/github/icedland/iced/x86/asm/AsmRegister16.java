// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

package com.github.icedland.iced.x86.asm;

import com.github.icedland.iced.x86.ICRegister;
import com.github.icedland.iced.x86.Register;

/**
 * An assembler register used with {@link CodeAssembler}.
 */
public final class AsmRegister16 {
	/**
	 * Creates a new instance.
	 *
	 * @param register Register
	 */
	public AsmRegister16(ICRegister register) {
		if (!Register.isGPR16(register.get()))
			throw new IllegalArgumentException("Invalid register value. Must be a GPR16 register");
		this.register = register;
	}

	private final ICRegister register;

	/**
	 * The register value
	 */
	public ICRegister get() {
		return register;
	}

	/**
	 * The register value (a {@link com.github.icedland.iced.x86.Register} enum variant)
	 */
	public int getRegister() {
		return register.get();
	}

	/**
	 * Adds a register (base) to another register (index) and returns a memory operand.
	 *
	 * @param index The index register
	 */
	public AsmMemoryOperand add(AsmRegister16 index) {
		return new AsmMemoryOperand(MemoryOperandSize.NONE, ICRegister.NONE, get(), index.get(), 1, 0, AsmOperandFlags.NONE);
	}

	/**
	 * Adds this register (base) to a displacement and returns a memory operand.
	 *
	 * @param displacement The displacement
	 */
	public AsmMemoryOperand add(long displacement) {
		return new AsmMemoryOperand(MemoryOperandSize.NONE, ICRegister.NONE, get(), ICRegister.NONE, 1, displacement, AsmOperandFlags.NONE);
	}

	/**
	 * Subtracts a displacement from this register (base) and returns a memory operand.
	 *
	 * @param displacement The displacement
	 */
	public AsmMemoryOperand sub(long displacement) {
		return new AsmMemoryOperand(MemoryOperandSize.NONE, ICRegister.NONE, get(), ICRegister.NONE, 1, -displacement, AsmOperandFlags.NONE);
	}

	/**
	 * Adds this register (base or index) to a memory operand and returns a memory operand.
	 *
	 * @param mem Memory operand
	 */
	public AsmMemoryOperand add(AsmMemoryOperand mem) {
		return mem.add(this);
	}

	/** Checks if {@code obj} equals this object */
	@Override
	public boolean equals(Object obj) {
		if (obj == null || getClass() != obj.getClass())
			return false;
		AsmRegister16 other = (AsmRegister16)obj;
		return register.get() == other.register.get();
	}

	/** Gets the hash code */
	@Override
	public int hashCode() {
		return register.get();
	}

	/** toString() */
	@Override
	public String toString() {
		return String.format("Register %d", getRegister());
	}
}
