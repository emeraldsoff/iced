// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

package com.github.icedland.iced.x86.info;

final class OpCodeOperandKinds {
	static final byte[] legacyOpKinds = new byte[] {
		(byte)OpCodeOperandKind.NONE,
		(byte)OpCodeOperandKind.FARBR2_2,
		(byte)OpCodeOperandKind.FARBR4_2,
		(byte)OpCodeOperandKind.MEM_OFFS,
		(byte)OpCodeOperandKind.MEM,
		(byte)OpCodeOperandKind.MEM_MPX,
		(byte)OpCodeOperandKind.MEM_MIB,
		(byte)OpCodeOperandKind.R8_OR_MEM,
		(byte)OpCodeOperandKind.R16_OR_MEM,
		(byte)OpCodeOperandKind.R32_OR_MEM,
		(byte)OpCodeOperandKind.R32_OR_MEM_MPX,
		(byte)OpCodeOperandKind.R64_OR_MEM,
		(byte)OpCodeOperandKind.R64_OR_MEM_MPX,
		(byte)OpCodeOperandKind.MM_OR_MEM,
		(byte)OpCodeOperandKind.XMM_OR_MEM,
		(byte)OpCodeOperandKind.BND_OR_MEM_MPX,
		(byte)OpCodeOperandKind.R8_REG,
		(byte)OpCodeOperandKind.R8_OPCODE,
		(byte)OpCodeOperandKind.R16_REG,
		(byte)OpCodeOperandKind.R16_REG_MEM,
		(byte)OpCodeOperandKind.R16_RM,
		(byte)OpCodeOperandKind.R16_OPCODE,
		(byte)OpCodeOperandKind.R32_REG,
		(byte)OpCodeOperandKind.R32_REG_MEM,
		(byte)OpCodeOperandKind.R32_RM,
		(byte)OpCodeOperandKind.R32_OPCODE,
		(byte)OpCodeOperandKind.R64_REG,
		(byte)OpCodeOperandKind.R64_REG_MEM,
		(byte)OpCodeOperandKind.R64_RM,
		(byte)OpCodeOperandKind.R64_OPCODE,
		(byte)OpCodeOperandKind.SEG_REG,
		(byte)OpCodeOperandKind.MM_REG,
		(byte)OpCodeOperandKind.MM_RM,
		(byte)OpCodeOperandKind.XMM_REG,
		(byte)OpCodeOperandKind.XMM_RM,
		(byte)OpCodeOperandKind.CR_REG,
		(byte)OpCodeOperandKind.DR_REG,
		(byte)OpCodeOperandKind.TR_REG,
		(byte)OpCodeOperandKind.BND_REG,
		(byte)OpCodeOperandKind.ES,
		(byte)OpCodeOperandKind.CS,
		(byte)OpCodeOperandKind.SS,
		(byte)OpCodeOperandKind.DS,
		(byte)OpCodeOperandKind.FS,
		(byte)OpCodeOperandKind.GS,
		(byte)OpCodeOperandKind.AL,
		(byte)OpCodeOperandKind.CL,
		(byte)OpCodeOperandKind.AX,
		(byte)OpCodeOperandKind.DX,
		(byte)OpCodeOperandKind.EAX,
		(byte)OpCodeOperandKind.RAX,
		(byte)OpCodeOperandKind.ST0,
		(byte)OpCodeOperandKind.STI_OPCODE,
		(byte)OpCodeOperandKind.IMM8,
		(byte)OpCodeOperandKind.IMM8_CONST_1,
		(byte)OpCodeOperandKind.IMM8SEX16,
		(byte)OpCodeOperandKind.IMM8SEX32,
		(byte)OpCodeOperandKind.IMM8SEX64,
		(byte)OpCodeOperandKind.IMM16,
		(byte)OpCodeOperandKind.IMM32,
		(byte)OpCodeOperandKind.IMM32SEX64,
		(byte)OpCodeOperandKind.IMM64,
		(byte)OpCodeOperandKind.SEG_RSI,
		(byte)OpCodeOperandKind.ES_RDI,
		(byte)OpCodeOperandKind.SEG_RDI,
		(byte)OpCodeOperandKind.SEG_RBX_AL,
		(byte)OpCodeOperandKind.BR16_1,
		(byte)OpCodeOperandKind.BR32_1,
		(byte)OpCodeOperandKind.BR64_1,
		(byte)OpCodeOperandKind.BR16_2,
		(byte)OpCodeOperandKind.BR32_4,
		(byte)OpCodeOperandKind.BR64_4,
		(byte)OpCodeOperandKind.XBEGIN_2,
		(byte)OpCodeOperandKind.XBEGIN_4,
		(byte)OpCodeOperandKind.BRDISP_2,
		(byte)OpCodeOperandKind.BRDISP_4,
	};
	static final byte[] vexOpKinds = new byte[] {
		(byte)OpCodeOperandKind.NONE,
		(byte)OpCodeOperandKind.MEM,
		(byte)OpCodeOperandKind.MEM_VSIB32X,
		(byte)OpCodeOperandKind.MEM_VSIB64X,
		(byte)OpCodeOperandKind.MEM_VSIB32Y,
		(byte)OpCodeOperandKind.MEM_VSIB64Y,
		(byte)OpCodeOperandKind.R32_OR_MEM,
		(byte)OpCodeOperandKind.R64_OR_MEM,
		(byte)OpCodeOperandKind.XMM_OR_MEM,
		(byte)OpCodeOperandKind.YMM_OR_MEM,
		(byte)OpCodeOperandKind.K_OR_MEM,
		(byte)OpCodeOperandKind.R32_REG,
		(byte)OpCodeOperandKind.R32_RM,
		(byte)OpCodeOperandKind.R32_VVVV,
		(byte)OpCodeOperandKind.R64_REG,
		(byte)OpCodeOperandKind.R64_RM,
		(byte)OpCodeOperandKind.R64_VVVV,
		(byte)OpCodeOperandKind.K_REG,
		(byte)OpCodeOperandKind.K_RM,
		(byte)OpCodeOperandKind.K_VVVV,
		(byte)OpCodeOperandKind.XMM_REG,
		(byte)OpCodeOperandKind.XMM_RM,
		(byte)OpCodeOperandKind.XMM_VVVV,
		(byte)OpCodeOperandKind.XMM_IS4,
		(byte)OpCodeOperandKind.XMM_IS5,
		(byte)OpCodeOperandKind.YMM_REG,
		(byte)OpCodeOperandKind.YMM_RM,
		(byte)OpCodeOperandKind.YMM_VVVV,
		(byte)OpCodeOperandKind.YMM_IS4,
		(byte)OpCodeOperandKind.YMM_IS5,
		(byte)OpCodeOperandKind.IMM4_M2Z,
		(byte)OpCodeOperandKind.IMM8,
		(byte)OpCodeOperandKind.SEG_RDI,
		(byte)OpCodeOperandKind.BR64_1,
		(byte)OpCodeOperandKind.BR64_4,
		(byte)OpCodeOperandKind.SIBMEM,
		(byte)OpCodeOperandKind.TMM_REG,
		(byte)OpCodeOperandKind.TMM_RM,
		(byte)OpCodeOperandKind.TMM_VVVV,
	};
	static final byte[] xopOpKinds = new byte[] {
		(byte)OpCodeOperandKind.NONE,
		(byte)OpCodeOperandKind.R32_OR_MEM,
		(byte)OpCodeOperandKind.R64_OR_MEM,
		(byte)OpCodeOperandKind.XMM_OR_MEM,
		(byte)OpCodeOperandKind.YMM_OR_MEM,
		(byte)OpCodeOperandKind.R32_REG,
		(byte)OpCodeOperandKind.R32_RM,
		(byte)OpCodeOperandKind.R32_VVVV,
		(byte)OpCodeOperandKind.R64_REG,
		(byte)OpCodeOperandKind.R64_RM,
		(byte)OpCodeOperandKind.R64_VVVV,
		(byte)OpCodeOperandKind.XMM_REG,
		(byte)OpCodeOperandKind.XMM_VVVV,
		(byte)OpCodeOperandKind.XMM_IS4,
		(byte)OpCodeOperandKind.YMM_REG,
		(byte)OpCodeOperandKind.YMM_VVVV,
		(byte)OpCodeOperandKind.YMM_IS4,
		(byte)OpCodeOperandKind.IMM8,
		(byte)OpCodeOperandKind.IMM32,
	};
	static final byte[] evexOpKinds = new byte[] {
		(byte)OpCodeOperandKind.NONE,
		(byte)OpCodeOperandKind.MEM,
		(byte)OpCodeOperandKind.MEM_VSIB32X,
		(byte)OpCodeOperandKind.MEM_VSIB64X,
		(byte)OpCodeOperandKind.MEM_VSIB32Y,
		(byte)OpCodeOperandKind.MEM_VSIB64Y,
		(byte)OpCodeOperandKind.MEM_VSIB32Z,
		(byte)OpCodeOperandKind.MEM_VSIB64Z,
		(byte)OpCodeOperandKind.R32_OR_MEM,
		(byte)OpCodeOperandKind.R64_OR_MEM,
		(byte)OpCodeOperandKind.XMM_OR_MEM,
		(byte)OpCodeOperandKind.YMM_OR_MEM,
		(byte)OpCodeOperandKind.ZMM_OR_MEM,
		(byte)OpCodeOperandKind.R32_REG,
		(byte)OpCodeOperandKind.R32_RM,
		(byte)OpCodeOperandKind.R64_REG,
		(byte)OpCodeOperandKind.R64_RM,
		(byte)OpCodeOperandKind.K_REG,
		(byte)OpCodeOperandKind.KP1_REG,
		(byte)OpCodeOperandKind.K_RM,
		(byte)OpCodeOperandKind.XMM_REG,
		(byte)OpCodeOperandKind.XMM_RM,
		(byte)OpCodeOperandKind.XMM_VVVV,
		(byte)OpCodeOperandKind.XMMP3_VVVV,
		(byte)OpCodeOperandKind.YMM_REG,
		(byte)OpCodeOperandKind.YMM_RM,
		(byte)OpCodeOperandKind.YMM_VVVV,
		(byte)OpCodeOperandKind.ZMM_REG,
		(byte)OpCodeOperandKind.ZMM_RM,
		(byte)OpCodeOperandKind.ZMM_VVVV,
		(byte)OpCodeOperandKind.ZMMP3_VVVV,
		(byte)OpCodeOperandKind.IMM8,
	};
	static final byte[] mvexOpKinds = new byte[] {
		(byte)OpCodeOperandKind.NONE,
		(byte)OpCodeOperandKind.MEM,
		(byte)OpCodeOperandKind.MEM_VSIB32Z,
		(byte)OpCodeOperandKind.ZMM_OR_MEM,
		(byte)OpCodeOperandKind.K_REG,
		(byte)OpCodeOperandKind.K_VVVV,
		(byte)OpCodeOperandKind.ZMM_REG,
		(byte)OpCodeOperandKind.ZMM_VVVV,
		(byte)OpCodeOperandKind.IMM8,
	};
}
