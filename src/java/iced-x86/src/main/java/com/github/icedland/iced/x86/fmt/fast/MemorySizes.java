// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

package com.github.icedland.iced.x86.fmt.fast;

import com.github.icedland.iced.x86.internal.IcedConstants;

final class MemorySizes {
	static final String[] allMemorySizes = getMemorySizes();

	private static String[] getMemorySizes() {
		String[] memSizes = new String[IcedConstants.MEMORY_SIZE_ENUM_COUNT];
		byte[] data = new byte[] {
			// GENERATOR-BEGIN: MemorySizes
			// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
			(byte)0x00,
			(byte)0x01,
			(byte)0x0D,
			(byte)0x03,
			(byte)0x0B,
			(byte)0x0B,
			(byte)0x0E,
			(byte)0x0F,
			(byte)0x10,
			(byte)0x01,
			(byte)0x0D,
			(byte)0x03,
			(byte)0x0B,
			(byte)0x0E,
			(byte)0x0F,
			(byte)0x10,
			(byte)0x03,
			(byte)0x08,
			(byte)0x0C,
			(byte)0x0D,
			(byte)0x03,
			(byte)0x0B,
			(byte)0x03,
			(byte)0x0B,
			(byte)0x0B,
			(byte)0x09,
			(byte)0x08,
			(byte)0x08,
			(byte)0x0D,
			(byte)0x03,
			(byte)0x0B,
			(byte)0x0C,
			(byte)0x0E,
			(byte)0x0D,
			(byte)0x04,
			(byte)0x05,
			(byte)0x07,
			(byte)0x06,
			(byte)0x00,
			(byte)0x00,
			(byte)0x00,
			(byte)0x00,
			(byte)0x0C,
			(byte)0x10,
			(byte)0x00,
			(byte)0x0C,
			(byte)0x11,
			(byte)0x10,
			(byte)0x0D,
			(byte)0x0D,
			(byte)0x03,
			(byte)0x03,
			(byte)0x03,
			(byte)0x03,
			(byte)0x03,
			(byte)0x03,
			(byte)0x0B,
			(byte)0x0B,
			(byte)0x0B,
			(byte)0x0B,
			(byte)0x0B,
			(byte)0x0B,
			(byte)0x0B,
			(byte)0x0B,
			(byte)0x0E,
			(byte)0x0E,
			(byte)0x0E,
			(byte)0x0E,
			(byte)0x0E,
			(byte)0x0E,
			(byte)0x0E,
			(byte)0x0E,
			(byte)0x0E,
			(byte)0x0E,
			(byte)0x0E,
			(byte)0x0E,
			(byte)0x0E,
			(byte)0x0E,
			(byte)0x0E,
			(byte)0x0F,
			(byte)0x0F,
			(byte)0x0F,
			(byte)0x0F,
			(byte)0x0F,
			(byte)0x0F,
			(byte)0x0F,
			(byte)0x0F,
			(byte)0x0F,
			(byte)0x0F,
			(byte)0x0F,
			(byte)0x0F,
			(byte)0x0F,
			(byte)0x0F,
			(byte)0x0F,
			(byte)0x0F,
			(byte)0x0F,
			(byte)0x0F,
			(byte)0x10,
			(byte)0x10,
			(byte)0x10,
			(byte)0x10,
			(byte)0x10,
			(byte)0x10,
			(byte)0x10,
			(byte)0x10,
			(byte)0x10,
			(byte)0x10,
			(byte)0x10,
			(byte)0x10,
			(byte)0x10,
			(byte)0x10,
			(byte)0x10,
			(byte)0x12,
			(byte)0x02,
			(byte)0x02,
			(byte)0x12,
			(byte)0x02,
			(byte)0x12,
			(byte)0x12,
			(byte)0x02,
			(byte)0x02,
			(byte)0x0A,
			(byte)0x0A,
			(byte)0x0A,
			(byte)0x12,
			(byte)0x02,
			(byte)0x0A,
			(byte)0x02,
			(byte)0x0A,
			(byte)0x0A,
			(byte)0x02,
			(byte)0x02,
			(byte)0x12,
			(byte)0x12,
			(byte)0x02,
			(byte)0x02,
			(byte)0x0A,
			(byte)0x0A,
			(byte)0x0A,
			(byte)0x12,
			(byte)0x02,
			(byte)0x0A,
			(byte)0x02,
			(byte)0x0A,
			(byte)0x0A,
			(byte)0x02,
			(byte)0x02,
			(byte)0x12,
			(byte)0x12,
			(byte)0x02,
			(byte)0x02,
			(byte)0x0A,
			(byte)0x0A,
			(byte)0x0A,
			(byte)0x12,
			(byte)0x02,
			(byte)0x0A,
			(byte)0x02,
			(byte)0x02,
			(byte)0x0A,
			(byte)0x0A,
			(byte)0x02,
			// GENERATOR-END: MemorySizes
		};

		for (int i = 0; i < memSizes.length; i++) {
			String keywords;
			switch (data[i] & 0xFF) {
			// GENERATOR-BEGIN: Switch
			// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
			case 0:
				keywords = "";
				break;
			case 1:
				keywords = "byte ptr ";
				break;
			case 2:
				keywords = "dword bcst ";
				break;
			case 3:
				keywords = "dword ptr ";
				break;
			case 4:
				keywords = "fpuenv14 ptr ";
				break;
			case 5:
				keywords = "fpuenv28 ptr ";
				break;
			case 6:
				keywords = "fpustate108 ptr ";
				break;
			case 7:
				keywords = "fpustate94 ptr ";
				break;
			case 8:
				keywords = "fword ptr ";
				break;
			case 9:
				keywords = "oword ptr ";
				break;
			case 10:
				keywords = "qword bcst ";
				break;
			case 11:
				keywords = "qword ptr ";
				break;
			case 12:
				keywords = "tbyte ptr ";
				break;
			case 13:
				keywords = "word ptr ";
				break;
			case 14:
				keywords = "xmmword ptr ";
				break;
			case 15:
				keywords = "ymmword ptr ";
				break;
			case 16:
				keywords = "zmmword ptr ";
				break;
			case 17:
				keywords = "mem384 ptr ";
				break;
			case 18:
				keywords = "word bcst ";
				break;
			// GENERATOR-END: Switch
			default:
				throw new UnsupportedOperationException();
			}
			memSizes[i] = keywords;
		}

		return memSizes;
	}
}
