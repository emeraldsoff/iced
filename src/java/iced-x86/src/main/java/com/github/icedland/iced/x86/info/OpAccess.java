// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

package com.github.icedland.iced.x86.info;

/**
 * Operand, register and memory access
 */
public final class OpAccess {
	private OpAccess() {
	}

	/**
	 * Nothing is read and nothing is written
	 */
	public static final int NONE = 0;
	/**
	 * The value is read
	 */
	public static final int READ = 1;
	/**
	 * The value is sometimes read and sometimes not
	 */
	public static final int COND_READ = 2;
	/**
	 * The value is completely overwritten
	 */
	public static final int WRITE = 3;
	/**
	 * Conditional write, sometimes it's written and sometimes it's not modified
	 */
	public static final int COND_WRITE = 4;
	/**
	 * The value is read and written
	 */
	public static final int READ_WRITE = 5;
	/**
	 * The value is read and sometimes written
	 */
	public static final int READ_COND_WRITE = 6;
	/**
	 * The memory operand doesn't refer to memory (eg.<!-- --> {@code LEA} instruction) or it's an instruction that doesn't read the data to a register or doesn't write to the memory location, it just prefetches/invalidates it, eg.<!-- --> {@code INVLPG}, {@code PREFETCHNTA}, {@code VGATHERPF0DPS}, etc.<!-- --> Some of those instructions still check if the code can access the memory location.<!-- -->
	 */
	public static final int NO_MEM_ACCESS = 7;
}
