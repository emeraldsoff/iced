// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

package com.github.icedland.iced.x86.asm;

import org.junit.jupiter.api.Test;

import com.github.icedland.iced.x86.*;
import static com.github.icedland.iced.x86.asm.AsmRegisters.*;

final class CodeAssembler64GenATests extends CodeAssemblerTestsBase {
	CodeAssembler64GenATests() {
		super(64);
	}

	@Test
	void aadd_m_r32() {
		testAssembler(c -> c.aadd(mem_ptr(0x0L).base(rcx), ebx), Instruction.create(Code.AADD_M32_R32, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void aadd_m_r64() {
		testAssembler(c -> c.aadd(mem_ptr(0x0L).base(rcx), rbx), Instruction.create(Code.AADD_M64_R64, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.rbx));
	}

	@Test
	void aand_m_r32() {
		testAssembler(c -> c.aand(mem_ptr(0x0L).base(rcx), ebx), Instruction.create(Code.AAND_M32_R32, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void aand_m_r64() {
		testAssembler(c -> c.aand(mem_ptr(0x0L).base(rcx), rbx), Instruction.create(Code.AAND_M64_R64, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.rbx));
	}

	@Test
	void adc_r8_r8() {
		testAssembler(c -> c.adc(dl, bl), Instruction.create(Code.ADC_RM8_R8, ICRegisters.dl, ICRegisters.bl));
	}

	@Test
	void adc_m_r8() {
		testAssembler(c -> c.adc(byte_ptr(0x0L).base(rcx), bl), Instruction.create(Code.ADC_RM8_R8, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bl));
	}

	@Test
	void adc_r16_r16() {
		testAssembler(c -> c.adc(dx, bx), Instruction.create(Code.ADC_RM16_R16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void adc_m_r16() {
		testAssembler(c -> c.adc(word_ptr(0x0L).base(rcx), bx), Instruction.create(Code.ADC_RM16_R16, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bx));
	}

	@Test
	void adc_r32_r32() {
		testAssembler(c -> c.adc(edx, ebx), Instruction.create(Code.ADC_RM32_R32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void adc_m_r32() {
		testAssembler(c -> c.adc(dword_ptr(0x0L).base(rcx), ebx), Instruction.create(Code.ADC_RM32_R32, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void adc_r64_r64() {
		testAssembler(c -> c.adc(rdx, rbx), Instruction.create(Code.ADC_RM64_R64, ICRegisters.rdx, ICRegisters.rbx));
	}

	@Test
	void adc_m_r64() {
		testAssembler(c -> c.adc(qword_ptr(0x0L).base(rcx), rbx), Instruction.create(Code.ADC_RM64_R64, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.rbx));
	}

	@Test
	void adc_r8_m() {
		testAssembler(c -> c.adc(dl, byte_ptr(0x0L).base(rcx)), Instruction.create(Code.ADC_R8_RM8, ICRegisters.dl, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void adc_r16_m() {
		testAssembler(c -> c.adc(dx, word_ptr(0x0L).base(rcx)), Instruction.create(Code.ADC_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void adc_r32_m() {
		testAssembler(c -> c.adc(edx, dword_ptr(0x0L).base(rcx)), Instruction.create(Code.ADC_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void adc_r64_m() {
		testAssembler(c -> c.adc(rdx, qword_ptr(0x0L).base(rcx)), Instruction.create(Code.ADC_R64_RM64, ICRegisters.rdx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void adc_r8_i() {
		{ /* if (dst.getRegister() == Register.AL) */
			testAssembler(c -> c.adc(al, -5), Instruction.create(Code.ADC_AL_IMM8, ICRegisters.al, -5));
		} /* else */ testAssembler(c -> c.adc(dl, -5), Instruction.create(Code.ADC_RM8_IMM8, ICRegisters.dl, -5));
	}

	@Test
	void adc_r16_i() {
		{ /* if (dst.getRegister() == Register.AX) */
			testAssembler(c -> c.adc(ax, 0x40B7), Instruction.create(Code.ADC_AX_IMM16, ICRegisters.ax, 0x40B7));
		} /* else */ { /* if (imm >= -0x80 && imm <= 0x7F) */
			testAssembler(c -> c.adc(dx, -0x80), Instruction.create(Code.ADC_RM16_IMM8, ICRegisters.dx, -0x80));
			testAssembler(c -> c.adc(dx, 0x7F), Instruction.create(Code.ADC_RM16_IMM8, ICRegisters.dx, 0x7F));
		} /* else */ testAssembler(c -> c.adc(dx, 0x40B7), Instruction.create(Code.ADC_RM16_IMM16, ICRegisters.dx, 0x40B7));
	}

	@Test
	void adc_r32_i() {
		{ /* if (dst.getRegister() == Register.EAX) */
			testAssembler(c -> c.adc(eax, 0x7FFFFFFF), Instruction.create(Code.ADC_EAX_IMM32, ICRegisters.eax, 0x7FFFFFFF));
		} /* else */ { /* if (imm >= -0x80 && imm <= 0x7F) */
			testAssembler(c -> c.adc(edx, -0x80), Instruction.create(Code.ADC_RM32_IMM8, ICRegisters.edx, -0x80));
			testAssembler(c -> c.adc(edx, 0x7F), Instruction.create(Code.ADC_RM32_IMM8, ICRegisters.edx, 0x7F));
		} /* else */ testAssembler(c -> c.adc(edx, 0x7FFFFFFF), Instruction.create(Code.ADC_RM32_IMM32, ICRegisters.edx, 0x7FFFFFFF));
	}

	@Test
	void adc_r64_i() {
		{ /* if (dst.getRegister() == Register.RAX) */
			testAssembler(c -> c.adc(rax, -0x80000000), Instruction.create(Code.ADC_RAX_IMM32, ICRegisters.rax, -0x80000000));
		} /* else */ { /* if (imm >= -0x80 && imm <= 0x7F) */
			testAssembler(c -> c.adc(rdx, -0x80), Instruction.create(Code.ADC_RM64_IMM8, ICRegisters.rdx, -0x80));
			testAssembler(c -> c.adc(rdx, 0x7F), Instruction.create(Code.ADC_RM64_IMM8, ICRegisters.rdx, 0x7F));
		} /* else */ testAssembler(c -> c.adc(rdx, -0x80000000), Instruction.create(Code.ADC_RM64_IMM32, ICRegisters.rdx, -0x80000000));
	}

	@Test
	void adc_m_i() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			{ /* if (imm >= -0x80 && imm <= 0x7F) */
				testAssembler(c -> c.adc(qword_ptr(0x0L).base(rdx), -0x80), Instruction.create(Code.ADC_RM64_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80));
				testAssembler(c -> c.adc(qword_ptr(0x0L).base(rdx), 0x7F), Instruction.create(Code.ADC_RM64_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7F));
			} /* else */ testAssembler(c -> c.adc(qword_ptr(0x0L).base(rdx), -0x80000000), Instruction.create(Code.ADC_RM64_IMM32, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80000000));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			{ /* if (imm >= -0x80 && imm <= 0x7F) */
				testAssembler(c -> c.adc(dword_ptr(0x0L).base(rdx), -0x80), Instruction.create(Code.ADC_RM32_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80));
				testAssembler(c -> c.adc(dword_ptr(0x0L).base(rdx), 0x7F), Instruction.create(Code.ADC_RM32_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7F));
			} /* else */ testAssembler(c -> c.adc(dword_ptr(0x0L).base(rdx), 0x7FFFFFFF), Instruction.create(Code.ADC_RM32_IMM32, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7FFFFFFF));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			{ /* if (imm >= -0x80 && imm <= 0x7F) */
				testAssembler(c -> c.adc(word_ptr(0x0L).base(rdx), -0x80), Instruction.create(Code.ADC_RM16_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80));
				testAssembler(c -> c.adc(word_ptr(0x0L).base(rdx), 0x7F), Instruction.create(Code.ADC_RM16_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7F));
			} /* else */ testAssembler(c -> c.adc(word_ptr(0x0L).base(rdx), 0x40B7), Instruction.create(Code.ADC_RM16_IMM16, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x40B7));
		} /* else */ { /* if (dst.size == MemoryOperandSize.BYTE) */
			testAssembler(c -> c.adc(byte_ptr(0x0L).base(rdx), -5), Instruction.create(Code.ADC_RM8_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.adc(zmmword_ptr(0x0L).base(rdx), -5), Instruction.create(Code.ADC_RM8_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
			});
		}
	}

	@Test
	void adcx_r32_r32() {
		testAssembler(c -> c.adcx(edx, ebx), Instruction.create(Code.ADCX_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void adcx_r64_r64() {
		testAssembler(c -> c.adcx(rdx, rbx), Instruction.create(Code.ADCX_R64_RM64, ICRegisters.rdx, ICRegisters.rbx));
	}

	@Test
	void adcx_r32_m() {
		testAssembler(c -> c.adcx(edx, dword_ptr(0x0L).base(rcx)), Instruction.create(Code.ADCX_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void adcx_r64_m() {
		testAssembler(c -> c.adcx(rdx, qword_ptr(0x0L).base(rcx)), Instruction.create(Code.ADCX_R64_RM64, ICRegisters.rdx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void add_r8_r8() {
		testAssembler(c -> c.add(dl, bl), Instruction.create(Code.ADD_RM8_R8, ICRegisters.dl, ICRegisters.bl));
	}

	@Test
	void add_m_r8() {
		testAssembler(c -> c.add(byte_ptr(0x0L).base(rcx), bl), Instruction.create(Code.ADD_RM8_R8, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bl));
	}

	@Test
	void add_r16_r16() {
		testAssembler(c -> c.add(dx, bx), Instruction.create(Code.ADD_RM16_R16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void add_m_r16() {
		testAssembler(c -> c.add(word_ptr(0x0L).base(rcx), bx), Instruction.create(Code.ADD_RM16_R16, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bx));
	}

	@Test
	void add_r32_r32() {
		testAssembler(c -> c.add(edx, ebx), Instruction.create(Code.ADD_RM32_R32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void add_m_r32() {
		testAssembler(c -> c.add(dword_ptr(0x0L).base(rcx), ebx), Instruction.create(Code.ADD_RM32_R32, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void add_r64_r64() {
		testAssembler(c -> c.add(rdx, rbx), Instruction.create(Code.ADD_RM64_R64, ICRegisters.rdx, ICRegisters.rbx));
	}

	@Test
	void add_m_r64() {
		testAssembler(c -> c.add(qword_ptr(0x0L).base(rcx), rbx), Instruction.create(Code.ADD_RM64_R64, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.rbx));
	}

	@Test
	void add_r8_m() {
		testAssembler(c -> c.add(dl, byte_ptr(0x0L).base(rcx)), Instruction.create(Code.ADD_R8_RM8, ICRegisters.dl, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void add_r16_m() {
		testAssembler(c -> c.add(dx, word_ptr(0x0L).base(rcx)), Instruction.create(Code.ADD_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void add_r32_m() {
		testAssembler(c -> c.add(edx, dword_ptr(0x0L).base(rcx)), Instruction.create(Code.ADD_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void add_r64_m() {
		testAssembler(c -> c.add(rdx, qword_ptr(0x0L).base(rcx)), Instruction.create(Code.ADD_R64_RM64, ICRegisters.rdx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void add_r8_i() {
		{ /* if (dst.getRegister() == Register.AL) */
			testAssembler(c -> c.add(al, -5), Instruction.create(Code.ADD_AL_IMM8, ICRegisters.al, -5));
		} /* else */ testAssembler(c -> c.add(dl, -5), Instruction.create(Code.ADD_RM8_IMM8, ICRegisters.dl, -5));
	}

	@Test
	void add_r16_i() {
		{ /* if (dst.getRegister() == Register.AX) */
			testAssembler(c -> c.add(ax, 0x40B7), Instruction.create(Code.ADD_AX_IMM16, ICRegisters.ax, 0x40B7));
		} /* else */ { /* if (imm >= -0x80 && imm <= 0x7F) */
			testAssembler(c -> c.add(dx, -0x80), Instruction.create(Code.ADD_RM16_IMM8, ICRegisters.dx, -0x80));
			testAssembler(c -> c.add(dx, 0x7F), Instruction.create(Code.ADD_RM16_IMM8, ICRegisters.dx, 0x7F));
		} /* else */ testAssembler(c -> c.add(dx, 0x40B7), Instruction.create(Code.ADD_RM16_IMM16, ICRegisters.dx, 0x40B7));
	}

	@Test
	void add_r32_i() {
		{ /* if (dst.getRegister() == Register.EAX) */
			testAssembler(c -> c.add(eax, 0x7FFFFFFF), Instruction.create(Code.ADD_EAX_IMM32, ICRegisters.eax, 0x7FFFFFFF));
		} /* else */ { /* if (imm >= -0x80 && imm <= 0x7F) */
			testAssembler(c -> c.add(edx, -0x80), Instruction.create(Code.ADD_RM32_IMM8, ICRegisters.edx, -0x80));
			testAssembler(c -> c.add(edx, 0x7F), Instruction.create(Code.ADD_RM32_IMM8, ICRegisters.edx, 0x7F));
		} /* else */ testAssembler(c -> c.add(edx, 0x7FFFFFFF), Instruction.create(Code.ADD_RM32_IMM32, ICRegisters.edx, 0x7FFFFFFF));
	}

	@Test
	void add_r64_i() {
		{ /* if (dst.getRegister() == Register.RAX) */
			testAssembler(c -> c.add(rax, -0x80000000), Instruction.create(Code.ADD_RAX_IMM32, ICRegisters.rax, -0x80000000));
		} /* else */ { /* if (imm >= -0x80 && imm <= 0x7F) */
			testAssembler(c -> c.add(rdx, -0x80), Instruction.create(Code.ADD_RM64_IMM8, ICRegisters.rdx, -0x80));
			testAssembler(c -> c.add(rdx, 0x7F), Instruction.create(Code.ADD_RM64_IMM8, ICRegisters.rdx, 0x7F));
		} /* else */ testAssembler(c -> c.add(rdx, -0x80000000), Instruction.create(Code.ADD_RM64_IMM32, ICRegisters.rdx, -0x80000000));
	}

	@Test
	void add_m_i() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			{ /* if (imm >= -0x80 && imm <= 0x7F) */
				testAssembler(c -> c.add(qword_ptr(0x0L).base(rdx), -0x80), Instruction.create(Code.ADD_RM64_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80));
				testAssembler(c -> c.add(qword_ptr(0x0L).base(rdx), 0x7F), Instruction.create(Code.ADD_RM64_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7F));
			} /* else */ testAssembler(c -> c.add(qword_ptr(0x0L).base(rdx), -0x80000000), Instruction.create(Code.ADD_RM64_IMM32, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80000000));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			{ /* if (imm >= -0x80 && imm <= 0x7F) */
				testAssembler(c -> c.add(dword_ptr(0x0L).base(rdx), -0x80), Instruction.create(Code.ADD_RM32_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80));
				testAssembler(c -> c.add(dword_ptr(0x0L).base(rdx), 0x7F), Instruction.create(Code.ADD_RM32_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7F));
			} /* else */ testAssembler(c -> c.add(dword_ptr(0x0L).base(rdx), 0x7FFFFFFF), Instruction.create(Code.ADD_RM32_IMM32, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7FFFFFFF));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			{ /* if (imm >= -0x80 && imm <= 0x7F) */
				testAssembler(c -> c.add(word_ptr(0x0L).base(rdx), -0x80), Instruction.create(Code.ADD_RM16_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80));
				testAssembler(c -> c.add(word_ptr(0x0L).base(rdx), 0x7F), Instruction.create(Code.ADD_RM16_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7F));
			} /* else */ testAssembler(c -> c.add(word_ptr(0x0L).base(rdx), 0x40B7), Instruction.create(Code.ADD_RM16_IMM16, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x40B7));
		} /* else */ { /* if (dst.size == MemoryOperandSize.BYTE) */
			testAssembler(c -> c.add(byte_ptr(0x0L).base(rdx), -5), Instruction.create(Code.ADD_RM8_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.add(zmmword_ptr(0x0L).base(rdx), -5), Instruction.create(Code.ADD_RM8_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
			});
		}
	}

	@Test
	void addpd_xmm_xmm() {
		testAssembler(c -> c.addpd(xmm2, xmm3), Instruction.create(Code.ADDPD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void addpd_xmm_m() {
		testAssembler(c -> c.addpd(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.ADDPD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void addps_xmm_xmm() {
		testAssembler(c -> c.addps(xmm2, xmm3), Instruction.create(Code.ADDPS_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void addps_xmm_m() {
		testAssembler(c -> c.addps(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.ADDPS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void addsd_xmm_xmm() {
		testAssembler(c -> c.addsd(xmm2, xmm3), Instruction.create(Code.ADDSD_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void addsd_xmm_m() {
		testAssembler(c -> c.addsd(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.ADDSD_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void addss_xmm_xmm() {
		testAssembler(c -> c.addss(xmm2, xmm3), Instruction.create(Code.ADDSS_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void addss_xmm_m() {
		testAssembler(c -> c.addss(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.ADDSS_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void addsubpd_xmm_xmm() {
		testAssembler(c -> c.addsubpd(xmm2, xmm3), Instruction.create(Code.ADDSUBPD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void addsubpd_xmm_m() {
		testAssembler(c -> c.addsubpd(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.ADDSUBPD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void addsubps_xmm_xmm() {
		testAssembler(c -> c.addsubps(xmm2, xmm3), Instruction.create(Code.ADDSUBPS_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void addsubps_xmm_m() {
		testAssembler(c -> c.addsubps(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.ADDSUBPS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void adox_r32_r32() {
		testAssembler(c -> c.adox(edx, ebx), Instruction.create(Code.ADOX_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void adox_r64_r64() {
		testAssembler(c -> c.adox(rdx, rbx), Instruction.create(Code.ADOX_R64_RM64, ICRegisters.rdx, ICRegisters.rbx));
	}

	@Test
	void adox_r32_m() {
		testAssembler(c -> c.adox(edx, dword_ptr(0x0L).base(rcx)), Instruction.create(Code.ADOX_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void adox_r64_m() {
		testAssembler(c -> c.adox(rdx, qword_ptr(0x0L).base(rcx)), Instruction.create(Code.ADOX_R64_RM64, ICRegisters.rdx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void aesdec_xmm_xmm() {
		testAssembler(c -> c.aesdec(xmm2, xmm3), Instruction.create(Code.AESDEC_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void aesdec_xmm_m() {
		testAssembler(c -> c.aesdec(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.AESDEC_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void aesdec128kl_xmm_m() {
		testAssembler(c -> c.aesdec128kl(xmm2, mem_ptr(0x0L).base(rcx)), Instruction.create(Code.AESDEC128KL_XMM_M384, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void aesdec256kl_xmm_m() {
		testAssembler(c -> c.aesdec256kl(xmm2, mem_ptr(0x0L).base(rcx)), Instruction.create(Code.AESDEC256KL_XMM_M512, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void aesdeclast_xmm_xmm() {
		testAssembler(c -> c.aesdeclast(xmm2, xmm3), Instruction.create(Code.AESDECLAST_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void aesdeclast_xmm_m() {
		testAssembler(c -> c.aesdeclast(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.AESDECLAST_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void aesdecwide128kl_m() {
		testAssembler(c -> c.aesdecwide128kl(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.AESDECWIDE128KL_M384, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void aesdecwide256kl_m() {
		testAssembler(c -> c.aesdecwide256kl(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.AESDECWIDE256KL_M512, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void aesenc_xmm_xmm() {
		testAssembler(c -> c.aesenc(xmm2, xmm3), Instruction.create(Code.AESENC_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void aesenc_xmm_m() {
		testAssembler(c -> c.aesenc(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.AESENC_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void aesenc128kl_xmm_m() {
		testAssembler(c -> c.aesenc128kl(xmm2, mem_ptr(0x0L).base(rcx)), Instruction.create(Code.AESENC128KL_XMM_M384, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void aesenc256kl_xmm_m() {
		testAssembler(c -> c.aesenc256kl(xmm2, mem_ptr(0x0L).base(rcx)), Instruction.create(Code.AESENC256KL_XMM_M512, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void aesenclast_xmm_xmm() {
		testAssembler(c -> c.aesenclast(xmm2, xmm3), Instruction.create(Code.AESENCLAST_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void aesenclast_xmm_m() {
		testAssembler(c -> c.aesenclast(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.AESENCLAST_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void aesencwide128kl_m() {
		testAssembler(c -> c.aesencwide128kl(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.AESENCWIDE128KL_M384, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void aesencwide256kl_m() {
		testAssembler(c -> c.aesencwide256kl(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.AESENCWIDE256KL_M512, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void aesimc_xmm_xmm() {
		testAssembler(c -> c.aesimc(xmm2, xmm3), Instruction.create(Code.AESIMC_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void aesimc_xmm_m() {
		testAssembler(c -> c.aesimc(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.AESIMC_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void aeskeygenassist_xmm_xmm_i() {
		testAssembler(c -> c.aeskeygenassist(xmm2, xmm3, -5), Instruction.create(Code.AESKEYGENASSIST_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void aeskeygenassist_xmm_m_i() {
		testAssembler(c -> c.aeskeygenassist(xmm2, xmmword_ptr(0x0L).base(rcx), -5), Instruction.create(Code.AESKEYGENASSIST_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void and_r8_r8() {
		testAssembler(c -> c.and(dl, bl), Instruction.create(Code.AND_RM8_R8, ICRegisters.dl, ICRegisters.bl));
	}

	@Test
	void and_m_r8() {
		testAssembler(c -> c.and(byte_ptr(0x0L).base(rcx), bl), Instruction.create(Code.AND_RM8_R8, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bl));
	}

	@Test
	void and_r16_r16() {
		testAssembler(c -> c.and(dx, bx), Instruction.create(Code.AND_RM16_R16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void and_m_r16() {
		testAssembler(c -> c.and(word_ptr(0x0L).base(rcx), bx), Instruction.create(Code.AND_RM16_R16, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bx));
	}

	@Test
	void and_r32_r32() {
		testAssembler(c -> c.and(edx, ebx), Instruction.create(Code.AND_RM32_R32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void and_m_r32() {
		testAssembler(c -> c.and(dword_ptr(0x0L).base(rcx), ebx), Instruction.create(Code.AND_RM32_R32, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void and_r64_r64() {
		testAssembler(c -> c.and(rdx, rbx), Instruction.create(Code.AND_RM64_R64, ICRegisters.rdx, ICRegisters.rbx));
	}

	@Test
	void and_m_r64() {
		testAssembler(c -> c.and(qword_ptr(0x0L).base(rcx), rbx), Instruction.create(Code.AND_RM64_R64, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.rbx));
	}

	@Test
	void and_r8_m() {
		testAssembler(c -> c.and(dl, byte_ptr(0x0L).base(rcx)), Instruction.create(Code.AND_R8_RM8, ICRegisters.dl, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void and_r16_m() {
		testAssembler(c -> c.and(dx, word_ptr(0x0L).base(rcx)), Instruction.create(Code.AND_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void and_r32_m() {
		testAssembler(c -> c.and(edx, dword_ptr(0x0L).base(rcx)), Instruction.create(Code.AND_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void and_r64_m() {
		testAssembler(c -> c.and(rdx, qword_ptr(0x0L).base(rcx)), Instruction.create(Code.AND_R64_RM64, ICRegisters.rdx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void and_r8_i() {
		{ /* if (dst.getRegister() == Register.AL) */
			testAssembler(c -> c.and(al, -5), Instruction.create(Code.AND_AL_IMM8, ICRegisters.al, -5));
		} /* else */ testAssembler(c -> c.and(dl, -5), Instruction.create(Code.AND_RM8_IMM8, ICRegisters.dl, -5));
	}

	@Test
	void and_r16_i() {
		{ /* if (dst.getRegister() == Register.AX) */
			testAssembler(c -> c.and(ax, 0x40B7), Instruction.create(Code.AND_AX_IMM16, ICRegisters.ax, 0x40B7));
		} /* else */ { /* if (imm >= -0x80 && imm <= 0x7F) */
			testAssembler(c -> c.and(dx, -0x80), Instruction.create(Code.AND_RM16_IMM8, ICRegisters.dx, -0x80));
			testAssembler(c -> c.and(dx, 0x7F), Instruction.create(Code.AND_RM16_IMM8, ICRegisters.dx, 0x7F));
		} /* else */ testAssembler(c -> c.and(dx, 0x40B7), Instruction.create(Code.AND_RM16_IMM16, ICRegisters.dx, 0x40B7));
	}

	@Test
	void and_r32_i() {
		{ /* if (dst.getRegister() == Register.EAX) */
			testAssembler(c -> c.and(eax, 0x7FFFFFFF), Instruction.create(Code.AND_EAX_IMM32, ICRegisters.eax, 0x7FFFFFFF));
		} /* else */ { /* if (imm >= -0x80 && imm <= 0x7F) */
			testAssembler(c -> c.and(edx, -0x80), Instruction.create(Code.AND_RM32_IMM8, ICRegisters.edx, -0x80));
			testAssembler(c -> c.and(edx, 0x7F), Instruction.create(Code.AND_RM32_IMM8, ICRegisters.edx, 0x7F));
		} /* else */ testAssembler(c -> c.and(edx, 0x7FFFFFFF), Instruction.create(Code.AND_RM32_IMM32, ICRegisters.edx, 0x7FFFFFFF));
	}

	@Test
	void and_r64_i() {
		{ /* if (dst.getRegister() == Register.RAX) */
			testAssembler(c -> c.and(rax, -0x80000000), Instruction.create(Code.AND_RAX_IMM32, ICRegisters.rax, -0x80000000));
		} /* else */ { /* if (imm >= -0x80 && imm <= 0x7F) */
			testAssembler(c -> c.and(rdx, -0x80), Instruction.create(Code.AND_RM64_IMM8, ICRegisters.rdx, -0x80));
			testAssembler(c -> c.and(rdx, 0x7F), Instruction.create(Code.AND_RM64_IMM8, ICRegisters.rdx, 0x7F));
		} /* else */ testAssembler(c -> c.and(rdx, -0x80000000), Instruction.create(Code.AND_RM64_IMM32, ICRegisters.rdx, -0x80000000));
	}

	@Test
	void and_m_i() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			{ /* if (imm >= -0x80 && imm <= 0x7F) */
				testAssembler(c -> c.and(qword_ptr(0x0L).base(rdx), -0x80), Instruction.create(Code.AND_RM64_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80));
				testAssembler(c -> c.and(qword_ptr(0x0L).base(rdx), 0x7F), Instruction.create(Code.AND_RM64_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7F));
			} /* else */ testAssembler(c -> c.and(qword_ptr(0x0L).base(rdx), -0x80000000), Instruction.create(Code.AND_RM64_IMM32, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80000000));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			{ /* if (imm >= -0x80 && imm <= 0x7F) */
				testAssembler(c -> c.and(dword_ptr(0x0L).base(rdx), -0x80), Instruction.create(Code.AND_RM32_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80));
				testAssembler(c -> c.and(dword_ptr(0x0L).base(rdx), 0x7F), Instruction.create(Code.AND_RM32_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7F));
			} /* else */ testAssembler(c -> c.and(dword_ptr(0x0L).base(rdx), 0x7FFFFFFF), Instruction.create(Code.AND_RM32_IMM32, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7FFFFFFF));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			{ /* if (imm >= -0x80 && imm <= 0x7F) */
				testAssembler(c -> c.and(word_ptr(0x0L).base(rdx), -0x80), Instruction.create(Code.AND_RM16_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80));
				testAssembler(c -> c.and(word_ptr(0x0L).base(rdx), 0x7F), Instruction.create(Code.AND_RM16_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7F));
			} /* else */ testAssembler(c -> c.and(word_ptr(0x0L).base(rdx), 0x40B7), Instruction.create(Code.AND_RM16_IMM16, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x40B7));
		} /* else */ { /* if (dst.size == MemoryOperandSize.BYTE) */
			testAssembler(c -> c.and(byte_ptr(0x0L).base(rdx), -5), Instruction.create(Code.AND_RM8_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.and(zmmword_ptr(0x0L).base(rdx), -5), Instruction.create(Code.AND_RM8_IMM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
			});
		}
	}

	@Test
	void andn_r32_r32_r32() {
		testAssembler(c -> c.andn(edx, ebx, esp), Instruction.create(Code.VEX_ANDN_R32_R32_RM32, ICRegisters.edx, ICRegisters.ebx, ICRegisters.esp));
	}

	@Test
	void andn_r64_r64_r64() {
		testAssembler(c -> c.andn(rdx, rbx, rsp), Instruction.create(Code.VEX_ANDN_R64_R64_RM64, ICRegisters.rdx, ICRegisters.rbx, ICRegisters.rsp));
	}

	@Test
	void andn_r32_r32_m() {
		testAssembler(c -> c.andn(edx, ebx, dword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_ANDN_R32_R32_RM32, ICRegisters.edx, ICRegisters.ebx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void andn_r64_r64_m() {
		testAssembler(c -> c.andn(rdx, rbx, qword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_ANDN_R64_R64_RM64, ICRegisters.rdx, ICRegisters.rbx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void andnpd_xmm_xmm() {
		testAssembler(c -> c.andnpd(xmm2, xmm3), Instruction.create(Code.ANDNPD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void andnpd_xmm_m() {
		testAssembler(c -> c.andnpd(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.ANDNPD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void andnps_xmm_xmm() {
		testAssembler(c -> c.andnps(xmm2, xmm3), Instruction.create(Code.ANDNPS_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void andnps_xmm_m() {
		testAssembler(c -> c.andnps(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.ANDNPS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void andpd_xmm_xmm() {
		testAssembler(c -> c.andpd(xmm2, xmm3), Instruction.create(Code.ANDPD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void andpd_xmm_m() {
		testAssembler(c -> c.andpd(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.ANDPD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void andps_xmm_xmm() {
		testAssembler(c -> c.andps(xmm2, xmm3), Instruction.create(Code.ANDPS_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void andps_xmm_m() {
		testAssembler(c -> c.andps(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.ANDPS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void aor_m_r32() {
		testAssembler(c -> c.aor(mem_ptr(0x0L).base(rcx), ebx), Instruction.create(Code.AOR_M32_R32, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void aor_m_r64() {
		testAssembler(c -> c.aor(mem_ptr(0x0L).base(rcx), rbx), Instruction.create(Code.AOR_M64_R64, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.rbx));
	}

	@Test
	void axor_m_r32() {
		testAssembler(c -> c.axor(mem_ptr(0x0L).base(rcx), ebx), Instruction.create(Code.AXOR_M32_R32, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void axor_m_r64() {
		testAssembler(c -> c.axor(mem_ptr(0x0L).base(rcx), rbx), Instruction.create(Code.AXOR_M64_R64, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.rbx));
	}

	@Test
	void vaddpd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaddpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VADDPD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaddpd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VADDPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaddpd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaddpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VADDPD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaddpd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VADDPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaddpd_zmm_zmm_zmm() {
		testAssembler(c -> c.vaddpd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VADDPD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vaddpd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vaddpd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VADDPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaddpd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VADDPD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaddpd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VADDPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaddpd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vaddpd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VADDPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaddpd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VADDPD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaddpd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VADDPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaddpd_zmm_zmm_m() {
		testAssembler(c -> c.vaddpd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VADDPD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vaddph_xmm_xmm_xmm() {
		testAssembler(c -> c.vaddph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VADDPH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vaddph_ymm_ymm_ymm() {
		testAssembler(c -> c.vaddph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VADDPH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vaddph_zmm_zmm_zmm() {
		testAssembler(c -> c.vaddph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VADDPH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vaddph_xmm_xmm_m() {
		testAssembler(c -> c.vaddph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VADDPH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vaddph_ymm_ymm_m() {
		testAssembler(c -> c.vaddph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VADDPH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vaddph_zmm_zmm_m() {
		testAssembler(c -> c.vaddph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VADDPH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vaddps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaddps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VADDPS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaddps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VADDPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaddps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaddps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VADDPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaddps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VADDPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaddps_zmm_zmm_zmm() {
		testAssembler(c -> c.vaddps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VADDPS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vaddps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vaddps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VADDPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaddps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VADDPS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaddps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VADDPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaddps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vaddps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VADDPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaddps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VADDPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaddps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VADDPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaddps_zmm_zmm_m() {
		testAssembler(c -> c.vaddps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VADDPS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vaddsd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaddsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VADDSD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaddsd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VADDSD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaddsd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaddsd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VADDSD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaddsd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VADDSD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaddsh_xmm_xmm_xmm() {
		testAssembler(c -> c.vaddsh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VADDSH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vaddsh_xmm_xmm_m() {
		testAssembler(c -> c.vaddsh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VADDSH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vaddss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaddss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VADDSS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaddss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VADDSS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaddss_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaddss(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VADDSS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaddss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VADDSS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaddsubpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vaddsubpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VADDSUBPD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vaddsubpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vaddsubpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VADDSUBPD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vaddsubpd_xmm_xmm_m() {
		testAssembler(c -> c.vaddsubpd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VADDSUBPD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vaddsubpd_ymm_ymm_m() {
		testAssembler(c -> c.vaddsubpd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VADDSUBPD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vaddsubps_xmm_xmm_xmm() {
		testAssembler(c -> c.vaddsubps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VADDSUBPS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vaddsubps_ymm_ymm_ymm() {
		testAssembler(c -> c.vaddsubps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VADDSUBPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vaddsubps_xmm_xmm_m() {
		testAssembler(c -> c.vaddsubps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VADDSUBPS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vaddsubps_ymm_ymm_m() {
		testAssembler(c -> c.vaddsubps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VADDSUBPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vaesdec_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaesdec(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VAESDEC_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaesdec(xmm2, xmm3, xmm4), Instruction.create(Code.EVEX_VAESDEC_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaesdec_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaesdec(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VAESDEC_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaesdec(ymm2, ymm3, ymm4), Instruction.create(Code.EVEX_VAESDEC_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaesdec_zmm_zmm_zmm() {
		testAssembler(c -> c.vaesdec(zmm2, zmm3, zmm4), Instruction.create(Code.EVEX_VAESDEC_ZMM_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4));
	}

	@Test
	void vaesdec_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaesdec(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VAESDEC_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaesdec(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.EVEX_VAESDEC_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaesdec_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaesdec(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VAESDEC_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaesdec(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.EVEX_VAESDEC_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaesdec_zmm_zmm_m() {
		testAssembler(c -> c.vaesdec(zmm2, zmm3, zmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.EVEX_VAESDEC_ZMM_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vaesdeclast_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaesdeclast(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VAESDECLAST_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaesdeclast(xmm2, xmm3, xmm4), Instruction.create(Code.EVEX_VAESDECLAST_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaesdeclast_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaesdeclast(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VAESDECLAST_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaesdeclast(ymm2, ymm3, ymm4), Instruction.create(Code.EVEX_VAESDECLAST_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaesdeclast_zmm_zmm_zmm() {
		testAssembler(c -> c.vaesdeclast(zmm2, zmm3, zmm4), Instruction.create(Code.EVEX_VAESDECLAST_ZMM_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4));
	}

	@Test
	void vaesdeclast_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaesdeclast(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VAESDECLAST_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaesdeclast(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.EVEX_VAESDECLAST_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaesdeclast_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaesdeclast(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VAESDECLAST_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaesdeclast(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.EVEX_VAESDECLAST_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaesdeclast_zmm_zmm_m() {
		testAssembler(c -> c.vaesdeclast(zmm2, zmm3, zmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.EVEX_VAESDECLAST_ZMM_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vaesenc_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaesenc(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VAESENC_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaesenc(xmm2, xmm3, xmm4), Instruction.create(Code.EVEX_VAESENC_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaesenc_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaesenc(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VAESENC_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaesenc(ymm2, ymm3, ymm4), Instruction.create(Code.EVEX_VAESENC_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaesenc_zmm_zmm_zmm() {
		testAssembler(c -> c.vaesenc(zmm2, zmm3, zmm4), Instruction.create(Code.EVEX_VAESENC_ZMM_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4));
	}

	@Test
	void vaesenc_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaesenc(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VAESENC_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaesenc(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.EVEX_VAESENC_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaesenc_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaesenc(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VAESENC_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaesenc(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.EVEX_VAESENC_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaesenc_zmm_zmm_m() {
		testAssembler(c -> c.vaesenc(zmm2, zmm3, zmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.EVEX_VAESENC_ZMM_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vaesenclast_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaesenclast(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VAESENCLAST_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaesenclast(xmm2, xmm3, xmm4), Instruction.create(Code.EVEX_VAESENCLAST_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaesenclast_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaesenclast(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VAESENCLAST_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaesenclast(ymm2, ymm3, ymm4), Instruction.create(Code.EVEX_VAESENCLAST_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaesenclast_zmm_zmm_zmm() {
		testAssembler(c -> c.vaesenclast(zmm2, zmm3, zmm4), Instruction.create(Code.EVEX_VAESENCLAST_ZMM_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4));
	}

	@Test
	void vaesenclast_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaesenclast(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VAESENCLAST_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaesenclast(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.EVEX_VAESENCLAST_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaesenclast_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vaesenclast(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VAESENCLAST_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vaesenclast(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.EVEX_VAESENCLAST_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vaesenclast_zmm_zmm_m() {
		testAssembler(c -> c.vaesenclast(zmm2, zmm3, zmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.EVEX_VAESENCLAST_ZMM_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vaesimc_xmm_xmm() {
		testAssembler(c -> c.vaesimc(xmm2, xmm3), Instruction.create(Code.VEX_VAESIMC_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vaesimc_xmm_m() {
		testAssembler(c -> c.vaesimc(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VAESIMC_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vaeskeygenassist_xmm_xmm_i() {
		testAssembler(c -> c.vaeskeygenassist(xmm2, xmm3, -5), Instruction.create(Code.VEX_VAESKEYGENASSIST_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void vaeskeygenassist_xmm_m_i() {
		testAssembler(c -> c.vaeskeygenassist(xmm2, xmmword_ptr(0x0L).base(rcx), -5), Instruction.create(Code.VEX_VAESKEYGENASSIST_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void valignd_xmm_xmm_xmm_i() {
		testAssembler(c -> c.valignd(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VALIGND_XMM_K1Z_XMM_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void valignd_ymm_ymm_ymm_i() {
		testAssembler(c -> c.valignd(ymm2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VALIGND_YMM_K1Z_YMM_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void valignd_zmm_zmm_zmm_i() {
		testAssembler(c -> c.valignd(zmm2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VALIGND_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void valignd_xmm_xmm_m_i() {
		testAssembler(c -> c.valignd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VALIGND_XMM_K1Z_XMM_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void valignd_ymm_ymm_m_i() {
		testAssembler(c -> c.valignd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VALIGND_YMM_K1Z_YMM_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void valignd_zmm_zmm_m_i() {
		testAssembler(c -> c.valignd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VALIGND_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void valignq_xmm_xmm_xmm_i() {
		testAssembler(c -> c.valignq(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VALIGNQ_XMM_K1Z_XMM_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void valignq_ymm_ymm_ymm_i() {
		testAssembler(c -> c.valignq(ymm2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VALIGNQ_YMM_K1Z_YMM_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void valignq_zmm_zmm_zmm_i() {
		testAssembler(c -> c.valignq(zmm2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VALIGNQ_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void valignq_xmm_xmm_m_i() {
		testAssembler(c -> c.valignq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VALIGNQ_XMM_K1Z_XMM_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void valignq_ymm_ymm_m_i() {
		testAssembler(c -> c.valignq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VALIGNQ_YMM_K1Z_YMM_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void valignq_zmm_zmm_m_i() {
		testAssembler(c -> c.valignq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VALIGNQ_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vandnpd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vandnpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VANDNPD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vandnpd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VANDNPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vandnpd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vandnpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VANDNPD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vandnpd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VANDNPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vandnpd_zmm_zmm_zmm() {
		testAssembler(c -> c.vandnpd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VANDNPD_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vandnpd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vandnpd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VANDNPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vandnpd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VANDNPD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vandnpd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VANDNPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vandnpd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vandnpd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VANDNPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vandnpd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VANDNPD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vandnpd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VANDNPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vandnpd_zmm_zmm_m() {
		testAssembler(c -> c.vandnpd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VANDNPD_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vandnps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vandnps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VANDNPS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vandnps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VANDNPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vandnps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vandnps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VANDNPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vandnps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VANDNPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vandnps_zmm_zmm_zmm() {
		testAssembler(c -> c.vandnps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VANDNPS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vandnps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vandnps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VANDNPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vandnps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VANDNPS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vandnps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VANDNPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vandnps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vandnps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VANDNPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vandnps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VANDNPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vandnps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VANDNPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vandnps_zmm_zmm_m() {
		testAssembler(c -> c.vandnps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VANDNPS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vandpd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vandpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VANDPD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vandpd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VANDPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vandpd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vandpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VANDPD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vandpd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VANDPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vandpd_zmm_zmm_zmm() {
		testAssembler(c -> c.vandpd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VANDPD_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vandpd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vandpd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VANDPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vandpd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VANDPD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vandpd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VANDPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vandpd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vandpd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VANDPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vandpd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VANDPD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vandpd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VANDPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vandpd_zmm_zmm_m() {
		testAssembler(c -> c.vandpd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VANDPD_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vandps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vandps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VANDPS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vandps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VANDPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vandps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vandps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VANDPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vandps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VANDPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vandps_zmm_zmm_zmm() {
		testAssembler(c -> c.vandps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VANDPS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vandps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vandps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VANDPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vandps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VANDPS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vandps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VANDPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vandps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vandps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VANDPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vandps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VANDPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vandps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VANDPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vandps_zmm_zmm_m() {
		testAssembler(c -> c.vandps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VANDPS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

}
