// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

package com.github.icedland.iced.x86.asm;

import org.junit.jupiter.api.Test;

import com.github.icedland.iced.x86.*;
import static com.github.icedland.iced.x86.asm.AsmRegisters.*;

final class CodeAssembler16GenJTests extends CodeAssemblerTestsBase {
	CodeAssembler16GenJTests() {
		super(16);
	}

	@Test
	void ja_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.ja(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JA_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.ja(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JA_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void ja_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.ja(0x31D0L), Instruction.createBranch(Code.JA_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.ja(0x31D0L), Instruction.createBranch(Code.JA_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jae_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jae(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JAE_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jae(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JAE_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jae_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jae(0x31D0L), Instruction.createBranch(Code.JAE_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jae(0x31D0L), Instruction.createBranch(Code.JAE_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jb_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jb(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JB_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jb(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JB_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jb_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jb(0x31D0L), Instruction.createBranch(Code.JB_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jb(0x31D0L), Instruction.createBranch(Code.JB_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jbe_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jbe(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JBE_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jbe(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JBE_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jbe_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jbe(0x31D0L), Instruction.createBranch(Code.JBE_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jbe(0x31D0L), Instruction.createBranch(Code.JBE_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jc_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jc(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JB_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jc(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JB_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jc_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jc(0x31D0L), Instruction.createBranch(Code.JB_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jc(0x31D0L), Instruction.createBranch(Code.JB_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jcxz_l() {
		testAssembler(c -> c.jcxz(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JCXZ_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.BRANCH);
	}

	@Test
	void jcxz_lu64() {
		testAssembler(c -> c.jcxz(0x31D0L), Instruction.createBranch(Code.JCXZ_REL8_16, 0x31D0L), TestInstrFlags.BRANCH_U64);
	}

	@Test
	void je_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.je(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JE_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.je(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JE_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void je_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.je(0x31D0L), Instruction.createBranch(Code.JE_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.je(0x31D0L), Instruction.createBranch(Code.JE_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jecxz_l() {
		testAssembler(c -> c.jecxz(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JECXZ_REL8_32, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.BRANCH);
	}

	@Test
	void jg_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jg(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JG_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jg(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JG_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jg_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jg(0x31D0L), Instruction.createBranch(Code.JG_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jg(0x31D0L), Instruction.createBranch(Code.JG_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jge_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jge(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JGE_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jge(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JGE_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jge_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jge(0x31D0L), Instruction.createBranch(Code.JGE_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jge(0x31D0L), Instruction.createBranch(Code.JGE_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jl_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jl(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JL_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jl(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JL_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jl_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jl(0x31D0L), Instruction.createBranch(Code.JL_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jl(0x31D0L), Instruction.createBranch(Code.JL_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jle_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jle(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JLE_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jle(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JLE_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jle_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jle(0x31D0L), Instruction.createBranch(Code.JLE_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jle(0x31D0L), Instruction.createBranch(Code.JLE_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jmp_r16() {
		testAssembler(c -> c.jmp(dx), Instruction.create(Code.JMP_RM16, ICRegisters.dx));
	}

	@Test
	void jmp_r32() {
		testAssembler(c -> c.jmp(edx), Instruction.create(Code.JMP_RM32, ICRegisters.edx));
	}

	@Test
	void jmp_m() {
		{ /* if (dst.size == MemoryOperandSize.TBYTE) */
			// Skipping JMP_M1664 - Not supported by current bitness
		} /* else */ { /* if (dst.size == MemoryOperandSize.QWORD) */
			// Skipping JMP_RM64 - Not supported by current bitness
		} /* else */ { /* if (dst.size == MemoryOperandSize.FWORD) */
			testAssembler(c -> c.jmp(fword_ptr(0x0L).base(di)), Instruction.create(Code.JMP_M1632, new MemoryOperand(ICRegisters.di, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			{ // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jmp(dword_ptr(0x0L).base(di)), Instruction.create(Code.JMP_M1616, new MemoryOperand(ICRegisters.di, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.jmp(word_ptr(0x0L).base(di)), Instruction.create(Code.JMP_RM16, new MemoryOperand(ICRegisters.di, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.jmp(zmmword_ptr(0x0L).base(di)), Instruction.create(Code.JMP_RM16, new MemoryOperand(ICRegisters.di, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void jmp_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jmp(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JMP_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jmp(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JMP_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jmp_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jmp(0x31D0L), Instruction.createBranch(Code.JMP_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jmp(0x31D0L), Instruction.createBranch(Code.JMP_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jmpe_r16() {
		testAssembler(c -> c.jmpe(dx), Instruction.create(Code.JMPE_RM16, ICRegisters.dx), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.JMPE);
	}

	@Test
	void jmpe_r32() {
		testAssembler(c -> c.jmpe(edx), Instruction.create(Code.JMPE_RM32, ICRegisters.edx), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.JMPE);
	}

	@Test
	void jmpe_m() {
		{ // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jmpe(word_ptr(0x0L).base(si)), Instruction.create(Code.JMPE_RM16, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.JMPE);
	}

	@Test
	void jmpe_l() {
		{ // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jmpe(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JMPE_DISP16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.BRANCH, com.github.icedland.iced.x86.dec.DecoderOptions.JMPE);
	}

	@Test
	void jmpe_lu64() {
		{ // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jmpe(0x31D0L), Instruction.createBranch(Code.JMPE_DISP16, 0x31D0L), TestInstrFlags.BRANCH_U64, com.github.icedland.iced.x86.dec.DecoderOptions.JMPE);
	}

	@Test
	void jna_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jna(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JBE_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jna(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JBE_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jna_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jna(0x31D0L), Instruction.createBranch(Code.JBE_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jna(0x31D0L), Instruction.createBranch(Code.JBE_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jnae_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnae(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JB_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnae(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JB_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jnae_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnae(0x31D0L), Instruction.createBranch(Code.JB_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnae(0x31D0L), Instruction.createBranch(Code.JB_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jnb_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnb(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JAE_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnb(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JAE_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jnb_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnb(0x31D0L), Instruction.createBranch(Code.JAE_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnb(0x31D0L), Instruction.createBranch(Code.JAE_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jnbe_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnbe(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JA_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnbe(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JA_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jnbe_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnbe(0x31D0L), Instruction.createBranch(Code.JA_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnbe(0x31D0L), Instruction.createBranch(Code.JA_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jnc_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnc(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JAE_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnc(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JAE_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jnc_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnc(0x31D0L), Instruction.createBranch(Code.JAE_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnc(0x31D0L), Instruction.createBranch(Code.JAE_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jne_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jne(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNE_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jne(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNE_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jne_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jne(0x31D0L), Instruction.createBranch(Code.JNE_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jne(0x31D0L), Instruction.createBranch(Code.JNE_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jng_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jng(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JLE_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jng(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JLE_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jng_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jng(0x31D0L), Instruction.createBranch(Code.JLE_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jng(0x31D0L), Instruction.createBranch(Code.JLE_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jnge_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnge(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JL_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnge(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JL_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jnge_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnge(0x31D0L), Instruction.createBranch(Code.JL_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnge(0x31D0L), Instruction.createBranch(Code.JL_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jnl_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnl(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JGE_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnl(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JGE_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jnl_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnl(0x31D0L), Instruction.createBranch(Code.JGE_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnl(0x31D0L), Instruction.createBranch(Code.JGE_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jnle_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnle(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JG_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnle(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JG_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jnle_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnle(0x31D0L), Instruction.createBranch(Code.JG_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnle(0x31D0L), Instruction.createBranch(Code.JG_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jno_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jno(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNO_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jno(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNO_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jno_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jno(0x31D0L), Instruction.createBranch(Code.JNO_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jno(0x31D0L), Instruction.createBranch(Code.JNO_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jnp_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnp(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNP_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnp(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNP_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jnp_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnp(0x31D0L), Instruction.createBranch(Code.JNP_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnp(0x31D0L), Instruction.createBranch(Code.JNP_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jns_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jns(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNS_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jns(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNS_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jns_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jns(0x31D0L), Instruction.createBranch(Code.JNS_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jns(0x31D0L), Instruction.createBranch(Code.JNS_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jnz_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnz(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNE_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnz(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNE_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jnz_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jnz(0x31D0L), Instruction.createBranch(Code.JNE_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jnz(0x31D0L), Instruction.createBranch(Code.JNE_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jo_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jo(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JO_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jo(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JO_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jo_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jo(0x31D0L), Instruction.createBranch(Code.JO_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jo(0x31D0L), Instruction.createBranch(Code.JO_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jp_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jp(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JP_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jp(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JP_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jp_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jp(0x31D0L), Instruction.createBranch(Code.JP_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jp(0x31D0L), Instruction.createBranch(Code.JP_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jpe_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jpe(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JP_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jpe(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JP_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jpe_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jpe(0x31D0L), Instruction.createBranch(Code.JP_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jpe(0x31D0L), Instruction.createBranch(Code.JP_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jpo_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jpo(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNP_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jpo(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JNP_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jpo_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jpo(0x31D0L), Instruction.createBranch(Code.JNP_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jpo(0x31D0L), Instruction.createBranch(Code.JNP_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void js_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.js(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JS_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.js(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JS_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void js_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.js(0x31D0L), Instruction.createBranch(Code.JS_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.js(0x31D0L), Instruction.createBranch(Code.JS_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

	@Test
	void jz_l() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jz(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JE_REL8_16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jz(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.JE_REL16, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH);
	}

	@Test
	void jz_lu64() {
		{ /* if (getPreferShortBranch()) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
			} /* else */ testAssembler(c -> c.jz(0x31D0L), Instruction.createBranch(Code.JE_REL8_16, 0x31D0L), TestInstrFlags.PREFER_SHORT_BRANCH | TestInstrFlags.BRANCH_U64);
		} /* else */ { // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { // skip (getBitness() >= 32) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.jz(0x31D0L), Instruction.createBranch(Code.JE_REL16, 0x31D0L), TestInstrFlags.PREFER_NEAR_BRANCH | TestInstrFlags.BRANCH_U64);
	}

}
