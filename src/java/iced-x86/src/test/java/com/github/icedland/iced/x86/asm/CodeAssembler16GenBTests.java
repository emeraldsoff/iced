// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

package com.github.icedland.iced.x86.asm;

import org.junit.jupiter.api.Test;

import com.github.icedland.iced.x86.*;
import static com.github.icedland.iced.x86.asm.AsmRegisters.*;

final class CodeAssembler16GenBTests extends CodeAssemblerTestsBase {
	CodeAssembler16GenBTests() {
		super(16);
	}

	@Test
	void bb0_reset() {
		testAssembler(c -> c.bb0_reset(), Instruction.create(Code.BB0_RESET), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void bb1_reset() {
		testAssembler(c -> c.bb1_reset(), Instruction.create(Code.BB1_RESET), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void bextr_r32_r32_r32() {
		testAssembler(c -> c.bextr(edx, ebx, esp), Instruction.create(Code.VEX_BEXTR_R32_RM32_R32, ICRegisters.edx, ICRegisters.ebx, ICRegisters.esp));
	}

	@Test
	void bextr_r32_m_r32() {
		testAssembler(c -> c.bextr(edx, dword_ptr(0x0L).base(si), esp), Instruction.create(Code.VEX_BEXTR_R32_RM32_R32, ICRegisters.edx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.esp));
	}

	@Test
	void bextr_r32_r32_i() {
		testAssembler(c -> c.bextr(edx, ebx, 0x7FFFFFFF), Instruction.create(Code.XOP_BEXTR_R32_RM32_IMM32, ICRegisters.edx, ICRegisters.ebx, 0x7FFFFFFF));
	}

	@Test
	void bextr_r32_m_i() {
		testAssembler(c -> c.bextr(edx, dword_ptr(0x0L).base(si), 0x7FFFFFFF), Instruction.create(Code.XOP_BEXTR_R32_RM32_IMM32, ICRegisters.edx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7FFFFFFF));
	}

	@Test
	void blcfill_r32_r32() {
		testAssembler(c -> c.blcfill(edx, ebx), Instruction.create(Code.XOP_BLCFILL_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void blcfill_r32_m() {
		testAssembler(c -> c.blcfill(edx, dword_ptr(0x0L).base(si)), Instruction.create(Code.XOP_BLCFILL_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void blci_r32_r32() {
		testAssembler(c -> c.blci(edx, ebx), Instruction.create(Code.XOP_BLCI_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void blci_r32_m() {
		testAssembler(c -> c.blci(edx, dword_ptr(0x0L).base(si)), Instruction.create(Code.XOP_BLCI_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void blcic_r32_r32() {
		testAssembler(c -> c.blcic(edx, ebx), Instruction.create(Code.XOP_BLCIC_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void blcic_r32_m() {
		testAssembler(c -> c.blcic(edx, dword_ptr(0x0L).base(si)), Instruction.create(Code.XOP_BLCIC_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void blcmsk_r32_r32() {
		testAssembler(c -> c.blcmsk(edx, ebx), Instruction.create(Code.XOP_BLCMSK_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void blcmsk_r32_m() {
		testAssembler(c -> c.blcmsk(edx, dword_ptr(0x0L).base(si)), Instruction.create(Code.XOP_BLCMSK_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void blcs_r32_r32() {
		testAssembler(c -> c.blcs(edx, ebx), Instruction.create(Code.XOP_BLCS_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void blcs_r32_m() {
		testAssembler(c -> c.blcs(edx, dword_ptr(0x0L).base(si)), Instruction.create(Code.XOP_BLCS_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void blendpd_xmm_xmm_i() {
		testAssembler(c -> c.blendpd(xmm2, xmm3, -5), Instruction.create(Code.BLENDPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void blendpd_xmm_m_i() {
		testAssembler(c -> c.blendpd(xmm2, xmmword_ptr(0x0L).base(si), -5), Instruction.create(Code.BLENDPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void blendps_xmm_xmm_i() {
		testAssembler(c -> c.blendps(xmm2, xmm3, -5), Instruction.create(Code.BLENDPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void blendps_xmm_m_i() {
		testAssembler(c -> c.blendps(xmm2, xmmword_ptr(0x0L).base(si), -5), Instruction.create(Code.BLENDPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void blendvpd_xmm_xmm() {
		testAssembler(c -> c.blendvpd(xmm2, xmm3), Instruction.create(Code.BLENDVPD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void blendvpd_xmm_m() {
		testAssembler(c -> c.blendvpd(xmm2, xmmword_ptr(0x0L).base(si)), Instruction.create(Code.BLENDVPD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void blendvps_xmm_xmm() {
		testAssembler(c -> c.blendvps(xmm2, xmm3), Instruction.create(Code.BLENDVPS_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void blendvps_xmm_m() {
		testAssembler(c -> c.blendvps(xmm2, xmmword_ptr(0x0L).base(si)), Instruction.create(Code.BLENDVPS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void blsfill_r32_r32() {
		testAssembler(c -> c.blsfill(edx, ebx), Instruction.create(Code.XOP_BLSFILL_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void blsfill_r32_m() {
		testAssembler(c -> c.blsfill(edx, dword_ptr(0x0L).base(si)), Instruction.create(Code.XOP_BLSFILL_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void blsi_r32_r32() {
		testAssembler(c -> c.blsi(edx, ebx), Instruction.create(Code.VEX_BLSI_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void blsi_r32_m() {
		testAssembler(c -> c.blsi(edx, dword_ptr(0x0L).base(si)), Instruction.create(Code.VEX_BLSI_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void blsic_r32_r32() {
		testAssembler(c -> c.blsic(edx, ebx), Instruction.create(Code.XOP_BLSIC_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void blsic_r32_m() {
		testAssembler(c -> c.blsic(edx, dword_ptr(0x0L).base(si)), Instruction.create(Code.XOP_BLSIC_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void blsmsk_r32_r32() {
		testAssembler(c -> c.blsmsk(edx, ebx), Instruction.create(Code.VEX_BLSMSK_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void blsmsk_r32_m() {
		testAssembler(c -> c.blsmsk(edx, dword_ptr(0x0L).base(si)), Instruction.create(Code.VEX_BLSMSK_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void blsr_r32_r32() {
		testAssembler(c -> c.blsr(edx, ebx), Instruction.create(Code.VEX_BLSR_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void blsr_r32_m() {
		testAssembler(c -> c.blsr(edx, dword_ptr(0x0L).base(si)), Instruction.create(Code.VEX_BLSR_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void bndcl_bnd_r32() {
		testAssembler(c -> c.bndcl(bnd2, ebx), Instruction.create(Code.BNDCL_BND_RM32, ICRegisters.bnd2, ICRegisters.ebx), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MPX);
	}

	@Test
	void bndcl_bnd_m() {
		{ /* if (src.size == MemoryOperandSize.QWORD) */
			// Skipping BNDCL_BND_RM64 - Not supported by current bitness
		} /* else */ { /* if (src.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.bndcl(bnd2, dword_ptr(0x0L).base(edx)), Instruction.create(Code.BNDCL_BND_RM32, ICRegisters.bnd2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MPX);
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.bndcl(bnd2, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.BNDCL_BND_RM32, ICRegisters.bnd2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MPX);
			});
		}
	}

	@Test
	void bndcn_bnd_r32() {
		testAssembler(c -> c.bndcn(bnd2, ebx), Instruction.create(Code.BNDCN_BND_RM32, ICRegisters.bnd2, ICRegisters.ebx), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MPX);
	}

	@Test
	void bndcn_bnd_m() {
		{ /* if (src.size == MemoryOperandSize.QWORD) */
			// Skipping BNDCN_BND_RM64 - Not supported by current bitness
		} /* else */ { /* if (src.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.bndcn(bnd2, dword_ptr(0x0L).base(edx)), Instruction.create(Code.BNDCN_BND_RM32, ICRegisters.bnd2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MPX);
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.bndcn(bnd2, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.BNDCN_BND_RM32, ICRegisters.bnd2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MPX);
			});
		}
	}

	@Test
	void bndcu_bnd_r32() {
		testAssembler(c -> c.bndcu(bnd2, ebx), Instruction.create(Code.BNDCU_BND_RM32, ICRegisters.bnd2, ICRegisters.ebx), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MPX);
	}

	@Test
	void bndcu_bnd_m() {
		{ /* if (src.size == MemoryOperandSize.QWORD) */
			// Skipping BNDCU_BND_RM64 - Not supported by current bitness
		} /* else */ { /* if (src.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.bndcu(bnd2, dword_ptr(0x0L).base(edx)), Instruction.create(Code.BNDCU_BND_RM32, ICRegisters.bnd2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MPX);
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.bndcu(bnd2, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.BNDCU_BND_RM32, ICRegisters.bnd2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MPX);
			});
		}
	}

	@Test
	void bndldx_bnd_m() {
		testAssembler(c -> c.bndldx(bnd2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.BNDLDX_BND_MIB, ICRegisters.bnd2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MPX);
	}

	@Test
	void bndmk_bnd_m() {
		{ /* if (src.size == MemoryOperandSize.QWORD) */
			// Skipping BNDMK_BND_M64 - Not supported by current bitness
		} /* else */ { /* if (src.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.bndmk(bnd2, dword_ptr(0x0L).base(edx)), Instruction.create(Code.BNDMK_BND_M32, ICRegisters.bnd2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MPX);
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.bndmk(bnd2, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.BNDMK_BND_M32, ICRegisters.bnd2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MPX);
			});
		}
	}

	@Test
	void bndmov_bnd_bnd() {
		{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.bndmov(bnd2, bnd3), Instruction.create(Code.BNDMOV_BND_BNDM64, ICRegisters.bnd2, ICRegisters.bnd3), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MPX);
	}

	@Test
	void bndmov_m_bnd() {
		{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.bndmov(mem_ptr(0x0L).base(ecx), bnd3), Instruction.create(Code.BNDMOV_BNDM64_BND, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bnd3), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MPX);
	}

	@Test
	void bndmov_bnd_m() {
		{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ testAssembler(c -> c.bndmov(bnd2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.BNDMOV_BND_BNDM64, ICRegisters.bnd2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MPX);
	}

	@Test
	void bndstx_m_bnd() {
		testAssembler(c -> c.bndstx(mem_ptr(0x0L).base(ecx), bnd3), Instruction.create(Code.BNDSTX_MIB_BND, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bnd3), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MPX);
	}

	@Test
	void bound_r16_m() {
		testAssembler(c -> c.bound(dx, mem_ptr(0x0L).base(si)), Instruction.create(Code.BOUND_R16_M1616, ICRegisters.dx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void bound_r32_m() {
		testAssembler(c -> c.bound(edx, mem_ptr(0x0L).base(si)), Instruction.create(Code.BOUND_R32_M3232, ICRegisters.edx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void bsf_r16_r16() {
		testAssembler(c -> c.bsf(dx, bx), Instruction.create(Code.BSF_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void bsf_r32_r32() {
		testAssembler(c -> c.bsf(edx, ebx), Instruction.create(Code.BSF_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void bsf_r16_m() {
		testAssembler(c -> c.bsf(dx, word_ptr(0x0L).base(si)), Instruction.create(Code.BSF_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void bsf_r32_m() {
		testAssembler(c -> c.bsf(edx, dword_ptr(0x0L).base(si)), Instruction.create(Code.BSF_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void bsr_r16_r16() {
		testAssembler(c -> c.bsr(dx, bx), Instruction.create(Code.BSR_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void bsr_r32_r32() {
		testAssembler(c -> c.bsr(edx, ebx), Instruction.create(Code.BSR_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void bsr_r16_m() {
		testAssembler(c -> c.bsr(dx, word_ptr(0x0L).base(si)), Instruction.create(Code.BSR_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void bsr_r32_m() {
		testAssembler(c -> c.bsr(edx, dword_ptr(0x0L).base(si)), Instruction.create(Code.BSR_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void bswap_r16() {
		testAssembler(c -> c.bswap(dx), Instruction.create(Code.BSWAP_R16, ICRegisters.dx));
	}

	@Test
	void bswap_r32() {
		testAssembler(c -> c.bswap(edx), Instruction.create(Code.BSWAP_R32, ICRegisters.edx));
	}

	@Test
	void bt_r16_r16() {
		testAssembler(c -> c.bt(dx, bx), Instruction.create(Code.BT_RM16_R16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void bt_m_r16() {
		testAssembler(c -> c.bt(word_ptr(0x0L).base(si), bx), Instruction.create(Code.BT_RM16_R16, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bx));
	}

	@Test
	void bt_r32_r32() {
		testAssembler(c -> c.bt(edx, ebx), Instruction.create(Code.BT_RM32_R32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void bt_m_r32() {
		testAssembler(c -> c.bt(dword_ptr(0x0L).base(si), ebx), Instruction.create(Code.BT_RM32_R32, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void bt_r16_i() {
		testAssembler(c -> c.bt(dx, -5), Instruction.create(Code.BT_RM16_IMM8, ICRegisters.dx, -5));
	}

	@Test
	void bt_r32_i() {
		testAssembler(c -> c.bt(edx, -5), Instruction.create(Code.BT_RM32_IMM8, ICRegisters.edx, -5));
	}

	@Test
	void bt_m_i() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			// Skipping BT_RM64_IMM8 - Not supported by current bitness
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.bt(dword_ptr(0x0L).base(di), -5), Instruction.create(Code.BT_RM32_IMM8, new MemoryOperand(ICRegisters.di, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.bt(word_ptr(0x0L).base(di), -5), Instruction.create(Code.BT_RM16_IMM8, new MemoryOperand(ICRegisters.di, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.bt(zmmword_ptr(0x0L).base(di), -5), Instruction.create(Code.BT_RM16_IMM8, new MemoryOperand(ICRegisters.di, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
			});
		}
	}

	@Test
	void btc_r16_r16() {
		testAssembler(c -> c.btc(dx, bx), Instruction.create(Code.BTC_RM16_R16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void btc_m_r16() {
		testAssembler(c -> c.btc(word_ptr(0x0L).base(si), bx), Instruction.create(Code.BTC_RM16_R16, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bx));
	}

	@Test
	void btc_r32_r32() {
		testAssembler(c -> c.btc(edx, ebx), Instruction.create(Code.BTC_RM32_R32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void btc_m_r32() {
		testAssembler(c -> c.btc(dword_ptr(0x0L).base(si), ebx), Instruction.create(Code.BTC_RM32_R32, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void btc_r16_i() {
		testAssembler(c -> c.btc(dx, -5), Instruction.create(Code.BTC_RM16_IMM8, ICRegisters.dx, -5));
	}

	@Test
	void btc_r32_i() {
		testAssembler(c -> c.btc(edx, -5), Instruction.create(Code.BTC_RM32_IMM8, ICRegisters.edx, -5));
	}

	@Test
	void btc_m_i() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			// Skipping BTC_RM64_IMM8 - Not supported by current bitness
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.btc(dword_ptr(0x0L).base(di), -5), Instruction.create(Code.BTC_RM32_IMM8, new MemoryOperand(ICRegisters.di, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.btc(word_ptr(0x0L).base(di), -5), Instruction.create(Code.BTC_RM16_IMM8, new MemoryOperand(ICRegisters.di, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.btc(zmmword_ptr(0x0L).base(di), -5), Instruction.create(Code.BTC_RM16_IMM8, new MemoryOperand(ICRegisters.di, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
			});
		}
	}

	@Test
	void btr_r16_r16() {
		testAssembler(c -> c.btr(dx, bx), Instruction.create(Code.BTR_RM16_R16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void btr_m_r16() {
		testAssembler(c -> c.btr(word_ptr(0x0L).base(si), bx), Instruction.create(Code.BTR_RM16_R16, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bx));
	}

	@Test
	void btr_r32_r32() {
		testAssembler(c -> c.btr(edx, ebx), Instruction.create(Code.BTR_RM32_R32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void btr_m_r32() {
		testAssembler(c -> c.btr(dword_ptr(0x0L).base(si), ebx), Instruction.create(Code.BTR_RM32_R32, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void btr_r16_i() {
		testAssembler(c -> c.btr(dx, -5), Instruction.create(Code.BTR_RM16_IMM8, ICRegisters.dx, -5));
	}

	@Test
	void btr_r32_i() {
		testAssembler(c -> c.btr(edx, -5), Instruction.create(Code.BTR_RM32_IMM8, ICRegisters.edx, -5));
	}

	@Test
	void btr_m_i() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			// Skipping BTR_RM64_IMM8 - Not supported by current bitness
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.btr(dword_ptr(0x0L).base(di), -5), Instruction.create(Code.BTR_RM32_IMM8, new MemoryOperand(ICRegisters.di, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.btr(word_ptr(0x0L).base(di), -5), Instruction.create(Code.BTR_RM16_IMM8, new MemoryOperand(ICRegisters.di, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.btr(zmmword_ptr(0x0L).base(di), -5), Instruction.create(Code.BTR_RM16_IMM8, new MemoryOperand(ICRegisters.di, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
			});
		}
	}

	@Test
	void bts_r16_r16() {
		testAssembler(c -> c.bts(dx, bx), Instruction.create(Code.BTS_RM16_R16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void bts_m_r16() {
		testAssembler(c -> c.bts(word_ptr(0x0L).base(si), bx), Instruction.create(Code.BTS_RM16_R16, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bx));
	}

	@Test
	void bts_r32_r32() {
		testAssembler(c -> c.bts(edx, ebx), Instruction.create(Code.BTS_RM32_R32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void bts_m_r32() {
		testAssembler(c -> c.bts(dword_ptr(0x0L).base(si), ebx), Instruction.create(Code.BTS_RM32_R32, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void bts_r16_i() {
		testAssembler(c -> c.bts(dx, -5), Instruction.create(Code.BTS_RM16_IMM8, ICRegisters.dx, -5));
	}

	@Test
	void bts_r32_i() {
		testAssembler(c -> c.bts(edx, -5), Instruction.create(Code.BTS_RM32_IMM8, ICRegisters.edx, -5));
	}

	@Test
	void bts_m_i() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			// Skipping BTS_RM64_IMM8 - Not supported by current bitness
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.bts(dword_ptr(0x0L).base(di), -5), Instruction.create(Code.BTS_RM32_IMM8, new MemoryOperand(ICRegisters.di, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.bts(word_ptr(0x0L).base(di), -5), Instruction.create(Code.BTS_RM16_IMM8, new MemoryOperand(ICRegisters.di, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.bts(zmmword_ptr(0x0L).base(di), -5), Instruction.create(Code.BTS_RM16_IMM8, new MemoryOperand(ICRegisters.di, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
			});
		}
	}

	@Test
	void bzhi_r32_r32_r32() {
		testAssembler(c -> c.bzhi(edx, ebx, esp), Instruction.create(Code.VEX_BZHI_R32_RM32_R32, ICRegisters.edx, ICRegisters.ebx, ICRegisters.esp));
	}

	@Test
	void bzhi_r32_m_r32() {
		testAssembler(c -> c.bzhi(edx, dword_ptr(0x0L).base(si), esp), Instruction.create(Code.VEX_BZHI_R32_RM32_R32, ICRegisters.edx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.esp));
	}

	@Test
	void vbcstnebf162ps_xmm_m() {
		testAssembler(c -> c.vbcstnebf162ps(xmm2, mem_ptr(0x0L).base(si)), Instruction.create(Code.VEX_VBCSTNEBF162PS_XMM_M16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vbcstnebf162ps_ymm_m() {
		testAssembler(c -> c.vbcstnebf162ps(ymm2, mem_ptr(0x0L).base(si)), Instruction.create(Code.VEX_VBCSTNEBF162PS_YMM_M16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vbcstnesh2ps_xmm_m() {
		testAssembler(c -> c.vbcstnesh2ps(xmm2, mem_ptr(0x0L).base(si)), Instruction.create(Code.VEX_VBCSTNESH2PS_XMM_M16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vbcstnesh2ps_ymm_m() {
		testAssembler(c -> c.vbcstnesh2ps(ymm2, mem_ptr(0x0L).base(si)), Instruction.create(Code.VEX_VBCSTNESH2PS_YMM_M16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vblendmpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vblendmpd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VBLENDMPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vblendmpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vblendmpd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VBLENDMPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vblendmpd_zmm_zmm_zmm() {
		testAssembler(c -> c.vblendmpd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VBLENDMPD_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vblendmpd_xmm_xmm_m() {
		testAssembler(c -> c.vblendmpd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBLENDMPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vblendmpd_ymm_ymm_m() {
		testAssembler(c -> c.vblendmpd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBLENDMPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vblendmpd_zmm_zmm_m() {
		testAssembler(c -> c.vblendmpd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBLENDMPD_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vblendmps_xmm_xmm_xmm() {
		testAssembler(c -> c.vblendmps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VBLENDMPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vblendmps_ymm_ymm_ymm() {
		testAssembler(c -> c.vblendmps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VBLENDMPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vblendmps_zmm_zmm_zmm() {
		testAssembler(c -> c.vblendmps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VBLENDMPS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vblendmps_xmm_xmm_m() {
		testAssembler(c -> c.vblendmps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBLENDMPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vblendmps_ymm_ymm_m() {
		testAssembler(c -> c.vblendmps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBLENDMPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vblendmps_zmm_zmm_m() {
		testAssembler(c -> c.vblendmps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBLENDMPS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vblendpd_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vblendpd(xmm2, xmm3, xmm4, -5), Instruction.create(Code.VEX_VBLENDPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vblendpd_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vblendpd(ymm2, ymm3, ymm4, -5), Instruction.create(Code.VEX_VBLENDPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5));
	}

	@Test
	void vblendpd_xmm_xmm_m_i() {
		testAssembler(c -> c.vblendpd(xmm2, xmm3, xmmword_ptr(0x0L).base(si), -5), Instruction.create(Code.VEX_VBLENDPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vblendpd_ymm_ymm_m_i() {
		testAssembler(c -> c.vblendpd(ymm2, ymm3, ymmword_ptr(0x0L).base(si), -5), Instruction.create(Code.VEX_VBLENDPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vblendps_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vblendps(xmm2, xmm3, xmm4, -5), Instruction.create(Code.VEX_VBLENDPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vblendps_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vblendps(ymm2, ymm3, ymm4, -5), Instruction.create(Code.VEX_VBLENDPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5));
	}

	@Test
	void vblendps_xmm_xmm_m_i() {
		testAssembler(c -> c.vblendps(xmm2, xmm3, xmmword_ptr(0x0L).base(si), -5), Instruction.create(Code.VEX_VBLENDPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vblendps_ymm_ymm_m_i() {
		testAssembler(c -> c.vblendps(ymm2, ymm3, ymmword_ptr(0x0L).base(si), -5), Instruction.create(Code.VEX_VBLENDPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vblendvpd_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vblendvpd(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VBLENDVPD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vblendvpd_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vblendvpd(xmm2, xmm3, xmmword_ptr(0x0L).base(si), xmm5), Instruction.create(Code.VEX_VBLENDVPD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vblendvpd_ymm_ymm_ymm_ymm() {
		testAssembler(c -> c.vblendvpd(ymm2, ymm3, ymm4, ymm5), Instruction.create(Code.VEX_VBLENDVPD_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5));
	}

	@Test
	void vblendvpd_ymm_ymm_m_ymm() {
		testAssembler(c -> c.vblendvpd(ymm2, ymm3, ymmword_ptr(0x0L).base(si), ymm5), Instruction.create(Code.VEX_VBLENDVPD_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5));
	}

	@Test
	void vblendvps_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vblendvps(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VBLENDVPS_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vblendvps_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vblendvps(xmm2, xmm3, xmmword_ptr(0x0L).base(si), xmm5), Instruction.create(Code.VEX_VBLENDVPS_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vblendvps_ymm_ymm_ymm_ymm() {
		testAssembler(c -> c.vblendvps(ymm2, ymm3, ymm4, ymm5), Instruction.create(Code.VEX_VBLENDVPS_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5));
	}

	@Test
	void vblendvps_ymm_ymm_m_ymm() {
		testAssembler(c -> c.vblendvps(ymm2, ymm3, ymmword_ptr(0x0L).base(si), ymm5), Instruction.create(Code.VEX_VBLENDVPS_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5));
	}

	@Test
	void vbroadcastf128_ymm_m() {
		testAssembler(c -> c.vbroadcastf128(ymm2, mem_ptr(0x0L).base(si)), Instruction.create(Code.VEX_VBROADCASTF128_YMM_M128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vbroadcastf32x2_ymm_xmm() {
		testAssembler(c -> c.vbroadcastf32x2(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VBROADCASTF32X2_YMM_K1Z_XMMM64, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vbroadcastf32x2_zmm_xmm() {
		testAssembler(c -> c.vbroadcastf32x2(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VBROADCASTF32X2_ZMM_K1Z_XMMM64, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vbroadcastf32x2_ymm_m() {
		testAssembler(c -> c.vbroadcastf32x2(ymm2.k1(), xmmword_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTF32X2_YMM_K1Z_XMMM64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcastf32x2_zmm_m() {
		testAssembler(c -> c.vbroadcastf32x2(zmm2.k1(), xmmword_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTF32X2_ZMM_K1Z_XMMM64, ICRegisters.zmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcastf32x4_ymm_m() {
		testAssembler(c -> c.vbroadcastf32x4(ymm2.k1(), mem_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTF32X4_YMM_K1Z_M128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcastf32x4_zmm_m() {
		testAssembler(c -> c.vbroadcastf32x4(zmm2.k1(), mem_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTF32X4_ZMM_K1Z_M128, ICRegisters.zmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcastf32x8_zmm_m() {
		testAssembler(c -> c.vbroadcastf32x8(zmm2.k1(), mem_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTF32X8_ZMM_K1Z_M256, ICRegisters.zmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcastf64x2_ymm_m() {
		testAssembler(c -> c.vbroadcastf64x2(ymm2.k1(), mem_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTF64X2_YMM_K1Z_M128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcastf64x2_zmm_m() {
		testAssembler(c -> c.vbroadcastf64x2(zmm2.k1(), mem_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTF64X2_ZMM_K1Z_M128, ICRegisters.zmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcastf64x4_zmm_m() {
		testAssembler(c -> c.vbroadcastf64x4(zmm2.k1(), mem_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTF64X4_ZMM_K1Z_M256, ICRegisters.zmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcasti128_ymm_m() {
		testAssembler(c -> c.vbroadcasti128(ymm2, mem_ptr(0x0L).base(si)), Instruction.create(Code.VEX_VBROADCASTI128_YMM_M128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vbroadcasti32x2_xmm_xmm() {
		testAssembler(c -> c.vbroadcasti32x2(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VBROADCASTI32X2_XMM_K1Z_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vbroadcasti32x2_ymm_xmm() {
		testAssembler(c -> c.vbroadcasti32x2(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VBROADCASTI32X2_YMM_K1Z_XMMM64, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vbroadcasti32x2_zmm_xmm() {
		testAssembler(c -> c.vbroadcasti32x2(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VBROADCASTI32X2_ZMM_K1Z_XMMM64, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vbroadcasti32x2_xmm_m() {
		testAssembler(c -> c.vbroadcasti32x2(xmm2.k1(), xmmword_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTI32X2_XMM_K1Z_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcasti32x2_ymm_m() {
		testAssembler(c -> c.vbroadcasti32x2(ymm2.k1(), xmmword_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTI32X2_YMM_K1Z_XMMM64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcasti32x2_zmm_m() {
		testAssembler(c -> c.vbroadcasti32x2(zmm2.k1(), xmmword_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTI32X2_ZMM_K1Z_XMMM64, ICRegisters.zmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcasti32x4_ymm_m() {
		testAssembler(c -> c.vbroadcasti32x4(ymm2.k1(), mem_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTI32X4_YMM_K1Z_M128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcasti32x4_zmm_m() {
		testAssembler(c -> c.vbroadcasti32x4(zmm2.k1(), mem_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTI32X4_ZMM_K1Z_M128, ICRegisters.zmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcasti32x8_zmm_m() {
		testAssembler(c -> c.vbroadcasti32x8(zmm2.k1(), mem_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTI32X8_ZMM_K1Z_M256, ICRegisters.zmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcasti64x2_ymm_m() {
		testAssembler(c -> c.vbroadcasti64x2(ymm2.k1(), mem_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTI64X2_YMM_K1Z_M128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcasti64x2_zmm_m() {
		testAssembler(c -> c.vbroadcasti64x2(zmm2.k1(), mem_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTI64X2_ZMM_K1Z_M128, ICRegisters.zmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcasti64x4_zmm_m() {
		testAssembler(c -> c.vbroadcasti64x4(zmm2.k1(), mem_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTI64X4_ZMM_K1Z_M256, ICRegisters.zmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcastsd_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vbroadcastsd(ymm2, xmm3), Instruction.create(Code.VEX_VBROADCASTSD_YMM_XMM, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vbroadcastsd(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VBROADCASTSD_YMM_K1Z_XMMM64, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vbroadcastsd_zmm_xmm() {
		testAssembler(c -> c.vbroadcastsd(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VBROADCASTSD_ZMM_K1Z_XMMM64, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vbroadcastsd_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vbroadcastsd(ymm2, mem_ptr(0x0L).base(si)), Instruction.create(Code.VEX_VBROADCASTSD_YMM_M64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vbroadcastsd(ymm2.k1(), xmmword_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTSD_YMM_K1Z_XMMM64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vbroadcastsd_zmm_m() {
		testAssembler(c -> c.vbroadcastsd(zmm2.k1(), xmmword_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTSD_ZMM_K1Z_XMMM64, ICRegisters.zmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vbroadcastss_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vbroadcastss(xmm2, xmm3), Instruction.create(Code.VEX_VBROADCASTSS_XMM_XMM, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vbroadcastss(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VBROADCASTSS_XMM_K1Z_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vbroadcastss_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vbroadcastss(ymm2, xmm3), Instruction.create(Code.VEX_VBROADCASTSS_YMM_XMM, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vbroadcastss(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VBROADCASTSS_YMM_K1Z_XMMM32, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vbroadcastss_zmm_xmm() {
		testAssembler(c -> c.vbroadcastss(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VBROADCASTSS_ZMM_K1Z_XMMM32, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vbroadcastss_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vbroadcastss(xmm2, mem_ptr(0x0L).base(si)), Instruction.create(Code.VEX_VBROADCASTSS_XMM_M32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vbroadcastss(xmm2.k1(), xmmword_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTSS_XMM_K1Z_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vbroadcastss_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vbroadcastss(ymm2, mem_ptr(0x0L).base(si)), Instruction.create(Code.VEX_VBROADCASTSS_YMM_M32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vbroadcastss(ymm2.k1(), xmmword_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTSS_YMM_K1Z_XMMM32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vbroadcastss_zmm_m() {
		testAssembler(c -> c.vbroadcastss(zmm2.k1(), xmmword_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_VBROADCASTSS_ZMM_K1Z_XMMM32, ICRegisters.zmm2, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

}
