// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

package com.github.icedland.iced.x86.asm;

import org.junit.jupiter.api.Test;

import com.github.icedland.iced.x86.*;
import static com.github.icedland.iced.x86.asm.AsmRegisters.*;

final class CodeAssembler32GenGTests extends CodeAssemblerTestsBase {
	CodeAssembler32GenGTests() {
		super(32);
	}

	@Test
	void getsec() {
		testAssembler(c -> c.getsec(), Instruction.create(Code.GETSECD));
	}

	@Test
	void gf2p8affineinvqb_xmm_xmm_i() {
		testAssembler(c -> c.gf2p8affineinvqb(xmm2, xmm3, -5), Instruction.create(Code.GF2P8AFFINEINVQB_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void gf2p8affineinvqb_xmm_m_i() {
		testAssembler(c -> c.gf2p8affineinvqb(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.GF2P8AFFINEINVQB_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void gf2p8affineqb_xmm_xmm_i() {
		testAssembler(c -> c.gf2p8affineqb(xmm2, xmm3, -5), Instruction.create(Code.GF2P8AFFINEQB_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void gf2p8affineqb_xmm_m_i() {
		testAssembler(c -> c.gf2p8affineqb(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.GF2P8AFFINEQB_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void gf2p8mulb_xmm_xmm() {
		testAssembler(c -> c.gf2p8mulb(xmm2, xmm3), Instruction.create(Code.GF2P8MULB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void gf2p8mulb_xmm_m() {
		testAssembler(c -> c.gf2p8mulb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.GF2P8MULB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vgatherdpd_xmm_m() {
		testAssembler(c -> c.vgatherdpd(xmm2.k1(), mem_ptr(0x0L).base(edx).index(xmm3)), applyK(Instruction.create(Code.EVEX_VGATHERDPD_XMM_K1_VM32X, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherdpd_ymm_m() {
		testAssembler(c -> c.vgatherdpd(ymm2.k1(), mem_ptr(0x0L).base(edx).index(xmm3)), applyK(Instruction.create(Code.EVEX_VGATHERDPD_YMM_K1_VM32X, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherdpd_zmm_m() {
		testAssembler(c -> c.vgatherdpd(zmm2.k1(), mem_ptr(0x0L).base(edx).index(ymm3)), applyK(Instruction.create(Code.EVEX_VGATHERDPD_ZMM_K1_VM32Y, ICRegisters.zmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherdpd_xmm_m_xmm() {
		testAssembler(c -> c.vgatherdpd(xmm2, mem_ptr(0x0L).base(edx).index(xmm3), xmm4), Instruction.create(Code.VEX_VGATHERDPD_XMM_VM32X_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vgatherdpd_ymm_m_ymm() {
		testAssembler(c -> c.vgatherdpd(ymm2, mem_ptr(0x0L).base(edx).index(xmm3), ymm4), Instruction.create(Code.VEX_VGATHERDPD_YMM_VM32X_YMM, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm4));
	}

	@Test
	void vgatherdps_xmm_m() {
		testAssembler(c -> c.vgatherdps(xmm2.k1(), mem_ptr(0x0L).base(edx).index(xmm3)), applyK(Instruction.create(Code.EVEX_VGATHERDPS_XMM_K1_VM32X, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherdps_ymm_m() {
		testAssembler(c -> c.vgatherdps(ymm2.k1(), mem_ptr(0x0L).base(edx).index(ymm3)), applyK(Instruction.create(Code.EVEX_VGATHERDPS_YMM_K1_VM32Y, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherdps_zmm_m() {
		testAssembler(c -> c.vgatherdps(zmm2.k1(), mem_ptr(0x0L).base(edx).index(zmm3)), applyK(Instruction.create(Code.EVEX_VGATHERDPS_ZMM_K1_VM32Z, ICRegisters.zmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherdps_xmm_m_xmm() {
		testAssembler(c -> c.vgatherdps(xmm2, mem_ptr(0x0L).base(edx).index(xmm3), xmm4), Instruction.create(Code.VEX_VGATHERDPS_XMM_VM32X_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vgatherdps_ymm_m_ymm() {
		testAssembler(c -> c.vgatherdps(ymm2, mem_ptr(0x0L).base(edx).index(ymm3), ymm4), Instruction.create(Code.VEX_VGATHERDPS_YMM_VM32Y_YMM, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm3, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm4));
	}

	@Test
	void vgatherpf0dpd_m() {
		testAssembler(c -> c.vgatherpf0dpd(mem_ptr(0x0L).base(edx).index(ymm2).k1()), applyK(Instruction.create(Code.EVEX_VGATHERPF0DPD_VM32Y_K1, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm2, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherpf0dps_m() {
		testAssembler(c -> c.vgatherpf0dps(mem_ptr(0x0L).base(edx).index(zmm2).k1()), applyK(Instruction.create(Code.EVEX_VGATHERPF0DPS_VM32Z_K1, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm2, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherpf0qpd_m() {
		testAssembler(c -> c.vgatherpf0qpd(mem_ptr(0x0L).base(edx).index(zmm2).k1()), applyK(Instruction.create(Code.EVEX_VGATHERPF0QPD_VM64Z_K1, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm2, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherpf0qps_m() {
		testAssembler(c -> c.vgatherpf0qps(mem_ptr(0x0L).base(edx).index(zmm2).k1()), applyK(Instruction.create(Code.EVEX_VGATHERPF0QPS_VM64Z_K1, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm2, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherpf1dpd_m() {
		testAssembler(c -> c.vgatherpf1dpd(mem_ptr(0x0L).base(edx).index(ymm2).k1()), applyK(Instruction.create(Code.EVEX_VGATHERPF1DPD_VM32Y_K1, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm2, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherpf1dps_m() {
		testAssembler(c -> c.vgatherpf1dps(mem_ptr(0x0L).base(edx).index(zmm2).k1()), applyK(Instruction.create(Code.EVEX_VGATHERPF1DPS_VM32Z_K1, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm2, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherpf1qpd_m() {
		testAssembler(c -> c.vgatherpf1qpd(mem_ptr(0x0L).base(edx).index(zmm2).k1()), applyK(Instruction.create(Code.EVEX_VGATHERPF1QPD_VM64Z_K1, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm2, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherpf1qps_m() {
		testAssembler(c -> c.vgatherpf1qps(mem_ptr(0x0L).base(edx).index(zmm2).k1()), applyK(Instruction.create(Code.EVEX_VGATHERPF1QPS_VM64Z_K1, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm2, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherqpd_xmm_m() {
		testAssembler(c -> c.vgatherqpd(xmm2.k1(), mem_ptr(0x0L).base(edx).index(xmm3)), applyK(Instruction.create(Code.EVEX_VGATHERQPD_XMM_K1_VM64X, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherqpd_ymm_m() {
		testAssembler(c -> c.vgatherqpd(ymm2.k1(), mem_ptr(0x0L).base(edx).index(ymm3)), applyK(Instruction.create(Code.EVEX_VGATHERQPD_YMM_K1_VM64Y, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherqpd_zmm_m() {
		testAssembler(c -> c.vgatherqpd(zmm2.k1(), mem_ptr(0x0L).base(edx).index(zmm3)), applyK(Instruction.create(Code.EVEX_VGATHERQPD_ZMM_K1_VM64Z, ICRegisters.zmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherqpd_xmm_m_xmm() {
		testAssembler(c -> c.vgatherqpd(xmm2, mem_ptr(0x0L).base(edx).index(xmm3), xmm4), Instruction.create(Code.VEX_VGATHERQPD_XMM_VM64X_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vgatherqpd_ymm_m_ymm() {
		testAssembler(c -> c.vgatherqpd(ymm2, mem_ptr(0x0L).base(edx).index(ymm3), ymm4), Instruction.create(Code.VEX_VGATHERQPD_YMM_VM64Y_YMM, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm3, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm4));
	}

	@Test
	void vgatherqps_xmm_m() {
		{ /* if (Register.isXMM(src.index.get())) */
			testAssembler(c -> c.vgatherqps(xmm2.k1(), mem_ptr(0x0L).base(edx).index(xmm3)), applyK(Instruction.create(Code.EVEX_VGATHERQPS_XMM_K1_VM64X, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		} /* else */ { /* if (Register.isYMM(src.index.get())) */
			testAssembler(c -> c.vgatherqps(xmm2.k1(), mem_ptr(0x0L).base(edx).index(ymm3)), applyK(Instruction.create(Code.EVEX_VGATHERQPS_XMM_K1_VM64Y, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vgatherqps(xmm2.k1(), mem_ptr(0x0L).base(edx).index(zmm1)), applyK(Instruction.create(Code.EVEX_VGATHERQPS_XMM_K1_VM64Y, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm1, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
			});
		}
	}

	@Test
	void vgatherqps_ymm_m() {
		testAssembler(c -> c.vgatherqps(ymm2.k1(), mem_ptr(0x0L).base(edx).index(zmm3)), applyK(Instruction.create(Code.EVEX_VGATHERQPS_YMM_K1_VM64Z, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgatherqps_xmm_m_xmm() {
		{ /* if (Register.isXMM(src1.index.get())) */
			testAssembler(c -> c.vgatherqps(xmm2, mem_ptr(0x0L).base(edx).index(xmm3), xmm4), Instruction.create(Code.VEX_VGATHERQPS_XMM_VM64X_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
		} /* else */ { /* if (Register.isYMM(src1.index.get())) */
			testAssembler(c -> c.vgatherqps(xmm2, mem_ptr(0x0L).base(edx).index(ymm3), xmm4), Instruction.create(Code.VEX_VGATHERQPS_XMM_VM64Y_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm3, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vgatherqps(xmm2, mem_ptr(0x0L).base(edx).index(zmm1), xmm4), Instruction.create(Code.VEX_VGATHERQPS_XMM_VM64Y_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm1, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
			});
		}
	}

	@Test
	void vgetexppd_xmm_xmm() {
		testAssembler(c -> c.vgetexppd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VGETEXPPD_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vgetexppd_ymm_ymm() {
		testAssembler(c -> c.vgetexppd(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VGETEXPPD_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vgetexppd_zmm_zmm() {
		testAssembler(c -> c.vgetexppd(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VGETEXPPD_ZMM_K1Z_ZMMM512B64_SAE, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vgetexppd_xmm_m() {
		testAssembler(c -> c.vgetexppd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VGETEXPPD_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgetexppd_ymm_m() {
		testAssembler(c -> c.vgetexppd(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VGETEXPPD_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgetexppd_zmm_m() {
		testAssembler(c -> c.vgetexppd(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VGETEXPPD_ZMM_K1Z_ZMMM512B64_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgetexpph_xmm_xmm() {
		testAssembler(c -> c.vgetexpph(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VGETEXPPH_XMM_K1Z_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vgetexpph_ymm_ymm() {
		testAssembler(c -> c.vgetexpph(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VGETEXPPH_YMM_K1Z_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vgetexpph_zmm_zmm() {
		testAssembler(c -> c.vgetexpph(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VGETEXPPH_ZMM_K1Z_ZMMM512B16_SAE, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vgetexpph_xmm_m() {
		testAssembler(c -> c.vgetexpph(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VGETEXPPH_XMM_K1Z_XMMM128B16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgetexpph_ymm_m() {
		testAssembler(c -> c.vgetexpph(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VGETEXPPH_YMM_K1Z_YMMM256B16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgetexpph_zmm_m() {
		testAssembler(c -> c.vgetexpph(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VGETEXPPH_ZMM_K1Z_ZMMM512B16_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgetexpps_xmm_xmm() {
		testAssembler(c -> c.vgetexpps(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VGETEXPPS_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vgetexpps_ymm_ymm() {
		testAssembler(c -> c.vgetexpps(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VGETEXPPS_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vgetexpps_zmm_zmm() {
		testAssembler(c -> c.vgetexpps(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VGETEXPPS_ZMM_K1Z_ZMMM512B32_SAE, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vgetexpps_xmm_m() {
		testAssembler(c -> c.vgetexpps(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VGETEXPPS_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgetexpps_ymm_m() {
		testAssembler(c -> c.vgetexpps(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VGETEXPPS_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgetexpps_zmm_m() {
		testAssembler(c -> c.vgetexpps(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VGETEXPPS_ZMM_K1Z_ZMMM512B32_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgetexpsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vgetexpsd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VGETEXPSD_XMM_K1Z_XMM_XMMM64_SAE, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vgetexpsd_xmm_xmm_m() {
		testAssembler(c -> c.vgetexpsd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VGETEXPSD_XMM_K1Z_XMM_XMMM64_SAE, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgetexpsh_xmm_xmm_xmm() {
		testAssembler(c -> c.vgetexpsh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VGETEXPSH_XMM_K1Z_XMM_XMMM16_SAE, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vgetexpsh_xmm_xmm_m() {
		testAssembler(c -> c.vgetexpsh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VGETEXPSH_XMM_K1Z_XMM_XMMM16_SAE, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgetexpss_xmm_xmm_xmm() {
		testAssembler(c -> c.vgetexpss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VGETEXPSS_XMM_K1Z_XMM_XMMM32_SAE, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vgetexpss_xmm_xmm_m() {
		testAssembler(c -> c.vgetexpss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VGETEXPSS_XMM_K1Z_XMM_XMMM32_SAE, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vgetmantpd_xmm_xmm_i() {
		testAssembler(c -> c.vgetmantpd(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VGETMANTPD_XMM_K1Z_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1));
	}

	@Test
	void vgetmantpd_ymm_ymm_i() {
		testAssembler(c -> c.vgetmantpd(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VGETMANTPD_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1));
	}

	@Test
	void vgetmantpd_zmm_zmm_i() {
		testAssembler(c -> c.vgetmantpd(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VGETMANTPD_ZMM_K1Z_ZMMM512B64_IMM8_SAE, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vgetmantpd_xmm_m_i() {
		testAssembler(c -> c.vgetmantpd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGETMANTPD_XMM_K1Z_XMMM128B64_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vgetmantpd_ymm_m_i() {
		testAssembler(c -> c.vgetmantpd(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGETMANTPD_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vgetmantpd_zmm_m_i() {
		testAssembler(c -> c.vgetmantpd(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGETMANTPD_ZMM_K1Z_ZMMM512B64_IMM8_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vgetmantph_xmm_xmm_i() {
		testAssembler(c -> c.vgetmantph(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VGETMANTPH_XMM_K1Z_XMMM128B16_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1));
	}

	@Test
	void vgetmantph_ymm_ymm_i() {
		testAssembler(c -> c.vgetmantph(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VGETMANTPH_YMM_K1Z_YMMM256B16_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1));
	}

	@Test
	void vgetmantph_zmm_zmm_i() {
		testAssembler(c -> c.vgetmantph(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VGETMANTPH_ZMM_K1Z_ZMMM512B16_IMM8_SAE, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vgetmantph_xmm_m_i() {
		testAssembler(c -> c.vgetmantph(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGETMANTPH_XMM_K1Z_XMMM128B16_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vgetmantph_ymm_m_i() {
		testAssembler(c -> c.vgetmantph(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGETMANTPH_YMM_K1Z_YMMM256B16_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vgetmantph_zmm_m_i() {
		testAssembler(c -> c.vgetmantph(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGETMANTPH_ZMM_K1Z_ZMMM512B16_IMM8_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vgetmantps_xmm_xmm_i() {
		testAssembler(c -> c.vgetmantps(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VGETMANTPS_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1));
	}

	@Test
	void vgetmantps_ymm_ymm_i() {
		testAssembler(c -> c.vgetmantps(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VGETMANTPS_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1));
	}

	@Test
	void vgetmantps_zmm_zmm_i() {
		testAssembler(c -> c.vgetmantps(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VGETMANTPS_ZMM_K1Z_ZMMM512B32_IMM8_SAE, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vgetmantps_xmm_m_i() {
		testAssembler(c -> c.vgetmantps(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGETMANTPS_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vgetmantps_ymm_m_i() {
		testAssembler(c -> c.vgetmantps(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGETMANTPS_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vgetmantps_zmm_m_i() {
		testAssembler(c -> c.vgetmantps(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGETMANTPS_ZMM_K1Z_ZMMM512B32_IMM8_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vgetmantsd_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vgetmantsd(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VGETMANTSD_XMM_K1Z_XMM_XMMM64_IMM8_SAE, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vgetmantsd_xmm_xmm_m_i() {
		testAssembler(c -> c.vgetmantsd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGETMANTSD_XMM_K1Z_XMM_XMMM64_IMM8_SAE, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vgetmantsh_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vgetmantsh(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VGETMANTSH_XMM_K1Z_XMM_XMMM16_IMM8_SAE, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vgetmantsh_xmm_xmm_m_i() {
		testAssembler(c -> c.vgetmantsh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGETMANTSH_XMM_K1Z_XMM_XMMM16_IMM8_SAE, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vgetmantss_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vgetmantss(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VGETMANTSS_XMM_K1Z_XMM_XMMM32_IMM8_SAE, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vgetmantss_xmm_xmm_m_i() {
		testAssembler(c -> c.vgetmantss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGETMANTSS_XMM_K1Z_XMM_XMMM32_IMM8_SAE, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vgf2p8affineinvqb_xmm_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vgf2p8affineinvqb(xmm2, xmm3, xmm4, -5), Instruction.create(Code.VEX_VGF2P8AFFINEINVQB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vgf2p8affineinvqb(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VGF2P8AFFINEINVQB_XMM_K1Z_XMM_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vgf2p8affineinvqb_ymm_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vgf2p8affineinvqb(ymm2, ymm3, ymm4, -5), Instruction.create(Code.VEX_VGF2P8AFFINEINVQB_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vgf2p8affineinvqb(ymm2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VGF2P8AFFINEINVQB_YMM_K1Z_YMM_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vgf2p8affineinvqb_zmm_zmm_zmm_i() {
		testAssembler(c -> c.vgf2p8affineinvqb(zmm2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VGF2P8AFFINEINVQB_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vgf2p8affineinvqb_xmm_xmm_m_i() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vgf2p8affineinvqb(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx), -5), applyK(Instruction.create(Code.EVEX_VGF2P8AFFINEINVQB_XMM_K1Z_XMM_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vgf2p8affineinvqb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VGF2P8AFFINEINVQB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vgf2p8affineinvqb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGF2P8AFFINEINVQB_XMM_K1Z_XMM_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vgf2p8affineinvqb_ymm_ymm_m_i() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vgf2p8affineinvqb(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx), -5), applyK(Instruction.create(Code.EVEX_VGF2P8AFFINEINVQB_YMM_K1Z_YMM_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vgf2p8affineinvqb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VGF2P8AFFINEINVQB_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vgf2p8affineinvqb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGF2P8AFFINEINVQB_YMM_K1Z_YMM_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vgf2p8affineinvqb_zmm_zmm_m_i() {
		testAssembler(c -> c.vgf2p8affineinvqb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGF2P8AFFINEINVQB_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vgf2p8affineqb_xmm_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vgf2p8affineqb(xmm2, xmm3, xmm4, -5), Instruction.create(Code.VEX_VGF2P8AFFINEQB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vgf2p8affineqb(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VGF2P8AFFINEQB_XMM_K1Z_XMM_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vgf2p8affineqb_ymm_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vgf2p8affineqb(ymm2, ymm3, ymm4, -5), Instruction.create(Code.VEX_VGF2P8AFFINEQB_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vgf2p8affineqb(ymm2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VGF2P8AFFINEQB_YMM_K1Z_YMM_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vgf2p8affineqb_zmm_zmm_zmm_i() {
		testAssembler(c -> c.vgf2p8affineqb(zmm2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VGF2P8AFFINEQB_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vgf2p8affineqb_xmm_xmm_m_i() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vgf2p8affineqb(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx), -5), applyK(Instruction.create(Code.EVEX_VGF2P8AFFINEQB_XMM_K1Z_XMM_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vgf2p8affineqb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VGF2P8AFFINEQB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vgf2p8affineqb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGF2P8AFFINEQB_XMM_K1Z_XMM_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vgf2p8affineqb_ymm_ymm_m_i() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vgf2p8affineqb(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx), -5), applyK(Instruction.create(Code.EVEX_VGF2P8AFFINEQB_YMM_K1Z_YMM_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vgf2p8affineqb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VGF2P8AFFINEQB_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vgf2p8affineqb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGF2P8AFFINEQB_YMM_K1Z_YMM_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vgf2p8affineqb_zmm_zmm_m_i() {
		testAssembler(c -> c.vgf2p8affineqb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VGF2P8AFFINEQB_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vgf2p8mulb_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vgf2p8mulb(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VGF2P8MULB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vgf2p8mulb(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VGF2P8MULB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vgf2p8mulb_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vgf2p8mulb(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VGF2P8MULB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vgf2p8mulb(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VGF2P8MULB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vgf2p8mulb_zmm_zmm_zmm() {
		testAssembler(c -> c.vgf2p8mulb(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VGF2P8MULB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vgf2p8mulb_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vgf2p8mulb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VGF2P8MULB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vgf2p8mulb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VGF2P8MULB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vgf2p8mulb_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vgf2p8mulb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VGF2P8MULB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vgf2p8mulb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VGF2P8MULB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vgf2p8mulb_zmm_zmm_m() {
		testAssembler(c -> c.vgf2p8mulb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VGF2P8MULB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

}
