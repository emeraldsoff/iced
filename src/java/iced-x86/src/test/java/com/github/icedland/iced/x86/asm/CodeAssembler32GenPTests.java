// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

package com.github.icedland.iced.x86.asm;

import org.junit.jupiter.api.Test;

import com.github.icedland.iced.x86.*;
import static com.github.icedland.iced.x86.asm.AsmRegisters.*;

final class CodeAssembler32GenPTests extends CodeAssemblerTestsBase {
	CodeAssembler32GenPTests() {
		super(32);
	}

	@Test
	void pabsb_mm_mm() {
		testAssembler(c -> c.pabsb(mm2, mm3), Instruction.create(Code.PABSB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pabsb_xmm_xmm() {
		testAssembler(c -> c.pabsb(xmm2, xmm3), Instruction.create(Code.PABSB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pabsb_mm_m() {
		testAssembler(c -> c.pabsb(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PABSB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pabsb_xmm_m() {
		testAssembler(c -> c.pabsb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PABSB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pabsd_mm_mm() {
		testAssembler(c -> c.pabsd(mm2, mm3), Instruction.create(Code.PABSD_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pabsd_xmm_xmm() {
		testAssembler(c -> c.pabsd(xmm2, xmm3), Instruction.create(Code.PABSD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pabsd_mm_m() {
		testAssembler(c -> c.pabsd(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PABSD_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pabsd_xmm_m() {
		testAssembler(c -> c.pabsd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PABSD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pabsw_mm_mm() {
		testAssembler(c -> c.pabsw(mm2, mm3), Instruction.create(Code.PABSW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pabsw_xmm_xmm() {
		testAssembler(c -> c.pabsw(xmm2, xmm3), Instruction.create(Code.PABSW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pabsw_mm_m() {
		testAssembler(c -> c.pabsw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PABSW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pabsw_xmm_m() {
		testAssembler(c -> c.pabsw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PABSW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void packssdw_mm_mm() {
		testAssembler(c -> c.packssdw(mm2, mm3), Instruction.create(Code.PACKSSDW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void packssdw_xmm_xmm() {
		testAssembler(c -> c.packssdw(xmm2, xmm3), Instruction.create(Code.PACKSSDW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void packssdw_mm_m() {
		testAssembler(c -> c.packssdw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PACKSSDW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void packssdw_xmm_m() {
		testAssembler(c -> c.packssdw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PACKSSDW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void packsswb_mm_mm() {
		testAssembler(c -> c.packsswb(mm2, mm3), Instruction.create(Code.PACKSSWB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void packsswb_xmm_xmm() {
		testAssembler(c -> c.packsswb(xmm2, xmm3), Instruction.create(Code.PACKSSWB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void packsswb_mm_m() {
		testAssembler(c -> c.packsswb(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PACKSSWB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void packsswb_xmm_m() {
		testAssembler(c -> c.packsswb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PACKSSWB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void packusdw_xmm_xmm() {
		testAssembler(c -> c.packusdw(xmm2, xmm3), Instruction.create(Code.PACKUSDW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void packusdw_xmm_m() {
		testAssembler(c -> c.packusdw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PACKUSDW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void packuswb_mm_mm() {
		testAssembler(c -> c.packuswb(mm2, mm3), Instruction.create(Code.PACKUSWB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void packuswb_xmm_xmm() {
		testAssembler(c -> c.packuswb(xmm2, xmm3), Instruction.create(Code.PACKUSWB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void packuswb_mm_m() {
		testAssembler(c -> c.packuswb(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PACKUSWB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void packuswb_xmm_m() {
		testAssembler(c -> c.packuswb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PACKUSWB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void paddb_mm_mm() {
		testAssembler(c -> c.paddb(mm2, mm3), Instruction.create(Code.PADDB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void paddb_xmm_xmm() {
		testAssembler(c -> c.paddb(xmm2, xmm3), Instruction.create(Code.PADDB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void paddb_mm_m() {
		testAssembler(c -> c.paddb(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PADDB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void paddb_xmm_m() {
		testAssembler(c -> c.paddb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PADDB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void paddd_mm_mm() {
		testAssembler(c -> c.paddd(mm2, mm3), Instruction.create(Code.PADDD_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void paddd_xmm_xmm() {
		testAssembler(c -> c.paddd(xmm2, xmm3), Instruction.create(Code.PADDD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void paddd_mm_m() {
		testAssembler(c -> c.paddd(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PADDD_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void paddd_xmm_m() {
		testAssembler(c -> c.paddd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PADDD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void paddq_mm_mm() {
		testAssembler(c -> c.paddq(mm2, mm3), Instruction.create(Code.PADDQ_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void paddq_xmm_xmm() {
		testAssembler(c -> c.paddq(xmm2, xmm3), Instruction.create(Code.PADDQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void paddq_mm_m() {
		testAssembler(c -> c.paddq(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PADDQ_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void paddq_xmm_m() {
		testAssembler(c -> c.paddq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PADDQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void paddsb_mm_mm() {
		testAssembler(c -> c.paddsb(mm2, mm3), Instruction.create(Code.PADDSB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void paddsb_xmm_xmm() {
		testAssembler(c -> c.paddsb(xmm2, xmm3), Instruction.create(Code.PADDSB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void paddsb_mm_m() {
		testAssembler(c -> c.paddsb(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PADDSB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void paddsb_xmm_m() {
		testAssembler(c -> c.paddsb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PADDSB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void paddsiw_mm_mm() {
		testAssembler(c -> c.paddsiw(mm2, mm3), Instruction.create(Code.PADDSIW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void paddsiw_mm_m() {
		testAssembler(c -> c.paddsiw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PADDSIW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void paddsw_mm_mm() {
		testAssembler(c -> c.paddsw(mm2, mm3), Instruction.create(Code.PADDSW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void paddsw_xmm_xmm() {
		testAssembler(c -> c.paddsw(xmm2, xmm3), Instruction.create(Code.PADDSW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void paddsw_mm_m() {
		testAssembler(c -> c.paddsw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PADDSW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void paddsw_xmm_m() {
		testAssembler(c -> c.paddsw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PADDSW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void paddusb_mm_mm() {
		testAssembler(c -> c.paddusb(mm2, mm3), Instruction.create(Code.PADDUSB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void paddusb_xmm_xmm() {
		testAssembler(c -> c.paddusb(xmm2, xmm3), Instruction.create(Code.PADDUSB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void paddusb_mm_m() {
		testAssembler(c -> c.paddusb(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PADDUSB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void paddusb_xmm_m() {
		testAssembler(c -> c.paddusb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PADDUSB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void paddusw_mm_mm() {
		testAssembler(c -> c.paddusw(mm2, mm3), Instruction.create(Code.PADDUSW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void paddusw_xmm_xmm() {
		testAssembler(c -> c.paddusw(xmm2, xmm3), Instruction.create(Code.PADDUSW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void paddusw_mm_m() {
		testAssembler(c -> c.paddusw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PADDUSW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void paddusw_xmm_m() {
		testAssembler(c -> c.paddusw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PADDUSW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void paddw_mm_mm() {
		testAssembler(c -> c.paddw(mm2, mm3), Instruction.create(Code.PADDW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void paddw_xmm_xmm() {
		testAssembler(c -> c.paddw(xmm2, xmm3), Instruction.create(Code.PADDW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void paddw_mm_m() {
		testAssembler(c -> c.paddw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PADDW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void paddw_xmm_m() {
		testAssembler(c -> c.paddw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PADDW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void palignr_mm_mm_i() {
		testAssembler(c -> c.palignr(mm2, mm3, -5), Instruction.create(Code.PALIGNR_MM_MMM64_IMM8, ICRegisters.mm2, ICRegisters.mm3, -5));
	}

	@Test
	void palignr_xmm_xmm_i() {
		testAssembler(c -> c.palignr(xmm2, xmm3, -5), Instruction.create(Code.PALIGNR_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void palignr_mm_m_i() {
		testAssembler(c -> c.palignr(mm2, qword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.PALIGNR_MM_MMM64_IMM8, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void palignr_xmm_m_i() {
		testAssembler(c -> c.palignr(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.PALIGNR_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void pand_mm_mm() {
		testAssembler(c -> c.pand(mm2, mm3), Instruction.create(Code.PAND_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pand_xmm_xmm() {
		testAssembler(c -> c.pand(xmm2, xmm3), Instruction.create(Code.PAND_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pand_mm_m() {
		testAssembler(c -> c.pand(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PAND_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pand_xmm_m() {
		testAssembler(c -> c.pand(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PAND_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pandn_mm_mm() {
		testAssembler(c -> c.pandn(mm2, mm3), Instruction.create(Code.PANDN_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pandn_xmm_xmm() {
		testAssembler(c -> c.pandn(xmm2, xmm3), Instruction.create(Code.PANDN_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pandn_mm_m() {
		testAssembler(c -> c.pandn(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PANDN_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pandn_xmm_m() {
		testAssembler(c -> c.pandn(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PANDN_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pause() {
		testAssembler(c -> c.pause(), Instruction.create(Code.PAUSE));
	}

	@Test
	void paveb_mm_mm() {
		testAssembler(c -> c.paveb(mm2, mm3), Instruction.create(Code.PAVEB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void paveb_mm_m() {
		testAssembler(c -> c.paveb(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PAVEB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void pavgb_mm_mm() {
		testAssembler(c -> c.pavgb(mm2, mm3), Instruction.create(Code.PAVGB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pavgb_xmm_xmm() {
		testAssembler(c -> c.pavgb(xmm2, xmm3), Instruction.create(Code.PAVGB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pavgb_mm_m() {
		testAssembler(c -> c.pavgb(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PAVGB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pavgb_xmm_m() {
		testAssembler(c -> c.pavgb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PAVGB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pavgusb_mm_mm() {
		testAssembler(c -> c.pavgusb(mm2, mm3), Instruction.create(Code.D3NOW_PAVGUSB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pavgusb_mm_m() {
		testAssembler(c -> c.pavgusb(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PAVGUSB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pavgw_mm_mm() {
		testAssembler(c -> c.pavgw(mm2, mm3), Instruction.create(Code.PAVGW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pavgw_xmm_xmm() {
		testAssembler(c -> c.pavgw(xmm2, xmm3), Instruction.create(Code.PAVGW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pavgw_mm_m() {
		testAssembler(c -> c.pavgw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PAVGW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pavgw_xmm_m() {
		testAssembler(c -> c.pavgw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PAVGW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pblendvb_xmm_xmm() {
		testAssembler(c -> c.pblendvb(xmm2, xmm3), Instruction.create(Code.PBLENDVB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pblendvb_xmm_m() {
		testAssembler(c -> c.pblendvb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PBLENDVB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pblendw_xmm_xmm_i() {
		testAssembler(c -> c.pblendw(xmm2, xmm3, -5), Instruction.create(Code.PBLENDW_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void pblendw_xmm_m_i() {
		testAssembler(c -> c.pblendw(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.PBLENDW_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void pclmulhqhqdq_xmm_xmm() {
		testAssembler(c -> c.pclmulhqhqdq(xmm2, xmm3), Instruction.create(Code.PCLMULQDQ_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 17));
	}

	@Test
	void pclmulhqhqdq_xmm_m() {
		testAssembler(c -> c.pclmulhqhqdq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCLMULQDQ_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17));
	}

	@Test
	void pclmulhqlqdq_xmm_xmm() {
		testAssembler(c -> c.pclmulhqlqdq(xmm2, xmm3), Instruction.create(Code.PCLMULQDQ_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 1));
	}

	@Test
	void pclmulhqlqdq_xmm_m() {
		testAssembler(c -> c.pclmulhqlqdq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCLMULQDQ_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void pclmullqhqdq_xmm_xmm() {
		testAssembler(c -> c.pclmullqhqdq(xmm2, xmm3), Instruction.create(Code.PCLMULQDQ_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 16));
	}

	@Test
	void pclmullqhqdq_xmm_m() {
		testAssembler(c -> c.pclmullqhqdq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCLMULQDQ_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16));
	}

	@Test
	void pclmullqlqdq_xmm_xmm() {
		testAssembler(c -> c.pclmullqlqdq(xmm2, xmm3), Instruction.create(Code.PCLMULQDQ_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 0));
	}

	@Test
	void pclmullqlqdq_xmm_m() {
		testAssembler(c -> c.pclmullqlqdq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCLMULQDQ_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void pclmulqdq_xmm_xmm_i() {
		testAssembler(c -> c.pclmulqdq(xmm2, xmm3, -5), Instruction.create(Code.PCLMULQDQ_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void pclmulqdq_xmm_m_i() {
		testAssembler(c -> c.pclmulqdq(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.PCLMULQDQ_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void pcmpeqb_mm_mm() {
		testAssembler(c -> c.pcmpeqb(mm2, mm3), Instruction.create(Code.PCMPEQB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pcmpeqb_xmm_xmm() {
		testAssembler(c -> c.pcmpeqb(xmm2, xmm3), Instruction.create(Code.PCMPEQB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pcmpeqb_mm_m() {
		testAssembler(c -> c.pcmpeqb(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCMPEQB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pcmpeqb_xmm_m() {
		testAssembler(c -> c.pcmpeqb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCMPEQB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pcmpeqd_mm_mm() {
		testAssembler(c -> c.pcmpeqd(mm2, mm3), Instruction.create(Code.PCMPEQD_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pcmpeqd_xmm_xmm() {
		testAssembler(c -> c.pcmpeqd(xmm2, xmm3), Instruction.create(Code.PCMPEQD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pcmpeqd_mm_m() {
		testAssembler(c -> c.pcmpeqd(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCMPEQD_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pcmpeqd_xmm_m() {
		testAssembler(c -> c.pcmpeqd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCMPEQD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pcmpeqq_xmm_xmm() {
		testAssembler(c -> c.pcmpeqq(xmm2, xmm3), Instruction.create(Code.PCMPEQQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pcmpeqq_xmm_m() {
		testAssembler(c -> c.pcmpeqq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCMPEQQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pcmpeqw_mm_mm() {
		testAssembler(c -> c.pcmpeqw(mm2, mm3), Instruction.create(Code.PCMPEQW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pcmpeqw_xmm_xmm() {
		testAssembler(c -> c.pcmpeqw(xmm2, xmm3), Instruction.create(Code.PCMPEQW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pcmpeqw_mm_m() {
		testAssembler(c -> c.pcmpeqw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCMPEQW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pcmpeqw_xmm_m() {
		testAssembler(c -> c.pcmpeqw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCMPEQW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pcmpestri_xmm_xmm_i() {
		testAssembler(c -> c.pcmpestri(xmm2, xmm3, -5), Instruction.create(Code.PCMPESTRI_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void pcmpestri_xmm_m_i() {
		testAssembler(c -> c.pcmpestri(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.PCMPESTRI_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void pcmpestrm_xmm_xmm_i() {
		testAssembler(c -> c.pcmpestrm(xmm2, xmm3, -5), Instruction.create(Code.PCMPESTRM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void pcmpestrm_xmm_m_i() {
		testAssembler(c -> c.pcmpestrm(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.PCMPESTRM_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void pcmpgtb_mm_mm() {
		testAssembler(c -> c.pcmpgtb(mm2, mm3), Instruction.create(Code.PCMPGTB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pcmpgtb_xmm_xmm() {
		testAssembler(c -> c.pcmpgtb(xmm2, xmm3), Instruction.create(Code.PCMPGTB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pcmpgtb_mm_m() {
		testAssembler(c -> c.pcmpgtb(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCMPGTB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pcmpgtb_xmm_m() {
		testAssembler(c -> c.pcmpgtb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCMPGTB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pcmpgtd_mm_mm() {
		testAssembler(c -> c.pcmpgtd(mm2, mm3), Instruction.create(Code.PCMPGTD_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pcmpgtd_xmm_xmm() {
		testAssembler(c -> c.pcmpgtd(xmm2, xmm3), Instruction.create(Code.PCMPGTD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pcmpgtd_mm_m() {
		testAssembler(c -> c.pcmpgtd(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCMPGTD_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pcmpgtd_xmm_m() {
		testAssembler(c -> c.pcmpgtd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCMPGTD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pcmpgtq_xmm_xmm() {
		testAssembler(c -> c.pcmpgtq(xmm2, xmm3), Instruction.create(Code.PCMPGTQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pcmpgtq_xmm_m() {
		testAssembler(c -> c.pcmpgtq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCMPGTQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pcmpgtw_mm_mm() {
		testAssembler(c -> c.pcmpgtw(mm2, mm3), Instruction.create(Code.PCMPGTW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pcmpgtw_xmm_xmm() {
		testAssembler(c -> c.pcmpgtw(xmm2, xmm3), Instruction.create(Code.PCMPGTW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pcmpgtw_mm_m() {
		testAssembler(c -> c.pcmpgtw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCMPGTW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pcmpgtw_xmm_m() {
		testAssembler(c -> c.pcmpgtw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PCMPGTW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pcmpistri_xmm_xmm_i() {
		testAssembler(c -> c.pcmpistri(xmm2, xmm3, -5), Instruction.create(Code.PCMPISTRI_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void pcmpistri_xmm_m_i() {
		testAssembler(c -> c.pcmpistri(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.PCMPISTRI_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void pcmpistrm_xmm_xmm_i() {
		testAssembler(c -> c.pcmpistrm(xmm2, xmm3, -5), Instruction.create(Code.PCMPISTRM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void pcmpistrm_xmm_m_i() {
		testAssembler(c -> c.pcmpistrm(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.PCMPISTRM_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void pcommit() {
		testAssembler(c -> c.pcommit(), Instruction.create(Code.PCOMMIT), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.PCOMMIT);
	}

	@Test
	void pconfig() {
		testAssembler(c -> c.pconfig(), Instruction.create(Code.PCONFIG));
	}

	@Test
	void pdep_r32_r32_r32() {
		testAssembler(c -> c.pdep(edx, ebx, esp), Instruction.create(Code.VEX_PDEP_R32_R32_RM32, ICRegisters.edx, ICRegisters.ebx, ICRegisters.esp));
	}

	@Test
	void pdep_r32_r32_m() {
		testAssembler(c -> c.pdep(edx, ebx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_PDEP_R32_R32_RM32, ICRegisters.edx, ICRegisters.ebx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pdistib_mm_m() {
		testAssembler(c -> c.pdistib(mm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.PDISTIB_MM_M64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void pext_r32_r32_r32() {
		testAssembler(c -> c.pext(edx, ebx, esp), Instruction.create(Code.VEX_PEXT_R32_R32_RM32, ICRegisters.edx, ICRegisters.ebx, ICRegisters.esp));
	}

	@Test
	void pext_r32_r32_m() {
		testAssembler(c -> c.pext(edx, ebx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_PEXT_R32_R32_RM32, ICRegisters.edx, ICRegisters.ebx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pextrb_r32_xmm_i() {
		testAssembler(c -> c.pextrb(edx, xmm3, -5), Instruction.create(Code.PEXTRB_R32M8_XMM_IMM8, ICRegisters.edx, ICRegisters.xmm3, -5));
	}

	@Test
	void pextrb_m_xmm_i() {
		testAssembler(c -> c.pextrb(dword_ptr(0x0L).base(ecx), xmm3, -5), Instruction.create(Code.PEXTRB_R32M8_XMM_IMM8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3, -5));
	}

	@Test
	void pextrd_r32_xmm_i() {
		testAssembler(c -> c.pextrd(edx, xmm3, -5), Instruction.create(Code.PEXTRD_RM32_XMM_IMM8, ICRegisters.edx, ICRegisters.xmm3, -5));
	}

	@Test
	void pextrd_m_xmm_i() {
		testAssembler(c -> c.pextrd(dword_ptr(0x0L).base(ecx), xmm3, -5), Instruction.create(Code.PEXTRD_RM32_XMM_IMM8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3, -5));
	}

	@Test
	void pextrw_r32_mm_i() {
		testAssembler(c -> c.pextrw(edx, mm3, -5), Instruction.create(Code.PEXTRW_R32_MM_IMM8, ICRegisters.edx, ICRegisters.mm3, -5));
	}

	@Test
	void pextrw_r32_xmm_i() {
		testAssembler(c -> c.pextrw(edx, xmm3, -5), Instruction.create(Code.PEXTRW_R32_XMM_IMM8, ICRegisters.edx, ICRegisters.xmm3, -5));
	}

	@Test
	void pextrw_m_xmm_i() {
		testAssembler(c -> c.pextrw(dword_ptr(0x0L).base(ecx), xmm3, -5), Instruction.create(Code.PEXTRW_R32M16_XMM_IMM8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3, -5));
	}

	@Test
	void pf2id_mm_mm() {
		testAssembler(c -> c.pf2id(mm2, mm3), Instruction.create(Code.D3NOW_PF2ID_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pf2id_mm_m() {
		testAssembler(c -> c.pf2id(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PF2ID_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pf2iw_mm_mm() {
		testAssembler(c -> c.pf2iw(mm2, mm3), Instruction.create(Code.D3NOW_PF2IW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pf2iw_mm_m() {
		testAssembler(c -> c.pf2iw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PF2IW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pfacc_mm_mm() {
		testAssembler(c -> c.pfacc(mm2, mm3), Instruction.create(Code.D3NOW_PFACC_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pfacc_mm_m() {
		testAssembler(c -> c.pfacc(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFACC_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pfadd_mm_mm() {
		testAssembler(c -> c.pfadd(mm2, mm3), Instruction.create(Code.D3NOW_PFADD_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pfadd_mm_m() {
		testAssembler(c -> c.pfadd(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFADD_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pfcmpeq_mm_mm() {
		testAssembler(c -> c.pfcmpeq(mm2, mm3), Instruction.create(Code.D3NOW_PFCMPEQ_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pfcmpeq_mm_m() {
		testAssembler(c -> c.pfcmpeq(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFCMPEQ_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pfcmpge_mm_mm() {
		testAssembler(c -> c.pfcmpge(mm2, mm3), Instruction.create(Code.D3NOW_PFCMPGE_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pfcmpge_mm_m() {
		testAssembler(c -> c.pfcmpge(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFCMPGE_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pfcmpgt_mm_mm() {
		testAssembler(c -> c.pfcmpgt(mm2, mm3), Instruction.create(Code.D3NOW_PFCMPGT_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pfcmpgt_mm_m() {
		testAssembler(c -> c.pfcmpgt(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFCMPGT_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pfmax_mm_mm() {
		testAssembler(c -> c.pfmax(mm2, mm3), Instruction.create(Code.D3NOW_PFMAX_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pfmax_mm_m() {
		testAssembler(c -> c.pfmax(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFMAX_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pfmin_mm_mm() {
		testAssembler(c -> c.pfmin(mm2, mm3), Instruction.create(Code.D3NOW_PFMIN_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pfmin_mm_m() {
		testAssembler(c -> c.pfmin(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFMIN_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pfmul_mm_mm() {
		testAssembler(c -> c.pfmul(mm2, mm3), Instruction.create(Code.D3NOW_PFMUL_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pfmul_mm_m() {
		testAssembler(c -> c.pfmul(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFMUL_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pfnacc_mm_mm() {
		testAssembler(c -> c.pfnacc(mm2, mm3), Instruction.create(Code.D3NOW_PFNACC_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pfnacc_mm_m() {
		testAssembler(c -> c.pfnacc(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFNACC_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pfpnacc_mm_mm() {
		testAssembler(c -> c.pfpnacc(mm2, mm3), Instruction.create(Code.D3NOW_PFPNACC_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pfpnacc_mm_m() {
		testAssembler(c -> c.pfpnacc(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFPNACC_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pfrcp_mm_mm() {
		testAssembler(c -> c.pfrcp(mm2, mm3), Instruction.create(Code.D3NOW_PFRCP_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pfrcp_mm_m() {
		testAssembler(c -> c.pfrcp(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFRCP_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pfrcpit1_mm_mm() {
		testAssembler(c -> c.pfrcpit1(mm2, mm3), Instruction.create(Code.D3NOW_PFRCPIT1_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pfrcpit1_mm_m() {
		testAssembler(c -> c.pfrcpit1(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFRCPIT1_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pfrcpit2_mm_mm() {
		testAssembler(c -> c.pfrcpit2(mm2, mm3), Instruction.create(Code.D3NOW_PFRCPIT2_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pfrcpit2_mm_m() {
		testAssembler(c -> c.pfrcpit2(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFRCPIT2_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pfrcpv_mm_mm() {
		testAssembler(c -> c.pfrcpv(mm2, mm3), Instruction.create(Code.D3NOW_PFRCPV_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void pfrcpv_mm_m() {
		testAssembler(c -> c.pfrcpv(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFRCPV_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void pfrsqit1_mm_mm() {
		testAssembler(c -> c.pfrsqit1(mm2, mm3), Instruction.create(Code.D3NOW_PFRSQIT1_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pfrsqit1_mm_m() {
		testAssembler(c -> c.pfrsqit1(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFRSQIT1_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pfrsqrt_mm_mm() {
		testAssembler(c -> c.pfrsqrt(mm2, mm3), Instruction.create(Code.D3NOW_PFRSQRT_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pfrsqrt_mm_m() {
		testAssembler(c -> c.pfrsqrt(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFRSQRT_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pfrsqrtv_mm_mm() {
		testAssembler(c -> c.pfrsqrtv(mm2, mm3), Instruction.create(Code.D3NOW_PFRSQRTV_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void pfrsqrtv_mm_m() {
		testAssembler(c -> c.pfrsqrtv(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFRSQRTV_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void pfsub_mm_mm() {
		testAssembler(c -> c.pfsub(mm2, mm3), Instruction.create(Code.D3NOW_PFSUB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pfsub_mm_m() {
		testAssembler(c -> c.pfsub(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFSUB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pfsubr_mm_mm() {
		testAssembler(c -> c.pfsubr(mm2, mm3), Instruction.create(Code.D3NOW_PFSUBR_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pfsubr_mm_m() {
		testAssembler(c -> c.pfsubr(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PFSUBR_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void phaddd_mm_mm() {
		testAssembler(c -> c.phaddd(mm2, mm3), Instruction.create(Code.PHADDD_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void phaddd_xmm_xmm() {
		testAssembler(c -> c.phaddd(xmm2, xmm3), Instruction.create(Code.PHADDD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void phaddd_mm_m() {
		testAssembler(c -> c.phaddd(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PHADDD_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void phaddd_xmm_m() {
		testAssembler(c -> c.phaddd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PHADDD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void phaddsw_mm_mm() {
		testAssembler(c -> c.phaddsw(mm2, mm3), Instruction.create(Code.PHADDSW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void phaddsw_xmm_xmm() {
		testAssembler(c -> c.phaddsw(xmm2, xmm3), Instruction.create(Code.PHADDSW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void phaddsw_mm_m() {
		testAssembler(c -> c.phaddsw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PHADDSW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void phaddsw_xmm_m() {
		testAssembler(c -> c.phaddsw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PHADDSW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void phaddw_mm_mm() {
		testAssembler(c -> c.phaddw(mm2, mm3), Instruction.create(Code.PHADDW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void phaddw_xmm_xmm() {
		testAssembler(c -> c.phaddw(xmm2, xmm3), Instruction.create(Code.PHADDW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void phaddw_mm_m() {
		testAssembler(c -> c.phaddw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PHADDW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void phaddw_xmm_m() {
		testAssembler(c -> c.phaddw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PHADDW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void phminposuw_xmm_xmm() {
		testAssembler(c -> c.phminposuw(xmm2, xmm3), Instruction.create(Code.PHMINPOSUW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void phminposuw_xmm_m() {
		testAssembler(c -> c.phminposuw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PHMINPOSUW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void phsubd_mm_mm() {
		testAssembler(c -> c.phsubd(mm2, mm3), Instruction.create(Code.PHSUBD_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void phsubd_xmm_xmm() {
		testAssembler(c -> c.phsubd(xmm2, xmm3), Instruction.create(Code.PHSUBD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void phsubd_mm_m() {
		testAssembler(c -> c.phsubd(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PHSUBD_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void phsubd_xmm_m() {
		testAssembler(c -> c.phsubd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PHSUBD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void phsubsw_mm_mm() {
		testAssembler(c -> c.phsubsw(mm2, mm3), Instruction.create(Code.PHSUBSW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void phsubsw_xmm_xmm() {
		testAssembler(c -> c.phsubsw(xmm2, xmm3), Instruction.create(Code.PHSUBSW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void phsubsw_mm_m() {
		testAssembler(c -> c.phsubsw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PHSUBSW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void phsubsw_xmm_m() {
		testAssembler(c -> c.phsubsw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PHSUBSW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void phsubw_mm_mm() {
		testAssembler(c -> c.phsubw(mm2, mm3), Instruction.create(Code.PHSUBW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void phsubw_xmm_xmm() {
		testAssembler(c -> c.phsubw(xmm2, xmm3), Instruction.create(Code.PHSUBW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void phsubw_mm_m() {
		testAssembler(c -> c.phsubw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PHSUBW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void phsubw_xmm_m() {
		testAssembler(c -> c.phsubw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PHSUBW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pi2fd_mm_mm() {
		testAssembler(c -> c.pi2fd(mm2, mm3), Instruction.create(Code.D3NOW_PI2FD_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pi2fd_mm_m() {
		testAssembler(c -> c.pi2fd(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PI2FD_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pi2fw_mm_mm() {
		testAssembler(c -> c.pi2fw(mm2, mm3), Instruction.create(Code.D3NOW_PI2FW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pi2fw_mm_m() {
		testAssembler(c -> c.pi2fw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PI2FW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pinsrb_xmm_r32_i() {
		testAssembler(c -> c.pinsrb(xmm2, ebx, -5), Instruction.create(Code.PINSRB_XMM_R32M8_IMM8, ICRegisters.xmm2, ICRegisters.ebx, -5));
	}

	@Test
	void pinsrb_xmm_m_i() {
		testAssembler(c -> c.pinsrb(xmm2, dword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.PINSRB_XMM_R32M8_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void pinsrd_xmm_r32_i() {
		testAssembler(c -> c.pinsrd(xmm2, ebx, -5), Instruction.create(Code.PINSRD_XMM_RM32_IMM8, ICRegisters.xmm2, ICRegisters.ebx, -5));
	}

	@Test
	void pinsrd_xmm_m_i() {
		testAssembler(c -> c.pinsrd(xmm2, dword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.PINSRD_XMM_RM32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void pinsrw_mm_r32_i() {
		testAssembler(c -> c.pinsrw(mm2, ebx, -5), Instruction.create(Code.PINSRW_MM_R32M16_IMM8, ICRegisters.mm2, ICRegisters.ebx, -5));
	}

	@Test
	void pinsrw_xmm_r32_i() {
		testAssembler(c -> c.pinsrw(xmm2, ebx, -5), Instruction.create(Code.PINSRW_XMM_R32M16_IMM8, ICRegisters.xmm2, ICRegisters.ebx, -5));
	}

	@Test
	void pinsrw_mm_m_i() {
		testAssembler(c -> c.pinsrw(mm2, dword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.PINSRW_MM_R32M16_IMM8, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void pinsrw_xmm_m_i() {
		testAssembler(c -> c.pinsrw(xmm2, dword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.PINSRW_XMM_R32M16_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void pmachriw_mm_m() {
		testAssembler(c -> c.pmachriw(mm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.PMACHRIW_MM_M64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void pmaddubsw_mm_mm() {
		testAssembler(c -> c.pmaddubsw(mm2, mm3), Instruction.create(Code.PMADDUBSW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pmaddubsw_xmm_xmm() {
		testAssembler(c -> c.pmaddubsw(xmm2, xmm3), Instruction.create(Code.PMADDUBSW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmaddubsw_mm_m() {
		testAssembler(c -> c.pmaddubsw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMADDUBSW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmaddubsw_xmm_m() {
		testAssembler(c -> c.pmaddubsw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMADDUBSW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmaddwd_mm_mm() {
		testAssembler(c -> c.pmaddwd(mm2, mm3), Instruction.create(Code.PMADDWD_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pmaddwd_xmm_xmm() {
		testAssembler(c -> c.pmaddwd(xmm2, xmm3), Instruction.create(Code.PMADDWD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmaddwd_mm_m() {
		testAssembler(c -> c.pmaddwd(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMADDWD_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmaddwd_xmm_m() {
		testAssembler(c -> c.pmaddwd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMADDWD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmagw_mm_mm() {
		testAssembler(c -> c.pmagw(mm2, mm3), Instruction.create(Code.PMAGW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void pmagw_mm_m() {
		testAssembler(c -> c.pmagw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMAGW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void pmaxsb_xmm_xmm() {
		testAssembler(c -> c.pmaxsb(xmm2, xmm3), Instruction.create(Code.PMAXSB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmaxsb_xmm_m() {
		testAssembler(c -> c.pmaxsb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMAXSB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmaxsd_xmm_xmm() {
		testAssembler(c -> c.pmaxsd(xmm2, xmm3), Instruction.create(Code.PMAXSD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmaxsd_xmm_m() {
		testAssembler(c -> c.pmaxsd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMAXSD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmaxsw_mm_mm() {
		testAssembler(c -> c.pmaxsw(mm2, mm3), Instruction.create(Code.PMAXSW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pmaxsw_xmm_xmm() {
		testAssembler(c -> c.pmaxsw(xmm2, xmm3), Instruction.create(Code.PMAXSW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmaxsw_mm_m() {
		testAssembler(c -> c.pmaxsw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMAXSW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmaxsw_xmm_m() {
		testAssembler(c -> c.pmaxsw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMAXSW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmaxub_mm_mm() {
		testAssembler(c -> c.pmaxub(mm2, mm3), Instruction.create(Code.PMAXUB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pmaxub_xmm_xmm() {
		testAssembler(c -> c.pmaxub(xmm2, xmm3), Instruction.create(Code.PMAXUB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmaxub_mm_m() {
		testAssembler(c -> c.pmaxub(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMAXUB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmaxub_xmm_m() {
		testAssembler(c -> c.pmaxub(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMAXUB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmaxud_xmm_xmm() {
		testAssembler(c -> c.pmaxud(xmm2, xmm3), Instruction.create(Code.PMAXUD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmaxud_xmm_m() {
		testAssembler(c -> c.pmaxud(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMAXUD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmaxuw_xmm_xmm() {
		testAssembler(c -> c.pmaxuw(xmm2, xmm3), Instruction.create(Code.PMAXUW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmaxuw_xmm_m() {
		testAssembler(c -> c.pmaxuw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMAXUW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pminsb_xmm_xmm() {
		testAssembler(c -> c.pminsb(xmm2, xmm3), Instruction.create(Code.PMINSB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pminsb_xmm_m() {
		testAssembler(c -> c.pminsb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMINSB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pminsd_xmm_xmm() {
		testAssembler(c -> c.pminsd(xmm2, xmm3), Instruction.create(Code.PMINSD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pminsd_xmm_m() {
		testAssembler(c -> c.pminsd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMINSD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pminsw_mm_mm() {
		testAssembler(c -> c.pminsw(mm2, mm3), Instruction.create(Code.PMINSW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pminsw_xmm_xmm() {
		testAssembler(c -> c.pminsw(xmm2, xmm3), Instruction.create(Code.PMINSW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pminsw_mm_m() {
		testAssembler(c -> c.pminsw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMINSW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pminsw_xmm_m() {
		testAssembler(c -> c.pminsw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMINSW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pminub_mm_mm() {
		testAssembler(c -> c.pminub(mm2, mm3), Instruction.create(Code.PMINUB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pminub_xmm_xmm() {
		testAssembler(c -> c.pminub(xmm2, xmm3), Instruction.create(Code.PMINUB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pminub_mm_m() {
		testAssembler(c -> c.pminub(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMINUB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pminub_xmm_m() {
		testAssembler(c -> c.pminub(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMINUB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pminud_xmm_xmm() {
		testAssembler(c -> c.pminud(xmm2, xmm3), Instruction.create(Code.PMINUD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pminud_xmm_m() {
		testAssembler(c -> c.pminud(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMINUD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pminuw_xmm_xmm() {
		testAssembler(c -> c.pminuw(xmm2, xmm3), Instruction.create(Code.PMINUW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pminuw_xmm_m() {
		testAssembler(c -> c.pminuw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMINUW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmovmskb_r32_mm() {
		testAssembler(c -> c.pmovmskb(edx, mm3), Instruction.create(Code.PMOVMSKB_R32_MM, ICRegisters.edx, ICRegisters.mm3));
	}

	@Test
	void pmovmskb_r32_xmm() {
		testAssembler(c -> c.pmovmskb(edx, xmm3), Instruction.create(Code.PMOVMSKB_R32_XMM, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void pmovsxbd_xmm_xmm() {
		testAssembler(c -> c.pmovsxbd(xmm2, xmm3), Instruction.create(Code.PMOVSXBD_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmovsxbd_xmm_m() {
		testAssembler(c -> c.pmovsxbd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMOVSXBD_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmovsxbq_xmm_xmm() {
		testAssembler(c -> c.pmovsxbq(xmm2, xmm3), Instruction.create(Code.PMOVSXBQ_XMM_XMMM16, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmovsxbq_xmm_m() {
		testAssembler(c -> c.pmovsxbq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMOVSXBQ_XMM_XMMM16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmovsxbw_xmm_xmm() {
		testAssembler(c -> c.pmovsxbw(xmm2, xmm3), Instruction.create(Code.PMOVSXBW_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmovsxbw_xmm_m() {
		testAssembler(c -> c.pmovsxbw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMOVSXBW_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmovsxdq_xmm_xmm() {
		testAssembler(c -> c.pmovsxdq(xmm2, xmm3), Instruction.create(Code.PMOVSXDQ_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmovsxdq_xmm_m() {
		testAssembler(c -> c.pmovsxdq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMOVSXDQ_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmovsxwd_xmm_xmm() {
		testAssembler(c -> c.pmovsxwd(xmm2, xmm3), Instruction.create(Code.PMOVSXWD_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmovsxwd_xmm_m() {
		testAssembler(c -> c.pmovsxwd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMOVSXWD_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmovsxwq_xmm_xmm() {
		testAssembler(c -> c.pmovsxwq(xmm2, xmm3), Instruction.create(Code.PMOVSXWQ_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmovsxwq_xmm_m() {
		testAssembler(c -> c.pmovsxwq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMOVSXWQ_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmovzxbd_xmm_xmm() {
		testAssembler(c -> c.pmovzxbd(xmm2, xmm3), Instruction.create(Code.PMOVZXBD_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmovzxbd_xmm_m() {
		testAssembler(c -> c.pmovzxbd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMOVZXBD_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmovzxbq_xmm_xmm() {
		testAssembler(c -> c.pmovzxbq(xmm2, xmm3), Instruction.create(Code.PMOVZXBQ_XMM_XMMM16, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmovzxbq_xmm_m() {
		testAssembler(c -> c.pmovzxbq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMOVZXBQ_XMM_XMMM16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmovzxbw_xmm_xmm() {
		testAssembler(c -> c.pmovzxbw(xmm2, xmm3), Instruction.create(Code.PMOVZXBW_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmovzxbw_xmm_m() {
		testAssembler(c -> c.pmovzxbw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMOVZXBW_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmovzxdq_xmm_xmm() {
		testAssembler(c -> c.pmovzxdq(xmm2, xmm3), Instruction.create(Code.PMOVZXDQ_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmovzxdq_xmm_m() {
		testAssembler(c -> c.pmovzxdq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMOVZXDQ_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmovzxwd_xmm_xmm() {
		testAssembler(c -> c.pmovzxwd(xmm2, xmm3), Instruction.create(Code.PMOVZXWD_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmovzxwd_xmm_m() {
		testAssembler(c -> c.pmovzxwd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMOVZXWD_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmovzxwq_xmm_xmm() {
		testAssembler(c -> c.pmovzxwq(xmm2, xmm3), Instruction.create(Code.PMOVZXWQ_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmovzxwq_xmm_m() {
		testAssembler(c -> c.pmovzxwq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMOVZXWQ_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmuldq_xmm_xmm() {
		testAssembler(c -> c.pmuldq(xmm2, xmm3), Instruction.create(Code.PMULDQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmuldq_xmm_m() {
		testAssembler(c -> c.pmuldq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMULDQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmulhriw_mm_mm() {
		testAssembler(c -> c.pmulhriw(mm2, mm3), Instruction.create(Code.PMULHRIW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void pmulhriw_mm_m() {
		testAssembler(c -> c.pmulhriw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMULHRIW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void pmulhrsw_mm_mm() {
		testAssembler(c -> c.pmulhrsw(mm2, mm3), Instruction.create(Code.PMULHRSW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pmulhrsw_xmm_xmm() {
		testAssembler(c -> c.pmulhrsw(xmm2, xmm3), Instruction.create(Code.PMULHRSW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmulhrsw_mm_m() {
		testAssembler(c -> c.pmulhrsw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMULHRSW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmulhrsw_xmm_m() {
		testAssembler(c -> c.pmulhrsw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMULHRSW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmulhrw_mm_mm() {
		testAssembler(c -> c.pmulhrw(mm2, mm3), Instruction.create(Code.D3NOW_PMULHRW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pmulhrw_mm_m() {
		testAssembler(c -> c.pmulhrw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PMULHRW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmulhrw_cyrix_mm_mm() {
		testAssembler(c -> c.pmulhrw_cyrix(mm2, mm3), Instruction.create(Code.PMULHRW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void pmulhrw_cyrix_mm_m() {
		testAssembler(c -> c.pmulhrw_cyrix(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMULHRW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void pmulhuw_mm_mm() {
		testAssembler(c -> c.pmulhuw(mm2, mm3), Instruction.create(Code.PMULHUW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pmulhuw_xmm_xmm() {
		testAssembler(c -> c.pmulhuw(xmm2, xmm3), Instruction.create(Code.PMULHUW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmulhuw_mm_m() {
		testAssembler(c -> c.pmulhuw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMULHUW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmulhuw_xmm_m() {
		testAssembler(c -> c.pmulhuw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMULHUW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmulhw_mm_mm() {
		testAssembler(c -> c.pmulhw(mm2, mm3), Instruction.create(Code.PMULHW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pmulhw_xmm_xmm() {
		testAssembler(c -> c.pmulhw(xmm2, xmm3), Instruction.create(Code.PMULHW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmulhw_mm_m() {
		testAssembler(c -> c.pmulhw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMULHW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmulhw_xmm_m() {
		testAssembler(c -> c.pmulhw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMULHW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmulld_xmm_xmm() {
		testAssembler(c -> c.pmulld(xmm2, xmm3), Instruction.create(Code.PMULLD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmulld_xmm_m() {
		testAssembler(c -> c.pmulld(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMULLD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmullw_mm_mm() {
		testAssembler(c -> c.pmullw(mm2, mm3), Instruction.create(Code.PMULLW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pmullw_xmm_xmm() {
		testAssembler(c -> c.pmullw(xmm2, xmm3), Instruction.create(Code.PMULLW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmullw_mm_m() {
		testAssembler(c -> c.pmullw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMULLW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmullw_xmm_m() {
		testAssembler(c -> c.pmullw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMULLW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmuludq_mm_mm() {
		testAssembler(c -> c.pmuludq(mm2, mm3), Instruction.create(Code.PMULUDQ_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pmuludq_xmm_xmm() {
		testAssembler(c -> c.pmuludq(xmm2, xmm3), Instruction.create(Code.PMULUDQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pmuludq_mm_m() {
		testAssembler(c -> c.pmuludq(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMULUDQ_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmuludq_xmm_m() {
		testAssembler(c -> c.pmuludq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PMULUDQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pmvgezb_mm_m() {
		testAssembler(c -> c.pmvgezb(mm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.PMVGEZB_MM_M64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void pmvlzb_mm_m() {
		testAssembler(c -> c.pmvlzb(mm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.PMVLZB_MM_M64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void pmvnzb_mm_m() {
		testAssembler(c -> c.pmvnzb(mm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.PMVNZB_MM_M64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void pmvzb_mm_m() {
		testAssembler(c -> c.pmvzb(mm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.PMVZB_MM_M64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void pop_r16() {
		testAssembler(c -> c.pop(dx), Instruction.create(Code.POP_R16, ICRegisters.dx));
	}

	@Test
	void pop_r32() {
		testAssembler(c -> c.pop(edx), Instruction.create(Code.POP_R32, ICRegisters.edx));
	}

	@Test
	void pop_seg() {
		{ /* if (dst.getRegister() == Register.FS) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { /* if (getBitness() >= 32) */
				testAssembler(c -> c.pop(fs), Instruction.create(Code.POPD_FS, ICRegisters.fs));
			} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (dst.getRegister() == Register.GS) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { /* if (getBitness() >= 32) */
				testAssembler(c -> c.pop(gs), Instruction.create(Code.POPD_GS, ICRegisters.gs));
			} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (dst.getRegister() == Register.ES) */
			{ /* if (getBitness() >= 32) */
				testAssembler(c -> c.pop(es), Instruction.create(Code.POPD_ES, ICRegisters.es));
			} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (dst.getRegister() == Register.SS) */
			{ /* if (getBitness() >= 32) */
				testAssembler(c -> c.pop(ss), Instruction.create(Code.POPD_SS, ICRegisters.ss));
			} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (dst.getRegister() == Register.DS) */
			{ /* if (getBitness() >= 32) */
				testAssembler(c -> c.pop(ds), Instruction.create(Code.POPD_DS, ICRegisters.ds));
			} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
		}
	}

	@Test
	void pop_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			// Skipping POP_RM64 - Not supported by current bitness
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.pop(dword_ptr(0x0L).base(edx)), Instruction.create(Code.POP_RM32, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.pop(word_ptr(0x0L).base(edx)), Instruction.create(Code.POP_RM16, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.pop(zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.POP_RM16, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void popa() {
		testAssembler(c -> c.popa(), Instruction.create(Code.POPAW));
	}

	@Test
	void popad() {
		testAssembler(c -> c.popad(), Instruction.create(Code.POPAD));
	}

	@Test
	void popcnt_r16_r16() {
		testAssembler(c -> c.popcnt(dx, bx), Instruction.create(Code.POPCNT_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void popcnt_r32_r32() {
		testAssembler(c -> c.popcnt(edx, ebx), Instruction.create(Code.POPCNT_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void popcnt_r16_m() {
		testAssembler(c -> c.popcnt(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.POPCNT_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void popcnt_r32_m() {
		testAssembler(c -> c.popcnt(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.POPCNT_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void popf() {
		testAssembler(c -> c.popf(), Instruction.create(Code.POPFW));
	}

	@Test
	void popfd() {
		testAssembler(c -> c.popfd(), Instruction.create(Code.POPFD));
	}

	@Test
	void por_mm_mm() {
		testAssembler(c -> c.por(mm2, mm3), Instruction.create(Code.POR_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void por_xmm_xmm() {
		testAssembler(c -> c.por(xmm2, xmm3), Instruction.create(Code.POR_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void por_mm_m() {
		testAssembler(c -> c.por(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.POR_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void por_xmm_m() {
		testAssembler(c -> c.por(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.POR_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void prefetch_m() {
		testAssembler(c -> c.prefetch(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.PREFETCH_M8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void prefetchit0_m() {
		testAssembler(c -> c.prefetchit0(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.PREFETCHIT0_M8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void prefetchit1_m() {
		testAssembler(c -> c.prefetchit1(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.PREFETCHIT1_M8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void prefetchnta_m() {
		testAssembler(c -> c.prefetchnta(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.PREFETCHNTA_M8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void prefetcht0_m() {
		testAssembler(c -> c.prefetcht0(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.PREFETCHT0_M8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void prefetcht1_m() {
		testAssembler(c -> c.prefetcht1(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.PREFETCHT1_M8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void prefetcht2_m() {
		testAssembler(c -> c.prefetcht2(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.PREFETCHT2_M8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void prefetchw_m() {
		testAssembler(c -> c.prefetchw(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.PREFETCHW_M8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void prefetchwt1_m() {
		testAssembler(c -> c.prefetchwt1(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.PREFETCHWT1_M8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psadbw_mm_mm() {
		testAssembler(c -> c.psadbw(mm2, mm3), Instruction.create(Code.PSADBW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psadbw_xmm_xmm() {
		testAssembler(c -> c.psadbw(xmm2, xmm3), Instruction.create(Code.PSADBW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psadbw_mm_m() {
		testAssembler(c -> c.psadbw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSADBW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psadbw_xmm_m() {
		testAssembler(c -> c.psadbw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSADBW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pshufb_mm_mm() {
		testAssembler(c -> c.pshufb(mm2, mm3), Instruction.create(Code.PSHUFB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pshufb_xmm_xmm() {
		testAssembler(c -> c.pshufb(xmm2, xmm3), Instruction.create(Code.PSHUFB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pshufb_mm_m() {
		testAssembler(c -> c.pshufb(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSHUFB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pshufb_xmm_m() {
		testAssembler(c -> c.pshufb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSHUFB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pshufd_xmm_xmm_i() {
		testAssembler(c -> c.pshufd(xmm2, xmm3, -5), Instruction.create(Code.PSHUFD_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void pshufd_xmm_m_i() {
		testAssembler(c -> c.pshufd(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.PSHUFD_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void pshufhw_xmm_xmm_i() {
		testAssembler(c -> c.pshufhw(xmm2, xmm3, -5), Instruction.create(Code.PSHUFHW_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void pshufhw_xmm_m_i() {
		testAssembler(c -> c.pshufhw(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.PSHUFHW_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void pshuflw_xmm_xmm_i() {
		testAssembler(c -> c.pshuflw(xmm2, xmm3, -5), Instruction.create(Code.PSHUFLW_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void pshuflw_xmm_m_i() {
		testAssembler(c -> c.pshuflw(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.PSHUFLW_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void pshufw_mm_mm_i() {
		testAssembler(c -> c.pshufw(mm2, mm3, -5), Instruction.create(Code.PSHUFW_MM_MMM64_IMM8, ICRegisters.mm2, ICRegisters.mm3, -5));
	}

	@Test
	void pshufw_mm_m_i() {
		testAssembler(c -> c.pshufw(mm2, qword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.PSHUFW_MM_MMM64_IMM8, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void psignb_mm_mm() {
		testAssembler(c -> c.psignb(mm2, mm3), Instruction.create(Code.PSIGNB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psignb_xmm_xmm() {
		testAssembler(c -> c.psignb(xmm2, xmm3), Instruction.create(Code.PSIGNB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psignb_mm_m() {
		testAssembler(c -> c.psignb(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSIGNB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psignb_xmm_m() {
		testAssembler(c -> c.psignb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSIGNB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psignd_mm_mm() {
		testAssembler(c -> c.psignd(mm2, mm3), Instruction.create(Code.PSIGND_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psignd_xmm_xmm() {
		testAssembler(c -> c.psignd(xmm2, xmm3), Instruction.create(Code.PSIGND_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psignd_mm_m() {
		testAssembler(c -> c.psignd(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSIGND_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psignd_xmm_m() {
		testAssembler(c -> c.psignd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSIGND_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psignw_mm_mm() {
		testAssembler(c -> c.psignw(mm2, mm3), Instruction.create(Code.PSIGNW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psignw_xmm_xmm() {
		testAssembler(c -> c.psignw(xmm2, xmm3), Instruction.create(Code.PSIGNW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psignw_mm_m() {
		testAssembler(c -> c.psignw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSIGNW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psignw_xmm_m() {
		testAssembler(c -> c.psignw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSIGNW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pslld_mm_mm() {
		testAssembler(c -> c.pslld(mm2, mm3), Instruction.create(Code.PSLLD_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pslld_xmm_xmm() {
		testAssembler(c -> c.pslld(xmm2, xmm3), Instruction.create(Code.PSLLD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pslld_mm_m() {
		testAssembler(c -> c.pslld(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSLLD_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pslld_xmm_m() {
		testAssembler(c -> c.pslld(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSLLD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pslld_mm_i() {
		testAssembler(c -> c.pslld(mm2, -5), Instruction.create(Code.PSLLD_MM_IMM8, ICRegisters.mm2, -5));
	}

	@Test
	void pslld_xmm_i() {
		testAssembler(c -> c.pslld(xmm2, -5), Instruction.create(Code.PSLLD_XMM_IMM8, ICRegisters.xmm2, -5));
	}

	@Test
	void pslldq_xmm_i() {
		testAssembler(c -> c.pslldq(xmm2, -5), Instruction.create(Code.PSLLDQ_XMM_IMM8, ICRegisters.xmm2, -5));
	}

	@Test
	void psllq_mm_mm() {
		testAssembler(c -> c.psllq(mm2, mm3), Instruction.create(Code.PSLLQ_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psllq_xmm_xmm() {
		testAssembler(c -> c.psllq(xmm2, xmm3), Instruction.create(Code.PSLLQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psllq_mm_m() {
		testAssembler(c -> c.psllq(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSLLQ_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psllq_xmm_m() {
		testAssembler(c -> c.psllq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSLLQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psllq_mm_i() {
		testAssembler(c -> c.psllq(mm2, -5), Instruction.create(Code.PSLLQ_MM_IMM8, ICRegisters.mm2, -5));
	}

	@Test
	void psllq_xmm_i() {
		testAssembler(c -> c.psllq(xmm2, -5), Instruction.create(Code.PSLLQ_XMM_IMM8, ICRegisters.xmm2, -5));
	}

	@Test
	void psllw_mm_mm() {
		testAssembler(c -> c.psllw(mm2, mm3), Instruction.create(Code.PSLLW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psllw_xmm_xmm() {
		testAssembler(c -> c.psllw(xmm2, xmm3), Instruction.create(Code.PSLLW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psllw_mm_m() {
		testAssembler(c -> c.psllw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSLLW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psllw_xmm_m() {
		testAssembler(c -> c.psllw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSLLW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psllw_mm_i() {
		testAssembler(c -> c.psllw(mm2, -5), Instruction.create(Code.PSLLW_MM_IMM8, ICRegisters.mm2, -5));
	}

	@Test
	void psllw_xmm_i() {
		testAssembler(c -> c.psllw(xmm2, -5), Instruction.create(Code.PSLLW_XMM_IMM8, ICRegisters.xmm2, -5));
	}

	@Test
	void psrad_mm_mm() {
		testAssembler(c -> c.psrad(mm2, mm3), Instruction.create(Code.PSRAD_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psrad_xmm_xmm() {
		testAssembler(c -> c.psrad(xmm2, xmm3), Instruction.create(Code.PSRAD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psrad_mm_m() {
		testAssembler(c -> c.psrad(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSRAD_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psrad_xmm_m() {
		testAssembler(c -> c.psrad(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSRAD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psrad_mm_i() {
		testAssembler(c -> c.psrad(mm2, -5), Instruction.create(Code.PSRAD_MM_IMM8, ICRegisters.mm2, -5));
	}

	@Test
	void psrad_xmm_i() {
		testAssembler(c -> c.psrad(xmm2, -5), Instruction.create(Code.PSRAD_XMM_IMM8, ICRegisters.xmm2, -5));
	}

	@Test
	void psraw_mm_mm() {
		testAssembler(c -> c.psraw(mm2, mm3), Instruction.create(Code.PSRAW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psraw_xmm_xmm() {
		testAssembler(c -> c.psraw(xmm2, xmm3), Instruction.create(Code.PSRAW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psraw_mm_m() {
		testAssembler(c -> c.psraw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSRAW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psraw_xmm_m() {
		testAssembler(c -> c.psraw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSRAW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psraw_mm_i() {
		testAssembler(c -> c.psraw(mm2, -5), Instruction.create(Code.PSRAW_MM_IMM8, ICRegisters.mm2, -5));
	}

	@Test
	void psraw_xmm_i() {
		testAssembler(c -> c.psraw(xmm2, -5), Instruction.create(Code.PSRAW_XMM_IMM8, ICRegisters.xmm2, -5));
	}

	@Test
	void psrld_mm_mm() {
		testAssembler(c -> c.psrld(mm2, mm3), Instruction.create(Code.PSRLD_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psrld_xmm_xmm() {
		testAssembler(c -> c.psrld(xmm2, xmm3), Instruction.create(Code.PSRLD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psrld_mm_m() {
		testAssembler(c -> c.psrld(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSRLD_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psrld_xmm_m() {
		testAssembler(c -> c.psrld(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSRLD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psrld_mm_i() {
		testAssembler(c -> c.psrld(mm2, -5), Instruction.create(Code.PSRLD_MM_IMM8, ICRegisters.mm2, -5));
	}

	@Test
	void psrld_xmm_i() {
		testAssembler(c -> c.psrld(xmm2, -5), Instruction.create(Code.PSRLD_XMM_IMM8, ICRegisters.xmm2, -5));
	}

	@Test
	void psrldq_xmm_i() {
		testAssembler(c -> c.psrldq(xmm2, -5), Instruction.create(Code.PSRLDQ_XMM_IMM8, ICRegisters.xmm2, -5));
	}

	@Test
	void psrlq_mm_mm() {
		testAssembler(c -> c.psrlq(mm2, mm3), Instruction.create(Code.PSRLQ_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psrlq_xmm_xmm() {
		testAssembler(c -> c.psrlq(xmm2, xmm3), Instruction.create(Code.PSRLQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psrlq_mm_m() {
		testAssembler(c -> c.psrlq(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSRLQ_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psrlq_xmm_m() {
		testAssembler(c -> c.psrlq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSRLQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psrlq_mm_i() {
		testAssembler(c -> c.psrlq(mm2, -5), Instruction.create(Code.PSRLQ_MM_IMM8, ICRegisters.mm2, -5));
	}

	@Test
	void psrlq_xmm_i() {
		testAssembler(c -> c.psrlq(xmm2, -5), Instruction.create(Code.PSRLQ_XMM_IMM8, ICRegisters.xmm2, -5));
	}

	@Test
	void psrlw_mm_mm() {
		testAssembler(c -> c.psrlw(mm2, mm3), Instruction.create(Code.PSRLW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psrlw_xmm_xmm() {
		testAssembler(c -> c.psrlw(xmm2, xmm3), Instruction.create(Code.PSRLW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psrlw_mm_m() {
		testAssembler(c -> c.psrlw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSRLW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psrlw_xmm_m() {
		testAssembler(c -> c.psrlw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSRLW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psrlw_mm_i() {
		testAssembler(c -> c.psrlw(mm2, -5), Instruction.create(Code.PSRLW_MM_IMM8, ICRegisters.mm2, -5));
	}

	@Test
	void psrlw_xmm_i() {
		testAssembler(c -> c.psrlw(xmm2, -5), Instruction.create(Code.PSRLW_XMM_IMM8, ICRegisters.xmm2, -5));
	}

	@Test
	void psubb_mm_mm() {
		testAssembler(c -> c.psubb(mm2, mm3), Instruction.create(Code.PSUBB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psubb_xmm_xmm() {
		testAssembler(c -> c.psubb(xmm2, xmm3), Instruction.create(Code.PSUBB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psubb_mm_m() {
		testAssembler(c -> c.psubb(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSUBB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psubb_xmm_m() {
		testAssembler(c -> c.psubb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSUBB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psubd_mm_mm() {
		testAssembler(c -> c.psubd(mm2, mm3), Instruction.create(Code.PSUBD_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psubd_xmm_xmm() {
		testAssembler(c -> c.psubd(xmm2, xmm3), Instruction.create(Code.PSUBD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psubd_mm_m() {
		testAssembler(c -> c.psubd(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSUBD_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psubd_xmm_m() {
		testAssembler(c -> c.psubd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSUBD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psubq_mm_mm() {
		testAssembler(c -> c.psubq(mm2, mm3), Instruction.create(Code.PSUBQ_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psubq_xmm_xmm() {
		testAssembler(c -> c.psubq(xmm2, xmm3), Instruction.create(Code.PSUBQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psubq_mm_m() {
		testAssembler(c -> c.psubq(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSUBQ_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psubq_xmm_m() {
		testAssembler(c -> c.psubq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSUBQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psubsb_mm_mm() {
		testAssembler(c -> c.psubsb(mm2, mm3), Instruction.create(Code.PSUBSB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psubsb_xmm_xmm() {
		testAssembler(c -> c.psubsb(xmm2, xmm3), Instruction.create(Code.PSUBSB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psubsb_mm_m() {
		testAssembler(c -> c.psubsb(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSUBSB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psubsb_xmm_m() {
		testAssembler(c -> c.psubsb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSUBSB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psubsiw_mm_mm() {
		testAssembler(c -> c.psubsiw(mm2, mm3), Instruction.create(Code.PSUBSIW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void psubsiw_mm_m() {
		testAssembler(c -> c.psubsiw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSUBSIW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void psubsw_mm_mm() {
		testAssembler(c -> c.psubsw(mm2, mm3), Instruction.create(Code.PSUBSW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psubsw_xmm_xmm() {
		testAssembler(c -> c.psubsw(xmm2, xmm3), Instruction.create(Code.PSUBSW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psubsw_mm_m() {
		testAssembler(c -> c.psubsw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSUBSW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psubsw_xmm_m() {
		testAssembler(c -> c.psubsw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSUBSW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psubusb_mm_mm() {
		testAssembler(c -> c.psubusb(mm2, mm3), Instruction.create(Code.PSUBUSB_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psubusb_xmm_xmm() {
		testAssembler(c -> c.psubusb(xmm2, xmm3), Instruction.create(Code.PSUBUSB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psubusb_mm_m() {
		testAssembler(c -> c.psubusb(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSUBUSB_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psubusb_xmm_m() {
		testAssembler(c -> c.psubusb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSUBUSB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psubusw_mm_mm() {
		testAssembler(c -> c.psubusw(mm2, mm3), Instruction.create(Code.PSUBUSW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psubusw_xmm_xmm() {
		testAssembler(c -> c.psubusw(xmm2, xmm3), Instruction.create(Code.PSUBUSW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psubusw_mm_m() {
		testAssembler(c -> c.psubusw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSUBUSW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psubusw_xmm_m() {
		testAssembler(c -> c.psubusw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSUBUSW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psubw_mm_mm() {
		testAssembler(c -> c.psubw(mm2, mm3), Instruction.create(Code.PSUBW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void psubw_xmm_xmm() {
		testAssembler(c -> c.psubw(xmm2, xmm3), Instruction.create(Code.PSUBW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void psubw_mm_m() {
		testAssembler(c -> c.psubw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSUBW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void psubw_xmm_m() {
		testAssembler(c -> c.psubw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PSUBW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pswapd_mm_mm() {
		testAssembler(c -> c.pswapd(mm2, mm3), Instruction.create(Code.D3NOW_PSWAPD_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pswapd_mm_m() {
		testAssembler(c -> c.pswapd(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.D3NOW_PSWAPD_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void ptest_xmm_xmm() {
		testAssembler(c -> c.ptest(xmm2, xmm3), Instruction.create(Code.PTEST_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void ptest_xmm_m() {
		testAssembler(c -> c.ptest(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PTEST_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void ptwrite_r32() {
		testAssembler(c -> c.ptwrite(edx), Instruction.create(Code.PTWRITE_RM32, ICRegisters.edx));
	}

	@Test
	void ptwrite_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			// Skipping PTWRITE_RM64 - Not supported by current bitness
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.ptwrite(dword_ptr(0x0L).base(edx)), Instruction.create(Code.PTWRITE_RM32, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.ptwrite(zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.PTWRITE_RM32, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void punpckhbw_mm_mm() {
		testAssembler(c -> c.punpckhbw(mm2, mm3), Instruction.create(Code.PUNPCKHBW_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void punpckhbw_xmm_xmm() {
		testAssembler(c -> c.punpckhbw(xmm2, xmm3), Instruction.create(Code.PUNPCKHBW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void punpckhbw_mm_m() {
		testAssembler(c -> c.punpckhbw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PUNPCKHBW_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void punpckhbw_xmm_m() {
		testAssembler(c -> c.punpckhbw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PUNPCKHBW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void punpckhdq_mm_mm() {
		testAssembler(c -> c.punpckhdq(mm2, mm3), Instruction.create(Code.PUNPCKHDQ_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void punpckhdq_xmm_xmm() {
		testAssembler(c -> c.punpckhdq(xmm2, xmm3), Instruction.create(Code.PUNPCKHDQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void punpckhdq_mm_m() {
		testAssembler(c -> c.punpckhdq(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PUNPCKHDQ_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void punpckhdq_xmm_m() {
		testAssembler(c -> c.punpckhdq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PUNPCKHDQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void punpckhqdq_xmm_xmm() {
		testAssembler(c -> c.punpckhqdq(xmm2, xmm3), Instruction.create(Code.PUNPCKHQDQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void punpckhqdq_xmm_m() {
		testAssembler(c -> c.punpckhqdq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PUNPCKHQDQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void punpckhwd_mm_mm() {
		testAssembler(c -> c.punpckhwd(mm2, mm3), Instruction.create(Code.PUNPCKHWD_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void punpckhwd_xmm_xmm() {
		testAssembler(c -> c.punpckhwd(xmm2, xmm3), Instruction.create(Code.PUNPCKHWD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void punpckhwd_mm_m() {
		testAssembler(c -> c.punpckhwd(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PUNPCKHWD_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void punpckhwd_xmm_m() {
		testAssembler(c -> c.punpckhwd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PUNPCKHWD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void punpcklbw_mm_mm() {
		testAssembler(c -> c.punpcklbw(mm2, mm3), Instruction.create(Code.PUNPCKLBW_MM_MMM32, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void punpcklbw_xmm_xmm() {
		testAssembler(c -> c.punpcklbw(xmm2, xmm3), Instruction.create(Code.PUNPCKLBW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void punpcklbw_mm_m() {
		testAssembler(c -> c.punpcklbw(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PUNPCKLBW_MM_MMM32, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void punpcklbw_xmm_m() {
		testAssembler(c -> c.punpcklbw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PUNPCKLBW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void punpckldq_mm_mm() {
		testAssembler(c -> c.punpckldq(mm2, mm3), Instruction.create(Code.PUNPCKLDQ_MM_MMM32, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void punpckldq_xmm_xmm() {
		testAssembler(c -> c.punpckldq(xmm2, xmm3), Instruction.create(Code.PUNPCKLDQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void punpckldq_mm_m() {
		testAssembler(c -> c.punpckldq(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PUNPCKLDQ_MM_MMM32, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void punpckldq_xmm_m() {
		testAssembler(c -> c.punpckldq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PUNPCKLDQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void punpcklqdq_xmm_xmm() {
		testAssembler(c -> c.punpcklqdq(xmm2, xmm3), Instruction.create(Code.PUNPCKLQDQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void punpcklqdq_xmm_m() {
		testAssembler(c -> c.punpcklqdq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PUNPCKLQDQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void punpcklwd_mm_mm() {
		testAssembler(c -> c.punpcklwd(mm2, mm3), Instruction.create(Code.PUNPCKLWD_MM_MMM32, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void punpcklwd_xmm_xmm() {
		testAssembler(c -> c.punpcklwd(xmm2, xmm3), Instruction.create(Code.PUNPCKLWD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void punpcklwd_mm_m() {
		testAssembler(c -> c.punpcklwd(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PUNPCKLWD_MM_MMM32, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void punpcklwd_xmm_m() {
		testAssembler(c -> c.punpcklwd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PUNPCKLWD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void push_r16() {
		testAssembler(c -> c.push(dx), Instruction.create(Code.PUSH_R16, ICRegisters.dx));
	}

	@Test
	void push_r32() {
		testAssembler(c -> c.push(edx), Instruction.create(Code.PUSH_R32, ICRegisters.edx));
	}

	@Test
	void push_seg() {
		{ /* if (dst.getRegister() == Register.FS) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { /* if (getBitness() >= 32) */
				testAssembler(c -> c.push(fs), Instruction.create(Code.PUSHD_FS, ICRegisters.fs));
			} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (dst.getRegister() == Register.GS) */
			{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
			} /* else */ { /* if (getBitness() >= 32) */
				testAssembler(c -> c.push(gs), Instruction.create(Code.PUSHD_GS, ICRegisters.gs));
			} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (dst.getRegister() == Register.ES) */
			{ /* if (getBitness() >= 32) */
				testAssembler(c -> c.push(es), Instruction.create(Code.PUSHD_ES, ICRegisters.es));
			} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (dst.getRegister() == Register.CS) */
			{ /* if (getBitness() >= 32) */
				testAssembler(c -> c.push(cs), Instruction.create(Code.PUSHD_CS, ICRegisters.cs));
			} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (dst.getRegister() == Register.SS) */
			{ /* if (getBitness() >= 32) */
				testAssembler(c -> c.push(ss), Instruction.create(Code.PUSHD_SS, ICRegisters.ss));
			} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (dst.getRegister() == Register.DS) */
			{ /* if (getBitness() >= 32) */
				testAssembler(c -> c.push(ds), Instruction.create(Code.PUSHD_DS, ICRegisters.ds));
			} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
		}
	}

	@Test
	void push_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			// Skipping PUSH_RM64 - Not supported by current bitness
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.push(dword_ptr(0x0L).base(edx)), Instruction.create(Code.PUSH_RM32, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.push(word_ptr(0x0L).base(edx)), Instruction.create(Code.PUSH_RM16, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.push(zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.PUSH_RM16, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void push_i() {
		{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { /* if (getBitness() >= 32) */
			{ /* if (imm >= -0x80 && imm <= 0x7F) */
				testAssembler(c -> c.push(-0x80), Instruction.create(Code.PUSHD_IMM8, -0x80));
				testAssembler(c -> c.push(0x7F), Instruction.create(Code.PUSHD_IMM8, 0x7F));
			} /* else */ testAssembler(c -> c.push(0x7FFFFFFF), Instruction.create(Code.PUSHD_IMM32, 0x7FFFFFFF));
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void pusha() {
		testAssembler(c -> c.pusha(), Instruction.create(Code.PUSHAW));
	}

	@Test
	void pushad() {
		testAssembler(c -> c.pushad(), Instruction.create(Code.PUSHAD));
	}

	@Test
	void pushf() {
		testAssembler(c -> c.pushf(), Instruction.create(Code.PUSHFW));
	}

	@Test
	void pushfd() {
		testAssembler(c -> c.pushfd(), Instruction.create(Code.PUSHFD));
	}

	@Test
	void pvalidate() {
		{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { /* if (getBitness() >= 32) */
			testAssembler(c -> c.pvalidate(), Instruction.create(Code.PVALIDATED));
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void pxor_mm_mm() {
		testAssembler(c -> c.pxor(mm2, mm3), Instruction.create(Code.PXOR_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void pxor_xmm_xmm() {
		testAssembler(c -> c.pxor(xmm2, xmm3), Instruction.create(Code.PXOR_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void pxor_mm_m() {
		testAssembler(c -> c.pxor(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.PXOR_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void pxor_xmm_m() {
		testAssembler(c -> c.pxor(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.PXOR_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vp2intersectd_kr_xmm_xmm() {
		testAssembler(c -> c.vp2intersectd(k2, xmm3, xmm4), Instruction.create(Code.EVEX_VP2INTERSECTD_KP1_XMM_XMMM128B32, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vp2intersectd_kr_ymm_ymm() {
		testAssembler(c -> c.vp2intersectd(k2, ymm3, ymm4), Instruction.create(Code.EVEX_VP2INTERSECTD_KP1_YMM_YMMM256B32, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vp2intersectd_kr_zmm_zmm() {
		testAssembler(c -> c.vp2intersectd(k2, zmm3, zmm4), Instruction.create(Code.EVEX_VP2INTERSECTD_KP1_ZMM_ZMMM512B32, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4));
	}

	@Test
	void vp2intersectd_kr_xmm_m() {
		testAssembler(c -> c.vp2intersectd(k2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VP2INTERSECTD_KP1_XMM_XMMM128B32, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vp2intersectd_kr_ymm_m() {
		testAssembler(c -> c.vp2intersectd(k2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VP2INTERSECTD_KP1_YMM_YMMM256B32, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vp2intersectd_kr_zmm_m() {
		testAssembler(c -> c.vp2intersectd(k2, zmm3, zmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VP2INTERSECTD_KP1_ZMM_ZMMM512B32, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vp2intersectq_kr_xmm_xmm() {
		testAssembler(c -> c.vp2intersectq(k2, xmm3, xmm4), Instruction.create(Code.EVEX_VP2INTERSECTQ_KP1_XMM_XMMM128B64, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vp2intersectq_kr_ymm_ymm() {
		testAssembler(c -> c.vp2intersectq(k2, ymm3, ymm4), Instruction.create(Code.EVEX_VP2INTERSECTQ_KP1_YMM_YMMM256B64, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vp2intersectq_kr_zmm_zmm() {
		testAssembler(c -> c.vp2intersectq(k2, zmm3, zmm4), Instruction.create(Code.EVEX_VP2INTERSECTQ_KP1_ZMM_ZMMM512B64, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4));
	}

	@Test
	void vp2intersectq_kr_xmm_m() {
		testAssembler(c -> c.vp2intersectq(k2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VP2INTERSECTQ_KP1_XMM_XMMM128B64, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vp2intersectq_kr_ymm_m() {
		testAssembler(c -> c.vp2intersectq(k2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VP2INTERSECTQ_KP1_YMM_YMMM256B64, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vp2intersectq_kr_zmm_m() {
		testAssembler(c -> c.vp2intersectq(k2, zmm3, zmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VP2INTERSECTQ_KP1_ZMM_ZMMM512B64, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vp4dpwssd_zmm_zmm_m() {
		testAssembler(c -> c.vp4dpwssd(zmm2.k1(), zmm3, mem_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VP4DPWSSD_ZMM_K1Z_ZMMP3_M128, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vp4dpwssds_zmm_zmm_m() {
		testAssembler(c -> c.vp4dpwssds(zmm2.k1(), zmm3, mem_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VP4DPWSSDS_ZMM_K1Z_ZMMP3_M128, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpabsb_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpabsb(xmm2, xmm3), Instruction.create(Code.VEX_VPABSB_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpabsb(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPABSB_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpabsb_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpabsb(ymm2, ymm3), Instruction.create(Code.VEX_VPABSB_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpabsb(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPABSB_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpabsb_zmm_zmm() {
		testAssembler(c -> c.vpabsb(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPABSB_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpabsb_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpabsb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPABSB_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpabsb(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPABSB_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpabsb_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpabsb(ymm2, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPABSB_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpabsb(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPABSB_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpabsb_zmm_m() {
		testAssembler(c -> c.vpabsb(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPABSB_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpabsd_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpabsd(xmm2, xmm3), Instruction.create(Code.VEX_VPABSD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpabsd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPABSD_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpabsd_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpabsd(ymm2, ymm3), Instruction.create(Code.VEX_VPABSD_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpabsd(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPABSD_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpabsd_zmm_zmm() {
		testAssembler(c -> c.vpabsd(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPABSD_ZMM_K1Z_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpabsd_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vpabsd(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPABSD_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpabsd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPABSD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpabsd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPABSD_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpabsd_ymm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vpabsd(ymm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPABSD_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpabsd(ymm2, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPABSD_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpabsd(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPABSD_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpabsd_zmm_m() {
		testAssembler(c -> c.vpabsd(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPABSD_ZMM_K1Z_ZMMM512B32, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpabsq_xmm_xmm() {
		testAssembler(c -> c.vpabsq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPABSQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpabsq_ymm_ymm() {
		testAssembler(c -> c.vpabsq(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPABSQ_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpabsq_zmm_zmm() {
		testAssembler(c -> c.vpabsq(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPABSQ_ZMM_K1Z_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpabsq_xmm_m() {
		testAssembler(c -> c.vpabsq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPABSQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpabsq_ymm_m() {
		testAssembler(c -> c.vpabsq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPABSQ_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpabsq_zmm_m() {
		testAssembler(c -> c.vpabsq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPABSQ_ZMM_K1Z_ZMMM512B64, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpabsw_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpabsw(xmm2, xmm3), Instruction.create(Code.VEX_VPABSW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpabsw(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPABSW_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpabsw_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpabsw(ymm2, ymm3), Instruction.create(Code.VEX_VPABSW_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpabsw(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPABSW_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpabsw_zmm_zmm() {
		testAssembler(c -> c.vpabsw(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPABSW_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpabsw_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpabsw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPABSW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpabsw(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPABSW_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpabsw_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpabsw(ymm2, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPABSW_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpabsw(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPABSW_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpabsw_zmm_m() {
		testAssembler(c -> c.vpabsw(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPABSW_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpackssdw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpackssdw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPACKSSDW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpackssdw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPACKSSDW_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpackssdw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpackssdw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPACKSSDW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpackssdw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPACKSSDW_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpackssdw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpackssdw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPACKSSDW_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpackssdw_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpackssdw(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPACKSSDW_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpackssdw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPACKSSDW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpackssdw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPACKSSDW_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpackssdw_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpackssdw(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPACKSSDW_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpackssdw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPACKSSDW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpackssdw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPACKSSDW_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpackssdw_zmm_zmm_m() {
		testAssembler(c -> c.vpackssdw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPACKSSDW_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpacksswb_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpacksswb(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPACKSSWB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpacksswb(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPACKSSWB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpacksswb_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpacksswb(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPACKSSWB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpacksswb(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPACKSSWB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpacksswb_zmm_zmm_zmm() {
		testAssembler(c -> c.vpacksswb(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPACKSSWB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpacksswb_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpacksswb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPACKSSWB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpacksswb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPACKSSWB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpacksswb_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpacksswb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPACKSSWB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpacksswb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPACKSSWB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpacksswb_zmm_zmm_m() {
		testAssembler(c -> c.vpacksswb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPACKSSWB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpackusdw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpackusdw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPACKUSDW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpackusdw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPACKUSDW_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpackusdw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpackusdw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPACKUSDW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpackusdw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPACKUSDW_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpackusdw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpackusdw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPACKUSDW_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpackusdw_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpackusdw(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPACKUSDW_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpackusdw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPACKUSDW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpackusdw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPACKUSDW_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpackusdw_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpackusdw(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPACKUSDW_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpackusdw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPACKUSDW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpackusdw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPACKUSDW_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpackusdw_zmm_zmm_m() {
		testAssembler(c -> c.vpackusdw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPACKUSDW_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpackuswb_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpackuswb(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPACKUSWB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpackuswb(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPACKUSWB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpackuswb_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpackuswb(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPACKUSWB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpackuswb(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPACKUSWB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpackuswb_zmm_zmm_zmm() {
		testAssembler(c -> c.vpackuswb(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPACKUSWB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpackuswb_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpackuswb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPACKUSWB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpackuswb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPACKUSWB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpackuswb_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpackuswb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPACKUSWB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpackuswb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPACKUSWB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpackuswb_zmm_zmm_m() {
		testAssembler(c -> c.vpackuswb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPACKUSWB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpaddb_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddb(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPADDB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddb(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPADDB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddb_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddb(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPADDB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddb(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPADDB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddb_zmm_zmm_zmm() {
		testAssembler(c -> c.vpaddb(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPADDB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpaddb_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPADDB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddb_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPADDB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddb_zmm_zmm_m() {
		testAssembler(c -> c.vpaddb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpaddd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPADDD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPADDD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPADDD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPADDD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpaddd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPADDD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpaddd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpaddd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPADDD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPADDD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpaddd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPADDD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPADDD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddd_zmm_zmm_m() {
		testAssembler(c -> c.vpaddd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpaddq_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPADDQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPADDQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddq_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPADDQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPADDQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpaddq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPADDQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpaddq_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpaddq(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPADDQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPADDQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddq_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpaddq(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPADDQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPADDQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddq_zmm_zmm_m() {
		testAssembler(c -> c.vpaddq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpaddsb_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddsb(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPADDSB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddsb(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPADDSB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddsb_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddsb(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPADDSB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddsb(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPADDSB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddsb_zmm_zmm_zmm() {
		testAssembler(c -> c.vpaddsb(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPADDSB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpaddsb_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddsb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPADDSB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddsb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDSB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddsb_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddsb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPADDSB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddsb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDSB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddsb_zmm_zmm_m() {
		testAssembler(c -> c.vpaddsb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDSB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpaddsw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddsw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPADDSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddsw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPADDSW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddsw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddsw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPADDSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddsw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPADDSW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddsw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpaddsw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPADDSW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpaddsw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddsw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPADDSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddsw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDSW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddsw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddsw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPADDSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddsw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDSW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddsw_zmm_zmm_m() {
		testAssembler(c -> c.vpaddsw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDSW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpaddusb_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddusb(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPADDUSB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddusb(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPADDUSB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddusb_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddusb(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPADDUSB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddusb(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPADDUSB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddusb_zmm_zmm_zmm() {
		testAssembler(c -> c.vpaddusb(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPADDUSB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpaddusb_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddusb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPADDUSB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddusb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDUSB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddusb_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddusb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPADDUSB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddusb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDUSB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddusb_zmm_zmm_m() {
		testAssembler(c -> c.vpaddusb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDUSB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpaddusw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddusw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPADDUSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddusw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPADDUSW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddusw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddusw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPADDUSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddusw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPADDUSW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddusw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpaddusw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPADDUSW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpaddusw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddusw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPADDUSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddusw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDUSW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddusw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddusw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPADDUSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddusw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDUSW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddusw_zmm_zmm_m() {
		testAssembler(c -> c.vpaddusw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDUSW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpaddw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPADDW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPADDW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPADDW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPADDW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpaddw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPADDW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpaddw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPADDW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpaddw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPADDW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpaddw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpaddw_zmm_zmm_m() {
		testAssembler(c -> c.vpaddw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPADDW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpalignr_xmm_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpalignr(xmm2, xmm3, xmm4, -5), Instruction.create(Code.VEX_VPALIGNR_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpalignr(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VPALIGNR_XMM_K1Z_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpalignr_ymm_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpalignr(ymm2, ymm3, ymm4, -5), Instruction.create(Code.VEX_VPALIGNR_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpalignr(ymm2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VPALIGNR_YMM_K1Z_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpalignr_zmm_zmm_zmm_i() {
		testAssembler(c -> c.vpalignr(zmm2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VPALIGNR_ZMM_K1Z_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vpalignr_xmm_xmm_m_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpalignr(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPALIGNR_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpalignr(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPALIGNR_XMM_K1Z_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpalignr_ymm_ymm_m_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpalignr(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPALIGNR_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpalignr(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPALIGNR_YMM_K1Z_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpalignr_zmm_zmm_m_i() {
		testAssembler(c -> c.vpalignr(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPALIGNR_ZMM_K1Z_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpand_xmm_xmm_xmm() {
		testAssembler(c -> c.vpand(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPAND_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpand_ymm_ymm_ymm() {
		testAssembler(c -> c.vpand(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPAND_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpand_xmm_xmm_m() {
		testAssembler(c -> c.vpand(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPAND_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpand_ymm_ymm_m() {
		testAssembler(c -> c.vpand(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPAND_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpandd_xmm_xmm_xmm() {
		testAssembler(c -> c.vpandd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPANDD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpandd_ymm_ymm_ymm() {
		testAssembler(c -> c.vpandd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPANDD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpandd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpandd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPANDD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpandd_xmm_xmm_m() {
		testAssembler(c -> c.vpandd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPANDD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpandd_ymm_ymm_m() {
		testAssembler(c -> c.vpandd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPANDD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpandd_zmm_zmm_m() {
		testAssembler(c -> c.vpandd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPANDD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpandn_xmm_xmm_xmm() {
		testAssembler(c -> c.vpandn(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPANDN_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpandn_ymm_ymm_ymm() {
		testAssembler(c -> c.vpandn(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPANDN_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpandn_xmm_xmm_m() {
		testAssembler(c -> c.vpandn(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPANDN_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpandn_ymm_ymm_m() {
		testAssembler(c -> c.vpandn(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPANDN_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpandnd_xmm_xmm_xmm() {
		testAssembler(c -> c.vpandnd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPANDND_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpandnd_ymm_ymm_ymm() {
		testAssembler(c -> c.vpandnd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPANDND_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpandnd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpandnd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPANDND_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpandnd_xmm_xmm_m() {
		testAssembler(c -> c.vpandnd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPANDND_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpandnd_ymm_ymm_m() {
		testAssembler(c -> c.vpandnd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPANDND_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpandnd_zmm_zmm_m() {
		testAssembler(c -> c.vpandnd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPANDND_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpandnq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpandnq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPANDNQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpandnq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpandnq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPANDNQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpandnq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpandnq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPANDNQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpandnq_xmm_xmm_m() {
		testAssembler(c -> c.vpandnq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPANDNQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpandnq_ymm_ymm_m() {
		testAssembler(c -> c.vpandnq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPANDNQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpandnq_zmm_zmm_m() {
		testAssembler(c -> c.vpandnq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPANDNQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpandq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpandq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPANDQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpandq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpandq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPANDQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpandq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpandq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPANDQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpandq_xmm_xmm_m() {
		testAssembler(c -> c.vpandq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPANDQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpandq_ymm_ymm_m() {
		testAssembler(c -> c.vpandq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPANDQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpandq_zmm_zmm_m() {
		testAssembler(c -> c.vpandq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPANDQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpavgb_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpavgb(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPAVGB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpavgb(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPAVGB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpavgb_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpavgb(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPAVGB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpavgb(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPAVGB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpavgb_zmm_zmm_zmm() {
		testAssembler(c -> c.vpavgb(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPAVGB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpavgb_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpavgb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPAVGB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpavgb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPAVGB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpavgb_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpavgb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPAVGB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpavgb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPAVGB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpavgb_zmm_zmm_m() {
		testAssembler(c -> c.vpavgb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPAVGB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpavgw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpavgw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPAVGW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpavgw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPAVGW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpavgw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpavgw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPAVGW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpavgw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPAVGW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpavgw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpavgw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPAVGW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpavgw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpavgw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPAVGW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpavgw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPAVGW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpavgw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpavgw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPAVGW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpavgw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPAVGW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpavgw_zmm_zmm_m() {
		testAssembler(c -> c.vpavgw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPAVGW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpblendd_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpblendd(xmm2, xmm3, xmm4, -5), Instruction.create(Code.VEX_VPBLENDD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vpblendd_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vpblendd(ymm2, ymm3, ymm4, -5), Instruction.create(Code.VEX_VPBLENDD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5));
	}

	@Test
	void vpblendd_xmm_xmm_m_i() {
		testAssembler(c -> c.vpblendd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPBLENDD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpblendd_ymm_ymm_m_i() {
		testAssembler(c -> c.vpblendd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPBLENDD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpblendmb_xmm_xmm_xmm() {
		testAssembler(c -> c.vpblendmb(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPBLENDMB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpblendmb_ymm_ymm_ymm() {
		testAssembler(c -> c.vpblendmb(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPBLENDMB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpblendmb_zmm_zmm_zmm() {
		testAssembler(c -> c.vpblendmb(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPBLENDMB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpblendmb_xmm_xmm_m() {
		testAssembler(c -> c.vpblendmb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBLENDMB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpblendmb_ymm_ymm_m() {
		testAssembler(c -> c.vpblendmb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBLENDMB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpblendmb_zmm_zmm_m() {
		testAssembler(c -> c.vpblendmb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBLENDMB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpblendmd_xmm_xmm_xmm() {
		testAssembler(c -> c.vpblendmd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPBLENDMD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpblendmd_ymm_ymm_ymm() {
		testAssembler(c -> c.vpblendmd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPBLENDMD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpblendmd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpblendmd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPBLENDMD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpblendmd_xmm_xmm_m() {
		testAssembler(c -> c.vpblendmd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBLENDMD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpblendmd_ymm_ymm_m() {
		testAssembler(c -> c.vpblendmd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBLENDMD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpblendmd_zmm_zmm_m() {
		testAssembler(c -> c.vpblendmd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBLENDMD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpblendmq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpblendmq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPBLENDMQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpblendmq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpblendmq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPBLENDMQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpblendmq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpblendmq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPBLENDMQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpblendmq_xmm_xmm_m() {
		testAssembler(c -> c.vpblendmq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBLENDMQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpblendmq_ymm_ymm_m() {
		testAssembler(c -> c.vpblendmq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBLENDMQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpblendmq_zmm_zmm_m() {
		testAssembler(c -> c.vpblendmq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBLENDMQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpblendmw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpblendmw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPBLENDMW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpblendmw_ymm_ymm_ymm() {
		testAssembler(c -> c.vpblendmw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPBLENDMW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpblendmw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpblendmw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPBLENDMW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpblendmw_xmm_xmm_m() {
		testAssembler(c -> c.vpblendmw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBLENDMW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpblendmw_ymm_ymm_m() {
		testAssembler(c -> c.vpblendmw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBLENDMW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpblendmw_zmm_zmm_m() {
		testAssembler(c -> c.vpblendmw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBLENDMW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpblendvb_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vpblendvb(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VPBLENDVB_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vpblendvb_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vpblendvb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), xmm5), Instruction.create(Code.VEX_VPBLENDVB_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vpblendvb_ymm_ymm_ymm_ymm() {
		testAssembler(c -> c.vpblendvb(ymm2, ymm3, ymm4, ymm5), Instruction.create(Code.VEX_VPBLENDVB_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5));
	}

	@Test
	void vpblendvb_ymm_ymm_m_ymm() {
		testAssembler(c -> c.vpblendvb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx), ymm5), Instruction.create(Code.VEX_VPBLENDVB_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5));
	}

	@Test
	void vpblendw_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpblendw(xmm2, xmm3, xmm4, -5), Instruction.create(Code.VEX_VPBLENDW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vpblendw_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vpblendw(ymm2, ymm3, ymm4, -5), Instruction.create(Code.VEX_VPBLENDW_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5));
	}

	@Test
	void vpblendw_xmm_xmm_m_i() {
		testAssembler(c -> c.vpblendw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPBLENDW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpblendw_ymm_ymm_m_i() {
		testAssembler(c -> c.vpblendw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPBLENDW_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpbroadcastb_xmm_r32() {
		testAssembler(c -> c.vpbroadcastb(xmm2.k1(), ebx), applyK(Instruction.create(Code.EVEX_VPBROADCASTB_XMM_K1Z_R32, ICRegisters.xmm2, ICRegisters.ebx), Register.K1));
	}

	@Test
	void vpbroadcastb_ymm_r32() {
		testAssembler(c -> c.vpbroadcastb(ymm2.k1(), ebx), applyK(Instruction.create(Code.EVEX_VPBROADCASTB_YMM_K1Z_R32, ICRegisters.ymm2, ICRegisters.ebx), Register.K1));
	}

	@Test
	void vpbroadcastb_zmm_r32() {
		testAssembler(c -> c.vpbroadcastb(zmm2.k1(), ebx), applyK(Instruction.create(Code.EVEX_VPBROADCASTB_ZMM_K1Z_R32, ICRegisters.zmm2, ICRegisters.ebx), Register.K1));
	}

	@Test
	void vpbroadcastb_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpbroadcastb(xmm2, xmm3), Instruction.create(Code.VEX_VPBROADCASTB_XMM_XMMM8, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpbroadcastb(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPBROADCASTB_XMM_K1Z_XMMM8, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpbroadcastb_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpbroadcastb(ymm2, xmm3), Instruction.create(Code.VEX_VPBROADCASTB_YMM_XMMM8, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpbroadcastb(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPBROADCASTB_YMM_K1Z_XMMM8, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpbroadcastb_zmm_xmm() {
		testAssembler(c -> c.vpbroadcastb(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPBROADCASTB_ZMM_K1Z_XMMM8, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpbroadcastb_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpbroadcastb(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPBROADCASTB_XMM_XMMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpbroadcastb(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBROADCASTB_XMM_K1Z_XMMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpbroadcastb_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpbroadcastb(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPBROADCASTB_YMM_XMMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpbroadcastb(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBROADCASTB_YMM_K1Z_XMMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpbroadcastb_zmm_m() {
		testAssembler(c -> c.vpbroadcastb(zmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBROADCASTB_ZMM_K1Z_XMMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpbroadcastd_xmm_r32() {
		testAssembler(c -> c.vpbroadcastd(xmm2.k1(), ebx), applyK(Instruction.create(Code.EVEX_VPBROADCASTD_XMM_K1Z_R32, ICRegisters.xmm2, ICRegisters.ebx), Register.K1));
	}

	@Test
	void vpbroadcastd_ymm_r32() {
		testAssembler(c -> c.vpbroadcastd(ymm2.k1(), ebx), applyK(Instruction.create(Code.EVEX_VPBROADCASTD_YMM_K1Z_R32, ICRegisters.ymm2, ICRegisters.ebx), Register.K1));
	}

	@Test
	void vpbroadcastd_zmm_r32() {
		testAssembler(c -> c.vpbroadcastd(zmm2.k1(), ebx), applyK(Instruction.create(Code.EVEX_VPBROADCASTD_ZMM_K1Z_R32, ICRegisters.zmm2, ICRegisters.ebx), Register.K1));
	}

	@Test
	void vpbroadcastd_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpbroadcastd(xmm2, xmm3), Instruction.create(Code.VEX_VPBROADCASTD_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpbroadcastd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPBROADCASTD_XMM_K1Z_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpbroadcastd_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpbroadcastd(ymm2, xmm3), Instruction.create(Code.VEX_VPBROADCASTD_YMM_XMMM32, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpbroadcastd(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPBROADCASTD_YMM_K1Z_XMMM32, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpbroadcastd_zmm_xmm() {
		testAssembler(c -> c.vpbroadcastd(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPBROADCASTD_ZMM_K1Z_XMMM32, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpbroadcastd_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpbroadcastd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPBROADCASTD_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpbroadcastd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBROADCASTD_XMM_K1Z_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpbroadcastd_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpbroadcastd(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPBROADCASTD_YMM_XMMM32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpbroadcastd(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBROADCASTD_YMM_K1Z_XMMM32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpbroadcastd_zmm_m() {
		testAssembler(c -> c.vpbroadcastd(zmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBROADCASTD_ZMM_K1Z_XMMM32, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpbroadcastmb2q_xmm_kr() {
		testAssembler(c -> c.vpbroadcastmb2q(xmm2, k3), Instruction.create(Code.EVEX_VPBROADCASTMB2Q_XMM_KR, ICRegisters.xmm2, ICRegisters.k3));
	}

	@Test
	void vpbroadcastmb2q_ymm_kr() {
		testAssembler(c -> c.vpbroadcastmb2q(ymm2, k3), Instruction.create(Code.EVEX_VPBROADCASTMB2Q_YMM_KR, ICRegisters.ymm2, ICRegisters.k3));
	}

	@Test
	void vpbroadcastmb2q_zmm_kr() {
		testAssembler(c -> c.vpbroadcastmb2q(zmm2, k3), Instruction.create(Code.EVEX_VPBROADCASTMB2Q_ZMM_KR, ICRegisters.zmm2, ICRegisters.k3));
	}

	@Test
	void vpbroadcastmw2d_xmm_kr() {
		testAssembler(c -> c.vpbroadcastmw2d(xmm2, k3), Instruction.create(Code.EVEX_VPBROADCASTMW2D_XMM_KR, ICRegisters.xmm2, ICRegisters.k3));
	}

	@Test
	void vpbroadcastmw2d_ymm_kr() {
		testAssembler(c -> c.vpbroadcastmw2d(ymm2, k3), Instruction.create(Code.EVEX_VPBROADCASTMW2D_YMM_KR, ICRegisters.ymm2, ICRegisters.k3));
	}

	@Test
	void vpbroadcastmw2d_zmm_kr() {
		testAssembler(c -> c.vpbroadcastmw2d(zmm2, k3), Instruction.create(Code.EVEX_VPBROADCASTMW2D_ZMM_KR, ICRegisters.zmm2, ICRegisters.k3));
	}

	@Test
	void vpbroadcastq_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpbroadcastq(xmm2, xmm3), Instruction.create(Code.VEX_VPBROADCASTQ_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpbroadcastq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPBROADCASTQ_XMM_K1Z_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpbroadcastq_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpbroadcastq(ymm2, xmm3), Instruction.create(Code.VEX_VPBROADCASTQ_YMM_XMMM64, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpbroadcastq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPBROADCASTQ_YMM_K1Z_XMMM64, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpbroadcastq_zmm_xmm() {
		testAssembler(c -> c.vpbroadcastq(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPBROADCASTQ_ZMM_K1Z_XMMM64, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpbroadcastq_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpbroadcastq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPBROADCASTQ_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpbroadcastq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBROADCASTQ_XMM_K1Z_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpbroadcastq_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpbroadcastq(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPBROADCASTQ_YMM_XMMM64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpbroadcastq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBROADCASTQ_YMM_K1Z_XMMM64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpbroadcastq_zmm_m() {
		testAssembler(c -> c.vpbroadcastq(zmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBROADCASTQ_ZMM_K1Z_XMMM64, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpbroadcastw_xmm_r32() {
		testAssembler(c -> c.vpbroadcastw(xmm2.k1(), ebx), applyK(Instruction.create(Code.EVEX_VPBROADCASTW_XMM_K1Z_R32, ICRegisters.xmm2, ICRegisters.ebx), Register.K1));
	}

	@Test
	void vpbroadcastw_ymm_r32() {
		testAssembler(c -> c.vpbroadcastw(ymm2.k1(), ebx), applyK(Instruction.create(Code.EVEX_VPBROADCASTW_YMM_K1Z_R32, ICRegisters.ymm2, ICRegisters.ebx), Register.K1));
	}

	@Test
	void vpbroadcastw_zmm_r32() {
		testAssembler(c -> c.vpbroadcastw(zmm2.k1(), ebx), applyK(Instruction.create(Code.EVEX_VPBROADCASTW_ZMM_K1Z_R32, ICRegisters.zmm2, ICRegisters.ebx), Register.K1));
	}

	@Test
	void vpbroadcastw_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpbroadcastw(xmm2, xmm3), Instruction.create(Code.VEX_VPBROADCASTW_XMM_XMMM16, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpbroadcastw(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPBROADCASTW_XMM_K1Z_XMMM16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpbroadcastw_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpbroadcastw(ymm2, xmm3), Instruction.create(Code.VEX_VPBROADCASTW_YMM_XMMM16, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpbroadcastw(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPBROADCASTW_YMM_K1Z_XMMM16, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpbroadcastw_zmm_xmm() {
		testAssembler(c -> c.vpbroadcastw(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPBROADCASTW_ZMM_K1Z_XMMM16, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpbroadcastw_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpbroadcastw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPBROADCASTW_XMM_XMMM16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpbroadcastw(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBROADCASTW_XMM_K1Z_XMMM16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpbroadcastw_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpbroadcastw(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPBROADCASTW_YMM_XMMM16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpbroadcastw(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBROADCASTW_YMM_K1Z_XMMM16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpbroadcastw_zmm_m() {
		testAssembler(c -> c.vpbroadcastw(zmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPBROADCASTW_ZMM_K1Z_XMMM16, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpclmulqdq_xmm_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpclmulqdq(xmm2, xmm3, xmm4, -5), Instruction.create(Code.VEX_VPCLMULQDQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpclmulqdq(xmm2, xmm3, xmm4, -5), Instruction.create(Code.EVEX_VPCLMULQDQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpclmulqdq_ymm_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpclmulqdq(ymm2, ymm3, ymm4, -5), Instruction.create(Code.VEX_VPCLMULQDQ_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpclmulqdq(ymm2, ymm3, ymm4, -5), Instruction.create(Code.EVEX_VPCLMULQDQ_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpclmulqdq_zmm_zmm_zmm_i() {
		testAssembler(c -> c.vpclmulqdq(zmm2, zmm3, zmm4, -5), Instruction.create(Code.EVEX_VPCLMULQDQ_ZMM_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, -5));
	}

	@Test
	void vpclmulqdq_xmm_xmm_m_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpclmulqdq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPCLMULQDQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpclmulqdq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.EVEX_VPCLMULQDQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpclmulqdq_ymm_ymm_m_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpclmulqdq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPCLMULQDQ_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpclmulqdq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.EVEX_VPCLMULQDQ_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpclmulqdq_zmm_zmm_m_i() {
		testAssembler(c -> c.vpclmulqdq(zmm2, zmm3, zmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.EVEX_VPCLMULQDQ_ZMM_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpcmov_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcmov(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.XOP_VPCMOV_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vpcmov_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vpcmov(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), xmm5), Instruction.create(Code.XOP_VPCMOV_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vpcmov_ymm_ymm_ymm_ymm() {
		testAssembler(c -> c.vpcmov(ymm2, ymm3, ymm4, ymm5), Instruction.create(Code.XOP_VPCMOV_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5));
	}

	@Test
	void vpcmov_ymm_ymm_m_ymm() {
		testAssembler(c -> c.vpcmov(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx), ymm5), Instruction.create(Code.XOP_VPCMOV_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5));
	}

	@Test
	void vpcmov_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vpcmov(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCMOV_XMM_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmov_ymm_ymm_ymm_m() {
		testAssembler(c -> c.vpcmov(ymm2, ymm3, ymm4, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCMOV_YMM_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmpb_kr_xmm_xmm_i() {
		testAssembler(c -> c.vpcmpb(k2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vpcmpb_kr_ymm_ymm_i() {
		testAssembler(c -> c.vpcmpb(k2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vpcmpb_kr_zmm_zmm_i() {
		testAssembler(c -> c.vpcmpb(k2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vpcmpb_kr_xmm_m_i() {
		testAssembler(c -> c.vpcmpb(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpb_kr_ymm_m_i() {
		testAssembler(c -> c.vpcmpb(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpb_kr_zmm_m_i() {
		testAssembler(c -> c.vpcmpb(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpd_kr_xmm_xmm_i() {
		testAssembler(c -> c.vpcmpd(k2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vpcmpd_kr_ymm_ymm_i() {
		testAssembler(c -> c.vpcmpd(k2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vpcmpd_kr_zmm_zmm_i() {
		testAssembler(c -> c.vpcmpd(k2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vpcmpd_kr_xmm_m_i() {
		testAssembler(c -> c.vpcmpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpd_kr_ymm_m_i() {
		testAssembler(c -> c.vpcmpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpd_kr_zmm_m_i() {
		testAssembler(c -> c.vpcmpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpeqb_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpeqb(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPEQB_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpcmpeqb_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcmpeqb(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPCMPEQB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpcmpeqb_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpeqb(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPEQB_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpcmpeqb_ymm_ymm_ymm() {
		testAssembler(c -> c.vpcmpeqb(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPCMPEQB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpcmpeqb_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpeqb(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPEQB_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpcmpeqb_kr_xmm_m() {
		testAssembler(c -> c.vpcmpeqb(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPEQB_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpeqb_xmm_xmm_m() {
		testAssembler(c -> c.vpcmpeqb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCMPEQB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmpeqb_kr_ymm_m() {
		testAssembler(c -> c.vpcmpeqb(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPEQB_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpeqb_ymm_ymm_m() {
		testAssembler(c -> c.vpcmpeqb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCMPEQB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmpeqb_kr_zmm_m() {
		testAssembler(c -> c.vpcmpeqb(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPEQB_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpeqd_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpeqd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPEQD_KR_K1_XMM_XMMM128B32, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpcmpeqd_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcmpeqd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPCMPEQD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpcmpeqd_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpeqd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPEQD_KR_K1_YMM_YMMM256B32, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpcmpeqd_ymm_ymm_ymm() {
		testAssembler(c -> c.vpcmpeqd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPCMPEQD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpcmpeqd_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpeqd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPEQD_KR_K1_ZMM_ZMMM512B32, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpcmpeqd_kr_xmm_m() {
		testAssembler(c -> c.vpcmpeqd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPEQD_KR_K1_XMM_XMMM128B32, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpeqd_xmm_xmm_m() {
		testAssembler(c -> c.vpcmpeqd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCMPEQD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmpeqd_kr_ymm_m() {
		testAssembler(c -> c.vpcmpeqd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPEQD_KR_K1_YMM_YMMM256B32, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpeqd_ymm_ymm_m() {
		testAssembler(c -> c.vpcmpeqd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCMPEQD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmpeqd_kr_zmm_m() {
		testAssembler(c -> c.vpcmpeqd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPEQD_KR_K1_ZMM_ZMMM512B32, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpeqq_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpeqq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPEQQ_KR_K1_XMM_XMMM128B64, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpcmpeqq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcmpeqq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPCMPEQQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpcmpeqq_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpeqq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPEQQ_KR_K1_YMM_YMMM256B64, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpcmpeqq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpcmpeqq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPCMPEQQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpcmpeqq_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpeqq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPEQQ_KR_K1_ZMM_ZMMM512B64, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpcmpeqq_kr_xmm_m() {
		testAssembler(c -> c.vpcmpeqq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPEQQ_KR_K1_XMM_XMMM128B64, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpeqq_xmm_xmm_m() {
		testAssembler(c -> c.vpcmpeqq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCMPEQQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmpeqq_kr_ymm_m() {
		testAssembler(c -> c.vpcmpeqq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPEQQ_KR_K1_YMM_YMMM256B64, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpeqq_ymm_ymm_m() {
		testAssembler(c -> c.vpcmpeqq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCMPEQQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmpeqq_kr_zmm_m() {
		testAssembler(c -> c.vpcmpeqq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPEQQ_KR_K1_ZMM_ZMMM512B64, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpeqw_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpeqw(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPEQW_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpcmpeqw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcmpeqw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPCMPEQW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpcmpeqw_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpeqw(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPEQW_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpcmpeqw_ymm_ymm_ymm() {
		testAssembler(c -> c.vpcmpeqw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPCMPEQW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpcmpeqw_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpeqw(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPEQW_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpcmpeqw_kr_xmm_m() {
		testAssembler(c -> c.vpcmpeqw(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPEQW_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpeqw_xmm_xmm_m() {
		testAssembler(c -> c.vpcmpeqw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCMPEQW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmpeqw_kr_ymm_m() {
		testAssembler(c -> c.vpcmpeqw(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPEQW_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpeqw_ymm_ymm_m() {
		testAssembler(c -> c.vpcmpeqw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCMPEQW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmpeqw_kr_zmm_m() {
		testAssembler(c -> c.vpcmpeqw(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPEQW_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpestri_xmm_xmm_i() {
		testAssembler(c -> c.vpcmpestri(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPCMPESTRI_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void vpcmpestri_xmm_m_i() {
		testAssembler(c -> c.vpcmpestri(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPCMPESTRI_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpcmpestrm_xmm_xmm_i() {
		testAssembler(c -> c.vpcmpestrm(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPCMPESTRM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void vpcmpestrm_xmm_m_i() {
		testAssembler(c -> c.vpcmpestrm(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPCMPESTRM_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpcmpgtb_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpgtb(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPGTB_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpcmpgtb_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcmpgtb(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPCMPGTB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpcmpgtb_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpgtb(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPGTB_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpcmpgtb_ymm_ymm_ymm() {
		testAssembler(c -> c.vpcmpgtb(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPCMPGTB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpcmpgtb_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpgtb(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPGTB_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpcmpgtb_kr_xmm_m() {
		testAssembler(c -> c.vpcmpgtb(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPGTB_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpgtb_xmm_xmm_m() {
		testAssembler(c -> c.vpcmpgtb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCMPGTB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmpgtb_kr_ymm_m() {
		testAssembler(c -> c.vpcmpgtb(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPGTB_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpgtb_ymm_ymm_m() {
		testAssembler(c -> c.vpcmpgtb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCMPGTB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmpgtb_kr_zmm_m() {
		testAssembler(c -> c.vpcmpgtb(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPGTB_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpgtd_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpgtd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPGTD_KR_K1_XMM_XMMM128B32, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpcmpgtd_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcmpgtd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPCMPGTD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpcmpgtd_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpgtd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPGTD_KR_K1_YMM_YMMM256B32, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpcmpgtd_ymm_ymm_ymm() {
		testAssembler(c -> c.vpcmpgtd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPCMPGTD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpcmpgtd_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpgtd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPGTD_KR_K1_ZMM_ZMMM512B32, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpcmpgtd_kr_xmm_m() {
		testAssembler(c -> c.vpcmpgtd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPGTD_KR_K1_XMM_XMMM128B32, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpgtd_xmm_xmm_m() {
		testAssembler(c -> c.vpcmpgtd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCMPGTD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmpgtd_kr_ymm_m() {
		testAssembler(c -> c.vpcmpgtd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPGTD_KR_K1_YMM_YMMM256B32, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpgtd_ymm_ymm_m() {
		testAssembler(c -> c.vpcmpgtd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCMPGTD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmpgtd_kr_zmm_m() {
		testAssembler(c -> c.vpcmpgtd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPGTD_KR_K1_ZMM_ZMMM512B32, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpgtq_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpgtq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPGTQ_KR_K1_XMM_XMMM128B64, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpcmpgtq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcmpgtq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPCMPGTQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpcmpgtq_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpgtq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPGTQ_KR_K1_YMM_YMMM256B64, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpcmpgtq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpcmpgtq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPCMPGTQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpcmpgtq_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpgtq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPGTQ_KR_K1_ZMM_ZMMM512B64, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpcmpgtq_kr_xmm_m() {
		testAssembler(c -> c.vpcmpgtq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPGTQ_KR_K1_XMM_XMMM128B64, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpgtq_xmm_xmm_m() {
		testAssembler(c -> c.vpcmpgtq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCMPGTQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmpgtq_kr_ymm_m() {
		testAssembler(c -> c.vpcmpgtq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPGTQ_KR_K1_YMM_YMMM256B64, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpgtq_ymm_ymm_m() {
		testAssembler(c -> c.vpcmpgtq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCMPGTQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmpgtq_kr_zmm_m() {
		testAssembler(c -> c.vpcmpgtq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPGTQ_KR_K1_ZMM_ZMMM512B64, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpgtw_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpgtw(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPGTW_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpcmpgtw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcmpgtw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPCMPGTW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpcmpgtw_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpgtw(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPGTW_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpcmpgtw_ymm_ymm_ymm() {
		testAssembler(c -> c.vpcmpgtw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPCMPGTW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpcmpgtw_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpgtw(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPGTW_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpcmpgtw_kr_xmm_m() {
		testAssembler(c -> c.vpcmpgtw(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPGTW_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpgtw_xmm_xmm_m() {
		testAssembler(c -> c.vpcmpgtw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCMPGTW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmpgtw_kr_ymm_m() {
		testAssembler(c -> c.vpcmpgtw(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPGTW_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpgtw_ymm_ymm_m() {
		testAssembler(c -> c.vpcmpgtw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCMPGTW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpcmpgtw_kr_zmm_m() {
		testAssembler(c -> c.vpcmpgtw(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPGTW_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpcmpistri_xmm_xmm_i() {
		testAssembler(c -> c.vpcmpistri(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPCMPISTRI_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void vpcmpistri_xmm_m_i() {
		testAssembler(c -> c.vpcmpistri(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPCMPISTRI_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpcmpistrm_xmm_xmm_i() {
		testAssembler(c -> c.vpcmpistrm(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPCMPISTRM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void vpcmpistrm_xmm_m_i() {
		testAssembler(c -> c.vpcmpistrm(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPCMPISTRM_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpcmpq_kr_xmm_xmm_i() {
		testAssembler(c -> c.vpcmpq(k2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vpcmpq_kr_ymm_ymm_i() {
		testAssembler(c -> c.vpcmpq(k2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vpcmpq_kr_zmm_zmm_i() {
		testAssembler(c -> c.vpcmpq(k2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vpcmpq_kr_xmm_m_i() {
		testAssembler(c -> c.vpcmpq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpq_kr_ymm_m_i() {
		testAssembler(c -> c.vpcmpq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpq_kr_zmm_m_i() {
		testAssembler(c -> c.vpcmpq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpub_kr_xmm_xmm_i() {
		testAssembler(c -> c.vpcmpub(k2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vpcmpub_kr_ymm_ymm_i() {
		testAssembler(c -> c.vpcmpub(k2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vpcmpub_kr_zmm_zmm_i() {
		testAssembler(c -> c.vpcmpub(k2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vpcmpub_kr_xmm_m_i() {
		testAssembler(c -> c.vpcmpub(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpub_kr_ymm_m_i() {
		testAssembler(c -> c.vpcmpub(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpub_kr_zmm_m_i() {
		testAssembler(c -> c.vpcmpub(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpud_kr_xmm_xmm_i() {
		testAssembler(c -> c.vpcmpud(k2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vpcmpud_kr_ymm_ymm_i() {
		testAssembler(c -> c.vpcmpud(k2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vpcmpud_kr_zmm_zmm_i() {
		testAssembler(c -> c.vpcmpud(k2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vpcmpud_kr_xmm_m_i() {
		testAssembler(c -> c.vpcmpud(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpud_kr_ymm_m_i() {
		testAssembler(c -> c.vpcmpud(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpud_kr_zmm_m_i() {
		testAssembler(c -> c.vpcmpud(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpuq_kr_xmm_xmm_i() {
		testAssembler(c -> c.vpcmpuq(k2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vpcmpuq_kr_ymm_ymm_i() {
		testAssembler(c -> c.vpcmpuq(k2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vpcmpuq_kr_zmm_zmm_i() {
		testAssembler(c -> c.vpcmpuq(k2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vpcmpuq_kr_xmm_m_i() {
		testAssembler(c -> c.vpcmpuq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpuq_kr_ymm_m_i() {
		testAssembler(c -> c.vpcmpuq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpuq_kr_zmm_m_i() {
		testAssembler(c -> c.vpcmpuq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpuw_kr_xmm_xmm_i() {
		testAssembler(c -> c.vpcmpuw(k2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vpcmpuw_kr_ymm_ymm_i() {
		testAssembler(c -> c.vpcmpuw(k2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vpcmpuw_kr_zmm_zmm_i() {
		testAssembler(c -> c.vpcmpuw(k2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vpcmpuw_kr_xmm_m_i() {
		testAssembler(c -> c.vpcmpuw(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpuw_kr_ymm_m_i() {
		testAssembler(c -> c.vpcmpuw(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpuw_kr_zmm_m_i() {
		testAssembler(c -> c.vpcmpuw(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpw_kr_xmm_xmm_i() {
		testAssembler(c -> c.vpcmpw(k2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vpcmpw_kr_ymm_ymm_i() {
		testAssembler(c -> c.vpcmpw(k2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vpcmpw_kr_zmm_zmm_i() {
		testAssembler(c -> c.vpcmpw(k2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vpcmpw_kr_xmm_m_i() {
		testAssembler(c -> c.vpcmpw(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpw_kr_ymm_m_i() {
		testAssembler(c -> c.vpcmpw(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcmpw_kr_zmm_m_i() {
		testAssembler(c -> c.vpcmpw(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpcomb_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpcomb(xmm2, xmm3, xmm4, -5), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vpcomb_xmm_xmm_m_i() {
		testAssembler(c -> c.vpcomb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpcomd_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpcomd(xmm2, xmm3, xmm4, -5), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vpcomd_xmm_xmm_m_i() {
		testAssembler(c -> c.vpcomd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpcompressb_xmm_xmm() {
		testAssembler(c -> c.vpcompressb(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSB_XMMM128_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpcompressb_m_xmm() {
		testAssembler(c -> c.vpcompressb(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSB_XMMM128_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpcompressb_ymm_ymm() {
		testAssembler(c -> c.vpcompressb(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSB_YMMM256_K1Z_YMM, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpcompressb_m_ymm() {
		testAssembler(c -> c.vpcompressb(ymmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSB_YMMM256_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpcompressb_zmm_zmm() {
		testAssembler(c -> c.vpcompressb(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSB_ZMMM512_K1Z_ZMM, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpcompressb_m_zmm() {
		testAssembler(c -> c.vpcompressb(zmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSB_ZMMM512_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpcompressd_xmm_xmm() {
		testAssembler(c -> c.vpcompressd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSD_XMMM128_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpcompressd_m_xmm() {
		testAssembler(c -> c.vpcompressd(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSD_XMMM128_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpcompressd_ymm_ymm() {
		testAssembler(c -> c.vpcompressd(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSD_YMMM256_K1Z_YMM, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpcompressd_m_ymm() {
		testAssembler(c -> c.vpcompressd(ymmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSD_YMMM256_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpcompressd_zmm_zmm() {
		testAssembler(c -> c.vpcompressd(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSD_ZMMM512_K1Z_ZMM, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpcompressd_m_zmm() {
		testAssembler(c -> c.vpcompressd(zmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSD_ZMMM512_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpcompressq_xmm_xmm() {
		testAssembler(c -> c.vpcompressq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSQ_XMMM128_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpcompressq_m_xmm() {
		testAssembler(c -> c.vpcompressq(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSQ_XMMM128_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpcompressq_ymm_ymm() {
		testAssembler(c -> c.vpcompressq(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSQ_YMMM256_K1Z_YMM, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpcompressq_m_ymm() {
		testAssembler(c -> c.vpcompressq(ymmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSQ_YMMM256_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpcompressq_zmm_zmm() {
		testAssembler(c -> c.vpcompressq(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSQ_ZMMM512_K1Z_ZMM, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpcompressq_m_zmm() {
		testAssembler(c -> c.vpcompressq(zmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSQ_ZMMM512_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpcompressw_xmm_xmm() {
		testAssembler(c -> c.vpcompressw(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSW_XMMM128_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpcompressw_m_xmm() {
		testAssembler(c -> c.vpcompressw(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSW_XMMM128_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpcompressw_ymm_ymm() {
		testAssembler(c -> c.vpcompressw(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSW_YMMM256_K1Z_YMM, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpcompressw_m_ymm() {
		testAssembler(c -> c.vpcompressw(ymmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSW_YMMM256_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpcompressw_zmm_zmm() {
		testAssembler(c -> c.vpcompressw(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSW_ZMMM512_K1Z_ZMM, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpcompressw_m_zmm() {
		testAssembler(c -> c.vpcompressw(zmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPCOMPRESSW_ZMMM512_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpcomq_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpcomq(xmm2, xmm3, xmm4, -5), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vpcomq_xmm_xmm_m_i() {
		testAssembler(c -> c.vpcomq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpcomub_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpcomub(xmm2, xmm3, xmm4, -5), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vpcomub_xmm_xmm_m_i() {
		testAssembler(c -> c.vpcomub(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpcomud_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpcomud(xmm2, xmm3, xmm4, -5), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vpcomud_xmm_xmm_m_i() {
		testAssembler(c -> c.vpcomud(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpcomuq_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpcomuq(xmm2, xmm3, xmm4, -5), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vpcomuq_xmm_xmm_m_i() {
		testAssembler(c -> c.vpcomuq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpcomuw_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpcomuw(xmm2, xmm3, xmm4, -5), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vpcomuw_xmm_xmm_m_i() {
		testAssembler(c -> c.vpcomuw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpcomw_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpcomw(xmm2, xmm3, xmm4, -5), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vpcomw_xmm_xmm_m_i() {
		testAssembler(c -> c.vpcomw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpconflictd_xmm_xmm() {
		testAssembler(c -> c.vpconflictd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPCONFLICTD_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpconflictd_ymm_ymm() {
		testAssembler(c -> c.vpconflictd(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPCONFLICTD_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpconflictd_zmm_zmm() {
		testAssembler(c -> c.vpconflictd(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPCONFLICTD_ZMM_K1Z_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpconflictd_xmm_m() {
		testAssembler(c -> c.vpconflictd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCONFLICTD_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpconflictd_ymm_m() {
		testAssembler(c -> c.vpconflictd(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCONFLICTD_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpconflictd_zmm_m() {
		testAssembler(c -> c.vpconflictd(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCONFLICTD_ZMM_K1Z_ZMMM512B32, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpconflictq_xmm_xmm() {
		testAssembler(c -> c.vpconflictq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPCONFLICTQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpconflictq_ymm_ymm() {
		testAssembler(c -> c.vpconflictq(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPCONFLICTQ_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpconflictq_zmm_zmm() {
		testAssembler(c -> c.vpconflictq(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPCONFLICTQ_ZMM_K1Z_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpconflictq_xmm_m() {
		testAssembler(c -> c.vpconflictq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCONFLICTQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpconflictq_ymm_m() {
		testAssembler(c -> c.vpconflictq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCONFLICTQ_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpconflictq_zmm_m() {
		testAssembler(c -> c.vpconflictq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCONFLICTQ_ZMM_K1Z_ZMMM512B64, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpdpbssd_xmm_xmm_xmm() {
		testAssembler(c -> c.vpdpbssd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPDPBSSD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpdpbssd_ymm_ymm_ymm() {
		testAssembler(c -> c.vpdpbssd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPDPBSSD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpdpbssd_xmm_xmm_m() {
		testAssembler(c -> c.vpdpbssd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPBSSD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpdpbssd_ymm_ymm_m() {
		testAssembler(c -> c.vpdpbssd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPBSSD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpdpbssds_xmm_xmm_xmm() {
		testAssembler(c -> c.vpdpbssds(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPDPBSSDS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpdpbssds_ymm_ymm_ymm() {
		testAssembler(c -> c.vpdpbssds(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPDPBSSDS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpdpbssds_xmm_xmm_m() {
		testAssembler(c -> c.vpdpbssds(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPBSSDS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpdpbssds_ymm_ymm_m() {
		testAssembler(c -> c.vpdpbssds(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPBSSDS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpdpbsud_xmm_xmm_xmm() {
		testAssembler(c -> c.vpdpbsud(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPDPBSUD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpdpbsud_ymm_ymm_ymm() {
		testAssembler(c -> c.vpdpbsud(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPDPBSUD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpdpbsud_xmm_xmm_m() {
		testAssembler(c -> c.vpdpbsud(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPBSUD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpdpbsud_ymm_ymm_m() {
		testAssembler(c -> c.vpdpbsud(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPBSUD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpdpbsuds_xmm_xmm_xmm() {
		testAssembler(c -> c.vpdpbsuds(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPDPBSUDS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpdpbsuds_ymm_ymm_ymm() {
		testAssembler(c -> c.vpdpbsuds(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPDPBSUDS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpdpbsuds_xmm_xmm_m() {
		testAssembler(c -> c.vpdpbsuds(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPBSUDS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpdpbsuds_ymm_ymm_m() {
		testAssembler(c -> c.vpdpbsuds(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPBSUDS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpdpbusd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpdpbusd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPDPBUSD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpdpbusd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPDPBUSD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpdpbusd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpdpbusd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPDPBUSD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpdpbusd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPDPBUSD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpdpbusd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpdpbusd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPDPBUSD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpdpbusd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpdpbusd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPDPBUSD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpdpbusd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPBUSD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpdpbusd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPDPBUSD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpdpbusd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpdpbusd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPDPBUSD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpdpbusd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPBUSD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpdpbusd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPDPBUSD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpdpbusd_zmm_zmm_m() {
		testAssembler(c -> c.vpdpbusd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPDPBUSD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpdpbusds_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpdpbusds(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPDPBUSDS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpdpbusds(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPDPBUSDS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpdpbusds_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpdpbusds(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPDPBUSDS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpdpbusds(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPDPBUSDS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpdpbusds_zmm_zmm_zmm() {
		testAssembler(c -> c.vpdpbusds(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPDPBUSDS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpdpbusds_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpdpbusds(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPDPBUSDS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpdpbusds(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPBUSDS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpdpbusds(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPDPBUSDS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpdpbusds_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpdpbusds(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPDPBUSDS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpdpbusds(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPBUSDS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpdpbusds(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPDPBUSDS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpdpbusds_zmm_zmm_m() {
		testAssembler(c -> c.vpdpbusds(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPDPBUSDS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpdpbuud_xmm_xmm_xmm() {
		testAssembler(c -> c.vpdpbuud(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPDPBUUD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpdpbuud_ymm_ymm_ymm() {
		testAssembler(c -> c.vpdpbuud(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPDPBUUD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpdpbuud_xmm_xmm_m() {
		testAssembler(c -> c.vpdpbuud(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPBUUD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpdpbuud_ymm_ymm_m() {
		testAssembler(c -> c.vpdpbuud(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPBUUD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpdpbuuds_xmm_xmm_xmm() {
		testAssembler(c -> c.vpdpbuuds(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPDPBUUDS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpdpbuuds_ymm_ymm_ymm() {
		testAssembler(c -> c.vpdpbuuds(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPDPBUUDS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpdpbuuds_xmm_xmm_m() {
		testAssembler(c -> c.vpdpbuuds(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPBUUDS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpdpbuuds_ymm_ymm_m() {
		testAssembler(c -> c.vpdpbuuds(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPBUUDS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpdpwssd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpdpwssd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPDPWSSD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpdpwssd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPDPWSSD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpdpwssd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpdpwssd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPDPWSSD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpdpwssd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPDPWSSD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpdpwssd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpdpwssd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPDPWSSD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpdpwssd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpdpwssd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPDPWSSD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpdpwssd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPWSSD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpdpwssd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPDPWSSD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpdpwssd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpdpwssd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPDPWSSD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpdpwssd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPWSSD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpdpwssd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPDPWSSD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpdpwssd_zmm_zmm_m() {
		testAssembler(c -> c.vpdpwssd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPDPWSSD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpdpwssds_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpdpwssds(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPDPWSSDS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpdpwssds(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPDPWSSDS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpdpwssds_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpdpwssds(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPDPWSSDS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpdpwssds(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPDPWSSDS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpdpwssds_zmm_zmm_zmm() {
		testAssembler(c -> c.vpdpwssds(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPDPWSSDS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpdpwssds_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpdpwssds(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPDPWSSDS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpdpwssds(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPWSSDS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpdpwssds(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPDPWSSDS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpdpwssds_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpdpwssds(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPDPWSSDS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpdpwssds(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPDPWSSDS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpdpwssds(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPDPWSSDS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpdpwssds_zmm_zmm_m() {
		testAssembler(c -> c.vpdpwssds(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPDPWSSDS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vperm2f128_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vperm2f128(ymm2, ymm3, ymm4, -5), Instruction.create(Code.VEX_VPERM2F128_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5));
	}

	@Test
	void vperm2f128_ymm_ymm_m_i() {
		testAssembler(c -> c.vperm2f128(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPERM2F128_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vperm2i128_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vperm2i128(ymm2, ymm3, ymm4, -5), Instruction.create(Code.VEX_VPERM2I128_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5));
	}

	@Test
	void vperm2i128_ymm_ymm_m_i() {
		testAssembler(c -> c.vperm2i128(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPERM2I128_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpermb_xmm_xmm_xmm() {
		testAssembler(c -> c.vpermb(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPERMB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpermb_ymm_ymm_ymm() {
		testAssembler(c -> c.vpermb(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpermb_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermb(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermb_xmm_xmm_m() {
		testAssembler(c -> c.vpermb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermb_ymm_ymm_m() {
		testAssembler(c -> c.vpermb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermb_zmm_zmm_m() {
		testAssembler(c -> c.vpermb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPERMD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpermd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPERMD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPERMD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermd_zmm_zmm_m() {
		testAssembler(c -> c.vpermd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2b_xmm_xmm_xmm() {
		testAssembler(c -> c.vpermi2b(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPERMI2B_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpermi2b_ymm_ymm_ymm() {
		testAssembler(c -> c.vpermi2b(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMI2B_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpermi2b_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermi2b(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMI2B_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermi2b_xmm_xmm_m() {
		testAssembler(c -> c.vpermi2b(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2B_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2b_ymm_ymm_m() {
		testAssembler(c -> c.vpermi2b(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2B_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2b_zmm_zmm_m() {
		testAssembler(c -> c.vpermi2b(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2B_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2d_xmm_xmm_xmm() {
		testAssembler(c -> c.vpermi2d(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPERMI2D_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpermi2d_ymm_ymm_ymm() {
		testAssembler(c -> c.vpermi2d(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMI2D_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpermi2d_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermi2d(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMI2D_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermi2d_xmm_xmm_m() {
		testAssembler(c -> c.vpermi2d(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2D_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2d_ymm_ymm_m() {
		testAssembler(c -> c.vpermi2d(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2D_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2d_zmm_zmm_m() {
		testAssembler(c -> c.vpermi2d(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2D_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2pd_xmm_xmm_xmm() {
		testAssembler(c -> c.vpermi2pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPERMI2PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpermi2pd_ymm_ymm_ymm() {
		testAssembler(c -> c.vpermi2pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMI2PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpermi2pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermi2pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMI2PD_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermi2pd_xmm_xmm_m() {
		testAssembler(c -> c.vpermi2pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2pd_ymm_ymm_m() {
		testAssembler(c -> c.vpermi2pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2pd_zmm_zmm_m() {
		testAssembler(c -> c.vpermi2pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2PD_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2ps_xmm_xmm_xmm() {
		testAssembler(c -> c.vpermi2ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPERMI2PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpermi2ps_ymm_ymm_ymm() {
		testAssembler(c -> c.vpermi2ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMI2PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpermi2ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermi2ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMI2PS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermi2ps_xmm_xmm_m() {
		testAssembler(c -> c.vpermi2ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2ps_ymm_ymm_m() {
		testAssembler(c -> c.vpermi2ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2ps_zmm_zmm_m() {
		testAssembler(c -> c.vpermi2ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2PS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2q_xmm_xmm_xmm() {
		testAssembler(c -> c.vpermi2q(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPERMI2Q_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpermi2q_ymm_ymm_ymm() {
		testAssembler(c -> c.vpermi2q(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMI2Q_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpermi2q_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermi2q(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMI2Q_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermi2q_xmm_xmm_m() {
		testAssembler(c -> c.vpermi2q(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2Q_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2q_ymm_ymm_m() {
		testAssembler(c -> c.vpermi2q(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2Q_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2q_zmm_zmm_m() {
		testAssembler(c -> c.vpermi2q(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2Q_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2w_xmm_xmm_xmm() {
		testAssembler(c -> c.vpermi2w(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPERMI2W_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpermi2w_ymm_ymm_ymm() {
		testAssembler(c -> c.vpermi2w(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMI2W_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpermi2w_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermi2w(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMI2W_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermi2w_xmm_xmm_m() {
		testAssembler(c -> c.vpermi2w(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2W_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2w_ymm_ymm_m() {
		testAssembler(c -> c.vpermi2w(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2W_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermi2w_zmm_zmm_m() {
		testAssembler(c -> c.vpermi2w(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMI2W_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermil2pd_xmm_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpermil2pd(xmm2, xmm3, xmm4, xmm5, 3), Instruction.create(Code.VEX_VPERMIL2PD_XMM_XMM_XMMM128_XMM_IMM4, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5, 3));
	}

	@Test
	void vpermil2pd_xmm_xmm_m_xmm_i() {
		testAssembler(c -> c.vpermil2pd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), xmm5, 3), Instruction.create(Code.VEX_VPERMIL2PD_XMM_XMM_XMMM128_XMM_IMM4, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5, 3));
	}

	@Test
	void vpermil2pd_ymm_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vpermil2pd(ymm2, ymm3, ymm4, ymm5, 3), Instruction.create(Code.VEX_VPERMIL2PD_YMM_YMM_YMMM256_YMM_IMM4, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5, 3));
	}

	@Test
	void vpermil2pd_ymm_ymm_m_ymm_i() {
		testAssembler(c -> c.vpermil2pd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx), ymm5, 3), Instruction.create(Code.VEX_VPERMIL2PD_YMM_YMM_YMMM256_YMM_IMM4, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5, 3));
	}

	@Test
	void vpermil2pd_xmm_xmm_xmm_m_i() {
		testAssembler(c -> c.vpermil2pd(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(ecx), 3), Instruction.create(Code.VEX_VPERMIL2PD_XMM_XMM_XMM_XMMM128_IMM4, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void vpermil2pd_ymm_ymm_ymm_m_i() {
		testAssembler(c -> c.vpermil2pd(ymm2, ymm3, ymm4, ymmword_ptr(0x0L).base(ecx), 3), Instruction.create(Code.VEX_VPERMIL2PD_YMM_YMM_YMM_YMMM256_IMM4, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void vpermil2ps_xmm_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpermil2ps(xmm2, xmm3, xmm4, xmm5, 3), Instruction.create(Code.VEX_VPERMIL2PS_XMM_XMM_XMMM128_XMM_IMM4, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5, 3));
	}

	@Test
	void vpermil2ps_xmm_xmm_m_xmm_i() {
		testAssembler(c -> c.vpermil2ps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), xmm5, 3), Instruction.create(Code.VEX_VPERMIL2PS_XMM_XMM_XMMM128_XMM_IMM4, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5, 3));
	}

	@Test
	void vpermil2ps_ymm_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vpermil2ps(ymm2, ymm3, ymm4, ymm5, 3), Instruction.create(Code.VEX_VPERMIL2PS_YMM_YMM_YMMM256_YMM_IMM4, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5, 3));
	}

	@Test
	void vpermil2ps_ymm_ymm_m_ymm_i() {
		testAssembler(c -> c.vpermil2ps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx), ymm5, 3), Instruction.create(Code.VEX_VPERMIL2PS_YMM_YMM_YMMM256_YMM_IMM4, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5, 3));
	}

	@Test
	void vpermil2ps_xmm_xmm_xmm_m_i() {
		testAssembler(c -> c.vpermil2ps(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(ecx), 3), Instruction.create(Code.VEX_VPERMIL2PS_XMM_XMM_XMM_XMMM128_IMM4, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void vpermil2ps_ymm_ymm_ymm_m_i() {
		testAssembler(c -> c.vpermil2ps(ymm2, ymm3, ymm4, ymmword_ptr(0x0L).base(ecx), 3), Instruction.create(Code.VEX_VPERMIL2PS_YMM_YMM_YMM_YMMM256_IMM4, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void vpermilpd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermilpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPERMILPD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermilpd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPERMILPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermilpd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermilpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPERMILPD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermilpd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMILPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermilpd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermilpd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMILPD_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermilpd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpermilpd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPERMILPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermilpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPERMILPD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermilpd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMILPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermilpd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpermilpd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPERMILPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermilpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPERMILPD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermilpd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMILPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermilpd_zmm_zmm_m() {
		testAssembler(c -> c.vpermilpd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMILPD_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermilpd_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermilpd(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPERMILPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermilpd(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPERMILPD_XMM_K1Z_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermilpd_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermilpd(ymm2, ymm3, -5), Instruction.create(Code.VEX_VPERMILPD_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermilpd(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPERMILPD_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermilpd_zmm_zmm_i() {
		testAssembler(c -> c.vpermilpd(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPERMILPD_ZMM_K1Z_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vpermilpd_xmm_m_i() {
		{ /* if (src1.isBroadcast()) */
			testAssembler(c -> c.vpermilpd(xmm2.k1(), dword_bcst(0x0L).base(edx), -5), applyK(Instruction.create(Code.EVEX_VPERMILPD_XMM_K1Z_XMMM128B64_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermilpd(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPERMILPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermilpd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPERMILPD_XMM_K1Z_XMMM128B64_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermilpd_ymm_m_i() {
		{ /* if (src1.isBroadcast()) */
			testAssembler(c -> c.vpermilpd(ymm2.k1(), dword_bcst(0x0L).base(edx), -5), applyK(Instruction.create(Code.EVEX_VPERMILPD_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermilpd(ymm2, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPERMILPD_YMM_YMMM256_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermilpd(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPERMILPD_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermilpd_zmm_m_i() {
		testAssembler(c -> c.vpermilpd(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPERMILPD_ZMM_K1Z_ZMMM512B64_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpermilps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermilps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPERMILPS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermilps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPERMILPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermilps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermilps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPERMILPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermilps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMILPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermilps_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermilps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMILPS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermilps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpermilps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPERMILPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermilps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPERMILPS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermilps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMILPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermilps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpermilps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPERMILPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermilps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPERMILPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermilps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMILPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermilps_zmm_zmm_m() {
		testAssembler(c -> c.vpermilps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMILPS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermilps_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermilps(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPERMILPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermilps(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPERMILPS_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermilps_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermilps(ymm2, ymm3, -5), Instruction.create(Code.VEX_VPERMILPS_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermilps(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPERMILPS_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermilps_zmm_zmm_i() {
		testAssembler(c -> c.vpermilps(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPERMILPS_ZMM_K1Z_ZMMM512B32_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vpermilps_xmm_m_i() {
		{ /* if (src1.isBroadcast()) */
			testAssembler(c -> c.vpermilps(xmm2.k1(), dword_bcst(0x0L).base(edx), -5), applyK(Instruction.create(Code.EVEX_VPERMILPS_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermilps(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPERMILPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermilps(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPERMILPS_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermilps_ymm_m_i() {
		{ /* if (src1.isBroadcast()) */
			testAssembler(c -> c.vpermilps(ymm2.k1(), dword_bcst(0x0L).base(edx), -5), applyK(Instruction.create(Code.EVEX_VPERMILPS_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermilps(ymm2, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPERMILPS_YMM_YMMM256_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermilps(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPERMILPS_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermilps_zmm_m_i() {
		testAssembler(c -> c.vpermilps(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPERMILPS_ZMM_K1Z_ZMMM512B32_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpermpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vpermpd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpermpd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermpd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMPD_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermpd_ymm_ymm_m() {
		testAssembler(c -> c.vpermpd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermpd_zmm_zmm_m() {
		testAssembler(c -> c.vpermpd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMPD_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermpd_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermpd(ymm2, ymm3, -5), Instruction.create(Code.VEX_VPERMPD_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermpd(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPERMPD_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermpd_zmm_zmm_i() {
		testAssembler(c -> c.vpermpd(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPERMPD_ZMM_K1Z_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vpermpd_ymm_m_i() {
		{ /* if (src1.isBroadcast()) */
			testAssembler(c -> c.vpermpd(ymm2.k1(), dword_bcst(0x0L).base(edx), -5), applyK(Instruction.create(Code.EVEX_VPERMPD_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermpd(ymm2, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPERMPD_YMM_YMMM256_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermpd(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPERMPD_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermpd_zmm_m_i() {
		testAssembler(c -> c.vpermpd(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPERMPD_ZMM_K1Z_ZMMM512B64_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpermps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPERMPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermps_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMPS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpermps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPERMPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPERMPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermps_zmm_zmm_m() {
		testAssembler(c -> c.vpermps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMPS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpermq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpermq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermq_ymm_ymm_m() {
		testAssembler(c -> c.vpermq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermq_zmm_zmm_m() {
		testAssembler(c -> c.vpermq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermq_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermq(ymm2, ymm3, -5), Instruction.create(Code.VEX_VPERMQ_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermq(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPERMQ_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermq_zmm_zmm_i() {
		testAssembler(c -> c.vpermq(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPERMQ_ZMM_K1Z_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vpermq_ymm_m_i() {
		{ /* if (src1.isBroadcast()) */
			testAssembler(c -> c.vpermq(ymm2.k1(), dword_bcst(0x0L).base(edx), -5), applyK(Instruction.create(Code.EVEX_VPERMQ_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpermq(ymm2, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPERMQ_YMM_YMMM256_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpermq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPERMQ_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpermq_zmm_m_i() {
		testAssembler(c -> c.vpermq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPERMQ_ZMM_K1Z_ZMMM512B64_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpermt2b_xmm_xmm_xmm() {
		testAssembler(c -> c.vpermt2b(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPERMT2B_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpermt2b_ymm_ymm_ymm() {
		testAssembler(c -> c.vpermt2b(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMT2B_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpermt2b_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermt2b(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMT2B_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermt2b_xmm_xmm_m() {
		testAssembler(c -> c.vpermt2b(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2B_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermt2b_ymm_ymm_m() {
		testAssembler(c -> c.vpermt2b(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2B_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermt2b_zmm_zmm_m() {
		testAssembler(c -> c.vpermt2b(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2B_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermt2d_xmm_xmm_xmm() {
		testAssembler(c -> c.vpermt2d(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPERMT2D_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpermt2d_ymm_ymm_ymm() {
		testAssembler(c -> c.vpermt2d(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMT2D_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpermt2d_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermt2d(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMT2D_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermt2d_xmm_xmm_m() {
		testAssembler(c -> c.vpermt2d(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2D_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermt2d_ymm_ymm_m() {
		testAssembler(c -> c.vpermt2d(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2D_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermt2d_zmm_zmm_m() {
		testAssembler(c -> c.vpermt2d(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2D_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermt2pd_xmm_xmm_xmm() {
		testAssembler(c -> c.vpermt2pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPERMT2PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpermt2pd_ymm_ymm_ymm() {
		testAssembler(c -> c.vpermt2pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMT2PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpermt2pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermt2pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMT2PD_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermt2pd_xmm_xmm_m() {
		testAssembler(c -> c.vpermt2pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermt2pd_ymm_ymm_m() {
		testAssembler(c -> c.vpermt2pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermt2pd_zmm_zmm_m() {
		testAssembler(c -> c.vpermt2pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2PD_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermt2ps_xmm_xmm_xmm() {
		testAssembler(c -> c.vpermt2ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPERMT2PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpermt2ps_ymm_ymm_ymm() {
		testAssembler(c -> c.vpermt2ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMT2PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpermt2ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermt2ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMT2PS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermt2ps_xmm_xmm_m() {
		testAssembler(c -> c.vpermt2ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermt2ps_ymm_ymm_m() {
		testAssembler(c -> c.vpermt2ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermt2ps_zmm_zmm_m() {
		testAssembler(c -> c.vpermt2ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2PS_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermt2q_xmm_xmm_xmm() {
		testAssembler(c -> c.vpermt2q(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPERMT2Q_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpermt2q_ymm_ymm_ymm() {
		testAssembler(c -> c.vpermt2q(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMT2Q_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpermt2q_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermt2q(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMT2Q_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermt2q_xmm_xmm_m() {
		testAssembler(c -> c.vpermt2q(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2Q_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermt2q_ymm_ymm_m() {
		testAssembler(c -> c.vpermt2q(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2Q_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermt2q_zmm_zmm_m() {
		testAssembler(c -> c.vpermt2q(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2Q_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermt2w_xmm_xmm_xmm() {
		testAssembler(c -> c.vpermt2w(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPERMT2W_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpermt2w_ymm_ymm_ymm() {
		testAssembler(c -> c.vpermt2w(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMT2W_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpermt2w_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermt2w(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMT2W_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermt2w_xmm_xmm_m() {
		testAssembler(c -> c.vpermt2w(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2W_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermt2w_ymm_ymm_m() {
		testAssembler(c -> c.vpermt2w(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2W_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermt2w_zmm_zmm_m() {
		testAssembler(c -> c.vpermt2w(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMT2W_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpermw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPERMW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpermw_ymm_ymm_ymm() {
		testAssembler(c -> c.vpermw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPERMW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpermw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpermw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPERMW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpermw_xmm_xmm_m() {
		testAssembler(c -> c.vpermw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermw_ymm_ymm_m() {
		testAssembler(c -> c.vpermw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpermw_zmm_zmm_m() {
		testAssembler(c -> c.vpermw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPERMW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpexpandb_xmm_xmm() {
		testAssembler(c -> c.vpexpandb(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPEXPANDB_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpexpandb_ymm_ymm() {
		testAssembler(c -> c.vpexpandb(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPEXPANDB_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpexpandb_zmm_zmm() {
		testAssembler(c -> c.vpexpandb(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPEXPANDB_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpexpandb_xmm_m() {
		testAssembler(c -> c.vpexpandb(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPEXPANDB_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpexpandb_ymm_m() {
		testAssembler(c -> c.vpexpandb(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPEXPANDB_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpexpandb_zmm_m() {
		testAssembler(c -> c.vpexpandb(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPEXPANDB_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpexpandd_xmm_xmm() {
		testAssembler(c -> c.vpexpandd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPEXPANDD_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpexpandd_ymm_ymm() {
		testAssembler(c -> c.vpexpandd(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPEXPANDD_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpexpandd_zmm_zmm() {
		testAssembler(c -> c.vpexpandd(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPEXPANDD_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpexpandd_xmm_m() {
		testAssembler(c -> c.vpexpandd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPEXPANDD_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpexpandd_ymm_m() {
		testAssembler(c -> c.vpexpandd(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPEXPANDD_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpexpandd_zmm_m() {
		testAssembler(c -> c.vpexpandd(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPEXPANDD_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpexpandq_xmm_xmm() {
		testAssembler(c -> c.vpexpandq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPEXPANDQ_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpexpandq_ymm_ymm() {
		testAssembler(c -> c.vpexpandq(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPEXPANDQ_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpexpandq_zmm_zmm() {
		testAssembler(c -> c.vpexpandq(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPEXPANDQ_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpexpandq_xmm_m() {
		testAssembler(c -> c.vpexpandq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPEXPANDQ_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpexpandq_ymm_m() {
		testAssembler(c -> c.vpexpandq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPEXPANDQ_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpexpandq_zmm_m() {
		testAssembler(c -> c.vpexpandq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPEXPANDQ_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpexpandw_xmm_xmm() {
		testAssembler(c -> c.vpexpandw(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPEXPANDW_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpexpandw_ymm_ymm() {
		testAssembler(c -> c.vpexpandw(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPEXPANDW_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpexpandw_zmm_zmm() {
		testAssembler(c -> c.vpexpandw(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPEXPANDW_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpexpandw_xmm_m() {
		testAssembler(c -> c.vpexpandw(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPEXPANDW_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpexpandw_ymm_m() {
		testAssembler(c -> c.vpexpandw(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPEXPANDW_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpexpandw_zmm_m() {
		testAssembler(c -> c.vpexpandw(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPEXPANDW_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpextrb_r32_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpextrb(edx, xmm3, -5), Instruction.create(Code.VEX_VPEXTRB_R32M8_XMM_IMM8, ICRegisters.edx, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpextrb(edx, xmm3, -5), Instruction.create(Code.EVEX_VPEXTRB_R32M8_XMM_IMM8, ICRegisters.edx, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpextrb_m_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpextrb(dword_ptr(0x0L).base(ecx), xmm3, -5), Instruction.create(Code.VEX_VPEXTRB_R32M8_XMM_IMM8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpextrb(dword_ptr(0x0L).base(ecx), xmm3, -5), Instruction.create(Code.EVEX_VPEXTRB_R32M8_XMM_IMM8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3, -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpextrd_r32_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpextrd(edx, xmm3, -5), Instruction.create(Code.VEX_VPEXTRD_RM32_XMM_IMM8, ICRegisters.edx, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpextrd(edx, xmm3, -5), Instruction.create(Code.EVEX_VPEXTRD_RM32_XMM_IMM8, ICRegisters.edx, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpextrd_m_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpextrd(dword_ptr(0x0L).base(ecx), xmm3, -5), Instruction.create(Code.VEX_VPEXTRD_RM32_XMM_IMM8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpextrd(dword_ptr(0x0L).base(ecx), xmm3, -5), Instruction.create(Code.EVEX_VPEXTRD_RM32_XMM_IMM8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3, -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpextrw_r32_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpextrw(edx, xmm3, -5), Instruction.create(Code.VEX_VPEXTRW_R32_XMM_IMM8, ICRegisters.edx, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpextrw(edx, xmm3, -5), Instruction.create(Code.EVEX_VPEXTRW_R32_XMM_IMM8, ICRegisters.edx, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpextrw_m_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpextrw(dword_ptr(0x0L).base(ecx), xmm3, -5), Instruction.create(Code.VEX_VPEXTRW_R32M16_XMM_IMM8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpextrw(dword_ptr(0x0L).base(ecx), xmm3, -5), Instruction.create(Code.EVEX_VPEXTRW_R32M16_XMM_IMM8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3, -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpgatherdd_xmm_m() {
		testAssembler(c -> c.vpgatherdd(xmm2.k1(), mem_ptr(0x0L).base(edx).index(xmm3)), applyK(Instruction.create(Code.EVEX_VPGATHERDD_XMM_K1_VM32X, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpgatherdd_ymm_m() {
		testAssembler(c -> c.vpgatherdd(ymm2.k1(), mem_ptr(0x0L).base(edx).index(ymm3)), applyK(Instruction.create(Code.EVEX_VPGATHERDD_YMM_K1_VM32Y, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpgatherdd_zmm_m() {
		testAssembler(c -> c.vpgatherdd(zmm2.k1(), mem_ptr(0x0L).base(edx).index(zmm3)), applyK(Instruction.create(Code.EVEX_VPGATHERDD_ZMM_K1_VM32Z, ICRegisters.zmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpgatherdd_xmm_m_xmm() {
		testAssembler(c -> c.vpgatherdd(xmm2, mem_ptr(0x0L).base(edx).index(xmm3), xmm4), Instruction.create(Code.VEX_VPGATHERDD_XMM_VM32X_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vpgatherdd_ymm_m_ymm() {
		testAssembler(c -> c.vpgatherdd(ymm2, mem_ptr(0x0L).base(edx).index(ymm3), ymm4), Instruction.create(Code.VEX_VPGATHERDD_YMM_VM32Y_YMM, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm3, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm4));
	}

	@Test
	void vpgatherdq_xmm_m() {
		testAssembler(c -> c.vpgatherdq(xmm2.k1(), mem_ptr(0x0L).base(edx).index(xmm3)), applyK(Instruction.create(Code.EVEX_VPGATHERDQ_XMM_K1_VM32X, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpgatherdq_ymm_m() {
		testAssembler(c -> c.vpgatherdq(ymm2.k1(), mem_ptr(0x0L).base(edx).index(xmm3)), applyK(Instruction.create(Code.EVEX_VPGATHERDQ_YMM_K1_VM32X, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpgatherdq_zmm_m() {
		testAssembler(c -> c.vpgatherdq(zmm2.k1(), mem_ptr(0x0L).base(edx).index(ymm3)), applyK(Instruction.create(Code.EVEX_VPGATHERDQ_ZMM_K1_VM32Y, ICRegisters.zmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpgatherdq_xmm_m_xmm() {
		testAssembler(c -> c.vpgatherdq(xmm2, mem_ptr(0x0L).base(edx).index(xmm3), xmm4), Instruction.create(Code.VEX_VPGATHERDQ_XMM_VM32X_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vpgatherdq_ymm_m_ymm() {
		testAssembler(c -> c.vpgatherdq(ymm2, mem_ptr(0x0L).base(edx).index(xmm3), ymm4), Instruction.create(Code.VEX_VPGATHERDQ_YMM_VM32X_YMM, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm4));
	}

	@Test
	void vpgatherqd_xmm_m() {
		{ /* if (Register.isXMM(src.index.get())) */
			testAssembler(c -> c.vpgatherqd(xmm2.k1(), mem_ptr(0x0L).base(edx).index(xmm3)), applyK(Instruction.create(Code.EVEX_VPGATHERQD_XMM_K1_VM64X, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		} /* else */ { /* if (Register.isYMM(src.index.get())) */
			testAssembler(c -> c.vpgatherqd(xmm2.k1(), mem_ptr(0x0L).base(edx).index(ymm3)), applyK(Instruction.create(Code.EVEX_VPGATHERQD_XMM_K1_VM64Y, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vpgatherqd(xmm2.k1(), mem_ptr(0x0L).base(edx).index(zmm1)), applyK(Instruction.create(Code.EVEX_VPGATHERQD_XMM_K1_VM64Y, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm1, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
			});
		}
	}

	@Test
	void vpgatherqd_ymm_m() {
		testAssembler(c -> c.vpgatherqd(ymm2.k1(), mem_ptr(0x0L).base(edx).index(zmm3)), applyK(Instruction.create(Code.EVEX_VPGATHERQD_YMM_K1_VM64Z, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpgatherqd_xmm_m_xmm() {
		{ /* if (Register.isXMM(src1.index.get())) */
			testAssembler(c -> c.vpgatherqd(xmm2, mem_ptr(0x0L).base(edx).index(xmm3), xmm4), Instruction.create(Code.VEX_VPGATHERQD_XMM_VM64X_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
		} /* else */ { /* if (Register.isYMM(src1.index.get())) */
			testAssembler(c -> c.vpgatherqd(xmm2, mem_ptr(0x0L).base(edx).index(ymm3), xmm4), Instruction.create(Code.VEX_VPGATHERQD_XMM_VM64Y_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm3, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vpgatherqd(xmm2, mem_ptr(0x0L).base(edx).index(zmm1), xmm4), Instruction.create(Code.VEX_VPGATHERQD_XMM_VM64Y_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm1, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
			});
		}
	}

	@Test
	void vpgatherqq_xmm_m() {
		testAssembler(c -> c.vpgatherqq(xmm2.k1(), mem_ptr(0x0L).base(edx).index(xmm3)), applyK(Instruction.create(Code.EVEX_VPGATHERQQ_XMM_K1_VM64X, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpgatherqq_ymm_m() {
		testAssembler(c -> c.vpgatherqq(ymm2.k1(), mem_ptr(0x0L).base(edx).index(ymm3)), applyK(Instruction.create(Code.EVEX_VPGATHERQQ_YMM_K1_VM64Y, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpgatherqq_zmm_m() {
		testAssembler(c -> c.vpgatherqq(zmm2.k1(), mem_ptr(0x0L).base(edx).index(zmm3)), applyK(Instruction.create(Code.EVEX_VPGATHERQQ_ZMM_K1_VM64Z, ICRegisters.zmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm3, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpgatherqq_xmm_m_xmm() {
		testAssembler(c -> c.vpgatherqq(xmm2, mem_ptr(0x0L).base(edx).index(xmm3), xmm4), Instruction.create(Code.VEX_VPGATHERQQ_XMM_VM64X_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm3, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vpgatherqq_ymm_m_ymm() {
		testAssembler(c -> c.vpgatherqq(ymm2, mem_ptr(0x0L).base(edx).index(ymm3), ymm4), Instruction.create(Code.VEX_VPGATHERQQ_YMM_VM64Y_YMM, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm3, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm4));
	}

	@Test
	void vphaddbd_xmm_xmm() {
		testAssembler(c -> c.vphaddbd(xmm2, xmm3), Instruction.create(Code.XOP_VPHADDBD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vphaddbd_xmm_m() {
		testAssembler(c -> c.vphaddbd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPHADDBD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphaddbq_xmm_xmm() {
		testAssembler(c -> c.vphaddbq(xmm2, xmm3), Instruction.create(Code.XOP_VPHADDBQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vphaddbq_xmm_m() {
		testAssembler(c -> c.vphaddbq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPHADDBQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphaddbw_xmm_xmm() {
		testAssembler(c -> c.vphaddbw(xmm2, xmm3), Instruction.create(Code.XOP_VPHADDBW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vphaddbw_xmm_m() {
		testAssembler(c -> c.vphaddbw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPHADDBW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphaddd_xmm_xmm_xmm() {
		testAssembler(c -> c.vphaddd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPHADDD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vphaddd_ymm_ymm_ymm() {
		testAssembler(c -> c.vphaddd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPHADDD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vphaddd_xmm_xmm_m() {
		testAssembler(c -> c.vphaddd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPHADDD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphaddd_ymm_ymm_m() {
		testAssembler(c -> c.vphaddd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPHADDD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphadddq_xmm_xmm() {
		testAssembler(c -> c.vphadddq(xmm2, xmm3), Instruction.create(Code.XOP_VPHADDDQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vphadddq_xmm_m() {
		testAssembler(c -> c.vphadddq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPHADDDQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphaddsw_xmm_xmm_xmm() {
		testAssembler(c -> c.vphaddsw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPHADDSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vphaddsw_ymm_ymm_ymm() {
		testAssembler(c -> c.vphaddsw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPHADDSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vphaddsw_xmm_xmm_m() {
		testAssembler(c -> c.vphaddsw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPHADDSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphaddsw_ymm_ymm_m() {
		testAssembler(c -> c.vphaddsw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPHADDSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphaddubd_xmm_xmm() {
		testAssembler(c -> c.vphaddubd(xmm2, xmm3), Instruction.create(Code.XOP_VPHADDUBD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vphaddubd_xmm_m() {
		testAssembler(c -> c.vphaddubd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPHADDUBD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphaddubq_xmm_xmm() {
		testAssembler(c -> c.vphaddubq(xmm2, xmm3), Instruction.create(Code.XOP_VPHADDUBQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vphaddubq_xmm_m() {
		testAssembler(c -> c.vphaddubq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPHADDUBQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphaddubw_xmm_xmm() {
		testAssembler(c -> c.vphaddubw(xmm2, xmm3), Instruction.create(Code.XOP_VPHADDUBW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vphaddubw_xmm_m() {
		testAssembler(c -> c.vphaddubw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPHADDUBW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphaddudq_xmm_xmm() {
		testAssembler(c -> c.vphaddudq(xmm2, xmm3), Instruction.create(Code.XOP_VPHADDUDQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vphaddudq_xmm_m() {
		testAssembler(c -> c.vphaddudq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPHADDUDQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphadduwd_xmm_xmm() {
		testAssembler(c -> c.vphadduwd(xmm2, xmm3), Instruction.create(Code.XOP_VPHADDUWD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vphadduwd_xmm_m() {
		testAssembler(c -> c.vphadduwd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPHADDUWD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphadduwq_xmm_xmm() {
		testAssembler(c -> c.vphadduwq(xmm2, xmm3), Instruction.create(Code.XOP_VPHADDUWQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vphadduwq_xmm_m() {
		testAssembler(c -> c.vphadduwq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPHADDUWQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphaddw_xmm_xmm_xmm() {
		testAssembler(c -> c.vphaddw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPHADDW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vphaddw_ymm_ymm_ymm() {
		testAssembler(c -> c.vphaddw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPHADDW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vphaddw_xmm_xmm_m() {
		testAssembler(c -> c.vphaddw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPHADDW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphaddw_ymm_ymm_m() {
		testAssembler(c -> c.vphaddw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPHADDW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphaddwd_xmm_xmm() {
		testAssembler(c -> c.vphaddwd(xmm2, xmm3), Instruction.create(Code.XOP_VPHADDWD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vphaddwd_xmm_m() {
		testAssembler(c -> c.vphaddwd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPHADDWD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphaddwq_xmm_xmm() {
		testAssembler(c -> c.vphaddwq(xmm2, xmm3), Instruction.create(Code.XOP_VPHADDWQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vphaddwq_xmm_m() {
		testAssembler(c -> c.vphaddwq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPHADDWQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphminposuw_xmm_xmm() {
		testAssembler(c -> c.vphminposuw(xmm2, xmm3), Instruction.create(Code.VEX_VPHMINPOSUW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vphminposuw_xmm_m() {
		testAssembler(c -> c.vphminposuw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPHMINPOSUW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphsubbw_xmm_xmm() {
		testAssembler(c -> c.vphsubbw(xmm2, xmm3), Instruction.create(Code.XOP_VPHSUBBW_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vphsubbw_xmm_m() {
		testAssembler(c -> c.vphsubbw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPHSUBBW_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphsubd_xmm_xmm_xmm() {
		testAssembler(c -> c.vphsubd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPHSUBD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vphsubd_ymm_ymm_ymm() {
		testAssembler(c -> c.vphsubd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPHSUBD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vphsubd_xmm_xmm_m() {
		testAssembler(c -> c.vphsubd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPHSUBD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphsubd_ymm_ymm_m() {
		testAssembler(c -> c.vphsubd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPHSUBD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphsubdq_xmm_xmm() {
		testAssembler(c -> c.vphsubdq(xmm2, xmm3), Instruction.create(Code.XOP_VPHSUBDQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vphsubdq_xmm_m() {
		testAssembler(c -> c.vphsubdq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPHSUBDQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphsubsw_xmm_xmm_xmm() {
		testAssembler(c -> c.vphsubsw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPHSUBSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vphsubsw_ymm_ymm_ymm() {
		testAssembler(c -> c.vphsubsw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPHSUBSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vphsubsw_xmm_xmm_m() {
		testAssembler(c -> c.vphsubsw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPHSUBSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphsubsw_ymm_ymm_m() {
		testAssembler(c -> c.vphsubsw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPHSUBSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphsubw_xmm_xmm_xmm() {
		testAssembler(c -> c.vphsubw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPHSUBW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vphsubw_ymm_ymm_ymm() {
		testAssembler(c -> c.vphsubw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPHSUBW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vphsubw_xmm_xmm_m() {
		testAssembler(c -> c.vphsubw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPHSUBW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphsubw_ymm_ymm_m() {
		testAssembler(c -> c.vphsubw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPHSUBW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vphsubwd_xmm_xmm() {
		testAssembler(c -> c.vphsubwd(xmm2, xmm3), Instruction.create(Code.XOP_VPHSUBWD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vphsubwd_xmm_m() {
		testAssembler(c -> c.vphsubwd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPHSUBWD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpinsrb_xmm_xmm_r32_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpinsrb(xmm2, xmm3, esp, -5), Instruction.create(Code.VEX_VPINSRB_XMM_XMM_R32M8_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.esp, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpinsrb(xmm2, xmm3, esp, -5), Instruction.create(Code.EVEX_VPINSRB_XMM_XMM_R32M8_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.esp, -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpinsrb_xmm_xmm_m_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpinsrb(xmm2, xmm3, dword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPINSRB_XMM_XMM_R32M8_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpinsrb(xmm2, xmm3, dword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.EVEX_VPINSRB_XMM_XMM_R32M8_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpinsrd_xmm_xmm_r32_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpinsrd(xmm2, xmm3, esp, -5), Instruction.create(Code.VEX_VPINSRD_XMM_XMM_RM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.esp, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpinsrd(xmm2, xmm3, esp, -5), Instruction.create(Code.EVEX_VPINSRD_XMM_XMM_RM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.esp, -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpinsrd_xmm_xmm_m_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpinsrd(xmm2, xmm3, dword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPINSRD_XMM_XMM_RM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpinsrd(xmm2, xmm3, dword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.EVEX_VPINSRD_XMM_XMM_RM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpinsrw_xmm_xmm_r32_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpinsrw(xmm2, xmm3, esp, -5), Instruction.create(Code.VEX_VPINSRW_XMM_XMM_R32M16_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.esp, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpinsrw(xmm2, xmm3, esp, -5), Instruction.create(Code.EVEX_VPINSRW_XMM_XMM_R32M16_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.esp, -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpinsrw_xmm_xmm_m_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpinsrw(xmm2, xmm3, dword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPINSRW_XMM_XMM_R32M16_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpinsrw(xmm2, xmm3, dword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.EVEX_VPINSRW_XMM_XMM_R32M16_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vplzcntd_xmm_xmm() {
		testAssembler(c -> c.vplzcntd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPLZCNTD_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vplzcntd_ymm_ymm() {
		testAssembler(c -> c.vplzcntd(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPLZCNTD_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vplzcntd_zmm_zmm() {
		testAssembler(c -> c.vplzcntd(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPLZCNTD_ZMM_K1Z_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vplzcntd_xmm_m() {
		testAssembler(c -> c.vplzcntd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPLZCNTD_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vplzcntd_ymm_m() {
		testAssembler(c -> c.vplzcntd(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPLZCNTD_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vplzcntd_zmm_m() {
		testAssembler(c -> c.vplzcntd(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPLZCNTD_ZMM_K1Z_ZMMM512B32, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vplzcntq_xmm_xmm() {
		testAssembler(c -> c.vplzcntq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPLZCNTQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vplzcntq_ymm_ymm() {
		testAssembler(c -> c.vplzcntq(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPLZCNTQ_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vplzcntq_zmm_zmm() {
		testAssembler(c -> c.vplzcntq(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPLZCNTQ_ZMM_K1Z_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vplzcntq_xmm_m() {
		testAssembler(c -> c.vplzcntq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPLZCNTQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vplzcntq_ymm_m() {
		testAssembler(c -> c.vplzcntq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPLZCNTQ_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vplzcntq_zmm_m() {
		testAssembler(c -> c.vplzcntq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPLZCNTQ_ZMM_K1Z_ZMMM512B64, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmacsdd_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vpmacsdd(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.XOP_VPMACSDD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vpmacsdd_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vpmacsdd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), xmm5), Instruction.create(Code.XOP_VPMACSDD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vpmacsdqh_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vpmacsdqh(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.XOP_VPMACSDQH_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vpmacsdqh_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vpmacsdqh(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), xmm5), Instruction.create(Code.XOP_VPMACSDQH_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vpmacsdql_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vpmacsdql(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.XOP_VPMACSDQL_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vpmacsdql_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vpmacsdql(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), xmm5), Instruction.create(Code.XOP_VPMACSDQL_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vpmacssdd_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vpmacssdd(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.XOP_VPMACSSDD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vpmacssdd_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vpmacssdd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), xmm5), Instruction.create(Code.XOP_VPMACSSDD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vpmacssdqh_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vpmacssdqh(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.XOP_VPMACSSDQH_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vpmacssdqh_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vpmacssdqh(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), xmm5), Instruction.create(Code.XOP_VPMACSSDQH_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vpmacssdql_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vpmacssdql(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.XOP_VPMACSSDQL_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vpmacssdql_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vpmacssdql(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), xmm5), Instruction.create(Code.XOP_VPMACSSDQL_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vpmacsswd_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vpmacsswd(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.XOP_VPMACSSWD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vpmacsswd_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vpmacsswd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), xmm5), Instruction.create(Code.XOP_VPMACSSWD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vpmacssww_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vpmacssww(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.XOP_VPMACSSWW_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vpmacssww_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vpmacssww(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), xmm5), Instruction.create(Code.XOP_VPMACSSWW_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vpmacswd_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vpmacswd(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.XOP_VPMACSWD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vpmacswd_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vpmacswd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), xmm5), Instruction.create(Code.XOP_VPMACSWD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vpmacsww_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vpmacsww(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.XOP_VPMACSWW_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vpmacsww_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vpmacsww(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), xmm5), Instruction.create(Code.XOP_VPMACSWW_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vpmadcsswd_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vpmadcsswd(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.XOP_VPMADCSSWD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vpmadcsswd_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vpmadcsswd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), xmm5), Instruction.create(Code.XOP_VPMADCSSWD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vpmadcswd_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vpmadcswd(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.XOP_VPMADCSWD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vpmadcswd_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vpmadcswd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), xmm5), Instruction.create(Code.XOP_VPMADCSWD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vpmadd52huq_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmadd52huq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMADD52HUQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmadd52huq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMADD52HUQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmadd52huq_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmadd52huq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMADD52HUQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmadd52huq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMADD52HUQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmadd52huq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmadd52huq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMADD52HUQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmadd52huq_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpmadd52huq(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMADD52HUQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmadd52huq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMADD52HUQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmadd52huq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMADD52HUQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmadd52huq_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpmadd52huq(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMADD52HUQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmadd52huq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMADD52HUQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmadd52huq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMADD52HUQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmadd52huq_zmm_zmm_m() {
		testAssembler(c -> c.vpmadd52huq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMADD52HUQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmadd52luq_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmadd52luq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMADD52LUQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmadd52luq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMADD52LUQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmadd52luq_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmadd52luq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMADD52LUQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmadd52luq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMADD52LUQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmadd52luq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmadd52luq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMADD52LUQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmadd52luq_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpmadd52luq(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMADD52LUQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmadd52luq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMADD52LUQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmadd52luq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMADD52LUQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmadd52luq_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpmadd52luq(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMADD52LUQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmadd52luq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMADD52LUQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmadd52luq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMADD52LUQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmadd52luq_zmm_zmm_m() {
		testAssembler(c -> c.vpmadd52luq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMADD52LUQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmaddubsw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaddubsw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMADDUBSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaddubsw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMADDUBSW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaddubsw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaddubsw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMADDUBSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaddubsw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMADDUBSW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaddubsw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmaddubsw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMADDUBSW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmaddubsw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaddubsw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMADDUBSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaddubsw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMADDUBSW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaddubsw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaddubsw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMADDUBSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaddubsw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMADDUBSW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaddubsw_zmm_zmm_m() {
		testAssembler(c -> c.vpmaddubsw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMADDUBSW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmaddwd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaddwd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMADDWD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaddwd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMADDWD_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaddwd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaddwd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMADDWD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaddwd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMADDWD_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaddwd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmaddwd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMADDWD_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmaddwd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaddwd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMADDWD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaddwd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMADDWD_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaddwd_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaddwd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMADDWD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaddwd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMADDWD_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaddwd_zmm_zmm_m() {
		testAssembler(c -> c.vpmaddwd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMADDWD_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmaskmovd_m_xmm_xmm() {
		testAssembler(c -> c.vpmaskmovd(mem_ptr(0x0L).base(ecx), xmm3, xmm4), Instruction.create(Code.VEX_VPMASKMOVD_M128_XMM_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpmaskmovd_m_ymm_ymm() {
		testAssembler(c -> c.vpmaskmovd(mem_ptr(0x0L).base(ecx), ymm3, ymm4), Instruction.create(Code.VEX_VPMASKMOVD_M256_YMM_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpmaskmovd_xmm_xmm_m() {
		testAssembler(c -> c.vpmaskmovd(xmm2, xmm3, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMASKMOVD_XMM_XMM_M128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpmaskmovd_ymm_ymm_m() {
		testAssembler(c -> c.vpmaskmovd(ymm2, ymm3, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMASKMOVD_YMM_YMM_M256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpmaskmovq_m_xmm_xmm() {
		testAssembler(c -> c.vpmaskmovq(mem_ptr(0x0L).base(ecx), xmm3, xmm4), Instruction.create(Code.VEX_VPMASKMOVQ_M128_XMM_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpmaskmovq_m_ymm_ymm() {
		testAssembler(c -> c.vpmaskmovq(mem_ptr(0x0L).base(ecx), ymm3, ymm4), Instruction.create(Code.VEX_VPMASKMOVQ_M256_YMM_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpmaskmovq_xmm_xmm_m() {
		testAssembler(c -> c.vpmaskmovq(xmm2, xmm3, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMASKMOVQ_XMM_XMM_M128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpmaskmovq_ymm_ymm_m() {
		testAssembler(c -> c.vpmaskmovq(ymm2, ymm3, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMASKMOVQ_YMM_YMM_M256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpmaxsb_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxsb(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMAXSB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxsb(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMAXSB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxsb_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxsb(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMAXSB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxsb(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMAXSB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxsb_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmaxsb(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMAXSB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmaxsb_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxsb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMAXSB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxsb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXSB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxsb_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxsb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMAXSB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxsb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXSB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxsb_zmm_zmm_m() {
		testAssembler(c -> c.vpmaxsb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXSB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmaxsd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMAXSD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxsd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMAXSD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxsd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxsd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMAXSD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxsd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMAXSD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxsd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmaxsd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMAXSD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmaxsd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpmaxsd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMAXSD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMAXSD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxsd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXSD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxsd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpmaxsd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMAXSD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxsd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMAXSD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxsd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXSD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxsd_zmm_zmm_m() {
		testAssembler(c -> c.vpmaxsd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXSD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmaxsq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpmaxsq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMAXSQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpmaxsq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpmaxsq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMAXSQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpmaxsq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmaxsq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMAXSQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmaxsq_xmm_xmm_m() {
		testAssembler(c -> c.vpmaxsq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXSQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmaxsq_ymm_ymm_m() {
		testAssembler(c -> c.vpmaxsq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXSQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmaxsq_zmm_zmm_m() {
		testAssembler(c -> c.vpmaxsq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXSQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmaxsw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxsw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMAXSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxsw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMAXSW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxsw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxsw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMAXSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxsw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMAXSW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxsw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmaxsw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMAXSW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmaxsw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxsw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMAXSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxsw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXSW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxsw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxsw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMAXSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxsw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXSW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxsw_zmm_zmm_m() {
		testAssembler(c -> c.vpmaxsw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXSW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmaxub_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxub(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMAXUB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxub(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMAXUB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxub_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxub(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMAXUB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxub(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMAXUB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxub_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmaxub(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMAXUB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmaxub_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxub(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMAXUB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxub(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXUB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxub_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxub(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMAXUB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxub(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXUB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxub_zmm_zmm_m() {
		testAssembler(c -> c.vpmaxub(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXUB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmaxud_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxud(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMAXUD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxud(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMAXUD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxud_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxud(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMAXUD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxud(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMAXUD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxud_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmaxud(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMAXUD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmaxud_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpmaxud(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMAXUD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxud(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMAXUD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxud(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXUD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxud_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpmaxud(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMAXUD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxud(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMAXUD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxud(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXUD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxud_zmm_zmm_m() {
		testAssembler(c -> c.vpmaxud(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXUD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmaxuq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpmaxuq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMAXUQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpmaxuq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpmaxuq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMAXUQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpmaxuq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmaxuq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMAXUQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmaxuq_xmm_xmm_m() {
		testAssembler(c -> c.vpmaxuq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXUQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmaxuq_ymm_ymm_m() {
		testAssembler(c -> c.vpmaxuq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXUQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmaxuq_zmm_zmm_m() {
		testAssembler(c -> c.vpmaxuq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXUQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmaxuw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxuw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMAXUW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxuw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMAXUW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxuw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxuw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMAXUW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxuw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMAXUW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxuw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmaxuw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMAXUW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmaxuw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxuw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMAXUW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxuw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXUW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxuw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmaxuw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMAXUW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmaxuw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXUW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmaxuw_zmm_zmm_m() {
		testAssembler(c -> c.vpmaxuw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMAXUW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpminsb_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminsb(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMINSB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminsb(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMINSB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminsb_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminsb(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMINSB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminsb(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMINSB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminsb_zmm_zmm_zmm() {
		testAssembler(c -> c.vpminsb(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMINSB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpminsb_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminsb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMINSB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminsb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINSB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminsb_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminsb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMINSB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminsb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINSB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminsb_zmm_zmm_m() {
		testAssembler(c -> c.vpminsb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINSB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpminsd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMINSD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminsd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMINSD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminsd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminsd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMINSD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminsd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMINSD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminsd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpminsd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMINSD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpminsd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpminsd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMINSD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMINSD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminsd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINSD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminsd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpminsd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMINSD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminsd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMINSD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminsd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINSD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminsd_zmm_zmm_m() {
		testAssembler(c -> c.vpminsd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINSD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpminsq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpminsq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMINSQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpminsq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpminsq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMINSQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpminsq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpminsq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMINSQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpminsq_xmm_xmm_m() {
		testAssembler(c -> c.vpminsq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINSQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpminsq_ymm_ymm_m() {
		testAssembler(c -> c.vpminsq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINSQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpminsq_zmm_zmm_m() {
		testAssembler(c -> c.vpminsq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINSQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpminsw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminsw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMINSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminsw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMINSW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminsw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminsw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMINSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminsw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMINSW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminsw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpminsw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMINSW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpminsw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminsw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMINSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminsw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINSW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminsw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminsw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMINSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminsw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINSW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminsw_zmm_zmm_m() {
		testAssembler(c -> c.vpminsw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINSW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpminub_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminub(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMINUB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminub(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMINUB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminub_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminub(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMINUB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminub(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMINUB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminub_zmm_zmm_zmm() {
		testAssembler(c -> c.vpminub(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMINUB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpminub_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminub(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMINUB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminub(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINUB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminub_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminub(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMINUB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminub(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINUB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminub_zmm_zmm_m() {
		testAssembler(c -> c.vpminub(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINUB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpminud_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminud(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMINUD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminud(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMINUD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminud_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminud(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMINUD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminud(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMINUD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminud_zmm_zmm_zmm() {
		testAssembler(c -> c.vpminud(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMINUD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpminud_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpminud(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMINUD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminud(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMINUD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminud(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINUD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminud_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpminud(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMINUD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminud(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMINUD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminud(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINUD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminud_zmm_zmm_m() {
		testAssembler(c -> c.vpminud(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINUD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpminuq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpminuq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMINUQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpminuq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpminuq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMINUQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpminuq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpminuq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMINUQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpminuq_xmm_xmm_m() {
		testAssembler(c -> c.vpminuq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINUQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpminuq_ymm_ymm_m() {
		testAssembler(c -> c.vpminuq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINUQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpminuq_zmm_zmm_m() {
		testAssembler(c -> c.vpminuq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINUQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpminuw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminuw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMINUW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminuw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMINUW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminuw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminuw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMINUW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminuw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMINUW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminuw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpminuw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMINUW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpminuw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminuw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMINUW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminuw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINUW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminuw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpminuw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMINUW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpminuw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINUW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpminuw_zmm_zmm_m() {
		testAssembler(c -> c.vpminuw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMINUW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmovb2m_kr_xmm() {
		testAssembler(c -> c.vpmovb2m(k2, xmm3), Instruction.create(Code.EVEX_VPMOVB2M_KR_XMM, ICRegisters.k2, ICRegisters.xmm3));
	}

	@Test
	void vpmovb2m_kr_ymm() {
		testAssembler(c -> c.vpmovb2m(k2, ymm3), Instruction.create(Code.EVEX_VPMOVB2M_KR_YMM, ICRegisters.k2, ICRegisters.ymm3));
	}

	@Test
	void vpmovb2m_kr_zmm() {
		testAssembler(c -> c.vpmovb2m(k2, zmm3), Instruction.create(Code.EVEX_VPMOVB2M_KR_ZMM, ICRegisters.k2, ICRegisters.zmm3));
	}

	@Test
	void vpmovd2m_kr_xmm() {
		testAssembler(c -> c.vpmovd2m(k2, xmm3), Instruction.create(Code.EVEX_VPMOVD2M_KR_XMM, ICRegisters.k2, ICRegisters.xmm3));
	}

	@Test
	void vpmovd2m_kr_ymm() {
		testAssembler(c -> c.vpmovd2m(k2, ymm3), Instruction.create(Code.EVEX_VPMOVD2M_KR_YMM, ICRegisters.k2, ICRegisters.ymm3));
	}

	@Test
	void vpmovd2m_kr_zmm() {
		testAssembler(c -> c.vpmovd2m(k2, zmm3), Instruction.create(Code.EVEX_VPMOVD2M_KR_ZMM, ICRegisters.k2, ICRegisters.zmm3));
	}

	@Test
	void vpmovdb_xmm_xmm() {
		testAssembler(c -> c.vpmovdb(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVDB_XMMM32_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovdb_m_xmm() {
		testAssembler(c -> c.vpmovdb(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVDB_XMMM32_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovdb_xmm_ymm() {
		testAssembler(c -> c.vpmovdb(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVDB_XMMM64_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovdb_m_ymm() {
		testAssembler(c -> c.vpmovdb(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVDB_XMMM64_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovdb_xmm_zmm() {
		testAssembler(c -> c.vpmovdb(xmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVDB_XMMM128_K1Z_ZMM, ICRegisters.xmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovdb_m_zmm() {
		testAssembler(c -> c.vpmovdb(xmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVDB_XMMM128_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovdw_xmm_xmm() {
		testAssembler(c -> c.vpmovdw(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVDW_XMMM64_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovdw_m_xmm() {
		testAssembler(c -> c.vpmovdw(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVDW_XMMM64_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovdw_xmm_ymm() {
		testAssembler(c -> c.vpmovdw(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVDW_XMMM128_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovdw_m_ymm() {
		testAssembler(c -> c.vpmovdw(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVDW_XMMM128_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovdw_ymm_zmm() {
		testAssembler(c -> c.vpmovdw(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVDW_YMMM256_K1Z_ZMM, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovdw_m_zmm() {
		testAssembler(c -> c.vpmovdw(ymmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVDW_YMMM256_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovm2b_xmm_kr() {
		testAssembler(c -> c.vpmovm2b(xmm2, k3), Instruction.create(Code.EVEX_VPMOVM2B_XMM_KR, ICRegisters.xmm2, ICRegisters.k3));
	}

	@Test
	void vpmovm2b_ymm_kr() {
		testAssembler(c -> c.vpmovm2b(ymm2, k3), Instruction.create(Code.EVEX_VPMOVM2B_YMM_KR, ICRegisters.ymm2, ICRegisters.k3));
	}

	@Test
	void vpmovm2b_zmm_kr() {
		testAssembler(c -> c.vpmovm2b(zmm2, k3), Instruction.create(Code.EVEX_VPMOVM2B_ZMM_KR, ICRegisters.zmm2, ICRegisters.k3));
	}

	@Test
	void vpmovm2d_xmm_kr() {
		testAssembler(c -> c.vpmovm2d(xmm2, k3), Instruction.create(Code.EVEX_VPMOVM2D_XMM_KR, ICRegisters.xmm2, ICRegisters.k3));
	}

	@Test
	void vpmovm2d_ymm_kr() {
		testAssembler(c -> c.vpmovm2d(ymm2, k3), Instruction.create(Code.EVEX_VPMOVM2D_YMM_KR, ICRegisters.ymm2, ICRegisters.k3));
	}

	@Test
	void vpmovm2d_zmm_kr() {
		testAssembler(c -> c.vpmovm2d(zmm2, k3), Instruction.create(Code.EVEX_VPMOVM2D_ZMM_KR, ICRegisters.zmm2, ICRegisters.k3));
	}

	@Test
	void vpmovm2q_xmm_kr() {
		testAssembler(c -> c.vpmovm2q(xmm2, k3), Instruction.create(Code.EVEX_VPMOVM2Q_XMM_KR, ICRegisters.xmm2, ICRegisters.k3));
	}

	@Test
	void vpmovm2q_ymm_kr() {
		testAssembler(c -> c.vpmovm2q(ymm2, k3), Instruction.create(Code.EVEX_VPMOVM2Q_YMM_KR, ICRegisters.ymm2, ICRegisters.k3));
	}

	@Test
	void vpmovm2q_zmm_kr() {
		testAssembler(c -> c.vpmovm2q(zmm2, k3), Instruction.create(Code.EVEX_VPMOVM2Q_ZMM_KR, ICRegisters.zmm2, ICRegisters.k3));
	}

	@Test
	void vpmovm2w_xmm_kr() {
		testAssembler(c -> c.vpmovm2w(xmm2, k3), Instruction.create(Code.EVEX_VPMOVM2W_XMM_KR, ICRegisters.xmm2, ICRegisters.k3));
	}

	@Test
	void vpmovm2w_ymm_kr() {
		testAssembler(c -> c.vpmovm2w(ymm2, k3), Instruction.create(Code.EVEX_VPMOVM2W_YMM_KR, ICRegisters.ymm2, ICRegisters.k3));
	}

	@Test
	void vpmovm2w_zmm_kr() {
		testAssembler(c -> c.vpmovm2w(zmm2, k3), Instruction.create(Code.EVEX_VPMOVM2W_ZMM_KR, ICRegisters.zmm2, ICRegisters.k3));
	}

	@Test
	void vpmovmskb_r32_xmm() {
		testAssembler(c -> c.vpmovmskb(edx, xmm3), Instruction.create(Code.VEX_VPMOVMSKB_R32_XMM, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void vpmovmskb_r32_ymm() {
		testAssembler(c -> c.vpmovmskb(edx, ymm3), Instruction.create(Code.VEX_VPMOVMSKB_R32_YMM, ICRegisters.edx, ICRegisters.ymm3));
	}

	@Test
	void vpmovq2m_kr_xmm() {
		testAssembler(c -> c.vpmovq2m(k2, xmm3), Instruction.create(Code.EVEX_VPMOVQ2M_KR_XMM, ICRegisters.k2, ICRegisters.xmm3));
	}

	@Test
	void vpmovq2m_kr_ymm() {
		testAssembler(c -> c.vpmovq2m(k2, ymm3), Instruction.create(Code.EVEX_VPMOVQ2M_KR_YMM, ICRegisters.k2, ICRegisters.ymm3));
	}

	@Test
	void vpmovq2m_kr_zmm() {
		testAssembler(c -> c.vpmovq2m(k2, zmm3), Instruction.create(Code.EVEX_VPMOVQ2M_KR_ZMM, ICRegisters.k2, ICRegisters.zmm3));
	}

	@Test
	void vpmovqb_xmm_xmm() {
		testAssembler(c -> c.vpmovqb(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVQB_XMMM16_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovqb_m_xmm() {
		testAssembler(c -> c.vpmovqb(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVQB_XMMM16_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovqb_xmm_ymm() {
		testAssembler(c -> c.vpmovqb(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVQB_XMMM32_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovqb_m_ymm() {
		testAssembler(c -> c.vpmovqb(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVQB_XMMM32_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovqb_xmm_zmm() {
		testAssembler(c -> c.vpmovqb(xmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVQB_XMMM64_K1Z_ZMM, ICRegisters.xmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovqb_m_zmm() {
		testAssembler(c -> c.vpmovqb(xmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVQB_XMMM64_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovqd_xmm_xmm() {
		testAssembler(c -> c.vpmovqd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVQD_XMMM64_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovqd_m_xmm() {
		testAssembler(c -> c.vpmovqd(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVQD_XMMM64_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovqd_xmm_ymm() {
		testAssembler(c -> c.vpmovqd(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVQD_XMMM128_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovqd_m_ymm() {
		testAssembler(c -> c.vpmovqd(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVQD_XMMM128_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovqd_ymm_zmm() {
		testAssembler(c -> c.vpmovqd(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVQD_YMMM256_K1Z_ZMM, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovqd_m_zmm() {
		testAssembler(c -> c.vpmovqd(ymmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVQD_YMMM256_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovqw_xmm_xmm() {
		testAssembler(c -> c.vpmovqw(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVQW_XMMM32_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovqw_m_xmm() {
		testAssembler(c -> c.vpmovqw(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVQW_XMMM32_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovqw_xmm_ymm() {
		testAssembler(c -> c.vpmovqw(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVQW_XMMM64_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovqw_m_ymm() {
		testAssembler(c -> c.vpmovqw(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVQW_XMMM64_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovqw_xmm_zmm() {
		testAssembler(c -> c.vpmovqw(xmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVQW_XMMM128_K1Z_ZMM, ICRegisters.xmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovqw_m_zmm() {
		testAssembler(c -> c.vpmovqw(xmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVQW_XMMM128_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovsdb_xmm_xmm() {
		testAssembler(c -> c.vpmovsdb(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSDB_XMMM32_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovsdb_m_xmm() {
		testAssembler(c -> c.vpmovsdb(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSDB_XMMM32_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovsdb_xmm_ymm() {
		testAssembler(c -> c.vpmovsdb(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVSDB_XMMM64_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovsdb_m_ymm() {
		testAssembler(c -> c.vpmovsdb(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVSDB_XMMM64_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovsdb_xmm_zmm() {
		testAssembler(c -> c.vpmovsdb(xmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVSDB_XMMM128_K1Z_ZMM, ICRegisters.xmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovsdb_m_zmm() {
		testAssembler(c -> c.vpmovsdb(xmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVSDB_XMMM128_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovsdw_xmm_xmm() {
		testAssembler(c -> c.vpmovsdw(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSDW_XMMM64_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovsdw_m_xmm() {
		testAssembler(c -> c.vpmovsdw(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSDW_XMMM64_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovsdw_xmm_ymm() {
		testAssembler(c -> c.vpmovsdw(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVSDW_XMMM128_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovsdw_m_ymm() {
		testAssembler(c -> c.vpmovsdw(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVSDW_XMMM128_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovsdw_ymm_zmm() {
		testAssembler(c -> c.vpmovsdw(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVSDW_YMMM256_K1Z_ZMM, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovsdw_m_zmm() {
		testAssembler(c -> c.vpmovsdw(ymmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVSDW_YMMM256_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovsqb_xmm_xmm() {
		testAssembler(c -> c.vpmovsqb(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSQB_XMMM16_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovsqb_m_xmm() {
		testAssembler(c -> c.vpmovsqb(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSQB_XMMM16_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovsqb_xmm_ymm() {
		testAssembler(c -> c.vpmovsqb(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVSQB_XMMM32_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovsqb_m_ymm() {
		testAssembler(c -> c.vpmovsqb(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVSQB_XMMM32_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovsqb_xmm_zmm() {
		testAssembler(c -> c.vpmovsqb(xmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVSQB_XMMM64_K1Z_ZMM, ICRegisters.xmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovsqb_m_zmm() {
		testAssembler(c -> c.vpmovsqb(xmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVSQB_XMMM64_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovsqd_xmm_xmm() {
		testAssembler(c -> c.vpmovsqd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSQD_XMMM64_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovsqd_m_xmm() {
		testAssembler(c -> c.vpmovsqd(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSQD_XMMM64_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovsqd_xmm_ymm() {
		testAssembler(c -> c.vpmovsqd(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVSQD_XMMM128_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovsqd_m_ymm() {
		testAssembler(c -> c.vpmovsqd(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVSQD_XMMM128_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovsqd_ymm_zmm() {
		testAssembler(c -> c.vpmovsqd(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVSQD_YMMM256_K1Z_ZMM, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovsqd_m_zmm() {
		testAssembler(c -> c.vpmovsqd(ymmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVSQD_YMMM256_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovsqw_xmm_xmm() {
		testAssembler(c -> c.vpmovsqw(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSQW_XMMM32_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovsqw_m_xmm() {
		testAssembler(c -> c.vpmovsqw(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSQW_XMMM32_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovsqw_xmm_ymm() {
		testAssembler(c -> c.vpmovsqw(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVSQW_XMMM64_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovsqw_m_ymm() {
		testAssembler(c -> c.vpmovsqw(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVSQW_XMMM64_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovsqw_xmm_zmm() {
		testAssembler(c -> c.vpmovsqw(xmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVSQW_XMMM128_K1Z_ZMM, ICRegisters.xmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovsqw_m_zmm() {
		testAssembler(c -> c.vpmovsqw(xmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVSQW_XMMM128_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovswb_xmm_xmm() {
		testAssembler(c -> c.vpmovswb(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSWB_XMMM64_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovswb_m_xmm() {
		testAssembler(c -> c.vpmovswb(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSWB_XMMM64_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovswb_xmm_ymm() {
		testAssembler(c -> c.vpmovswb(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVSWB_XMMM128_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovswb_m_ymm() {
		testAssembler(c -> c.vpmovswb(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVSWB_XMMM128_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovswb_ymm_zmm() {
		testAssembler(c -> c.vpmovswb(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVSWB_YMMM256_K1Z_ZMM, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovswb_m_zmm() {
		testAssembler(c -> c.vpmovswb(ymmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVSWB_YMMM256_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovsxbd_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxbd(xmm2, xmm3), Instruction.create(Code.VEX_VPMOVSXBD_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxbd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSXBD_XMM_K1Z_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxbd_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxbd(ymm2, xmm3), Instruction.create(Code.VEX_VPMOVSXBD_YMM_XMMM64, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxbd(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSXBD_YMM_K1Z_XMMM64, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxbd_zmm_xmm() {
		testAssembler(c -> c.vpmovsxbd(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSXBD_ZMM_K1Z_XMMM128, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovsxbd_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxbd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVSXBD_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxbd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXBD_XMM_K1Z_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxbd_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxbd(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVSXBD_YMM_XMMM64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxbd(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXBD_YMM_K1Z_XMMM64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxbd_zmm_m() {
		testAssembler(c -> c.vpmovsxbd(zmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXBD_ZMM_K1Z_XMMM128, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmovsxbq_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxbq(xmm2, xmm3), Instruction.create(Code.VEX_VPMOVSXBQ_XMM_XMMM16, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxbq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSXBQ_XMM_K1Z_XMMM16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxbq_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxbq(ymm2, xmm3), Instruction.create(Code.VEX_VPMOVSXBQ_YMM_XMMM32, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxbq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSXBQ_YMM_K1Z_XMMM32, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxbq_zmm_xmm() {
		testAssembler(c -> c.vpmovsxbq(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSXBQ_ZMM_K1Z_XMMM64, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovsxbq_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxbq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVSXBQ_XMM_XMMM16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxbq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXBQ_XMM_K1Z_XMMM16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxbq_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxbq(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVSXBQ_YMM_XMMM32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxbq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXBQ_YMM_K1Z_XMMM32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxbq_zmm_m() {
		testAssembler(c -> c.vpmovsxbq(zmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXBQ_ZMM_K1Z_XMMM64, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmovsxbw_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxbw(xmm2, xmm3), Instruction.create(Code.VEX_VPMOVSXBW_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxbw(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSXBW_XMM_K1Z_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxbw_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxbw(ymm2, xmm3), Instruction.create(Code.VEX_VPMOVSXBW_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxbw(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSXBW_YMM_K1Z_XMMM128, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxbw_zmm_ymm() {
		testAssembler(c -> c.vpmovsxbw(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVSXBW_ZMM_K1Z_YMMM256, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovsxbw_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxbw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVSXBW_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxbw(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXBW_XMM_K1Z_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxbw_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxbw(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVSXBW_YMM_XMMM128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxbw(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXBW_YMM_K1Z_XMMM128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxbw_zmm_m() {
		testAssembler(c -> c.vpmovsxbw(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXBW_ZMM_K1Z_YMMM256, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmovsxdq_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxdq(xmm2, xmm3), Instruction.create(Code.VEX_VPMOVSXDQ_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxdq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSXDQ_XMM_K1Z_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxdq_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxdq(ymm2, xmm3), Instruction.create(Code.VEX_VPMOVSXDQ_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxdq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSXDQ_YMM_K1Z_XMMM128, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxdq_zmm_ymm() {
		testAssembler(c -> c.vpmovsxdq(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVSXDQ_ZMM_K1Z_YMMM256, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovsxdq_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxdq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVSXDQ_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxdq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXDQ_XMM_K1Z_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxdq_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxdq(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVSXDQ_YMM_XMMM128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxdq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXDQ_YMM_K1Z_XMMM128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxdq_zmm_m() {
		testAssembler(c -> c.vpmovsxdq(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXDQ_ZMM_K1Z_YMMM256, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmovsxwd_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxwd(xmm2, xmm3), Instruction.create(Code.VEX_VPMOVSXWD_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxwd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSXWD_XMM_K1Z_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxwd_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxwd(ymm2, xmm3), Instruction.create(Code.VEX_VPMOVSXWD_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxwd(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSXWD_YMM_K1Z_XMMM128, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxwd_zmm_ymm() {
		testAssembler(c -> c.vpmovsxwd(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVSXWD_ZMM_K1Z_YMMM256, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovsxwd_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxwd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVSXWD_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxwd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXWD_XMM_K1Z_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxwd_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxwd(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVSXWD_YMM_XMMM128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxwd(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXWD_YMM_K1Z_XMMM128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxwd_zmm_m() {
		testAssembler(c -> c.vpmovsxwd(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXWD_ZMM_K1Z_YMMM256, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmovsxwq_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxwq(xmm2, xmm3), Instruction.create(Code.VEX_VPMOVSXWQ_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxwq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSXWQ_XMM_K1Z_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxwq_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxwq(ymm2, xmm3), Instruction.create(Code.VEX_VPMOVSXWQ_YMM_XMMM64, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxwq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSXWQ_YMM_K1Z_XMMM64, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxwq_zmm_xmm() {
		testAssembler(c -> c.vpmovsxwq(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVSXWQ_ZMM_K1Z_XMMM128, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovsxwq_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxwq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVSXWQ_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxwq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXWQ_XMM_K1Z_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxwq_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovsxwq(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVSXWQ_YMM_XMMM64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovsxwq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXWQ_YMM_K1Z_XMMM64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovsxwq_zmm_m() {
		testAssembler(c -> c.vpmovsxwq(zmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVSXWQ_ZMM_K1Z_XMMM128, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmovusdb_xmm_xmm() {
		testAssembler(c -> c.vpmovusdb(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSDB_XMMM32_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovusdb_m_xmm() {
		testAssembler(c -> c.vpmovusdb(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSDB_XMMM32_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovusdb_xmm_ymm() {
		testAssembler(c -> c.vpmovusdb(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVUSDB_XMMM64_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovusdb_m_ymm() {
		testAssembler(c -> c.vpmovusdb(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVUSDB_XMMM64_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovusdb_xmm_zmm() {
		testAssembler(c -> c.vpmovusdb(xmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSDB_XMMM128_K1Z_ZMM, ICRegisters.xmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovusdb_m_zmm() {
		testAssembler(c -> c.vpmovusdb(xmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSDB_XMMM128_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovusdw_xmm_xmm() {
		testAssembler(c -> c.vpmovusdw(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSDW_XMMM64_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovusdw_m_xmm() {
		testAssembler(c -> c.vpmovusdw(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSDW_XMMM64_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovusdw_xmm_ymm() {
		testAssembler(c -> c.vpmovusdw(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVUSDW_XMMM128_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovusdw_m_ymm() {
		testAssembler(c -> c.vpmovusdw(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVUSDW_XMMM128_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovusdw_ymm_zmm() {
		testAssembler(c -> c.vpmovusdw(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSDW_YMMM256_K1Z_ZMM, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovusdw_m_zmm() {
		testAssembler(c -> c.vpmovusdw(ymmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSDW_YMMM256_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovusqb_xmm_xmm() {
		testAssembler(c -> c.vpmovusqb(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQB_XMMM16_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovusqb_m_xmm() {
		testAssembler(c -> c.vpmovusqb(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQB_XMMM16_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovusqb_xmm_ymm() {
		testAssembler(c -> c.vpmovusqb(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQB_XMMM32_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovusqb_m_ymm() {
		testAssembler(c -> c.vpmovusqb(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQB_XMMM32_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovusqb_xmm_zmm() {
		testAssembler(c -> c.vpmovusqb(xmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQB_XMMM64_K1Z_ZMM, ICRegisters.xmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovusqb_m_zmm() {
		testAssembler(c -> c.vpmovusqb(xmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQB_XMMM64_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovusqd_xmm_xmm() {
		testAssembler(c -> c.vpmovusqd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQD_XMMM64_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovusqd_m_xmm() {
		testAssembler(c -> c.vpmovusqd(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQD_XMMM64_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovusqd_xmm_ymm() {
		testAssembler(c -> c.vpmovusqd(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQD_XMMM128_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovusqd_m_ymm() {
		testAssembler(c -> c.vpmovusqd(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQD_XMMM128_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovusqd_ymm_zmm() {
		testAssembler(c -> c.vpmovusqd(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQD_YMMM256_K1Z_ZMM, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovusqd_m_zmm() {
		testAssembler(c -> c.vpmovusqd(ymmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQD_YMMM256_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovusqw_xmm_xmm() {
		testAssembler(c -> c.vpmovusqw(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQW_XMMM32_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovusqw_m_xmm() {
		testAssembler(c -> c.vpmovusqw(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQW_XMMM32_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovusqw_xmm_ymm() {
		testAssembler(c -> c.vpmovusqw(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQW_XMMM64_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovusqw_m_ymm() {
		testAssembler(c -> c.vpmovusqw(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQW_XMMM64_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovusqw_xmm_zmm() {
		testAssembler(c -> c.vpmovusqw(xmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQW_XMMM128_K1Z_ZMM, ICRegisters.xmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovusqw_m_zmm() {
		testAssembler(c -> c.vpmovusqw(xmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSQW_XMMM128_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovuswb_xmm_xmm() {
		testAssembler(c -> c.vpmovuswb(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSWB_XMMM64_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovuswb_m_xmm() {
		testAssembler(c -> c.vpmovuswb(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSWB_XMMM64_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovuswb_xmm_ymm() {
		testAssembler(c -> c.vpmovuswb(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVUSWB_XMMM128_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovuswb_m_ymm() {
		testAssembler(c -> c.vpmovuswb(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVUSWB_XMMM128_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovuswb_ymm_zmm() {
		testAssembler(c -> c.vpmovuswb(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSWB_YMMM256_K1Z_ZMM, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovuswb_m_zmm() {
		testAssembler(c -> c.vpmovuswb(ymmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVUSWB_YMMM256_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovw2m_kr_xmm() {
		testAssembler(c -> c.vpmovw2m(k2, xmm3), Instruction.create(Code.EVEX_VPMOVW2M_KR_XMM, ICRegisters.k2, ICRegisters.xmm3));
	}

	@Test
	void vpmovw2m_kr_ymm() {
		testAssembler(c -> c.vpmovw2m(k2, ymm3), Instruction.create(Code.EVEX_VPMOVW2M_KR_YMM, ICRegisters.k2, ICRegisters.ymm3));
	}

	@Test
	void vpmovw2m_kr_zmm() {
		testAssembler(c -> c.vpmovw2m(k2, zmm3), Instruction.create(Code.EVEX_VPMOVW2M_KR_ZMM, ICRegisters.k2, ICRegisters.zmm3));
	}

	@Test
	void vpmovwb_xmm_xmm() {
		testAssembler(c -> c.vpmovwb(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVWB_XMMM64_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovwb_m_xmm() {
		testAssembler(c -> c.vpmovwb(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVWB_XMMM64_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovwb_xmm_ymm() {
		testAssembler(c -> c.vpmovwb(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVWB_XMMM128_K1Z_YMM, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovwb_m_ymm() {
		testAssembler(c -> c.vpmovwb(xmmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVWB_XMMM128_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovwb_ymm_zmm() {
		testAssembler(c -> c.vpmovwb(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVWB_YMMM256_K1Z_ZMM, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovwb_m_zmm() {
		testAssembler(c -> c.vpmovwb(ymmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPMOVWB_YMMM256_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpmovzxbd_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxbd(xmm2, xmm3), Instruction.create(Code.VEX_VPMOVZXBD_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxbd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVZXBD_XMM_K1Z_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxbd_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxbd(ymm2, xmm3), Instruction.create(Code.VEX_VPMOVZXBD_YMM_XMMM64, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxbd(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVZXBD_YMM_K1Z_XMMM64, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxbd_zmm_xmm() {
		testAssembler(c -> c.vpmovzxbd(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVZXBD_ZMM_K1Z_XMMM128, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovzxbd_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxbd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVZXBD_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxbd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXBD_XMM_K1Z_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxbd_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxbd(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVZXBD_YMM_XMMM64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxbd(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXBD_YMM_K1Z_XMMM64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxbd_zmm_m() {
		testAssembler(c -> c.vpmovzxbd(zmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXBD_ZMM_K1Z_XMMM128, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmovzxbq_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxbq(xmm2, xmm3), Instruction.create(Code.VEX_VPMOVZXBQ_XMM_XMMM16, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxbq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVZXBQ_XMM_K1Z_XMMM16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxbq_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxbq(ymm2, xmm3), Instruction.create(Code.VEX_VPMOVZXBQ_YMM_XMMM32, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxbq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVZXBQ_YMM_K1Z_XMMM32, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxbq_zmm_xmm() {
		testAssembler(c -> c.vpmovzxbq(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVZXBQ_ZMM_K1Z_XMMM64, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovzxbq_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxbq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVZXBQ_XMM_XMMM16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxbq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXBQ_XMM_K1Z_XMMM16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxbq_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxbq(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVZXBQ_YMM_XMMM32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxbq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXBQ_YMM_K1Z_XMMM32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxbq_zmm_m() {
		testAssembler(c -> c.vpmovzxbq(zmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXBQ_ZMM_K1Z_XMMM64, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmovzxbw_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxbw(xmm2, xmm3), Instruction.create(Code.VEX_VPMOVZXBW_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxbw(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVZXBW_XMM_K1Z_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxbw_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxbw(ymm2, xmm3), Instruction.create(Code.VEX_VPMOVZXBW_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxbw(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVZXBW_YMM_K1Z_XMMM128, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxbw_zmm_ymm() {
		testAssembler(c -> c.vpmovzxbw(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVZXBW_ZMM_K1Z_YMMM256, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovzxbw_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxbw(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVZXBW_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxbw(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXBW_XMM_K1Z_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxbw_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxbw(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVZXBW_YMM_XMMM128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxbw(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXBW_YMM_K1Z_XMMM128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxbw_zmm_m() {
		testAssembler(c -> c.vpmovzxbw(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXBW_ZMM_K1Z_YMMM256, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmovzxdq_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxdq(xmm2, xmm3), Instruction.create(Code.VEX_VPMOVZXDQ_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxdq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVZXDQ_XMM_K1Z_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxdq_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxdq(ymm2, xmm3), Instruction.create(Code.VEX_VPMOVZXDQ_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxdq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVZXDQ_YMM_K1Z_XMMM128, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxdq_zmm_ymm() {
		testAssembler(c -> c.vpmovzxdq(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVZXDQ_ZMM_K1Z_YMMM256, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovzxdq_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxdq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVZXDQ_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxdq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXDQ_XMM_K1Z_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxdq_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxdq(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVZXDQ_YMM_XMMM128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxdq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXDQ_YMM_K1Z_XMMM128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxdq_zmm_m() {
		testAssembler(c -> c.vpmovzxdq(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXDQ_ZMM_K1Z_YMMM256, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmovzxwd_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxwd(xmm2, xmm3), Instruction.create(Code.VEX_VPMOVZXWD_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxwd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVZXWD_XMM_K1Z_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxwd_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxwd(ymm2, xmm3), Instruction.create(Code.VEX_VPMOVZXWD_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxwd(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVZXWD_YMM_K1Z_XMMM128, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxwd_zmm_ymm() {
		testAssembler(c -> c.vpmovzxwd(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPMOVZXWD_ZMM_K1Z_YMMM256, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpmovzxwd_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxwd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVZXWD_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxwd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXWD_XMM_K1Z_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxwd_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxwd(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVZXWD_YMM_XMMM128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxwd(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXWD_YMM_K1Z_XMMM128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxwd_zmm_m() {
		testAssembler(c -> c.vpmovzxwd(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXWD_ZMM_K1Z_YMMM256, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmovzxwq_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxwq(xmm2, xmm3), Instruction.create(Code.VEX_VPMOVZXWQ_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxwq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVZXWQ_XMM_K1Z_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxwq_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxwq(ymm2, xmm3), Instruction.create(Code.VEX_VPMOVZXWQ_YMM_XMMM64, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxwq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVZXWQ_YMM_K1Z_XMMM64, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxwq_zmm_xmm() {
		testAssembler(c -> c.vpmovzxwq(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPMOVZXWQ_ZMM_K1Z_XMMM128, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpmovzxwq_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxwq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVZXWQ_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxwq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXWQ_XMM_K1Z_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxwq_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmovzxwq(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMOVZXWQ_YMM_XMMM64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmovzxwq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXWQ_YMM_K1Z_XMMM64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmovzxwq_zmm_m() {
		testAssembler(c -> c.vpmovzxwq(zmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMOVZXWQ_ZMM_K1Z_XMMM128, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmuldq_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmuldq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMULDQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmuldq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMULDQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmuldq_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmuldq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMULDQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmuldq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMULDQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmuldq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmuldq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMULDQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmuldq_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpmuldq(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMULDQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmuldq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMULDQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmuldq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULDQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmuldq_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpmuldq(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMULDQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmuldq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMULDQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmuldq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULDQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmuldq_zmm_zmm_m() {
		testAssembler(c -> c.vpmuldq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULDQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmulhrsw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmulhrsw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMULHRSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmulhrsw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMULHRSW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmulhrsw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmulhrsw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMULHRSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmulhrsw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMULHRSW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmulhrsw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmulhrsw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMULHRSW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmulhrsw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmulhrsw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMULHRSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmulhrsw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULHRSW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmulhrsw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmulhrsw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMULHRSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmulhrsw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULHRSW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmulhrsw_zmm_zmm_m() {
		testAssembler(c -> c.vpmulhrsw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULHRSW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmulhuw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmulhuw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMULHUW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmulhuw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMULHUW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmulhuw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmulhuw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMULHUW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmulhuw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMULHUW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmulhuw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmulhuw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMULHUW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmulhuw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmulhuw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMULHUW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmulhuw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULHUW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmulhuw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmulhuw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMULHUW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmulhuw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULHUW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmulhuw_zmm_zmm_m() {
		testAssembler(c -> c.vpmulhuw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULHUW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmulhw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmulhw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMULHW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmulhw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMULHW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmulhw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmulhw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMULHW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmulhw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMULHW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmulhw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmulhw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMULHW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmulhw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmulhw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMULHW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmulhw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULHW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmulhw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmulhw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMULHW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmulhw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULHW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmulhw_zmm_zmm_m() {
		testAssembler(c -> c.vpmulhw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULHW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmulld_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmulld(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMULLD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmulld(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMULLD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmulld_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmulld(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMULLD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmulld(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMULLD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmulld_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmulld(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMULLD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmulld_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpmulld(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMULLD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmulld(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMULLD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmulld(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULLD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmulld_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpmulld(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMULLD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmulld(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMULLD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmulld(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULLD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmulld_zmm_zmm_m() {
		testAssembler(c -> c.vpmulld(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULLD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmullq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpmullq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMULLQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpmullq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpmullq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMULLQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpmullq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmullq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMULLQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmullq_xmm_xmm_m() {
		testAssembler(c -> c.vpmullq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULLQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmullq_ymm_ymm_m() {
		testAssembler(c -> c.vpmullq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULLQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmullq_zmm_zmm_m() {
		testAssembler(c -> c.vpmullq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULLQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmullw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmullw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMULLW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmullw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMULLW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmullw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmullw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMULLW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmullw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMULLW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmullw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmullw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMULLW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmullw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmullw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMULLW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmullw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULLW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmullw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmullw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMULLW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmullw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULLW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmullw_zmm_zmm_m() {
		testAssembler(c -> c.vpmullw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULLW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmultishiftqb_xmm_xmm_xmm() {
		testAssembler(c -> c.vpmultishiftqb(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMULTISHIFTQB_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpmultishiftqb_ymm_ymm_ymm() {
		testAssembler(c -> c.vpmultishiftqb(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMULTISHIFTQB_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpmultishiftqb_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmultishiftqb(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMULTISHIFTQB_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmultishiftqb_xmm_xmm_m() {
		testAssembler(c -> c.vpmultishiftqb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULTISHIFTQB_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmultishiftqb_ymm_ymm_m() {
		testAssembler(c -> c.vpmultishiftqb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULTISHIFTQB_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmultishiftqb_zmm_zmm_m() {
		testAssembler(c -> c.vpmultishiftqb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULTISHIFTQB_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpmuludq_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmuludq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPMULUDQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmuludq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPMULUDQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmuludq_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmuludq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPMULUDQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmuludq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPMULUDQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmuludq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpmuludq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPMULUDQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpmuludq_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpmuludq(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMULUDQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmuludq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMULUDQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmuludq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULUDQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmuludq_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpmuludq(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPMULUDQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpmuludq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPMULUDQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpmuludq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULUDQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpmuludq_zmm_zmm_m() {
		testAssembler(c -> c.vpmuludq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPMULUDQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpopcntb_xmm_xmm() {
		testAssembler(c -> c.vpopcntb(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPOPCNTB_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpopcntb_ymm_ymm() {
		testAssembler(c -> c.vpopcntb(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPOPCNTB_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpopcntb_zmm_zmm() {
		testAssembler(c -> c.vpopcntb(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPOPCNTB_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpopcntb_xmm_m() {
		testAssembler(c -> c.vpopcntb(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPOPCNTB_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpopcntb_ymm_m() {
		testAssembler(c -> c.vpopcntb(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPOPCNTB_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpopcntb_zmm_m() {
		testAssembler(c -> c.vpopcntb(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPOPCNTB_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpopcntd_xmm_xmm() {
		testAssembler(c -> c.vpopcntd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPOPCNTD_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpopcntd_ymm_ymm() {
		testAssembler(c -> c.vpopcntd(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPOPCNTD_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpopcntd_zmm_zmm() {
		testAssembler(c -> c.vpopcntd(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPOPCNTD_ZMM_K1Z_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpopcntd_xmm_m() {
		testAssembler(c -> c.vpopcntd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPOPCNTD_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpopcntd_ymm_m() {
		testAssembler(c -> c.vpopcntd(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPOPCNTD_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpopcntd_zmm_m() {
		testAssembler(c -> c.vpopcntd(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPOPCNTD_ZMM_K1Z_ZMMM512B32, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpopcntq_xmm_xmm() {
		testAssembler(c -> c.vpopcntq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPOPCNTQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpopcntq_ymm_ymm() {
		testAssembler(c -> c.vpopcntq(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPOPCNTQ_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpopcntq_zmm_zmm() {
		testAssembler(c -> c.vpopcntq(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPOPCNTQ_ZMM_K1Z_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpopcntq_xmm_m() {
		testAssembler(c -> c.vpopcntq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPOPCNTQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpopcntq_ymm_m() {
		testAssembler(c -> c.vpopcntq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPOPCNTQ_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpopcntq_zmm_m() {
		testAssembler(c -> c.vpopcntq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPOPCNTQ_ZMM_K1Z_ZMMM512B64, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpopcntw_xmm_xmm() {
		testAssembler(c -> c.vpopcntw(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPOPCNTW_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpopcntw_ymm_ymm() {
		testAssembler(c -> c.vpopcntw(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPOPCNTW_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpopcntw_zmm_zmm() {
		testAssembler(c -> c.vpopcntw(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPOPCNTW_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpopcntw_xmm_m() {
		testAssembler(c -> c.vpopcntw(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPOPCNTW_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpopcntw_ymm_m() {
		testAssembler(c -> c.vpopcntw(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPOPCNTW_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpopcntw_zmm_m() {
		testAssembler(c -> c.vpopcntw(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPOPCNTW_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpor_xmm_xmm_xmm() {
		testAssembler(c -> c.vpor(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPOR_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpor_ymm_ymm_ymm() {
		testAssembler(c -> c.vpor(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPOR_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpor_xmm_xmm_m() {
		testAssembler(c -> c.vpor(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPOR_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpor_ymm_ymm_m() {
		testAssembler(c -> c.vpor(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPOR_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpord_xmm_xmm_xmm() {
		testAssembler(c -> c.vpord(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPORD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpord_ymm_ymm_ymm() {
		testAssembler(c -> c.vpord(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPORD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpord_zmm_zmm_zmm() {
		testAssembler(c -> c.vpord(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPORD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpord_xmm_xmm_m() {
		testAssembler(c -> c.vpord(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPORD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpord_ymm_ymm_m() {
		testAssembler(c -> c.vpord(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPORD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpord_zmm_zmm_m() {
		testAssembler(c -> c.vpord(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPORD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vporq_xmm_xmm_xmm() {
		testAssembler(c -> c.vporq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPORQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vporq_ymm_ymm_ymm() {
		testAssembler(c -> c.vporq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPORQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vporq_zmm_zmm_zmm() {
		testAssembler(c -> c.vporq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPORQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vporq_xmm_xmm_m() {
		testAssembler(c -> c.vporq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPORQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vporq_ymm_ymm_m() {
		testAssembler(c -> c.vporq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPORQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vporq_zmm_zmm_m() {
		testAssembler(c -> c.vporq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPORQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpperm_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vpperm(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.XOP_VPPERM_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vpperm_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vpperm(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), xmm5), Instruction.create(Code.XOP_VPPERM_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vpperm_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vpperm(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPPERM_XMM_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vprold_xmm_xmm_i() {
		testAssembler(c -> c.vprold(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPROLD_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1));
	}

	@Test
	void vprold_ymm_ymm_i() {
		testAssembler(c -> c.vprold(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPROLD_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1));
	}

	@Test
	void vprold_zmm_zmm_i() {
		testAssembler(c -> c.vprold(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPROLD_ZMM_K1Z_ZMMM512B32_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vprold_xmm_m_i() {
		testAssembler(c -> c.vprold(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPROLD_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vprold_ymm_m_i() {
		testAssembler(c -> c.vprold(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPROLD_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vprold_zmm_m_i() {
		testAssembler(c -> c.vprold(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPROLD_ZMM_K1Z_ZMMM512B32_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vprolq_xmm_xmm_i() {
		testAssembler(c -> c.vprolq(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPROLQ_XMM_K1Z_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1));
	}

	@Test
	void vprolq_ymm_ymm_i() {
		testAssembler(c -> c.vprolq(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPROLQ_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1));
	}

	@Test
	void vprolq_zmm_zmm_i() {
		testAssembler(c -> c.vprolq(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPROLQ_ZMM_K1Z_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vprolq_xmm_m_i() {
		testAssembler(c -> c.vprolq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPROLQ_XMM_K1Z_XMMM128B64_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vprolq_ymm_m_i() {
		testAssembler(c -> c.vprolq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPROLQ_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vprolq_zmm_m_i() {
		testAssembler(c -> c.vprolq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPROLQ_ZMM_K1Z_ZMMM512B64_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vprolvd_xmm_xmm_xmm() {
		testAssembler(c -> c.vprolvd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPROLVD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vprolvd_ymm_ymm_ymm() {
		testAssembler(c -> c.vprolvd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPROLVD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vprolvd_zmm_zmm_zmm() {
		testAssembler(c -> c.vprolvd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPROLVD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vprolvd_xmm_xmm_m() {
		testAssembler(c -> c.vprolvd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPROLVD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vprolvd_ymm_ymm_m() {
		testAssembler(c -> c.vprolvd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPROLVD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vprolvd_zmm_zmm_m() {
		testAssembler(c -> c.vprolvd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPROLVD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vprolvq_xmm_xmm_xmm() {
		testAssembler(c -> c.vprolvq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPROLVQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vprolvq_ymm_ymm_ymm() {
		testAssembler(c -> c.vprolvq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPROLVQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vprolvq_zmm_zmm_zmm() {
		testAssembler(c -> c.vprolvq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPROLVQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vprolvq_xmm_xmm_m() {
		testAssembler(c -> c.vprolvq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPROLVQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vprolvq_ymm_ymm_m() {
		testAssembler(c -> c.vprolvq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPROLVQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vprolvq_zmm_zmm_m() {
		testAssembler(c -> c.vprolvq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPROLVQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vprord_xmm_xmm_i() {
		testAssembler(c -> c.vprord(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPRORD_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1));
	}

	@Test
	void vprord_ymm_ymm_i() {
		testAssembler(c -> c.vprord(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPRORD_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1));
	}

	@Test
	void vprord_zmm_zmm_i() {
		testAssembler(c -> c.vprord(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPRORD_ZMM_K1Z_ZMMM512B32_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vprord_xmm_m_i() {
		testAssembler(c -> c.vprord(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPRORD_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vprord_ymm_m_i() {
		testAssembler(c -> c.vprord(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPRORD_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vprord_zmm_m_i() {
		testAssembler(c -> c.vprord(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPRORD_ZMM_K1Z_ZMMM512B32_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vprorq_xmm_xmm_i() {
		testAssembler(c -> c.vprorq(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPRORQ_XMM_K1Z_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1));
	}

	@Test
	void vprorq_ymm_ymm_i() {
		testAssembler(c -> c.vprorq(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPRORQ_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1));
	}

	@Test
	void vprorq_zmm_zmm_i() {
		testAssembler(c -> c.vprorq(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPRORQ_ZMM_K1Z_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vprorq_xmm_m_i() {
		testAssembler(c -> c.vprorq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPRORQ_XMM_K1Z_XMMM128B64_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vprorq_ymm_m_i() {
		testAssembler(c -> c.vprorq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPRORQ_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vprorq_zmm_m_i() {
		testAssembler(c -> c.vprorq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPRORQ_ZMM_K1Z_ZMMM512B64_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vprorvd_xmm_xmm_xmm() {
		testAssembler(c -> c.vprorvd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPRORVD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vprorvd_ymm_ymm_ymm() {
		testAssembler(c -> c.vprorvd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPRORVD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vprorvd_zmm_zmm_zmm() {
		testAssembler(c -> c.vprorvd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPRORVD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vprorvd_xmm_xmm_m() {
		testAssembler(c -> c.vprorvd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPRORVD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vprorvd_ymm_ymm_m() {
		testAssembler(c -> c.vprorvd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPRORVD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vprorvd_zmm_zmm_m() {
		testAssembler(c -> c.vprorvd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPRORVD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vprorvq_xmm_xmm_xmm() {
		testAssembler(c -> c.vprorvq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPRORVQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vprorvq_ymm_ymm_ymm() {
		testAssembler(c -> c.vprorvq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPRORVQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vprorvq_zmm_zmm_zmm() {
		testAssembler(c -> c.vprorvq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPRORVQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vprorvq_xmm_xmm_m() {
		testAssembler(c -> c.vprorvq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPRORVQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vprorvq_ymm_ymm_m() {
		testAssembler(c -> c.vprorvq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPRORVQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vprorvq_zmm_zmm_m() {
		testAssembler(c -> c.vprorvq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPRORVQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vprotb_xmm_xmm_xmm() {
		testAssembler(c -> c.vprotb(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPROTB_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vprotb_xmm_m_xmm() {
		testAssembler(c -> c.vprotb(xmm2, xmmword_ptr(0x0L).base(ecx), xmm4), Instruction.create(Code.XOP_VPROTB_XMM_XMMM128_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vprotb_xmm_xmm_m() {
		testAssembler(c -> c.vprotb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPROTB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vprotb_xmm_xmm_i() {
		testAssembler(c -> c.vprotb(xmm2, xmm3, -5), Instruction.create(Code.XOP_VPROTB_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void vprotb_xmm_m_i() {
		testAssembler(c -> c.vprotb(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.XOP_VPROTB_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vprotd_xmm_xmm_xmm() {
		testAssembler(c -> c.vprotd(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPROTD_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vprotd_xmm_m_xmm() {
		testAssembler(c -> c.vprotd(xmm2, xmmword_ptr(0x0L).base(ecx), xmm4), Instruction.create(Code.XOP_VPROTD_XMM_XMMM128_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vprotd_xmm_xmm_m() {
		testAssembler(c -> c.vprotd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPROTD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vprotd_xmm_xmm_i() {
		testAssembler(c -> c.vprotd(xmm2, xmm3, -5), Instruction.create(Code.XOP_VPROTD_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void vprotd_xmm_m_i() {
		testAssembler(c -> c.vprotd(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.XOP_VPROTD_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vprotq_xmm_xmm_xmm() {
		testAssembler(c -> c.vprotq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPROTQ_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vprotq_xmm_m_xmm() {
		testAssembler(c -> c.vprotq(xmm2, xmmword_ptr(0x0L).base(ecx), xmm4), Instruction.create(Code.XOP_VPROTQ_XMM_XMMM128_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vprotq_xmm_xmm_m() {
		testAssembler(c -> c.vprotq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPROTQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vprotq_xmm_xmm_i() {
		testAssembler(c -> c.vprotq(xmm2, xmm3, -5), Instruction.create(Code.XOP_VPROTQ_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void vprotq_xmm_m_i() {
		testAssembler(c -> c.vprotq(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.XOP_VPROTQ_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vprotw_xmm_xmm_xmm() {
		testAssembler(c -> c.vprotw(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPROTW_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vprotw_xmm_m_xmm() {
		testAssembler(c -> c.vprotw(xmm2, xmmword_ptr(0x0L).base(ecx), xmm4), Instruction.create(Code.XOP_VPROTW_XMM_XMMM128_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vprotw_xmm_xmm_m() {
		testAssembler(c -> c.vprotw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPROTW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vprotw_xmm_xmm_i() {
		testAssembler(c -> c.vprotw(xmm2, xmm3, -5), Instruction.create(Code.XOP_VPROTW_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void vprotw_xmm_m_i() {
		testAssembler(c -> c.vprotw(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.XOP_VPROTW_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpsadbw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsadbw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSADBW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsadbw(xmm2, xmm3, xmm4), Instruction.create(Code.EVEX_VPSADBW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsadbw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsadbw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSADBW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsadbw(ymm2, ymm3, ymm4), Instruction.create(Code.EVEX_VPSADBW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsadbw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsadbw(zmm2, zmm3, zmm4), Instruction.create(Code.EVEX_VPSADBW_ZMM_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4));
	}

	@Test
	void vpsadbw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsadbw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSADBW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsadbw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VPSADBW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsadbw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsadbw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSADBW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsadbw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VPSADBW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsadbw_zmm_zmm_m() {
		testAssembler(c -> c.vpsadbw(zmm2, zmm3, zmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VPSADBW_ZMM_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpscatterdd_m_xmm() {
		testAssembler(c -> c.vpscatterdd(mem_ptr(0x0L).base(edx).index(xmm2).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPSCATTERDD_VM32X_K1_XMM, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm2, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpscatterdd_m_ymm() {
		testAssembler(c -> c.vpscatterdd(mem_ptr(0x0L).base(edx).index(ymm2).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPSCATTERDD_VM32Y_K1_YMM, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm2, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpscatterdd_m_zmm() {
		testAssembler(c -> c.vpscatterdd(mem_ptr(0x0L).base(edx).index(zmm2).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPSCATTERDD_VM32Z_K1_ZMM, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm2, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpscatterdq_m_xmm() {
		testAssembler(c -> c.vpscatterdq(mem_ptr(0x0L).base(edx).index(xmm2).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPSCATTERDQ_VM32X_K1_XMM, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm2, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpscatterdq_m_ymm() {
		testAssembler(c -> c.vpscatterdq(mem_ptr(0x0L).base(edx).index(xmm2).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPSCATTERDQ_VM32X_K1_YMM, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm2, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpscatterdq_m_zmm() {
		testAssembler(c -> c.vpscatterdq(mem_ptr(0x0L).base(edx).index(ymm2).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPSCATTERDQ_VM32Y_K1_ZMM, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm2, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpscatterqd_m_xmm() {
		{ /* if (Register.isXMM(dst.index.get())) */
			testAssembler(c -> c.vpscatterqd(mem_ptr(0x0L).base(edx).index(xmm2).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPSCATTERQD_VM64X_K1_XMM, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm2, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
		} /* else */ { /* if (Register.isYMM(dst.index.get())) */
			testAssembler(c -> c.vpscatterqd(mem_ptr(0x0L).base(edx).index(ymm2).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPSCATTERQD_VM64Y_K1_XMM, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm2, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vpscatterqd(mem_ptr(0x0L).base(edx).index(zmm0).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPSCATTERQD_VM64Y_K1_XMM, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm0, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
			});
		}
	}

	@Test
	void vpscatterqd_m_ymm() {
		testAssembler(c -> c.vpscatterqd(mem_ptr(0x0L).base(edx).index(zmm2).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPSCATTERQD_VM64Z_K1_YMM, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm2, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpscatterqq_m_xmm() {
		testAssembler(c -> c.vpscatterqq(mem_ptr(0x0L).base(edx).index(xmm2).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VPSCATTERQQ_VM64X_K1_XMM, new MemoryOperand(ICRegisters.edx, ICRegisters.xmm2, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vpscatterqq_m_ymm() {
		testAssembler(c -> c.vpscatterqq(mem_ptr(0x0L).base(edx).index(ymm2).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VPSCATTERQQ_VM64Y_K1_YMM, new MemoryOperand(ICRegisters.edx, ICRegisters.ymm2, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vpscatterqq_m_zmm() {
		testAssembler(c -> c.vpscatterqq(mem_ptr(0x0L).base(edx).index(zmm2).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VPSCATTERQQ_VM64Z_K1_ZMM, new MemoryOperand(ICRegisters.edx, ICRegisters.zmm2, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vpshab_xmm_xmm_xmm() {
		testAssembler(c -> c.vpshab(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPSHAB_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpshab_xmm_m_xmm() {
		testAssembler(c -> c.vpshab(xmm2, xmmword_ptr(0x0L).base(ecx), xmm4), Instruction.create(Code.XOP_VPSHAB_XMM_XMMM128_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vpshab_xmm_xmm_m() {
		testAssembler(c -> c.vpshab(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPSHAB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpshad_xmm_xmm_xmm() {
		testAssembler(c -> c.vpshad(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPSHAD_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpshad_xmm_m_xmm() {
		testAssembler(c -> c.vpshad(xmm2, xmmword_ptr(0x0L).base(ecx), xmm4), Instruction.create(Code.XOP_VPSHAD_XMM_XMMM128_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vpshad_xmm_xmm_m() {
		testAssembler(c -> c.vpshad(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPSHAD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpshaq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpshaq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPSHAQ_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpshaq_xmm_m_xmm() {
		testAssembler(c -> c.vpshaq(xmm2, xmmword_ptr(0x0L).base(ecx), xmm4), Instruction.create(Code.XOP_VPSHAQ_XMM_XMMM128_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vpshaq_xmm_xmm_m() {
		testAssembler(c -> c.vpshaq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPSHAQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpshaw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpshaw(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPSHAW_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpshaw_xmm_m_xmm() {
		testAssembler(c -> c.vpshaw(xmm2, xmmword_ptr(0x0L).base(ecx), xmm4), Instruction.create(Code.XOP_VPSHAW_XMM_XMMM128_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vpshaw_xmm_xmm_m() {
		testAssembler(c -> c.vpshaw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPSHAW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpshlb_xmm_xmm_xmm() {
		testAssembler(c -> c.vpshlb(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPSHLB_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpshlb_xmm_m_xmm() {
		testAssembler(c -> c.vpshlb(xmm2, xmmword_ptr(0x0L).base(ecx), xmm4), Instruction.create(Code.XOP_VPSHLB_XMM_XMMM128_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vpshlb_xmm_xmm_m() {
		testAssembler(c -> c.vpshlb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPSHLB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpshld_xmm_xmm_xmm() {
		testAssembler(c -> c.vpshld(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPSHLD_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpshld_xmm_m_xmm() {
		testAssembler(c -> c.vpshld(xmm2, xmmword_ptr(0x0L).base(ecx), xmm4), Instruction.create(Code.XOP_VPSHLD_XMM_XMMM128_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vpshld_xmm_xmm_m() {
		testAssembler(c -> c.vpshld(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPSHLD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpshldd_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpshldd(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VPSHLDD_XMM_K1Z_XMM_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vpshldd_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vpshldd(ymm2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VPSHLDD_YMM_K1Z_YMM_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vpshldd_zmm_zmm_zmm_i() {
		testAssembler(c -> c.vpshldd(zmm2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VPSHLDD_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vpshldd_xmm_xmm_m_i() {
		testAssembler(c -> c.vpshldd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHLDD_XMM_K1Z_XMM_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshldd_ymm_ymm_m_i() {
		testAssembler(c -> c.vpshldd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHLDD_YMM_K1Z_YMM_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshldd_zmm_zmm_m_i() {
		testAssembler(c -> c.vpshldd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHLDD_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshldq_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpshldq(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VPSHLDQ_XMM_K1Z_XMM_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vpshldq_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vpshldq(ymm2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VPSHLDQ_YMM_K1Z_YMM_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vpshldq_zmm_zmm_zmm_i() {
		testAssembler(c -> c.vpshldq(zmm2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VPSHLDQ_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vpshldq_xmm_xmm_m_i() {
		testAssembler(c -> c.vpshldq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHLDQ_XMM_K1Z_XMM_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshldq_ymm_ymm_m_i() {
		testAssembler(c -> c.vpshldq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHLDQ_YMM_K1Z_YMM_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshldq_zmm_zmm_m_i() {
		testAssembler(c -> c.vpshldq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHLDQ_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshldvd_xmm_xmm_xmm() {
		testAssembler(c -> c.vpshldvd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSHLDVD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpshldvd_ymm_ymm_ymm() {
		testAssembler(c -> c.vpshldvd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSHLDVD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpshldvd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpshldvd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSHLDVD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpshldvd_xmm_xmm_m() {
		testAssembler(c -> c.vpshldvd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHLDVD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshldvd_ymm_ymm_m() {
		testAssembler(c -> c.vpshldvd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHLDVD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshldvd_zmm_zmm_m() {
		testAssembler(c -> c.vpshldvd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHLDVD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshldvq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpshldvq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSHLDVQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpshldvq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpshldvq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSHLDVQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpshldvq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpshldvq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSHLDVQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpshldvq_xmm_xmm_m() {
		testAssembler(c -> c.vpshldvq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHLDVQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshldvq_ymm_ymm_m() {
		testAssembler(c -> c.vpshldvq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHLDVQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshldvq_zmm_zmm_m() {
		testAssembler(c -> c.vpshldvq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHLDVQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshldvw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpshldvw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSHLDVW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpshldvw_ymm_ymm_ymm() {
		testAssembler(c -> c.vpshldvw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSHLDVW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpshldvw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpshldvw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSHLDVW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpshldvw_xmm_xmm_m() {
		testAssembler(c -> c.vpshldvw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHLDVW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshldvw_ymm_ymm_m() {
		testAssembler(c -> c.vpshldvw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHLDVW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshldvw_zmm_zmm_m() {
		testAssembler(c -> c.vpshldvw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHLDVW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshldw_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpshldw(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VPSHLDW_XMM_K1Z_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vpshldw_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vpshldw(ymm2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VPSHLDW_YMM_K1Z_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vpshldw_zmm_zmm_zmm_i() {
		testAssembler(c -> c.vpshldw(zmm2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VPSHLDW_ZMM_K1Z_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vpshldw_xmm_xmm_m_i() {
		testAssembler(c -> c.vpshldw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHLDW_XMM_K1Z_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshldw_ymm_ymm_m_i() {
		testAssembler(c -> c.vpshldw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHLDW_YMM_K1Z_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshldw_zmm_zmm_m_i() {
		testAssembler(c -> c.vpshldw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHLDW_ZMM_K1Z_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshlq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpshlq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPSHLQ_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpshlq_xmm_m_xmm() {
		testAssembler(c -> c.vpshlq(xmm2, xmmword_ptr(0x0L).base(ecx), xmm4), Instruction.create(Code.XOP_VPSHLQ_XMM_XMMM128_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vpshlq_xmm_xmm_m() {
		testAssembler(c -> c.vpshlq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPSHLQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpshlw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpshlw(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPSHLW_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpshlw_xmm_m_xmm() {
		testAssembler(c -> c.vpshlw(xmm2, xmmword_ptr(0x0L).base(ecx), xmm4), Instruction.create(Code.XOP_VPSHLW_XMM_XMMM128_XMM, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm4));
	}

	@Test
	void vpshlw_xmm_xmm_m() {
		testAssembler(c -> c.vpshlw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPSHLW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpshrdd_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpshrdd(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VPSHRDD_XMM_K1Z_XMM_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vpshrdd_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vpshrdd(ymm2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VPSHRDD_YMM_K1Z_YMM_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vpshrdd_zmm_zmm_zmm_i() {
		testAssembler(c -> c.vpshrdd(zmm2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VPSHRDD_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vpshrdd_xmm_xmm_m_i() {
		testAssembler(c -> c.vpshrdd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHRDD_XMM_K1Z_XMM_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshrdd_ymm_ymm_m_i() {
		testAssembler(c -> c.vpshrdd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHRDD_YMM_K1Z_YMM_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshrdd_zmm_zmm_m_i() {
		testAssembler(c -> c.vpshrdd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHRDD_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshrdq_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpshrdq(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VPSHRDQ_XMM_K1Z_XMM_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vpshrdq_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vpshrdq(ymm2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VPSHRDQ_YMM_K1Z_YMM_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vpshrdq_zmm_zmm_zmm_i() {
		testAssembler(c -> c.vpshrdq(zmm2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VPSHRDQ_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vpshrdq_xmm_xmm_m_i() {
		testAssembler(c -> c.vpshrdq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHRDQ_XMM_K1Z_XMM_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshrdq_ymm_ymm_m_i() {
		testAssembler(c -> c.vpshrdq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHRDQ_YMM_K1Z_YMM_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshrdq_zmm_zmm_m_i() {
		testAssembler(c -> c.vpshrdq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHRDQ_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshrdvd_xmm_xmm_xmm() {
		testAssembler(c -> c.vpshrdvd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSHRDVD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpshrdvd_ymm_ymm_ymm() {
		testAssembler(c -> c.vpshrdvd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSHRDVD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpshrdvd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpshrdvd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSHRDVD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpshrdvd_xmm_xmm_m() {
		testAssembler(c -> c.vpshrdvd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHRDVD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshrdvd_ymm_ymm_m() {
		testAssembler(c -> c.vpshrdvd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHRDVD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshrdvd_zmm_zmm_m() {
		testAssembler(c -> c.vpshrdvd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHRDVD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshrdvq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpshrdvq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSHRDVQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpshrdvq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpshrdvq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSHRDVQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpshrdvq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpshrdvq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSHRDVQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpshrdvq_xmm_xmm_m() {
		testAssembler(c -> c.vpshrdvq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHRDVQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshrdvq_ymm_ymm_m() {
		testAssembler(c -> c.vpshrdvq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHRDVQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshrdvq_zmm_zmm_m() {
		testAssembler(c -> c.vpshrdvq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHRDVQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshrdvw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpshrdvw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSHRDVW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpshrdvw_ymm_ymm_ymm() {
		testAssembler(c -> c.vpshrdvw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSHRDVW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpshrdvw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpshrdvw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSHRDVW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpshrdvw_xmm_xmm_m() {
		testAssembler(c -> c.vpshrdvw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHRDVW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshrdvw_ymm_ymm_m() {
		testAssembler(c -> c.vpshrdvw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHRDVW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshrdvw_zmm_zmm_m() {
		testAssembler(c -> c.vpshrdvw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHRDVW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshrdw_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpshrdw(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VPSHRDW_XMM_K1Z_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vpshrdw_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vpshrdw(ymm2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VPSHRDW_YMM_K1Z_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vpshrdw_zmm_zmm_zmm_i() {
		testAssembler(c -> c.vpshrdw(zmm2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VPSHRDW_ZMM_K1Z_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vpshrdw_xmm_xmm_m_i() {
		testAssembler(c -> c.vpshrdw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHRDW_XMM_K1Z_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshrdw_ymm_ymm_m_i() {
		testAssembler(c -> c.vpshrdw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHRDW_YMM_K1Z_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshrdw_zmm_zmm_m_i() {
		testAssembler(c -> c.vpshrdw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHRDW_ZMM_K1Z_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshufb_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpshufb(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSHUFB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpshufb(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSHUFB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpshufb_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpshufb(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSHUFB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpshufb(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSHUFB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpshufb_zmm_zmm_zmm() {
		testAssembler(c -> c.vpshufb(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSHUFB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpshufb_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpshufb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSHUFB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpshufb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHUFB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpshufb_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpshufb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSHUFB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpshufb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHUFB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpshufb_zmm_zmm_m() {
		testAssembler(c -> c.vpshufb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHUFB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshufbitqmb_kr_xmm_xmm() {
		testAssembler(c -> c.vpshufbitqmb(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSHUFBITQMB_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpshufbitqmb_kr_ymm_ymm() {
		testAssembler(c -> c.vpshufbitqmb(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSHUFBITQMB_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpshufbitqmb_kr_zmm_zmm() {
		testAssembler(c -> c.vpshufbitqmb(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSHUFBITQMB_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpshufbitqmb_kr_xmm_m() {
		testAssembler(c -> c.vpshufbitqmb(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHUFBITQMB_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshufbitqmb_kr_ymm_m() {
		testAssembler(c -> c.vpshufbitqmb(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHUFBITQMB_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshufbitqmb_kr_zmm_m() {
		testAssembler(c -> c.vpshufbitqmb(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSHUFBITQMB_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpshufd_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpshufd(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPSHUFD_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpshufd(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPSHUFD_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpshufd_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpshufd(ymm2, ymm3, -5), Instruction.create(Code.VEX_VPSHUFD_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpshufd(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPSHUFD_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpshufd_zmm_zmm_i() {
		testAssembler(c -> c.vpshufd(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPSHUFD_ZMM_K1Z_ZMMM512B32_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vpshufd_xmm_m_i() {
		{ /* if (src1.isBroadcast()) */
			testAssembler(c -> c.vpshufd(xmm2.k1(), dword_bcst(0x0L).base(edx), -5), applyK(Instruction.create(Code.EVEX_VPSHUFD_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpshufd(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPSHUFD_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpshufd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHUFD_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpshufd_ymm_m_i() {
		{ /* if (src1.isBroadcast()) */
			testAssembler(c -> c.vpshufd(ymm2.k1(), dword_bcst(0x0L).base(edx), -5), applyK(Instruction.create(Code.EVEX_VPSHUFD_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpshufd(ymm2, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPSHUFD_YMM_YMMM256_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpshufd(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHUFD_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpshufd_zmm_m_i() {
		testAssembler(c -> c.vpshufd(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHUFD_ZMM_K1Z_ZMMM512B32_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshufhw_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpshufhw(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPSHUFHW_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpshufhw(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPSHUFHW_XMM_K1Z_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpshufhw_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpshufhw(ymm2, ymm3, -5), Instruction.create(Code.VEX_VPSHUFHW_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpshufhw(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPSHUFHW_YMM_K1Z_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpshufhw_zmm_zmm_i() {
		testAssembler(c -> c.vpshufhw(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPSHUFHW_ZMM_K1Z_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vpshufhw_xmm_m_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpshufhw(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPSHUFHW_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpshufhw(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHUFHW_XMM_K1Z_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpshufhw_ymm_m_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpshufhw(ymm2, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPSHUFHW_YMM_YMMM256_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpshufhw(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHUFHW_YMM_K1Z_YMMM256_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpshufhw_zmm_m_i() {
		testAssembler(c -> c.vpshufhw(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHUFHW_ZMM_K1Z_ZMMM512_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpshuflw_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpshuflw(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPSHUFLW_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpshuflw(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPSHUFLW_XMM_K1Z_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpshuflw_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpshuflw(ymm2, ymm3, -5), Instruction.create(Code.VEX_VPSHUFLW_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpshuflw(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPSHUFLW_YMM_K1Z_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpshuflw_zmm_zmm_i() {
		testAssembler(c -> c.vpshuflw(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPSHUFLW_ZMM_K1Z_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vpshuflw_xmm_m_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpshuflw(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPSHUFLW_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpshuflw(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHUFLW_XMM_K1Z_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpshuflw_ymm_m_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpshuflw(ymm2, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VPSHUFLW_YMM_YMMM256_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpshuflw(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHUFLW_YMM_K1Z_YMMM256_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpshuflw_zmm_m_i() {
		testAssembler(c -> c.vpshuflw(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSHUFLW_ZMM_K1Z_ZMMM512_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsignb_xmm_xmm_xmm() {
		testAssembler(c -> c.vpsignb(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSIGNB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpsignb_ymm_ymm_ymm() {
		testAssembler(c -> c.vpsignb(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSIGNB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpsignb_xmm_xmm_m() {
		testAssembler(c -> c.vpsignb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSIGNB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpsignb_ymm_ymm_m() {
		testAssembler(c -> c.vpsignb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSIGNB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpsignd_xmm_xmm_xmm() {
		testAssembler(c -> c.vpsignd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSIGND_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpsignd_ymm_ymm_ymm() {
		testAssembler(c -> c.vpsignd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSIGND_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpsignd_xmm_xmm_m() {
		testAssembler(c -> c.vpsignd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSIGND_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpsignd_ymm_ymm_m() {
		testAssembler(c -> c.vpsignd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSIGND_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpsignw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpsignw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSIGNW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpsignw_ymm_ymm_ymm() {
		testAssembler(c -> c.vpsignw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSIGNW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpsignw_xmm_xmm_m() {
		testAssembler(c -> c.vpsignw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSIGNW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpsignw_ymm_ymm_m() {
		testAssembler(c -> c.vpsignw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSIGNW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpslld_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpslld(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSLLD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpslld(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSLLD_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpslld_ymm_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpslld(ymm2, ymm3, xmm4), Instruction.create(Code.VEX_VPSLLD_YMM_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpslld(ymm2.k1(), ymm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSLLD_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpslld_zmm_zmm_xmm() {
		testAssembler(c -> c.vpslld(zmm2.k1(), zmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSLLD_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpslld_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpslld(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSLLD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpslld(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLD_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpslld_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpslld(ymm2, ymm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSLLD_YMM_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpslld(ymm2.k1(), ymm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLD_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpslld_zmm_zmm_m() {
		testAssembler(c -> c.vpslld(zmm2.k1(), zmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLD_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpslld_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpslld(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPSLLD_XMM_XMM_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpslld(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPSLLD_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpslld_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpslld(ymm2, ymm3, -5), Instruction.create(Code.VEX_VPSLLD_YMM_YMM_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpslld(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPSLLD_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpslld_zmm_zmm_i() {
		testAssembler(c -> c.vpslld(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPSLLD_ZMM_K1Z_ZMMM512B32_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vpslld_xmm_m_i() {
		testAssembler(c -> c.vpslld(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSLLD_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpslld_ymm_m_i() {
		testAssembler(c -> c.vpslld(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSLLD_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpslld_zmm_m_i() {
		testAssembler(c -> c.vpslld(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSLLD_ZMM_K1Z_ZMMM512B32_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpslldq_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpslldq(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPSLLDQ_XMM_XMM_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpslldq(xmm2, xmm3, -5), Instruction.create(Code.EVEX_VPSLLDQ_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpslldq_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpslldq(ymm2, ymm3, -5), Instruction.create(Code.VEX_VPSLLDQ_YMM_YMM_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpslldq(ymm2, ymm3, -5), Instruction.create(Code.EVEX_VPSLLDQ_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpslldq_zmm_zmm_i() {
		testAssembler(c -> c.vpslldq(zmm2, zmm3, -5), Instruction.create(Code.EVEX_VPSLLDQ_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5));
	}

	@Test
	void vpslldq_xmm_m_i() {
		testAssembler(c -> c.vpslldq(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.EVEX_VPSLLDQ_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpslldq_ymm_m_i() {
		testAssembler(c -> c.vpslldq(ymm2, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.EVEX_VPSLLDQ_YMM_YMMM256_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpslldq_zmm_m_i() {
		testAssembler(c -> c.vpslldq(zmm2, zmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.EVEX_VPSLLDQ_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpsllq_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSLLQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSLLQ_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllq_ymm_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllq(ymm2, ymm3, xmm4), Instruction.create(Code.VEX_VPSLLQ_YMM_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllq(ymm2.k1(), ymm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSLLQ_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllq_zmm_zmm_xmm() {
		testAssembler(c -> c.vpsllq(zmm2.k1(), zmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSLLQ_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpsllq_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSLLQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLQ_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllq_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllq(ymm2, ymm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSLLQ_YMM_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllq(ymm2.k1(), ymm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLQ_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllq_zmm_zmm_m() {
		testAssembler(c -> c.vpsllq(zmm2.k1(), zmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLQ_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsllq_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllq(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPSLLQ_XMM_XMM_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllq(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPSLLQ_XMM_K1Z_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllq_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllq(ymm2, ymm3, -5), Instruction.create(Code.VEX_VPSLLQ_YMM_YMM_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllq(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPSLLQ_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllq_zmm_zmm_i() {
		testAssembler(c -> c.vpsllq(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPSLLQ_ZMM_K1Z_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vpsllq_xmm_m_i() {
		testAssembler(c -> c.vpsllq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSLLQ_XMM_K1Z_XMMM128B64_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsllq_ymm_m_i() {
		testAssembler(c -> c.vpsllq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSLLQ_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsllq_zmm_m_i() {
		testAssembler(c -> c.vpsllq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSLLQ_ZMM_K1Z_ZMMM512B64_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsllvd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllvd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSLLVD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllvd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSLLVD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllvd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllvd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSLLVD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllvd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSLLVD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllvd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsllvd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSLLVD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpsllvd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpsllvd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPSLLVD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllvd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSLLVD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllvd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLVD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllvd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpsllvd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPSLLVD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllvd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSLLVD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllvd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLVD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllvd_zmm_zmm_m() {
		testAssembler(c -> c.vpsllvd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLVD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsllvq_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllvq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSLLVQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllvq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSLLVQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllvq_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllvq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSLLVQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllvq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSLLVQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllvq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsllvq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSLLVQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpsllvq_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpsllvq(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPSLLVQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllvq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSLLVQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllvq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLVQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllvq_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpsllvq(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPSLLVQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllvq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSLLVQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllvq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLVQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllvq_zmm_zmm_m() {
		testAssembler(c -> c.vpsllvq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLVQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsllvw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpsllvw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSLLVW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpsllvw_ymm_ymm_ymm() {
		testAssembler(c -> c.vpsllvw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSLLVW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpsllvw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsllvw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSLLVW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpsllvw_xmm_xmm_m() {
		testAssembler(c -> c.vpsllvw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLVW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsllvw_ymm_ymm_m() {
		testAssembler(c -> c.vpsllvw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLVW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsllvw_zmm_zmm_m() {
		testAssembler(c -> c.vpsllvw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLVW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsllw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSLLW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSLLW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllw_ymm_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllw(ymm2, ymm3, xmm4), Instruction.create(Code.VEX_VPSLLW_YMM_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllw(ymm2.k1(), ymm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSLLW_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllw_zmm_zmm_xmm() {
		testAssembler(c -> c.vpsllw(zmm2.k1(), zmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSLLW_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpsllw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSLLW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllw(ymm2, ymm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSLLW_YMM_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllw(ymm2.k1(), ymm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLW_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllw_zmm_zmm_m() {
		testAssembler(c -> c.vpsllw(zmm2.k1(), zmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSLLW_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsllw_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllw(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPSLLW_XMM_XMM_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllw(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPSLLW_XMM_K1Z_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllw_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsllw(ymm2, ymm3, -5), Instruction.create(Code.VEX_VPSLLW_YMM_YMM_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsllw(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPSLLW_YMM_K1Z_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsllw_zmm_zmm_i() {
		testAssembler(c -> c.vpsllw(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPSLLW_ZMM_K1Z_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vpsllw_xmm_m_i() {
		testAssembler(c -> c.vpsllw(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSLLW_XMM_K1Z_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsllw_ymm_m_i() {
		testAssembler(c -> c.vpsllw(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSLLW_YMM_K1Z_YMMM256_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsllw_zmm_m_i() {
		testAssembler(c -> c.vpsllw(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSLLW_ZMM_K1Z_ZMMM512_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsrad_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrad(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSRAD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrad(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRAD_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrad_ymm_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrad(ymm2, ymm3, xmm4), Instruction.create(Code.VEX_VPSRAD_YMM_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrad(ymm2.k1(), ymm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRAD_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrad_zmm_zmm_xmm() {
		testAssembler(c -> c.vpsrad(zmm2.k1(), zmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRAD_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpsrad_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrad(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSRAD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrad(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAD_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrad_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrad(ymm2, ymm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSRAD_YMM_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrad(ymm2.k1(), ymm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAD_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrad_zmm_zmm_m() {
		testAssembler(c -> c.vpsrad(zmm2.k1(), zmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAD_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsrad_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrad(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPSRAD_XMM_XMM_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrad(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPSRAD_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrad_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrad(ymm2, ymm3, -5), Instruction.create(Code.VEX_VPSRAD_YMM_YMM_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrad(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPSRAD_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrad_zmm_zmm_i() {
		testAssembler(c -> c.vpsrad(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPSRAD_ZMM_K1Z_ZMMM512B32_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vpsrad_xmm_m_i() {
		testAssembler(c -> c.vpsrad(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRAD_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsrad_ymm_m_i() {
		testAssembler(c -> c.vpsrad(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRAD_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsrad_zmm_m_i() {
		testAssembler(c -> c.vpsrad(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRAD_ZMM_K1Z_ZMMM512B32_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsraq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpsraq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRAQ_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpsraq_ymm_ymm_xmm() {
		testAssembler(c -> c.vpsraq(ymm2.k1(), ymm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRAQ_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpsraq_zmm_zmm_xmm() {
		testAssembler(c -> c.vpsraq(zmm2.k1(), zmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRAQ_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpsraq_xmm_xmm_m() {
		testAssembler(c -> c.vpsraq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAQ_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsraq_ymm_ymm_m() {
		testAssembler(c -> c.vpsraq(ymm2.k1(), ymm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAQ_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsraq_zmm_zmm_m() {
		testAssembler(c -> c.vpsraq(zmm2.k1(), zmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAQ_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsraq_xmm_xmm_i() {
		testAssembler(c -> c.vpsraq(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPSRAQ_XMM_K1Z_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1));
	}

	@Test
	void vpsraq_ymm_ymm_i() {
		testAssembler(c -> c.vpsraq(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPSRAQ_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1));
	}

	@Test
	void vpsraq_zmm_zmm_i() {
		testAssembler(c -> c.vpsraq(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPSRAQ_ZMM_K1Z_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vpsraq_xmm_m_i() {
		testAssembler(c -> c.vpsraq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRAQ_XMM_K1Z_XMMM128B64_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsraq_ymm_m_i() {
		testAssembler(c -> c.vpsraq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRAQ_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsraq_zmm_m_i() {
		testAssembler(c -> c.vpsraq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRAQ_ZMM_K1Z_ZMMM512B64_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsravd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsravd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSRAVD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsravd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRAVD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsravd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsravd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSRAVD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsravd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSRAVD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsravd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsravd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSRAVD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpsravd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpsravd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPSRAVD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsravd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSRAVD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsravd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAVD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsravd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpsravd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPSRAVD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsravd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSRAVD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsravd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAVD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsravd_zmm_zmm_m() {
		testAssembler(c -> c.vpsravd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAVD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsravq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpsravq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRAVQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpsravq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpsravq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSRAVQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpsravq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsravq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSRAVQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpsravq_xmm_xmm_m() {
		testAssembler(c -> c.vpsravq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAVQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsravq_ymm_ymm_m() {
		testAssembler(c -> c.vpsravq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAVQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsravq_zmm_zmm_m() {
		testAssembler(c -> c.vpsravq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAVQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsravw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpsravw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRAVW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpsravw_ymm_ymm_ymm() {
		testAssembler(c -> c.vpsravw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSRAVW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpsravw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsravw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSRAVW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpsravw_xmm_xmm_m() {
		testAssembler(c -> c.vpsravw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAVW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsravw_ymm_ymm_m() {
		testAssembler(c -> c.vpsravw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAVW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsravw_zmm_zmm_m() {
		testAssembler(c -> c.vpsravw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAVW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsraw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsraw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSRAW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsraw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRAW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsraw_ymm_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsraw(ymm2, ymm3, xmm4), Instruction.create(Code.VEX_VPSRAW_YMM_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsraw(ymm2.k1(), ymm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRAW_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsraw_zmm_zmm_xmm() {
		testAssembler(c -> c.vpsraw(zmm2.k1(), zmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRAW_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpsraw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsraw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSRAW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsraw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsraw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsraw(ymm2, ymm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSRAW_YMM_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsraw(ymm2.k1(), ymm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAW_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsraw_zmm_zmm_m() {
		testAssembler(c -> c.vpsraw(zmm2.k1(), zmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRAW_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsraw_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsraw(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPSRAW_XMM_XMM_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsraw(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPSRAW_XMM_K1Z_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsraw_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsraw(ymm2, ymm3, -5), Instruction.create(Code.VEX_VPSRAW_YMM_YMM_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsraw(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPSRAW_YMM_K1Z_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsraw_zmm_zmm_i() {
		testAssembler(c -> c.vpsraw(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPSRAW_ZMM_K1Z_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vpsraw_xmm_m_i() {
		testAssembler(c -> c.vpsraw(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRAW_XMM_K1Z_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsraw_ymm_m_i() {
		testAssembler(c -> c.vpsraw(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRAW_YMM_K1Z_YMMM256_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsraw_zmm_m_i() {
		testAssembler(c -> c.vpsraw(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRAW_ZMM_K1Z_ZMMM512_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsrld_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrld(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSRLD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrld(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRLD_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrld_ymm_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrld(ymm2, ymm3, xmm4), Instruction.create(Code.VEX_VPSRLD_YMM_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrld(ymm2.k1(), ymm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRLD_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrld_zmm_zmm_xmm() {
		testAssembler(c -> c.vpsrld(zmm2.k1(), zmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRLD_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpsrld_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrld(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSRLD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrld(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLD_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrld_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrld(ymm2, ymm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSRLD_YMM_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrld(ymm2.k1(), ymm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLD_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrld_zmm_zmm_m() {
		testAssembler(c -> c.vpsrld(zmm2.k1(), zmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLD_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsrld_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrld(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPSRLD_XMM_XMM_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrld(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPSRLD_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrld_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrld(ymm2, ymm3, -5), Instruction.create(Code.VEX_VPSRLD_YMM_YMM_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrld(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPSRLD_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrld_zmm_zmm_i() {
		testAssembler(c -> c.vpsrld(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPSRLD_ZMM_K1Z_ZMMM512B32_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vpsrld_xmm_m_i() {
		testAssembler(c -> c.vpsrld(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRLD_XMM_K1Z_XMMM128B32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsrld_ymm_m_i() {
		testAssembler(c -> c.vpsrld(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRLD_YMM_K1Z_YMMM256B32_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsrld_zmm_m_i() {
		testAssembler(c -> c.vpsrld(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRLD_ZMM_K1Z_ZMMM512B32_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsrldq_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrldq(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPSRLDQ_XMM_XMM_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrldq(xmm2, xmm3, -5), Instruction.create(Code.EVEX_VPSRLDQ_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrldq_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrldq(ymm2, ymm3, -5), Instruction.create(Code.VEX_VPSRLDQ_YMM_YMM_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrldq(ymm2, ymm3, -5), Instruction.create(Code.EVEX_VPSRLDQ_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrldq_zmm_zmm_i() {
		testAssembler(c -> c.vpsrldq(zmm2, zmm3, -5), Instruction.create(Code.EVEX_VPSRLDQ_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5));
	}

	@Test
	void vpsrldq_xmm_m_i() {
		testAssembler(c -> c.vpsrldq(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.EVEX_VPSRLDQ_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpsrldq_ymm_m_i() {
		testAssembler(c -> c.vpsrldq(ymm2, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.EVEX_VPSRLDQ_YMM_YMMM256_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpsrldq_zmm_m_i() {
		testAssembler(c -> c.vpsrldq(zmm2, zmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.EVEX_VPSRLDQ_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vpsrlq_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSRLQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRLQ_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlq_ymm_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlq(ymm2, ymm3, xmm4), Instruction.create(Code.VEX_VPSRLQ_YMM_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlq(ymm2.k1(), ymm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRLQ_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlq_zmm_zmm_xmm() {
		testAssembler(c -> c.vpsrlq(zmm2.k1(), zmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRLQ_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpsrlq_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSRLQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLQ_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlq_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlq(ymm2, ymm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSRLQ_YMM_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlq(ymm2.k1(), ymm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLQ_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlq_zmm_zmm_m() {
		testAssembler(c -> c.vpsrlq(zmm2.k1(), zmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLQ_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsrlq_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlq(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPSRLQ_XMM_XMM_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlq(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPSRLQ_XMM_K1Z_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlq_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlq(ymm2, ymm3, -5), Instruction.create(Code.VEX_VPSRLQ_YMM_YMM_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlq(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPSRLQ_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlq_zmm_zmm_i() {
		testAssembler(c -> c.vpsrlq(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPSRLQ_ZMM_K1Z_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vpsrlq_xmm_m_i() {
		testAssembler(c -> c.vpsrlq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRLQ_XMM_K1Z_XMMM128B64_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsrlq_ymm_m_i() {
		testAssembler(c -> c.vpsrlq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRLQ_YMM_K1Z_YMMM256B64_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsrlq_zmm_m_i() {
		testAssembler(c -> c.vpsrlq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRLQ_ZMM_K1Z_ZMMM512B64_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsrlvd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlvd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSRLVD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlvd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRLVD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlvd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlvd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSRLVD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlvd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSRLVD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlvd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsrlvd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSRLVD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpsrlvd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpsrlvd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPSRLVD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlvd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSRLVD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlvd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLVD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlvd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpsrlvd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPSRLVD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlvd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSRLVD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlvd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLVD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlvd_zmm_zmm_m() {
		testAssembler(c -> c.vpsrlvd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLVD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsrlvq_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlvq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSRLVQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlvq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRLVQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlvq_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlvq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSRLVQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlvq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSRLVQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlvq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsrlvq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSRLVQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpsrlvq_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpsrlvq(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPSRLVQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlvq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSRLVQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlvq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLVQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlvq_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpsrlvq(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPSRLVQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlvq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSRLVQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlvq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLVQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlvq_zmm_zmm_m() {
		testAssembler(c -> c.vpsrlvq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLVQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsrlvw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpsrlvw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRLVW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpsrlvw_ymm_ymm_ymm() {
		testAssembler(c -> c.vpsrlvw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSRLVW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpsrlvw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsrlvw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSRLVW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpsrlvw_xmm_xmm_m() {
		testAssembler(c -> c.vpsrlvw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLVW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsrlvw_ymm_ymm_m() {
		testAssembler(c -> c.vpsrlvw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLVW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsrlvw_zmm_zmm_m() {
		testAssembler(c -> c.vpsrlvw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLVW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsrlw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSRLW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRLW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlw_ymm_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlw(ymm2, ymm3, xmm4), Instruction.create(Code.VEX_VPSRLW_YMM_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlw(ymm2.k1(), ymm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRLW_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlw_zmm_zmm_xmm() {
		testAssembler(c -> c.vpsrlw(zmm2.k1(), zmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSRLW_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpsrlw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSRLW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlw(ymm2, ymm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSRLW_YMM_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlw(ymm2.k1(), ymm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLW_YMM_K1Z_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlw_zmm_zmm_m() {
		testAssembler(c -> c.vpsrlw(zmm2.k1(), zmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSRLW_ZMM_K1Z_ZMM_XMMM128, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsrlw_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlw(xmm2, xmm3, -5), Instruction.create(Code.VEX_VPSRLW_XMM_XMM_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlw(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VPSRLW_XMM_K1Z_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlw_ymm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsrlw(ymm2, ymm3, -5), Instruction.create(Code.VEX_VPSRLW_YMM_YMM_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsrlw(ymm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VPSRLW_YMM_K1Z_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsrlw_zmm_zmm_i() {
		testAssembler(c -> c.vpsrlw(zmm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VPSRLW_ZMM_K1Z_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vpsrlw_xmm_m_i() {
		testAssembler(c -> c.vpsrlw(xmm2.k1(), xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRLW_XMM_K1Z_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsrlw_ymm_m_i() {
		testAssembler(c -> c.vpsrlw(ymm2.k1(), ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRLW_YMM_K1Z_YMMM256_IMM8, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsrlw_zmm_m_i() {
		testAssembler(c -> c.vpsrlw(zmm2.k1(), zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPSRLW_ZMM_K1Z_ZMMM512_IMM8, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpsubb_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubb(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSUBB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubb(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSUBB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubb_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubb(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSUBB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubb(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSUBB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubb_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsubb(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSUBB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpsubb_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSUBB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubb_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSUBB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubb_zmm_zmm_m() {
		testAssembler(c -> c.vpsubb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsubd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSUBD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSUBD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSUBD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSUBD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsubd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSUBD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpsubd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpsubd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPSUBD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSUBD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpsubd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPSUBD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSUBD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubd_zmm_zmm_m() {
		testAssembler(c -> c.vpsubd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsubq_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSUBQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSUBQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubq_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSUBQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSUBQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsubq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSUBQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpsubq_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpsubq(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPSUBQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSUBQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubq_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpsubq(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPSUBQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSUBQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubq_zmm_zmm_m() {
		testAssembler(c -> c.vpsubq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsubsb_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubsb(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSUBSB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubsb(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSUBSB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubsb_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubsb(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSUBSB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubsb(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSUBSB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubsb_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsubsb(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSUBSB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpsubsb_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubsb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSUBSB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubsb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBSB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubsb_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubsb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSUBSB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubsb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBSB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubsb_zmm_zmm_m() {
		testAssembler(c -> c.vpsubsb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBSB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsubsw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubsw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSUBSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubsw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSUBSW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubsw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubsw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSUBSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubsw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSUBSW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubsw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsubsw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSUBSW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpsubsw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubsw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSUBSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubsw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBSW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubsw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubsw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSUBSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubsw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBSW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubsw_zmm_zmm_m() {
		testAssembler(c -> c.vpsubsw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBSW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsubusb_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubusb(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSUBUSB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubusb(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSUBUSB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubusb_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubusb(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSUBUSB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubusb(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSUBUSB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubusb_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsubusb(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSUBUSB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpsubusb_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubusb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSUBUSB_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubusb(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBUSB_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubusb_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubusb(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSUBUSB_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubusb(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBUSB_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubusb_zmm_zmm_m() {
		testAssembler(c -> c.vpsubusb(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBUSB_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsubusw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubusw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSUBUSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubusw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSUBUSW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubusw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubusw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSUBUSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubusw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSUBUSW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubusw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsubusw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSUBUSW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpsubusw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubusw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSUBUSW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubusw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBUSW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubusw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubusw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSUBUSW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubusw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBUSW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubusw_zmm_zmm_m() {
		testAssembler(c -> c.vpsubusw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBUSW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpsubw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPSUBW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPSUBW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPSUBW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPSUBW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpsubw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPSUBW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpsubw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSUBW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpsubw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPSUBW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpsubw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpsubw_zmm_zmm_m() {
		testAssembler(c -> c.vpsubw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPSUBW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpternlogd_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpternlogd(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VPTERNLOGD_XMM_K1Z_XMM_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vpternlogd_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vpternlogd(ymm2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VPTERNLOGD_YMM_K1Z_YMM_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vpternlogd_zmm_zmm_zmm_i() {
		testAssembler(c -> c.vpternlogd(zmm2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VPTERNLOGD_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vpternlogd_xmm_xmm_m_i() {
		testAssembler(c -> c.vpternlogd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPTERNLOGD_XMM_K1Z_XMM_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpternlogd_ymm_ymm_m_i() {
		testAssembler(c -> c.vpternlogd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPTERNLOGD_YMM_K1Z_YMM_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpternlogd_zmm_zmm_m_i() {
		testAssembler(c -> c.vpternlogd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPTERNLOGD_ZMM_K1Z_ZMM_ZMMM512B32_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpternlogq_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vpternlogq(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VPTERNLOGQ_XMM_K1Z_XMM_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vpternlogq_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vpternlogq(ymm2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VPTERNLOGQ_YMM_K1Z_YMM_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vpternlogq_zmm_zmm_zmm_i() {
		testAssembler(c -> c.vpternlogq(zmm2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VPTERNLOGQ_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vpternlogq_xmm_xmm_m_i() {
		testAssembler(c -> c.vpternlogq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPTERNLOGQ_XMM_K1Z_XMM_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpternlogq_ymm_ymm_m_i() {
		testAssembler(c -> c.vpternlogq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPTERNLOGQ_YMM_K1Z_YMM_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vpternlogq_zmm_zmm_m_i() {
		testAssembler(c -> c.vpternlogq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VPTERNLOGQ_ZMM_K1Z_ZMM_ZMMM512B64_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vptest_xmm_xmm() {
		testAssembler(c -> c.vptest(xmm2, xmm3), Instruction.create(Code.VEX_VPTEST_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vptest_ymm_ymm() {
		testAssembler(c -> c.vptest(ymm2, ymm3), Instruction.create(Code.VEX_VPTEST_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3));
	}

	@Test
	void vptest_xmm_m() {
		testAssembler(c -> c.vptest(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPTEST_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vptest_ymm_m() {
		testAssembler(c -> c.vptest(ymm2, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPTEST_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vptestmb_kr_xmm_xmm() {
		testAssembler(c -> c.vptestmb(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPTESTMB_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vptestmb_kr_ymm_ymm() {
		testAssembler(c -> c.vptestmb(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPTESTMB_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vptestmb_kr_zmm_zmm() {
		testAssembler(c -> c.vptestmb(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPTESTMB_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vptestmb_kr_xmm_m() {
		testAssembler(c -> c.vptestmb(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTMB_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestmb_kr_ymm_m() {
		testAssembler(c -> c.vptestmb(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTMB_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestmb_kr_zmm_m() {
		testAssembler(c -> c.vptestmb(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTMB_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestmd_kr_xmm_xmm() {
		testAssembler(c -> c.vptestmd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPTESTMD_KR_K1_XMM_XMMM128B32, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vptestmd_kr_ymm_ymm() {
		testAssembler(c -> c.vptestmd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPTESTMD_KR_K1_YMM_YMMM256B32, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vptestmd_kr_zmm_zmm() {
		testAssembler(c -> c.vptestmd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPTESTMD_KR_K1_ZMM_ZMMM512B32, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vptestmd_kr_xmm_m() {
		testAssembler(c -> c.vptestmd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTMD_KR_K1_XMM_XMMM128B32, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestmd_kr_ymm_m() {
		testAssembler(c -> c.vptestmd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTMD_KR_K1_YMM_YMMM256B32, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestmd_kr_zmm_m() {
		testAssembler(c -> c.vptestmd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTMD_KR_K1_ZMM_ZMMM512B32, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestmq_kr_xmm_xmm() {
		testAssembler(c -> c.vptestmq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPTESTMQ_KR_K1_XMM_XMMM128B64, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vptestmq_kr_ymm_ymm() {
		testAssembler(c -> c.vptestmq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPTESTMQ_KR_K1_YMM_YMMM256B64, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vptestmq_kr_zmm_zmm() {
		testAssembler(c -> c.vptestmq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPTESTMQ_KR_K1_ZMM_ZMMM512B64, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vptestmq_kr_xmm_m() {
		testAssembler(c -> c.vptestmq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTMQ_KR_K1_XMM_XMMM128B64, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestmq_kr_ymm_m() {
		testAssembler(c -> c.vptestmq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTMQ_KR_K1_YMM_YMMM256B64, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestmq_kr_zmm_m() {
		testAssembler(c -> c.vptestmq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTMQ_KR_K1_ZMM_ZMMM512B64, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestmw_kr_xmm_xmm() {
		testAssembler(c -> c.vptestmw(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPTESTMW_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vptestmw_kr_ymm_ymm() {
		testAssembler(c -> c.vptestmw(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPTESTMW_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vptestmw_kr_zmm_zmm() {
		testAssembler(c -> c.vptestmw(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPTESTMW_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vptestmw_kr_xmm_m() {
		testAssembler(c -> c.vptestmw(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTMW_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestmw_kr_ymm_m() {
		testAssembler(c -> c.vptestmw(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTMW_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestmw_kr_zmm_m() {
		testAssembler(c -> c.vptestmw(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTMW_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestnmb_kr_xmm_xmm() {
		testAssembler(c -> c.vptestnmb(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPTESTNMB_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vptestnmb_kr_ymm_ymm() {
		testAssembler(c -> c.vptestnmb(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPTESTNMB_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vptestnmb_kr_zmm_zmm() {
		testAssembler(c -> c.vptestnmb(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPTESTNMB_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vptestnmb_kr_xmm_m() {
		testAssembler(c -> c.vptestnmb(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTNMB_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestnmb_kr_ymm_m() {
		testAssembler(c -> c.vptestnmb(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTNMB_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestnmb_kr_zmm_m() {
		testAssembler(c -> c.vptestnmb(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTNMB_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestnmd_kr_xmm_xmm() {
		testAssembler(c -> c.vptestnmd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPTESTNMD_KR_K1_XMM_XMMM128B32, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vptestnmd_kr_ymm_ymm() {
		testAssembler(c -> c.vptestnmd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPTESTNMD_KR_K1_YMM_YMMM256B32, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vptestnmd_kr_zmm_zmm() {
		testAssembler(c -> c.vptestnmd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPTESTNMD_KR_K1_ZMM_ZMMM512B32, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vptestnmd_kr_xmm_m() {
		testAssembler(c -> c.vptestnmd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTNMD_KR_K1_XMM_XMMM128B32, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestnmd_kr_ymm_m() {
		testAssembler(c -> c.vptestnmd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTNMD_KR_K1_YMM_YMMM256B32, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestnmd_kr_zmm_m() {
		testAssembler(c -> c.vptestnmd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTNMD_KR_K1_ZMM_ZMMM512B32, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestnmq_kr_xmm_xmm() {
		testAssembler(c -> c.vptestnmq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPTESTNMQ_KR_K1_XMM_XMMM128B64, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vptestnmq_kr_ymm_ymm() {
		testAssembler(c -> c.vptestnmq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPTESTNMQ_KR_K1_YMM_YMMM256B64, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vptestnmq_kr_zmm_zmm() {
		testAssembler(c -> c.vptestnmq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPTESTNMQ_KR_K1_ZMM_ZMMM512B64, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vptestnmq_kr_xmm_m() {
		testAssembler(c -> c.vptestnmq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTNMQ_KR_K1_XMM_XMMM128B64, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestnmq_kr_ymm_m() {
		testAssembler(c -> c.vptestnmq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTNMQ_KR_K1_YMM_YMMM256B64, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestnmq_kr_zmm_m() {
		testAssembler(c -> c.vptestnmq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTNMQ_KR_K1_ZMM_ZMMM512B64, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestnmw_kr_xmm_xmm() {
		testAssembler(c -> c.vptestnmw(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPTESTNMW_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vptestnmw_kr_ymm_ymm() {
		testAssembler(c -> c.vptestnmw(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPTESTNMW_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vptestnmw_kr_zmm_zmm() {
		testAssembler(c -> c.vptestnmw(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPTESTNMW_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vptestnmw_kr_xmm_m() {
		testAssembler(c -> c.vptestnmw(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTNMW_KR_K1_XMM_XMMM128, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestnmw_kr_ymm_m() {
		testAssembler(c -> c.vptestnmw(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTNMW_KR_K1_YMM_YMMM256, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vptestnmw_kr_zmm_m() {
		testAssembler(c -> c.vptestnmw(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPTESTNMW_KR_K1_ZMM_ZMMM512, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpunpckhbw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckhbw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPUNPCKHBW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckhbw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPUNPCKHBW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckhbw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckhbw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPUNPCKHBW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckhbw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPUNPCKHBW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckhbw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpunpckhbw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPUNPCKHBW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpunpckhbw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckhbw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPUNPCKHBW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckhbw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKHBW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckhbw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckhbw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPUNPCKHBW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckhbw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKHBW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckhbw_zmm_zmm_m() {
		testAssembler(c -> c.vpunpckhbw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKHBW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpunpckhdq_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckhdq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPUNPCKHDQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckhdq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPUNPCKHDQ_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckhdq_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckhdq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPUNPCKHDQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckhdq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPUNPCKHDQ_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckhdq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpunpckhdq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPUNPCKHDQ_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpunpckhdq_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpunpckhdq(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPUNPCKHDQ_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckhdq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPUNPCKHDQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckhdq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKHDQ_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckhdq_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpunpckhdq(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPUNPCKHDQ_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckhdq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPUNPCKHDQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckhdq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKHDQ_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckhdq_zmm_zmm_m() {
		testAssembler(c -> c.vpunpckhdq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKHDQ_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpunpckhqdq_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckhqdq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPUNPCKHQDQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckhqdq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPUNPCKHQDQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckhqdq_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckhqdq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPUNPCKHQDQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckhqdq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPUNPCKHQDQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckhqdq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpunpckhqdq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPUNPCKHQDQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpunpckhqdq_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpunpckhqdq(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPUNPCKHQDQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckhqdq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPUNPCKHQDQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckhqdq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKHQDQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckhqdq_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpunpckhqdq(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPUNPCKHQDQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckhqdq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPUNPCKHQDQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckhqdq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKHQDQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckhqdq_zmm_zmm_m() {
		testAssembler(c -> c.vpunpckhqdq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKHQDQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpunpckhwd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckhwd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPUNPCKHWD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckhwd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPUNPCKHWD_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckhwd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckhwd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPUNPCKHWD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckhwd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPUNPCKHWD_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckhwd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpunpckhwd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPUNPCKHWD_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpunpckhwd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckhwd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPUNPCKHWD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckhwd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKHWD_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckhwd_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckhwd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPUNPCKHWD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckhwd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKHWD_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckhwd_zmm_zmm_m() {
		testAssembler(c -> c.vpunpckhwd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKHWD_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpunpcklbw_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpcklbw(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPUNPCKLBW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpcklbw(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPUNPCKLBW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpcklbw_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpcklbw(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPUNPCKLBW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpcklbw(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPUNPCKLBW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpcklbw_zmm_zmm_zmm() {
		testAssembler(c -> c.vpunpcklbw(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPUNPCKLBW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpunpcklbw_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpcklbw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPUNPCKLBW_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpcklbw(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKLBW_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpcklbw_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpcklbw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPUNPCKLBW_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpcklbw(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKLBW_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpcklbw_zmm_zmm_m() {
		testAssembler(c -> c.vpunpcklbw(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKLBW_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpunpckldq_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckldq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPUNPCKLDQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckldq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPUNPCKLDQ_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckldq_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckldq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPUNPCKLDQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckldq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPUNPCKLDQ_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckldq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpunpckldq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPUNPCKLDQ_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpunpckldq_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpunpckldq(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPUNPCKLDQ_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckldq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPUNPCKLDQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckldq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKLDQ_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckldq_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpunpckldq(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPUNPCKLDQ_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpckldq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPUNPCKLDQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpckldq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKLDQ_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpckldq_zmm_zmm_m() {
		testAssembler(c -> c.vpunpckldq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKLDQ_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpunpcklqdq_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpcklqdq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPUNPCKLQDQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpcklqdq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPUNPCKLQDQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpcklqdq_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpcklqdq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPUNPCKLQDQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpcklqdq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPUNPCKLQDQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpcklqdq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpunpcklqdq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPUNPCKLQDQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpunpcklqdq_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpunpcklqdq(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPUNPCKLQDQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpcklqdq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPUNPCKLQDQ_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpcklqdq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKLQDQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpcklqdq_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vpunpcklqdq(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VPUNPCKLQDQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpcklqdq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPUNPCKLQDQ_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpcklqdq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKLQDQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpcklqdq_zmm_zmm_m() {
		testAssembler(c -> c.vpunpcklqdq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKLQDQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpunpcklwd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpcklwd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPUNPCKLWD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpcklwd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPUNPCKLWD_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpcklwd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpcklwd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPUNPCKLWD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpcklwd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPUNPCKLWD_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpcklwd_zmm_zmm_zmm() {
		testAssembler(c -> c.vpunpcklwd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPUNPCKLWD_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpunpcklwd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpcklwd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPUNPCKLWD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpcklwd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKLWD_XMM_K1Z_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpcklwd_ymm_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vpunpcklwd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPUNPCKLWD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vpunpcklwd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKLWD_YMM_K1Z_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vpunpcklwd_zmm_zmm_m() {
		testAssembler(c -> c.vpunpcklwd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPUNPCKLWD_ZMM_K1Z_ZMM_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpxor_xmm_xmm_xmm() {
		testAssembler(c -> c.vpxor(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPXOR_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vpxor_ymm_ymm_ymm() {
		testAssembler(c -> c.vpxor(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPXOR_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vpxor_xmm_xmm_m() {
		testAssembler(c -> c.vpxor(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPXOR_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpxor_ymm_ymm_m() {
		testAssembler(c -> c.vpxor(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPXOR_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpxord_xmm_xmm_xmm() {
		testAssembler(c -> c.vpxord(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPXORD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpxord_ymm_ymm_ymm() {
		testAssembler(c -> c.vpxord(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPXORD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpxord_zmm_zmm_zmm() {
		testAssembler(c -> c.vpxord(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPXORD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpxord_xmm_xmm_m() {
		testAssembler(c -> c.vpxord(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPXORD_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpxord_ymm_ymm_m() {
		testAssembler(c -> c.vpxord(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPXORD_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpxord_zmm_zmm_m() {
		testAssembler(c -> c.vpxord(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPXORD_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpxorq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpxorq(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPXORQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vpxorq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpxorq(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPXORQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vpxorq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpxorq(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPXORQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vpxorq_xmm_xmm_m() {
		testAssembler(c -> c.vpxorq(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPXORQ_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpxorq_ymm_ymm_m() {
		testAssembler(c -> c.vpxorq(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPXORQ_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vpxorq_zmm_zmm_m() {
		testAssembler(c -> c.vpxorq(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPXORQ_ZMM_K1Z_ZMM_ZMMM512B64, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

}
