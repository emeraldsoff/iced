// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

package com.github.icedland.iced.x86.asm;

import org.junit.jupiter.api.Test;

import com.github.icedland.iced.x86.*;
import static com.github.icedland.iced.x86.asm.AsmRegisters.*;

final class CodeAssembler16Gen4Tests extends CodeAssemblerTestsBase {
	CodeAssembler16Gen4Tests() {
		super(16);
	}

	@Test
	void v4fmaddps_zmm_zmm_m() {
		testAssembler(c -> c.v4fmaddps(zmm2.k1(), zmm3, mem_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_V4FMADDPS_ZMM_K1Z_ZMMP3_M128, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void v4fmaddss_xmm_xmm_m() {
		testAssembler(c -> c.v4fmaddss(xmm2.k1(), xmm3, mem_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_V4FMADDSS_XMM_K1Z_XMMP3_M128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void v4fnmaddps_zmm_zmm_m() {
		testAssembler(c -> c.v4fnmaddps(zmm2.k1(), zmm3, mem_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_V4FNMADDPS_ZMM_K1Z_ZMMP3_M128, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void v4fnmaddss_xmm_xmm_m() {
		testAssembler(c -> c.v4fnmaddss(xmm2.k1(), xmm3, mem_ptr(0x0L).base(si)), applyK(Instruction.create(Code.EVEX_V4FNMADDSS_XMM_K1Z_XMMP3_M128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

}
