// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

package com.github.icedland.iced.x86.asm;

import org.junit.jupiter.api.Test;

import com.github.icedland.iced.x86.*;
import static com.github.icedland.iced.x86.asm.AsmRegisters.*;

final class CodeAssembler32GenVTests extends CodeAssemblerTestsBase {
	CodeAssembler32GenVTests() {
		super(32);
	}

	@Test
	void vcmpeq_ospd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_ospd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 16), Register.K1));
	}

	@Test
	void vcmpeq_ospd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_ospd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 16));
	}

	@Test
	void vcmpeq_ospd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpeq_ospd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 16), Register.K1));
	}

	@Test
	void vcmpeq_ospd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpeq_ospd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 16));
	}

	@Test
	void vcmpeq_ospd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpeq_ospd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 16), Register.K1));
	}

	@Test
	void vcmpeq_ospd_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_ospd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16), Register.K1));
	}

	@Test
	void vcmpeq_ospd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpeq_ospd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16));
	}

	@Test
	void vcmpeq_ospd_kr_ymm_m() {
		testAssembler(c -> c.vcmpeq_ospd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16), Register.K1));
	}

	@Test
	void vcmpeq_ospd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpeq_ospd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16));
	}

	@Test
	void vcmpeq_ospd_kr_zmm_m() {
		testAssembler(c -> c.vcmpeq_ospd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16), Register.K1));
	}

	@Test
	void vcmpeq_osph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_osph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 16), Register.K1));
	}

	@Test
	void vcmpeq_osph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpeq_osph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 16), Register.K1));
	}

	@Test
	void vcmpeq_osph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpeq_osph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 16), Register.K1));
	}

	@Test
	void vcmpeq_osph_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_osph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16), Register.K1));
	}

	@Test
	void vcmpeq_osph_kr_ymm_m() {
		testAssembler(c -> c.vcmpeq_osph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16), Register.K1));
	}

	@Test
	void vcmpeq_osph_kr_zmm_m() {
		testAssembler(c -> c.vcmpeq_osph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16), Register.K1));
	}

	@Test
	void vcmpeq_osps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_osps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 16), Register.K1));
	}

	@Test
	void vcmpeq_osps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_osps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 16));
	}

	@Test
	void vcmpeq_osps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpeq_osps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 16), Register.K1));
	}

	@Test
	void vcmpeq_osps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpeq_osps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 16));
	}

	@Test
	void vcmpeq_osps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpeq_osps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 16), Register.K1));
	}

	@Test
	void vcmpeq_osps_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_osps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16), Register.K1));
	}

	@Test
	void vcmpeq_osps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpeq_osps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16));
	}

	@Test
	void vcmpeq_osps_kr_ymm_m() {
		testAssembler(c -> c.vcmpeq_osps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16), Register.K1));
	}

	@Test
	void vcmpeq_osps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpeq_osps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16));
	}

	@Test
	void vcmpeq_osps_kr_zmm_m() {
		testAssembler(c -> c.vcmpeq_osps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16), Register.K1));
	}

	@Test
	void vcmpeq_ossd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_ossd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 16), Register.K1));
	}

	@Test
	void vcmpeq_ossd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_ossd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 16));
	}

	@Test
	void vcmpeq_ossd_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_ossd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16), Register.K1));
	}

	@Test
	void vcmpeq_ossd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpeq_ossd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16));
	}

	@Test
	void vcmpeq_ossh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_ossh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 16), Register.K1));
	}

	@Test
	void vcmpeq_ossh_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_ossh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16), Register.K1));
	}

	@Test
	void vcmpeq_osss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_osss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 16), Register.K1));
	}

	@Test
	void vcmpeq_osss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_osss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 16));
	}

	@Test
	void vcmpeq_osss_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_osss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16), Register.K1));
	}

	@Test
	void vcmpeq_osss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpeq_osss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16));
	}

	@Test
	void vcmpeq_uqpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_uqpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 8), Register.K1));
	}

	@Test
	void vcmpeq_uqpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_uqpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 8));
	}

	@Test
	void vcmpeq_uqpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpeq_uqpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 8), Register.K1));
	}

	@Test
	void vcmpeq_uqpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpeq_uqpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 8));
	}

	@Test
	void vcmpeq_uqpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpeq_uqpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 8), Register.K1));
	}

	@Test
	void vcmpeq_uqpd_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_uqpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8), Register.K1));
	}

	@Test
	void vcmpeq_uqpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpeq_uqpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8));
	}

	@Test
	void vcmpeq_uqpd_kr_ymm_m() {
		testAssembler(c -> c.vcmpeq_uqpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8), Register.K1));
	}

	@Test
	void vcmpeq_uqpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpeq_uqpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8));
	}

	@Test
	void vcmpeq_uqpd_kr_zmm_m() {
		testAssembler(c -> c.vcmpeq_uqpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8), Register.K1));
	}

	@Test
	void vcmpeq_uqph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_uqph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 8), Register.K1));
	}

	@Test
	void vcmpeq_uqph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpeq_uqph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 8), Register.K1));
	}

	@Test
	void vcmpeq_uqph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpeq_uqph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 8), Register.K1));
	}

	@Test
	void vcmpeq_uqph_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_uqph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8), Register.K1));
	}

	@Test
	void vcmpeq_uqph_kr_ymm_m() {
		testAssembler(c -> c.vcmpeq_uqph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8), Register.K1));
	}

	@Test
	void vcmpeq_uqph_kr_zmm_m() {
		testAssembler(c -> c.vcmpeq_uqph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8), Register.K1));
	}

	@Test
	void vcmpeq_uqps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_uqps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 8), Register.K1));
	}

	@Test
	void vcmpeq_uqps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_uqps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 8));
	}

	@Test
	void vcmpeq_uqps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpeq_uqps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 8), Register.K1));
	}

	@Test
	void vcmpeq_uqps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpeq_uqps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 8));
	}

	@Test
	void vcmpeq_uqps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpeq_uqps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 8), Register.K1));
	}

	@Test
	void vcmpeq_uqps_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_uqps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8), Register.K1));
	}

	@Test
	void vcmpeq_uqps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpeq_uqps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8));
	}

	@Test
	void vcmpeq_uqps_kr_ymm_m() {
		testAssembler(c -> c.vcmpeq_uqps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8), Register.K1));
	}

	@Test
	void vcmpeq_uqps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpeq_uqps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8));
	}

	@Test
	void vcmpeq_uqps_kr_zmm_m() {
		testAssembler(c -> c.vcmpeq_uqps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8), Register.K1));
	}

	@Test
	void vcmpeq_uqsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_uqsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 8), Register.K1));
	}

	@Test
	void vcmpeq_uqsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_uqsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 8));
	}

	@Test
	void vcmpeq_uqsd_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_uqsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8), Register.K1));
	}

	@Test
	void vcmpeq_uqsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpeq_uqsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8));
	}

	@Test
	void vcmpeq_uqsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_uqsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 8), Register.K1));
	}

	@Test
	void vcmpeq_uqsh_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_uqsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8), Register.K1));
	}

	@Test
	void vcmpeq_uqss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_uqss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 8), Register.K1));
	}

	@Test
	void vcmpeq_uqss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_uqss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 8));
	}

	@Test
	void vcmpeq_uqss_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_uqss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8), Register.K1));
	}

	@Test
	void vcmpeq_uqss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpeq_uqss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 8));
	}

	@Test
	void vcmpeq_uspd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_uspd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 24), Register.K1));
	}

	@Test
	void vcmpeq_uspd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_uspd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 24));
	}

	@Test
	void vcmpeq_uspd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpeq_uspd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 24), Register.K1));
	}

	@Test
	void vcmpeq_uspd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpeq_uspd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 24));
	}

	@Test
	void vcmpeq_uspd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpeq_uspd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 24), Register.K1));
	}

	@Test
	void vcmpeq_uspd_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_uspd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24), Register.K1));
	}

	@Test
	void vcmpeq_uspd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpeq_uspd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24));
	}

	@Test
	void vcmpeq_uspd_kr_ymm_m() {
		testAssembler(c -> c.vcmpeq_uspd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24), Register.K1));
	}

	@Test
	void vcmpeq_uspd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpeq_uspd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24));
	}

	@Test
	void vcmpeq_uspd_kr_zmm_m() {
		testAssembler(c -> c.vcmpeq_uspd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24), Register.K1));
	}

	@Test
	void vcmpeq_usph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_usph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 24), Register.K1));
	}

	@Test
	void vcmpeq_usph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpeq_usph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 24), Register.K1));
	}

	@Test
	void vcmpeq_usph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpeq_usph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 24), Register.K1));
	}

	@Test
	void vcmpeq_usph_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_usph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24), Register.K1));
	}

	@Test
	void vcmpeq_usph_kr_ymm_m() {
		testAssembler(c -> c.vcmpeq_usph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24), Register.K1));
	}

	@Test
	void vcmpeq_usph_kr_zmm_m() {
		testAssembler(c -> c.vcmpeq_usph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24), Register.K1));
	}

	@Test
	void vcmpeq_usps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_usps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 24), Register.K1));
	}

	@Test
	void vcmpeq_usps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_usps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 24));
	}

	@Test
	void vcmpeq_usps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpeq_usps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 24), Register.K1));
	}

	@Test
	void vcmpeq_usps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpeq_usps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 24));
	}

	@Test
	void vcmpeq_usps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpeq_usps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 24), Register.K1));
	}

	@Test
	void vcmpeq_usps_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_usps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24), Register.K1));
	}

	@Test
	void vcmpeq_usps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpeq_usps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24));
	}

	@Test
	void vcmpeq_usps_kr_ymm_m() {
		testAssembler(c -> c.vcmpeq_usps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24), Register.K1));
	}

	@Test
	void vcmpeq_usps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpeq_usps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24));
	}

	@Test
	void vcmpeq_usps_kr_zmm_m() {
		testAssembler(c -> c.vcmpeq_usps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24), Register.K1));
	}

	@Test
	void vcmpeq_ussd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_ussd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 24), Register.K1));
	}

	@Test
	void vcmpeq_ussd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_ussd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 24));
	}

	@Test
	void vcmpeq_ussd_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_ussd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24), Register.K1));
	}

	@Test
	void vcmpeq_ussd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpeq_ussd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24));
	}

	@Test
	void vcmpeq_ussh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_ussh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 24), Register.K1));
	}

	@Test
	void vcmpeq_ussh_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_ussh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24), Register.K1));
	}

	@Test
	void vcmpeq_usss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_usss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 24), Register.K1));
	}

	@Test
	void vcmpeq_usss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpeq_usss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 24));
	}

	@Test
	void vcmpeq_usss_kr_xmm_m() {
		testAssembler(c -> c.vcmpeq_usss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24), Register.K1));
	}

	@Test
	void vcmpeq_usss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpeq_usss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 24));
	}

	@Test
	void vcmpeqpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeqpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 0), Register.K1));
	}

	@Test
	void vcmpeqpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpeqpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 0));
	}

	@Test
	void vcmpeqpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpeqpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 0), Register.K1));
	}

	@Test
	void vcmpeqpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpeqpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 0));
	}

	@Test
	void vcmpeqpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpeqpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 0), Register.K1));
	}

	@Test
	void vcmpeqpd_kr_xmm_m() {
		testAssembler(c -> c.vcmpeqpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vcmpeqpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpeqpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void vcmpeqpd_kr_ymm_m() {
		testAssembler(c -> c.vcmpeqpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vcmpeqpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpeqpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void vcmpeqpd_kr_zmm_m() {
		testAssembler(c -> c.vcmpeqpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vcmpeqph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeqph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 0), Register.K1));
	}

	@Test
	void vcmpeqph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpeqph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 0), Register.K1));
	}

	@Test
	void vcmpeqph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpeqph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 0), Register.K1));
	}

	@Test
	void vcmpeqph_kr_xmm_m() {
		testAssembler(c -> c.vcmpeqph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vcmpeqph_kr_ymm_m() {
		testAssembler(c -> c.vcmpeqph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vcmpeqph_kr_zmm_m() {
		testAssembler(c -> c.vcmpeqph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vcmpeqps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeqps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 0), Register.K1));
	}

	@Test
	void vcmpeqps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpeqps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 0));
	}

	@Test
	void vcmpeqps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpeqps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 0), Register.K1));
	}

	@Test
	void vcmpeqps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpeqps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 0));
	}

	@Test
	void vcmpeqps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpeqps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 0), Register.K1));
	}

	@Test
	void vcmpeqps_kr_xmm_m() {
		testAssembler(c -> c.vcmpeqps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vcmpeqps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpeqps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void vcmpeqps_kr_ymm_m() {
		testAssembler(c -> c.vcmpeqps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vcmpeqps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpeqps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void vcmpeqps_kr_zmm_m() {
		testAssembler(c -> c.vcmpeqps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vcmpeqsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeqsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 0), Register.K1));
	}

	@Test
	void vcmpeqsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpeqsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 0));
	}

	@Test
	void vcmpeqsd_kr_xmm_m() {
		testAssembler(c -> c.vcmpeqsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vcmpeqsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpeqsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void vcmpeqsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeqsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 0), Register.K1));
	}

	@Test
	void vcmpeqsh_kr_xmm_m() {
		testAssembler(c -> c.vcmpeqsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vcmpeqss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpeqss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 0), Register.K1));
	}

	@Test
	void vcmpeqss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpeqss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 0));
	}

	@Test
	void vcmpeqss_kr_xmm_m() {
		testAssembler(c -> c.vcmpeqss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vcmpeqss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpeqss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void vcmpfalse_ospd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpfalse_ospd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 27), Register.K1));
	}

	@Test
	void vcmpfalse_ospd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpfalse_ospd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 27));
	}

	@Test
	void vcmpfalse_ospd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpfalse_ospd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 27), Register.K1));
	}

	@Test
	void vcmpfalse_ospd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpfalse_ospd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 27));
	}

	@Test
	void vcmpfalse_ospd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpfalse_ospd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 27), Register.K1));
	}

	@Test
	void vcmpfalse_ospd_kr_xmm_m() {
		testAssembler(c -> c.vcmpfalse_ospd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27), Register.K1));
	}

	@Test
	void vcmpfalse_ospd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpfalse_ospd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27));
	}

	@Test
	void vcmpfalse_ospd_kr_ymm_m() {
		testAssembler(c -> c.vcmpfalse_ospd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27), Register.K1));
	}

	@Test
	void vcmpfalse_ospd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpfalse_ospd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27));
	}

	@Test
	void vcmpfalse_ospd_kr_zmm_m() {
		testAssembler(c -> c.vcmpfalse_ospd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27), Register.K1));
	}

	@Test
	void vcmpfalse_osph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpfalse_osph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 27), Register.K1));
	}

	@Test
	void vcmpfalse_osph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpfalse_osph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 27), Register.K1));
	}

	@Test
	void vcmpfalse_osph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpfalse_osph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 27), Register.K1));
	}

	@Test
	void vcmpfalse_osph_kr_xmm_m() {
		testAssembler(c -> c.vcmpfalse_osph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27), Register.K1));
	}

	@Test
	void vcmpfalse_osph_kr_ymm_m() {
		testAssembler(c -> c.vcmpfalse_osph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27), Register.K1));
	}

	@Test
	void vcmpfalse_osph_kr_zmm_m() {
		testAssembler(c -> c.vcmpfalse_osph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27), Register.K1));
	}

	@Test
	void vcmpfalse_osps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpfalse_osps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 27), Register.K1));
	}

	@Test
	void vcmpfalse_osps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpfalse_osps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 27));
	}

	@Test
	void vcmpfalse_osps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpfalse_osps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 27), Register.K1));
	}

	@Test
	void vcmpfalse_osps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpfalse_osps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 27));
	}

	@Test
	void vcmpfalse_osps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpfalse_osps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 27), Register.K1));
	}

	@Test
	void vcmpfalse_osps_kr_xmm_m() {
		testAssembler(c -> c.vcmpfalse_osps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27), Register.K1));
	}

	@Test
	void vcmpfalse_osps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpfalse_osps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27));
	}

	@Test
	void vcmpfalse_osps_kr_ymm_m() {
		testAssembler(c -> c.vcmpfalse_osps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27), Register.K1));
	}

	@Test
	void vcmpfalse_osps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpfalse_osps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27));
	}

	@Test
	void vcmpfalse_osps_kr_zmm_m() {
		testAssembler(c -> c.vcmpfalse_osps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27), Register.K1));
	}

	@Test
	void vcmpfalse_ossd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpfalse_ossd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 27), Register.K1));
	}

	@Test
	void vcmpfalse_ossd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpfalse_ossd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 27));
	}

	@Test
	void vcmpfalse_ossd_kr_xmm_m() {
		testAssembler(c -> c.vcmpfalse_ossd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27), Register.K1));
	}

	@Test
	void vcmpfalse_ossd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpfalse_ossd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27));
	}

	@Test
	void vcmpfalse_ossh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpfalse_ossh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 27), Register.K1));
	}

	@Test
	void vcmpfalse_ossh_kr_xmm_m() {
		testAssembler(c -> c.vcmpfalse_ossh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27), Register.K1));
	}

	@Test
	void vcmpfalse_osss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpfalse_osss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 27), Register.K1));
	}

	@Test
	void vcmpfalse_osss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpfalse_osss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 27));
	}

	@Test
	void vcmpfalse_osss_kr_xmm_m() {
		testAssembler(c -> c.vcmpfalse_osss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27), Register.K1));
	}

	@Test
	void vcmpfalse_osss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpfalse_osss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 27));
	}

	@Test
	void vcmpfalsepd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpfalsepd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 11), Register.K1));
	}

	@Test
	void vcmpfalsepd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpfalsepd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 11));
	}

	@Test
	void vcmpfalsepd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpfalsepd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 11), Register.K1));
	}

	@Test
	void vcmpfalsepd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpfalsepd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 11));
	}

	@Test
	void vcmpfalsepd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpfalsepd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 11), Register.K1));
	}

	@Test
	void vcmpfalsepd_kr_xmm_m() {
		testAssembler(c -> c.vcmpfalsepd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11), Register.K1));
	}

	@Test
	void vcmpfalsepd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpfalsepd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11));
	}

	@Test
	void vcmpfalsepd_kr_ymm_m() {
		testAssembler(c -> c.vcmpfalsepd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11), Register.K1));
	}

	@Test
	void vcmpfalsepd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpfalsepd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11));
	}

	@Test
	void vcmpfalsepd_kr_zmm_m() {
		testAssembler(c -> c.vcmpfalsepd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11), Register.K1));
	}

	@Test
	void vcmpfalseph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpfalseph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 11), Register.K1));
	}

	@Test
	void vcmpfalseph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpfalseph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 11), Register.K1));
	}

	@Test
	void vcmpfalseph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpfalseph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 11), Register.K1));
	}

	@Test
	void vcmpfalseph_kr_xmm_m() {
		testAssembler(c -> c.vcmpfalseph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11), Register.K1));
	}

	@Test
	void vcmpfalseph_kr_ymm_m() {
		testAssembler(c -> c.vcmpfalseph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11), Register.K1));
	}

	@Test
	void vcmpfalseph_kr_zmm_m() {
		testAssembler(c -> c.vcmpfalseph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11), Register.K1));
	}

	@Test
	void vcmpfalseps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpfalseps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 11), Register.K1));
	}

	@Test
	void vcmpfalseps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpfalseps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 11));
	}

	@Test
	void vcmpfalseps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpfalseps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 11), Register.K1));
	}

	@Test
	void vcmpfalseps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpfalseps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 11));
	}

	@Test
	void vcmpfalseps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpfalseps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 11), Register.K1));
	}

	@Test
	void vcmpfalseps_kr_xmm_m() {
		testAssembler(c -> c.vcmpfalseps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11), Register.K1));
	}

	@Test
	void vcmpfalseps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpfalseps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11));
	}

	@Test
	void vcmpfalseps_kr_ymm_m() {
		testAssembler(c -> c.vcmpfalseps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11), Register.K1));
	}

	@Test
	void vcmpfalseps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpfalseps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11));
	}

	@Test
	void vcmpfalseps_kr_zmm_m() {
		testAssembler(c -> c.vcmpfalseps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11), Register.K1));
	}

	@Test
	void vcmpfalsesd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpfalsesd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 11), Register.K1));
	}

	@Test
	void vcmpfalsesd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpfalsesd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 11));
	}

	@Test
	void vcmpfalsesd_kr_xmm_m() {
		testAssembler(c -> c.vcmpfalsesd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11), Register.K1));
	}

	@Test
	void vcmpfalsesd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpfalsesd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11));
	}

	@Test
	void vcmpfalsesh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpfalsesh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 11), Register.K1));
	}

	@Test
	void vcmpfalsesh_kr_xmm_m() {
		testAssembler(c -> c.vcmpfalsesh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11), Register.K1));
	}

	@Test
	void vcmpfalsess_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpfalsess(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 11), Register.K1));
	}

	@Test
	void vcmpfalsess_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpfalsess(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 11));
	}

	@Test
	void vcmpfalsess_kr_xmm_m() {
		testAssembler(c -> c.vcmpfalsess(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11), Register.K1));
	}

	@Test
	void vcmpfalsess_xmm_xmm_m() {
		testAssembler(c -> c.vcmpfalsess(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 11));
	}

	@Test
	void vcmpge_oqpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpge_oqpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 29), Register.K1));
	}

	@Test
	void vcmpge_oqpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpge_oqpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 29));
	}

	@Test
	void vcmpge_oqpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpge_oqpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 29), Register.K1));
	}

	@Test
	void vcmpge_oqpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpge_oqpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 29));
	}

	@Test
	void vcmpge_oqpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpge_oqpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 29), Register.K1));
	}

	@Test
	void vcmpge_oqpd_kr_xmm_m() {
		testAssembler(c -> c.vcmpge_oqpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29), Register.K1));
	}

	@Test
	void vcmpge_oqpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpge_oqpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29));
	}

	@Test
	void vcmpge_oqpd_kr_ymm_m() {
		testAssembler(c -> c.vcmpge_oqpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29), Register.K1));
	}

	@Test
	void vcmpge_oqpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpge_oqpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29));
	}

	@Test
	void vcmpge_oqpd_kr_zmm_m() {
		testAssembler(c -> c.vcmpge_oqpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29), Register.K1));
	}

	@Test
	void vcmpge_oqph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpge_oqph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 29), Register.K1));
	}

	@Test
	void vcmpge_oqph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpge_oqph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 29), Register.K1));
	}

	@Test
	void vcmpge_oqph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpge_oqph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 29), Register.K1));
	}

	@Test
	void vcmpge_oqph_kr_xmm_m() {
		testAssembler(c -> c.vcmpge_oqph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29), Register.K1));
	}

	@Test
	void vcmpge_oqph_kr_ymm_m() {
		testAssembler(c -> c.vcmpge_oqph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29), Register.K1));
	}

	@Test
	void vcmpge_oqph_kr_zmm_m() {
		testAssembler(c -> c.vcmpge_oqph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29), Register.K1));
	}

	@Test
	void vcmpge_oqps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpge_oqps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 29), Register.K1));
	}

	@Test
	void vcmpge_oqps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpge_oqps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 29));
	}

	@Test
	void vcmpge_oqps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpge_oqps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 29), Register.K1));
	}

	@Test
	void vcmpge_oqps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpge_oqps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 29));
	}

	@Test
	void vcmpge_oqps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpge_oqps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 29), Register.K1));
	}

	@Test
	void vcmpge_oqps_kr_xmm_m() {
		testAssembler(c -> c.vcmpge_oqps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29), Register.K1));
	}

	@Test
	void vcmpge_oqps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpge_oqps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29));
	}

	@Test
	void vcmpge_oqps_kr_ymm_m() {
		testAssembler(c -> c.vcmpge_oqps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29), Register.K1));
	}

	@Test
	void vcmpge_oqps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpge_oqps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29));
	}

	@Test
	void vcmpge_oqps_kr_zmm_m() {
		testAssembler(c -> c.vcmpge_oqps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29), Register.K1));
	}

	@Test
	void vcmpge_oqsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpge_oqsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 29), Register.K1));
	}

	@Test
	void vcmpge_oqsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpge_oqsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 29));
	}

	@Test
	void vcmpge_oqsd_kr_xmm_m() {
		testAssembler(c -> c.vcmpge_oqsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29), Register.K1));
	}

	@Test
	void vcmpge_oqsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpge_oqsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29));
	}

	@Test
	void vcmpge_oqsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpge_oqsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 29), Register.K1));
	}

	@Test
	void vcmpge_oqsh_kr_xmm_m() {
		testAssembler(c -> c.vcmpge_oqsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29), Register.K1));
	}

	@Test
	void vcmpge_oqss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpge_oqss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 29), Register.K1));
	}

	@Test
	void vcmpge_oqss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpge_oqss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 29));
	}

	@Test
	void vcmpge_oqss_kr_xmm_m() {
		testAssembler(c -> c.vcmpge_oqss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29), Register.K1));
	}

	@Test
	void vcmpge_oqss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpge_oqss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 29));
	}

	@Test
	void vcmpgepd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgepd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 13), Register.K1));
	}

	@Test
	void vcmpgepd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpgepd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 13));
	}

	@Test
	void vcmpgepd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpgepd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 13), Register.K1));
	}

	@Test
	void vcmpgepd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpgepd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 13));
	}

	@Test
	void vcmpgepd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpgepd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 13), Register.K1));
	}

	@Test
	void vcmpgepd_kr_xmm_m() {
		testAssembler(c -> c.vcmpgepd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13), Register.K1));
	}

	@Test
	void vcmpgepd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpgepd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13));
	}

	@Test
	void vcmpgepd_kr_ymm_m() {
		testAssembler(c -> c.vcmpgepd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13), Register.K1));
	}

	@Test
	void vcmpgepd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpgepd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13));
	}

	@Test
	void vcmpgepd_kr_zmm_m() {
		testAssembler(c -> c.vcmpgepd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13), Register.K1));
	}

	@Test
	void vcmpgeph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgeph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 13), Register.K1));
	}

	@Test
	void vcmpgeph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpgeph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 13), Register.K1));
	}

	@Test
	void vcmpgeph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpgeph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 13), Register.K1));
	}

	@Test
	void vcmpgeph_kr_xmm_m() {
		testAssembler(c -> c.vcmpgeph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13), Register.K1));
	}

	@Test
	void vcmpgeph_kr_ymm_m() {
		testAssembler(c -> c.vcmpgeph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13), Register.K1));
	}

	@Test
	void vcmpgeph_kr_zmm_m() {
		testAssembler(c -> c.vcmpgeph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13), Register.K1));
	}

	@Test
	void vcmpgeps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgeps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 13), Register.K1));
	}

	@Test
	void vcmpgeps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpgeps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 13));
	}

	@Test
	void vcmpgeps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpgeps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 13), Register.K1));
	}

	@Test
	void vcmpgeps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpgeps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 13));
	}

	@Test
	void vcmpgeps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpgeps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 13), Register.K1));
	}

	@Test
	void vcmpgeps_kr_xmm_m() {
		testAssembler(c -> c.vcmpgeps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13), Register.K1));
	}

	@Test
	void vcmpgeps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpgeps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13));
	}

	@Test
	void vcmpgeps_kr_ymm_m() {
		testAssembler(c -> c.vcmpgeps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13), Register.K1));
	}

	@Test
	void vcmpgeps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpgeps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13));
	}

	@Test
	void vcmpgeps_kr_zmm_m() {
		testAssembler(c -> c.vcmpgeps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13), Register.K1));
	}

	@Test
	void vcmpgesd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgesd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 13), Register.K1));
	}

	@Test
	void vcmpgesd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpgesd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 13));
	}

	@Test
	void vcmpgesd_kr_xmm_m() {
		testAssembler(c -> c.vcmpgesd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13), Register.K1));
	}

	@Test
	void vcmpgesd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpgesd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13));
	}

	@Test
	void vcmpgesh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgesh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 13), Register.K1));
	}

	@Test
	void vcmpgesh_kr_xmm_m() {
		testAssembler(c -> c.vcmpgesh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13), Register.K1));
	}

	@Test
	void vcmpgess_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgess(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 13), Register.K1));
	}

	@Test
	void vcmpgess_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpgess(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 13));
	}

	@Test
	void vcmpgess_kr_xmm_m() {
		testAssembler(c -> c.vcmpgess(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13), Register.K1));
	}

	@Test
	void vcmpgess_xmm_xmm_m() {
		testAssembler(c -> c.vcmpgess(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 13));
	}

	@Test
	void vcmpgt_oqpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgt_oqpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 30), Register.K1));
	}

	@Test
	void vcmpgt_oqpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpgt_oqpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 30));
	}

	@Test
	void vcmpgt_oqpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpgt_oqpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 30), Register.K1));
	}

	@Test
	void vcmpgt_oqpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpgt_oqpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 30));
	}

	@Test
	void vcmpgt_oqpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpgt_oqpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 30), Register.K1));
	}

	@Test
	void vcmpgt_oqpd_kr_xmm_m() {
		testAssembler(c -> c.vcmpgt_oqpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30), Register.K1));
	}

	@Test
	void vcmpgt_oqpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpgt_oqpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30));
	}

	@Test
	void vcmpgt_oqpd_kr_ymm_m() {
		testAssembler(c -> c.vcmpgt_oqpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30), Register.K1));
	}

	@Test
	void vcmpgt_oqpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpgt_oqpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30));
	}

	@Test
	void vcmpgt_oqpd_kr_zmm_m() {
		testAssembler(c -> c.vcmpgt_oqpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30), Register.K1));
	}

	@Test
	void vcmpgt_oqph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgt_oqph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 30), Register.K1));
	}

	@Test
	void vcmpgt_oqph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpgt_oqph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 30), Register.K1));
	}

	@Test
	void vcmpgt_oqph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpgt_oqph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 30), Register.K1));
	}

	@Test
	void vcmpgt_oqph_kr_xmm_m() {
		testAssembler(c -> c.vcmpgt_oqph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30), Register.K1));
	}

	@Test
	void vcmpgt_oqph_kr_ymm_m() {
		testAssembler(c -> c.vcmpgt_oqph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30), Register.K1));
	}

	@Test
	void vcmpgt_oqph_kr_zmm_m() {
		testAssembler(c -> c.vcmpgt_oqph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30), Register.K1));
	}

	@Test
	void vcmpgt_oqps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgt_oqps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 30), Register.K1));
	}

	@Test
	void vcmpgt_oqps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpgt_oqps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 30));
	}

	@Test
	void vcmpgt_oqps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpgt_oqps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 30), Register.K1));
	}

	@Test
	void vcmpgt_oqps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpgt_oqps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 30));
	}

	@Test
	void vcmpgt_oqps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpgt_oqps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 30), Register.K1));
	}

	@Test
	void vcmpgt_oqps_kr_xmm_m() {
		testAssembler(c -> c.vcmpgt_oqps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30), Register.K1));
	}

	@Test
	void vcmpgt_oqps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpgt_oqps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30));
	}

	@Test
	void vcmpgt_oqps_kr_ymm_m() {
		testAssembler(c -> c.vcmpgt_oqps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30), Register.K1));
	}

	@Test
	void vcmpgt_oqps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpgt_oqps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30));
	}

	@Test
	void vcmpgt_oqps_kr_zmm_m() {
		testAssembler(c -> c.vcmpgt_oqps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30), Register.K1));
	}

	@Test
	void vcmpgt_oqsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgt_oqsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 30), Register.K1));
	}

	@Test
	void vcmpgt_oqsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpgt_oqsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 30));
	}

	@Test
	void vcmpgt_oqsd_kr_xmm_m() {
		testAssembler(c -> c.vcmpgt_oqsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30), Register.K1));
	}

	@Test
	void vcmpgt_oqsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpgt_oqsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30));
	}

	@Test
	void vcmpgt_oqsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgt_oqsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 30), Register.K1));
	}

	@Test
	void vcmpgt_oqsh_kr_xmm_m() {
		testAssembler(c -> c.vcmpgt_oqsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30), Register.K1));
	}

	@Test
	void vcmpgt_oqss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgt_oqss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 30), Register.K1));
	}

	@Test
	void vcmpgt_oqss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpgt_oqss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 30));
	}

	@Test
	void vcmpgt_oqss_kr_xmm_m() {
		testAssembler(c -> c.vcmpgt_oqss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30), Register.K1));
	}

	@Test
	void vcmpgt_oqss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpgt_oqss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 30));
	}

	@Test
	void vcmpgtpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgtpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 14), Register.K1));
	}

	@Test
	void vcmpgtpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpgtpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 14));
	}

	@Test
	void vcmpgtpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpgtpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 14), Register.K1));
	}

	@Test
	void vcmpgtpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpgtpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 14));
	}

	@Test
	void vcmpgtpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpgtpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 14), Register.K1));
	}

	@Test
	void vcmpgtpd_kr_xmm_m() {
		testAssembler(c -> c.vcmpgtpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14), Register.K1));
	}

	@Test
	void vcmpgtpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpgtpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14));
	}

	@Test
	void vcmpgtpd_kr_ymm_m() {
		testAssembler(c -> c.vcmpgtpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14), Register.K1));
	}

	@Test
	void vcmpgtpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpgtpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14));
	}

	@Test
	void vcmpgtpd_kr_zmm_m() {
		testAssembler(c -> c.vcmpgtpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14), Register.K1));
	}

	@Test
	void vcmpgtph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgtph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 14), Register.K1));
	}

	@Test
	void vcmpgtph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpgtph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 14), Register.K1));
	}

	@Test
	void vcmpgtph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpgtph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 14), Register.K1));
	}

	@Test
	void vcmpgtph_kr_xmm_m() {
		testAssembler(c -> c.vcmpgtph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14), Register.K1));
	}

	@Test
	void vcmpgtph_kr_ymm_m() {
		testAssembler(c -> c.vcmpgtph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14), Register.K1));
	}

	@Test
	void vcmpgtph_kr_zmm_m() {
		testAssembler(c -> c.vcmpgtph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14), Register.K1));
	}

	@Test
	void vcmpgtps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgtps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 14), Register.K1));
	}

	@Test
	void vcmpgtps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpgtps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 14));
	}

	@Test
	void vcmpgtps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpgtps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 14), Register.K1));
	}

	@Test
	void vcmpgtps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpgtps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 14));
	}

	@Test
	void vcmpgtps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpgtps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 14), Register.K1));
	}

	@Test
	void vcmpgtps_kr_xmm_m() {
		testAssembler(c -> c.vcmpgtps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14), Register.K1));
	}

	@Test
	void vcmpgtps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpgtps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14));
	}

	@Test
	void vcmpgtps_kr_ymm_m() {
		testAssembler(c -> c.vcmpgtps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14), Register.K1));
	}

	@Test
	void vcmpgtps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpgtps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14));
	}

	@Test
	void vcmpgtps_kr_zmm_m() {
		testAssembler(c -> c.vcmpgtps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14), Register.K1));
	}

	@Test
	void vcmpgtsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgtsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 14), Register.K1));
	}

	@Test
	void vcmpgtsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpgtsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 14));
	}

	@Test
	void vcmpgtsd_kr_xmm_m() {
		testAssembler(c -> c.vcmpgtsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14), Register.K1));
	}

	@Test
	void vcmpgtsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpgtsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14));
	}

	@Test
	void vcmpgtsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgtsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 14), Register.K1));
	}

	@Test
	void vcmpgtsh_kr_xmm_m() {
		testAssembler(c -> c.vcmpgtsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14), Register.K1));
	}

	@Test
	void vcmpgtss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpgtss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 14), Register.K1));
	}

	@Test
	void vcmpgtss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpgtss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 14));
	}

	@Test
	void vcmpgtss_kr_xmm_m() {
		testAssembler(c -> c.vcmpgtss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14), Register.K1));
	}

	@Test
	void vcmpgtss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpgtss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 14));
	}

	@Test
	void vcmple_oqpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmple_oqpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 18), Register.K1));
	}

	@Test
	void vcmple_oqpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmple_oqpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 18));
	}

	@Test
	void vcmple_oqpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmple_oqpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 18), Register.K1));
	}

	@Test
	void vcmple_oqpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmple_oqpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 18));
	}

	@Test
	void vcmple_oqpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmple_oqpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 18), Register.K1));
	}

	@Test
	void vcmple_oqpd_kr_xmm_m() {
		testAssembler(c -> c.vcmple_oqpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18), Register.K1));
	}

	@Test
	void vcmple_oqpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmple_oqpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18));
	}

	@Test
	void vcmple_oqpd_kr_ymm_m() {
		testAssembler(c -> c.vcmple_oqpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18), Register.K1));
	}

	@Test
	void vcmple_oqpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmple_oqpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18));
	}

	@Test
	void vcmple_oqpd_kr_zmm_m() {
		testAssembler(c -> c.vcmple_oqpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18), Register.K1));
	}

	@Test
	void vcmple_oqph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmple_oqph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 18), Register.K1));
	}

	@Test
	void vcmple_oqph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmple_oqph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 18), Register.K1));
	}

	@Test
	void vcmple_oqph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmple_oqph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 18), Register.K1));
	}

	@Test
	void vcmple_oqph_kr_xmm_m() {
		testAssembler(c -> c.vcmple_oqph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18), Register.K1));
	}

	@Test
	void vcmple_oqph_kr_ymm_m() {
		testAssembler(c -> c.vcmple_oqph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18), Register.K1));
	}

	@Test
	void vcmple_oqph_kr_zmm_m() {
		testAssembler(c -> c.vcmple_oqph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18), Register.K1));
	}

	@Test
	void vcmple_oqps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmple_oqps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 18), Register.K1));
	}

	@Test
	void vcmple_oqps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmple_oqps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 18));
	}

	@Test
	void vcmple_oqps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmple_oqps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 18), Register.K1));
	}

	@Test
	void vcmple_oqps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmple_oqps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 18));
	}

	@Test
	void vcmple_oqps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmple_oqps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 18), Register.K1));
	}

	@Test
	void vcmple_oqps_kr_xmm_m() {
		testAssembler(c -> c.vcmple_oqps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18), Register.K1));
	}

	@Test
	void vcmple_oqps_xmm_xmm_m() {
		testAssembler(c -> c.vcmple_oqps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18));
	}

	@Test
	void vcmple_oqps_kr_ymm_m() {
		testAssembler(c -> c.vcmple_oqps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18), Register.K1));
	}

	@Test
	void vcmple_oqps_ymm_ymm_m() {
		testAssembler(c -> c.vcmple_oqps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18));
	}

	@Test
	void vcmple_oqps_kr_zmm_m() {
		testAssembler(c -> c.vcmple_oqps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18), Register.K1));
	}

	@Test
	void vcmple_oqsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmple_oqsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 18), Register.K1));
	}

	@Test
	void vcmple_oqsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmple_oqsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 18));
	}

	@Test
	void vcmple_oqsd_kr_xmm_m() {
		testAssembler(c -> c.vcmple_oqsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18), Register.K1));
	}

	@Test
	void vcmple_oqsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmple_oqsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18));
	}

	@Test
	void vcmple_oqsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmple_oqsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 18), Register.K1));
	}

	@Test
	void vcmple_oqsh_kr_xmm_m() {
		testAssembler(c -> c.vcmple_oqsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18), Register.K1));
	}

	@Test
	void vcmple_oqss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmple_oqss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 18), Register.K1));
	}

	@Test
	void vcmple_oqss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmple_oqss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 18));
	}

	@Test
	void vcmple_oqss_kr_xmm_m() {
		testAssembler(c -> c.vcmple_oqss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18), Register.K1));
	}

	@Test
	void vcmple_oqss_xmm_xmm_m() {
		testAssembler(c -> c.vcmple_oqss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 18));
	}

	@Test
	void vcmplepd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmplepd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 2), Register.K1));
	}

	@Test
	void vcmplepd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmplepd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 2));
	}

	@Test
	void vcmplepd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmplepd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 2), Register.K1));
	}

	@Test
	void vcmplepd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmplepd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 2));
	}

	@Test
	void vcmplepd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmplepd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 2), Register.K1));
	}

	@Test
	void vcmplepd_kr_xmm_m() {
		testAssembler(c -> c.vcmplepd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vcmplepd_xmm_xmm_m() {
		testAssembler(c -> c.vcmplepd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void vcmplepd_kr_ymm_m() {
		testAssembler(c -> c.vcmplepd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vcmplepd_ymm_ymm_m() {
		testAssembler(c -> c.vcmplepd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void vcmplepd_kr_zmm_m() {
		testAssembler(c -> c.vcmplepd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vcmpleph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpleph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 2), Register.K1));
	}

	@Test
	void vcmpleph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpleph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 2), Register.K1));
	}

	@Test
	void vcmpleph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpleph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 2), Register.K1));
	}

	@Test
	void vcmpleph_kr_xmm_m() {
		testAssembler(c -> c.vcmpleph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vcmpleph_kr_ymm_m() {
		testAssembler(c -> c.vcmpleph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vcmpleph_kr_zmm_m() {
		testAssembler(c -> c.vcmpleph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vcmpleps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpleps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 2), Register.K1));
	}

	@Test
	void vcmpleps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpleps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 2));
	}

	@Test
	void vcmpleps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpleps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 2), Register.K1));
	}

	@Test
	void vcmpleps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpleps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 2));
	}

	@Test
	void vcmpleps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpleps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 2), Register.K1));
	}

	@Test
	void vcmpleps_kr_xmm_m() {
		testAssembler(c -> c.vcmpleps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vcmpleps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpleps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void vcmpleps_kr_ymm_m() {
		testAssembler(c -> c.vcmpleps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vcmpleps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpleps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void vcmpleps_kr_zmm_m() {
		testAssembler(c -> c.vcmpleps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vcmplesd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmplesd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 2), Register.K1));
	}

	@Test
	void vcmplesd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmplesd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 2));
	}

	@Test
	void vcmplesd_kr_xmm_m() {
		testAssembler(c -> c.vcmplesd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vcmplesd_xmm_xmm_m() {
		testAssembler(c -> c.vcmplesd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void vcmplesh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmplesh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 2), Register.K1));
	}

	@Test
	void vcmplesh_kr_xmm_m() {
		testAssembler(c -> c.vcmplesh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vcmpless_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpless(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 2), Register.K1));
	}

	@Test
	void vcmpless_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpless(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 2));
	}

	@Test
	void vcmpless_kr_xmm_m() {
		testAssembler(c -> c.vcmpless(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vcmpless_xmm_xmm_m() {
		testAssembler(c -> c.vcmpless(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void vcmplt_oqpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmplt_oqpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 17), Register.K1));
	}

	@Test
	void vcmplt_oqpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmplt_oqpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 17));
	}

	@Test
	void vcmplt_oqpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmplt_oqpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 17), Register.K1));
	}

	@Test
	void vcmplt_oqpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmplt_oqpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 17));
	}

	@Test
	void vcmplt_oqpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmplt_oqpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 17), Register.K1));
	}

	@Test
	void vcmplt_oqpd_kr_xmm_m() {
		testAssembler(c -> c.vcmplt_oqpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17), Register.K1));
	}

	@Test
	void vcmplt_oqpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmplt_oqpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17));
	}

	@Test
	void vcmplt_oqpd_kr_ymm_m() {
		testAssembler(c -> c.vcmplt_oqpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17), Register.K1));
	}

	@Test
	void vcmplt_oqpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmplt_oqpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17));
	}

	@Test
	void vcmplt_oqpd_kr_zmm_m() {
		testAssembler(c -> c.vcmplt_oqpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17), Register.K1));
	}

	@Test
	void vcmplt_oqph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmplt_oqph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 17), Register.K1));
	}

	@Test
	void vcmplt_oqph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmplt_oqph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 17), Register.K1));
	}

	@Test
	void vcmplt_oqph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmplt_oqph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 17), Register.K1));
	}

	@Test
	void vcmplt_oqph_kr_xmm_m() {
		testAssembler(c -> c.vcmplt_oqph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17), Register.K1));
	}

	@Test
	void vcmplt_oqph_kr_ymm_m() {
		testAssembler(c -> c.vcmplt_oqph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17), Register.K1));
	}

	@Test
	void vcmplt_oqph_kr_zmm_m() {
		testAssembler(c -> c.vcmplt_oqph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17), Register.K1));
	}

	@Test
	void vcmplt_oqps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmplt_oqps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 17), Register.K1));
	}

	@Test
	void vcmplt_oqps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmplt_oqps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 17));
	}

	@Test
	void vcmplt_oqps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmplt_oqps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 17), Register.K1));
	}

	@Test
	void vcmplt_oqps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmplt_oqps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 17));
	}

	@Test
	void vcmplt_oqps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmplt_oqps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 17), Register.K1));
	}

	@Test
	void vcmplt_oqps_kr_xmm_m() {
		testAssembler(c -> c.vcmplt_oqps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17), Register.K1));
	}

	@Test
	void vcmplt_oqps_xmm_xmm_m() {
		testAssembler(c -> c.vcmplt_oqps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17));
	}

	@Test
	void vcmplt_oqps_kr_ymm_m() {
		testAssembler(c -> c.vcmplt_oqps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17), Register.K1));
	}

	@Test
	void vcmplt_oqps_ymm_ymm_m() {
		testAssembler(c -> c.vcmplt_oqps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17));
	}

	@Test
	void vcmplt_oqps_kr_zmm_m() {
		testAssembler(c -> c.vcmplt_oqps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17), Register.K1));
	}

	@Test
	void vcmplt_oqsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmplt_oqsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 17), Register.K1));
	}

	@Test
	void vcmplt_oqsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmplt_oqsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 17));
	}

	@Test
	void vcmplt_oqsd_kr_xmm_m() {
		testAssembler(c -> c.vcmplt_oqsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17), Register.K1));
	}

	@Test
	void vcmplt_oqsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmplt_oqsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17));
	}

	@Test
	void vcmplt_oqsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmplt_oqsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 17), Register.K1));
	}

	@Test
	void vcmplt_oqsh_kr_xmm_m() {
		testAssembler(c -> c.vcmplt_oqsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17), Register.K1));
	}

	@Test
	void vcmplt_oqss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmplt_oqss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 17), Register.K1));
	}

	@Test
	void vcmplt_oqss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmplt_oqss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 17));
	}

	@Test
	void vcmplt_oqss_kr_xmm_m() {
		testAssembler(c -> c.vcmplt_oqss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17), Register.K1));
	}

	@Test
	void vcmplt_oqss_xmm_xmm_m() {
		testAssembler(c -> c.vcmplt_oqss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17));
	}

	@Test
	void vcmpltpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpltpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 1), Register.K1));
	}

	@Test
	void vcmpltpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpltpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 1));
	}

	@Test
	void vcmpltpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpltpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 1), Register.K1));
	}

	@Test
	void vcmpltpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpltpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 1));
	}

	@Test
	void vcmpltpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpltpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 1), Register.K1));
	}

	@Test
	void vcmpltpd_kr_xmm_m() {
		testAssembler(c -> c.vcmpltpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vcmpltpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpltpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void vcmpltpd_kr_ymm_m() {
		testAssembler(c -> c.vcmpltpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vcmpltpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpltpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void vcmpltpd_kr_zmm_m() {
		testAssembler(c -> c.vcmpltpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vcmpltph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpltph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 1), Register.K1));
	}

	@Test
	void vcmpltph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpltph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 1), Register.K1));
	}

	@Test
	void vcmpltph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpltph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 1), Register.K1));
	}

	@Test
	void vcmpltph_kr_xmm_m() {
		testAssembler(c -> c.vcmpltph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vcmpltph_kr_ymm_m() {
		testAssembler(c -> c.vcmpltph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vcmpltph_kr_zmm_m() {
		testAssembler(c -> c.vcmpltph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vcmpltps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpltps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 1), Register.K1));
	}

	@Test
	void vcmpltps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpltps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 1));
	}

	@Test
	void vcmpltps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpltps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 1), Register.K1));
	}

	@Test
	void vcmpltps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpltps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 1));
	}

	@Test
	void vcmpltps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpltps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 1), Register.K1));
	}

	@Test
	void vcmpltps_kr_xmm_m() {
		testAssembler(c -> c.vcmpltps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vcmpltps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpltps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void vcmpltps_kr_ymm_m() {
		testAssembler(c -> c.vcmpltps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vcmpltps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpltps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void vcmpltps_kr_zmm_m() {
		testAssembler(c -> c.vcmpltps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vcmpltsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpltsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 1), Register.K1));
	}

	@Test
	void vcmpltsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpltsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 1));
	}

	@Test
	void vcmpltsd_kr_xmm_m() {
		testAssembler(c -> c.vcmpltsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vcmpltsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpltsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void vcmpltsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpltsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 1), Register.K1));
	}

	@Test
	void vcmpltsh_kr_xmm_m() {
		testAssembler(c -> c.vcmpltsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vcmpltss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpltss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 1), Register.K1));
	}

	@Test
	void vcmpltss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpltss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 1));
	}

	@Test
	void vcmpltss_kr_xmm_m() {
		testAssembler(c -> c.vcmpltss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vcmpltss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpltss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void vcmpneq_oqpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_oqpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 12), Register.K1));
	}

	@Test
	void vcmpneq_oqpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_oqpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 12));
	}

	@Test
	void vcmpneq_oqpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpneq_oqpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 12), Register.K1));
	}

	@Test
	void vcmpneq_oqpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpneq_oqpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 12));
	}

	@Test
	void vcmpneq_oqpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpneq_oqpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 12), Register.K1));
	}

	@Test
	void vcmpneq_oqpd_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_oqpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12), Register.K1));
	}

	@Test
	void vcmpneq_oqpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpneq_oqpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12));
	}

	@Test
	void vcmpneq_oqpd_kr_ymm_m() {
		testAssembler(c -> c.vcmpneq_oqpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12), Register.K1));
	}

	@Test
	void vcmpneq_oqpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpneq_oqpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12));
	}

	@Test
	void vcmpneq_oqpd_kr_zmm_m() {
		testAssembler(c -> c.vcmpneq_oqpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12), Register.K1));
	}

	@Test
	void vcmpneq_oqph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_oqph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 12), Register.K1));
	}

	@Test
	void vcmpneq_oqph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpneq_oqph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 12), Register.K1));
	}

	@Test
	void vcmpneq_oqph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpneq_oqph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 12), Register.K1));
	}

	@Test
	void vcmpneq_oqph_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_oqph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12), Register.K1));
	}

	@Test
	void vcmpneq_oqph_kr_ymm_m() {
		testAssembler(c -> c.vcmpneq_oqph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12), Register.K1));
	}

	@Test
	void vcmpneq_oqph_kr_zmm_m() {
		testAssembler(c -> c.vcmpneq_oqph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12), Register.K1));
	}

	@Test
	void vcmpneq_oqps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_oqps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 12), Register.K1));
	}

	@Test
	void vcmpneq_oqps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_oqps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 12));
	}

	@Test
	void vcmpneq_oqps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpneq_oqps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 12), Register.K1));
	}

	@Test
	void vcmpneq_oqps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpneq_oqps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 12));
	}

	@Test
	void vcmpneq_oqps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpneq_oqps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 12), Register.K1));
	}

	@Test
	void vcmpneq_oqps_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_oqps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12), Register.K1));
	}

	@Test
	void vcmpneq_oqps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpneq_oqps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12));
	}

	@Test
	void vcmpneq_oqps_kr_ymm_m() {
		testAssembler(c -> c.vcmpneq_oqps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12), Register.K1));
	}

	@Test
	void vcmpneq_oqps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpneq_oqps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12));
	}

	@Test
	void vcmpneq_oqps_kr_zmm_m() {
		testAssembler(c -> c.vcmpneq_oqps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12), Register.K1));
	}

	@Test
	void vcmpneq_oqsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_oqsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 12), Register.K1));
	}

	@Test
	void vcmpneq_oqsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_oqsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 12));
	}

	@Test
	void vcmpneq_oqsd_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_oqsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12), Register.K1));
	}

	@Test
	void vcmpneq_oqsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpneq_oqsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12));
	}

	@Test
	void vcmpneq_oqsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_oqsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 12), Register.K1));
	}

	@Test
	void vcmpneq_oqsh_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_oqsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12), Register.K1));
	}

	@Test
	void vcmpneq_oqss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_oqss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 12), Register.K1));
	}

	@Test
	void vcmpneq_oqss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_oqss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 12));
	}

	@Test
	void vcmpneq_oqss_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_oqss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12), Register.K1));
	}

	@Test
	void vcmpneq_oqss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpneq_oqss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 12));
	}

	@Test
	void vcmpneq_ospd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_ospd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 28), Register.K1));
	}

	@Test
	void vcmpneq_ospd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_ospd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 28));
	}

	@Test
	void vcmpneq_ospd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpneq_ospd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 28), Register.K1));
	}

	@Test
	void vcmpneq_ospd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpneq_ospd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 28));
	}

	@Test
	void vcmpneq_ospd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpneq_ospd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 28), Register.K1));
	}

	@Test
	void vcmpneq_ospd_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_ospd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28), Register.K1));
	}

	@Test
	void vcmpneq_ospd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpneq_ospd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28));
	}

	@Test
	void vcmpneq_ospd_kr_ymm_m() {
		testAssembler(c -> c.vcmpneq_ospd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28), Register.K1));
	}

	@Test
	void vcmpneq_ospd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpneq_ospd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28));
	}

	@Test
	void vcmpneq_ospd_kr_zmm_m() {
		testAssembler(c -> c.vcmpneq_ospd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28), Register.K1));
	}

	@Test
	void vcmpneq_osph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_osph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 28), Register.K1));
	}

	@Test
	void vcmpneq_osph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpneq_osph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 28), Register.K1));
	}

	@Test
	void vcmpneq_osph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpneq_osph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 28), Register.K1));
	}

	@Test
	void vcmpneq_osph_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_osph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28), Register.K1));
	}

	@Test
	void vcmpneq_osph_kr_ymm_m() {
		testAssembler(c -> c.vcmpneq_osph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28), Register.K1));
	}

	@Test
	void vcmpneq_osph_kr_zmm_m() {
		testAssembler(c -> c.vcmpneq_osph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28), Register.K1));
	}

	@Test
	void vcmpneq_osps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_osps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 28), Register.K1));
	}

	@Test
	void vcmpneq_osps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_osps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 28));
	}

	@Test
	void vcmpneq_osps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpneq_osps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 28), Register.K1));
	}

	@Test
	void vcmpneq_osps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpneq_osps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 28));
	}

	@Test
	void vcmpneq_osps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpneq_osps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 28), Register.K1));
	}

	@Test
	void vcmpneq_osps_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_osps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28), Register.K1));
	}

	@Test
	void vcmpneq_osps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpneq_osps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28));
	}

	@Test
	void vcmpneq_osps_kr_ymm_m() {
		testAssembler(c -> c.vcmpneq_osps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28), Register.K1));
	}

	@Test
	void vcmpneq_osps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpneq_osps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28));
	}

	@Test
	void vcmpneq_osps_kr_zmm_m() {
		testAssembler(c -> c.vcmpneq_osps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28), Register.K1));
	}

	@Test
	void vcmpneq_ossd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_ossd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 28), Register.K1));
	}

	@Test
	void vcmpneq_ossd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_ossd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 28));
	}

	@Test
	void vcmpneq_ossd_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_ossd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28), Register.K1));
	}

	@Test
	void vcmpneq_ossd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpneq_ossd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28));
	}

	@Test
	void vcmpneq_ossh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_ossh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 28), Register.K1));
	}

	@Test
	void vcmpneq_ossh_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_ossh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28), Register.K1));
	}

	@Test
	void vcmpneq_osss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_osss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 28), Register.K1));
	}

	@Test
	void vcmpneq_osss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_osss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 28));
	}

	@Test
	void vcmpneq_osss_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_osss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28), Register.K1));
	}

	@Test
	void vcmpneq_osss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpneq_osss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 28));
	}

	@Test
	void vcmpneq_uspd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_uspd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 20), Register.K1));
	}

	@Test
	void vcmpneq_uspd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_uspd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 20));
	}

	@Test
	void vcmpneq_uspd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpneq_uspd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 20), Register.K1));
	}

	@Test
	void vcmpneq_uspd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpneq_uspd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 20));
	}

	@Test
	void vcmpneq_uspd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpneq_uspd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 20), Register.K1));
	}

	@Test
	void vcmpneq_uspd_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_uspd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20), Register.K1));
	}

	@Test
	void vcmpneq_uspd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpneq_uspd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20));
	}

	@Test
	void vcmpneq_uspd_kr_ymm_m() {
		testAssembler(c -> c.vcmpneq_uspd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20), Register.K1));
	}

	@Test
	void vcmpneq_uspd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpneq_uspd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20));
	}

	@Test
	void vcmpneq_uspd_kr_zmm_m() {
		testAssembler(c -> c.vcmpneq_uspd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20), Register.K1));
	}

	@Test
	void vcmpneq_usph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_usph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 20), Register.K1));
	}

	@Test
	void vcmpneq_usph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpneq_usph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 20), Register.K1));
	}

	@Test
	void vcmpneq_usph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpneq_usph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 20), Register.K1));
	}

	@Test
	void vcmpneq_usph_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_usph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20), Register.K1));
	}

	@Test
	void vcmpneq_usph_kr_ymm_m() {
		testAssembler(c -> c.vcmpneq_usph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20), Register.K1));
	}

	@Test
	void vcmpneq_usph_kr_zmm_m() {
		testAssembler(c -> c.vcmpneq_usph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20), Register.K1));
	}

	@Test
	void vcmpneq_usps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_usps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 20), Register.K1));
	}

	@Test
	void vcmpneq_usps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_usps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 20));
	}

	@Test
	void vcmpneq_usps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpneq_usps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 20), Register.K1));
	}

	@Test
	void vcmpneq_usps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpneq_usps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 20));
	}

	@Test
	void vcmpneq_usps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpneq_usps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 20), Register.K1));
	}

	@Test
	void vcmpneq_usps_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_usps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20), Register.K1));
	}

	@Test
	void vcmpneq_usps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpneq_usps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20));
	}

	@Test
	void vcmpneq_usps_kr_ymm_m() {
		testAssembler(c -> c.vcmpneq_usps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20), Register.K1));
	}

	@Test
	void vcmpneq_usps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpneq_usps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20));
	}

	@Test
	void vcmpneq_usps_kr_zmm_m() {
		testAssembler(c -> c.vcmpneq_usps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20), Register.K1));
	}

	@Test
	void vcmpneq_ussd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_ussd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 20), Register.K1));
	}

	@Test
	void vcmpneq_ussd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_ussd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 20));
	}

	@Test
	void vcmpneq_ussd_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_ussd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20), Register.K1));
	}

	@Test
	void vcmpneq_ussd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpneq_ussd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20));
	}

	@Test
	void vcmpneq_ussh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_ussh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 20), Register.K1));
	}

	@Test
	void vcmpneq_ussh_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_ussh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20), Register.K1));
	}

	@Test
	void vcmpneq_usss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_usss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 20), Register.K1));
	}

	@Test
	void vcmpneq_usss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpneq_usss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 20));
	}

	@Test
	void vcmpneq_usss_kr_xmm_m() {
		testAssembler(c -> c.vcmpneq_usss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20), Register.K1));
	}

	@Test
	void vcmpneq_usss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpneq_usss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 20));
	}

	@Test
	void vcmpneqpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneqpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 4), Register.K1));
	}

	@Test
	void vcmpneqpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpneqpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 4));
	}

	@Test
	void vcmpneqpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpneqpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 4), Register.K1));
	}

	@Test
	void vcmpneqpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpneqpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 4));
	}

	@Test
	void vcmpneqpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpneqpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 4), Register.K1));
	}

	@Test
	void vcmpneqpd_kr_xmm_m() {
		testAssembler(c -> c.vcmpneqpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vcmpneqpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpneqpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void vcmpneqpd_kr_ymm_m() {
		testAssembler(c -> c.vcmpneqpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vcmpneqpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpneqpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void vcmpneqpd_kr_zmm_m() {
		testAssembler(c -> c.vcmpneqpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vcmpneqph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneqph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 4), Register.K1));
	}

	@Test
	void vcmpneqph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpneqph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 4), Register.K1));
	}

	@Test
	void vcmpneqph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpneqph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 4), Register.K1));
	}

	@Test
	void vcmpneqph_kr_xmm_m() {
		testAssembler(c -> c.vcmpneqph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vcmpneqph_kr_ymm_m() {
		testAssembler(c -> c.vcmpneqph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vcmpneqph_kr_zmm_m() {
		testAssembler(c -> c.vcmpneqph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vcmpneqps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneqps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 4), Register.K1));
	}

	@Test
	void vcmpneqps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpneqps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 4));
	}

	@Test
	void vcmpneqps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpneqps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 4), Register.K1));
	}

	@Test
	void vcmpneqps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpneqps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 4));
	}

	@Test
	void vcmpneqps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpneqps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 4), Register.K1));
	}

	@Test
	void vcmpneqps_kr_xmm_m() {
		testAssembler(c -> c.vcmpneqps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vcmpneqps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpneqps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void vcmpneqps_kr_ymm_m() {
		testAssembler(c -> c.vcmpneqps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vcmpneqps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpneqps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void vcmpneqps_kr_zmm_m() {
		testAssembler(c -> c.vcmpneqps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vcmpneqsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneqsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 4), Register.K1));
	}

	@Test
	void vcmpneqsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpneqsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 4));
	}

	@Test
	void vcmpneqsd_kr_xmm_m() {
		testAssembler(c -> c.vcmpneqsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vcmpneqsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpneqsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void vcmpneqsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneqsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 4), Register.K1));
	}

	@Test
	void vcmpneqsh_kr_xmm_m() {
		testAssembler(c -> c.vcmpneqsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vcmpneqss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpneqss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 4), Register.K1));
	}

	@Test
	void vcmpneqss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpneqss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 4));
	}

	@Test
	void vcmpneqss_kr_xmm_m() {
		testAssembler(c -> c.vcmpneqss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vcmpneqss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpneqss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void vcmpnge_uqpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnge_uqpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 25), Register.K1));
	}

	@Test
	void vcmpnge_uqpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnge_uqpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 25));
	}

	@Test
	void vcmpnge_uqpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpnge_uqpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 25), Register.K1));
	}

	@Test
	void vcmpnge_uqpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpnge_uqpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 25));
	}

	@Test
	void vcmpnge_uqpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpnge_uqpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 25), Register.K1));
	}

	@Test
	void vcmpnge_uqpd_kr_xmm_m() {
		testAssembler(c -> c.vcmpnge_uqpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25), Register.K1));
	}

	@Test
	void vcmpnge_uqpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnge_uqpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25));
	}

	@Test
	void vcmpnge_uqpd_kr_ymm_m() {
		testAssembler(c -> c.vcmpnge_uqpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25), Register.K1));
	}

	@Test
	void vcmpnge_uqpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpnge_uqpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25));
	}

	@Test
	void vcmpnge_uqpd_kr_zmm_m() {
		testAssembler(c -> c.vcmpnge_uqpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25), Register.K1));
	}

	@Test
	void vcmpnge_uqph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnge_uqph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 25), Register.K1));
	}

	@Test
	void vcmpnge_uqph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpnge_uqph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 25), Register.K1));
	}

	@Test
	void vcmpnge_uqph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpnge_uqph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 25), Register.K1));
	}

	@Test
	void vcmpnge_uqph_kr_xmm_m() {
		testAssembler(c -> c.vcmpnge_uqph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25), Register.K1));
	}

	@Test
	void vcmpnge_uqph_kr_ymm_m() {
		testAssembler(c -> c.vcmpnge_uqph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25), Register.K1));
	}

	@Test
	void vcmpnge_uqph_kr_zmm_m() {
		testAssembler(c -> c.vcmpnge_uqph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25), Register.K1));
	}

	@Test
	void vcmpnge_uqps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnge_uqps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 25), Register.K1));
	}

	@Test
	void vcmpnge_uqps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnge_uqps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 25));
	}

	@Test
	void vcmpnge_uqps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpnge_uqps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 25), Register.K1));
	}

	@Test
	void vcmpnge_uqps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpnge_uqps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 25));
	}

	@Test
	void vcmpnge_uqps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpnge_uqps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 25), Register.K1));
	}

	@Test
	void vcmpnge_uqps_kr_xmm_m() {
		testAssembler(c -> c.vcmpnge_uqps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25), Register.K1));
	}

	@Test
	void vcmpnge_uqps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnge_uqps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25));
	}

	@Test
	void vcmpnge_uqps_kr_ymm_m() {
		testAssembler(c -> c.vcmpnge_uqps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25), Register.K1));
	}

	@Test
	void vcmpnge_uqps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpnge_uqps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25));
	}

	@Test
	void vcmpnge_uqps_kr_zmm_m() {
		testAssembler(c -> c.vcmpnge_uqps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25), Register.K1));
	}

	@Test
	void vcmpnge_uqsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnge_uqsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 25), Register.K1));
	}

	@Test
	void vcmpnge_uqsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnge_uqsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 25));
	}

	@Test
	void vcmpnge_uqsd_kr_xmm_m() {
		testAssembler(c -> c.vcmpnge_uqsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25), Register.K1));
	}

	@Test
	void vcmpnge_uqsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnge_uqsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25));
	}

	@Test
	void vcmpnge_uqsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnge_uqsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 25), Register.K1));
	}

	@Test
	void vcmpnge_uqsh_kr_xmm_m() {
		testAssembler(c -> c.vcmpnge_uqsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25), Register.K1));
	}

	@Test
	void vcmpnge_uqss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnge_uqss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 25), Register.K1));
	}

	@Test
	void vcmpnge_uqss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnge_uqss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 25));
	}

	@Test
	void vcmpnge_uqss_kr_xmm_m() {
		testAssembler(c -> c.vcmpnge_uqss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25), Register.K1));
	}

	@Test
	void vcmpnge_uqss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnge_uqss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 25));
	}

	@Test
	void vcmpngepd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngepd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 9), Register.K1));
	}

	@Test
	void vcmpngepd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpngepd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 9));
	}

	@Test
	void vcmpngepd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpngepd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 9), Register.K1));
	}

	@Test
	void vcmpngepd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpngepd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 9));
	}

	@Test
	void vcmpngepd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpngepd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 9), Register.K1));
	}

	@Test
	void vcmpngepd_kr_xmm_m() {
		testAssembler(c -> c.vcmpngepd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9), Register.K1));
	}

	@Test
	void vcmpngepd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpngepd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9));
	}

	@Test
	void vcmpngepd_kr_ymm_m() {
		testAssembler(c -> c.vcmpngepd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9), Register.K1));
	}

	@Test
	void vcmpngepd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpngepd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9));
	}

	@Test
	void vcmpngepd_kr_zmm_m() {
		testAssembler(c -> c.vcmpngepd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9), Register.K1));
	}

	@Test
	void vcmpngeph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngeph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 9), Register.K1));
	}

	@Test
	void vcmpngeph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpngeph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 9), Register.K1));
	}

	@Test
	void vcmpngeph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpngeph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 9), Register.K1));
	}

	@Test
	void vcmpngeph_kr_xmm_m() {
		testAssembler(c -> c.vcmpngeph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9), Register.K1));
	}

	@Test
	void vcmpngeph_kr_ymm_m() {
		testAssembler(c -> c.vcmpngeph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9), Register.K1));
	}

	@Test
	void vcmpngeph_kr_zmm_m() {
		testAssembler(c -> c.vcmpngeph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9), Register.K1));
	}

	@Test
	void vcmpngeps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngeps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 9), Register.K1));
	}

	@Test
	void vcmpngeps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpngeps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 9));
	}

	@Test
	void vcmpngeps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpngeps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 9), Register.K1));
	}

	@Test
	void vcmpngeps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpngeps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 9));
	}

	@Test
	void vcmpngeps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpngeps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 9), Register.K1));
	}

	@Test
	void vcmpngeps_kr_xmm_m() {
		testAssembler(c -> c.vcmpngeps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9), Register.K1));
	}

	@Test
	void vcmpngeps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpngeps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9));
	}

	@Test
	void vcmpngeps_kr_ymm_m() {
		testAssembler(c -> c.vcmpngeps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9), Register.K1));
	}

	@Test
	void vcmpngeps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpngeps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9));
	}

	@Test
	void vcmpngeps_kr_zmm_m() {
		testAssembler(c -> c.vcmpngeps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9), Register.K1));
	}

	@Test
	void vcmpngesd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngesd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 9), Register.K1));
	}

	@Test
	void vcmpngesd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpngesd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 9));
	}

	@Test
	void vcmpngesd_kr_xmm_m() {
		testAssembler(c -> c.vcmpngesd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9), Register.K1));
	}

	@Test
	void vcmpngesd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpngesd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9));
	}

	@Test
	void vcmpngesh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngesh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 9), Register.K1));
	}

	@Test
	void vcmpngesh_kr_xmm_m() {
		testAssembler(c -> c.vcmpngesh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9), Register.K1));
	}

	@Test
	void vcmpngess_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngess(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 9), Register.K1));
	}

	@Test
	void vcmpngess_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpngess(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 9));
	}

	@Test
	void vcmpngess_kr_xmm_m() {
		testAssembler(c -> c.vcmpngess(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9), Register.K1));
	}

	@Test
	void vcmpngess_xmm_xmm_m() {
		testAssembler(c -> c.vcmpngess(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 9));
	}

	@Test
	void vcmpngt_uqpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngt_uqpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 26), Register.K1));
	}

	@Test
	void vcmpngt_uqpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpngt_uqpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 26));
	}

	@Test
	void vcmpngt_uqpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpngt_uqpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 26), Register.K1));
	}

	@Test
	void vcmpngt_uqpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpngt_uqpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 26));
	}

	@Test
	void vcmpngt_uqpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpngt_uqpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 26), Register.K1));
	}

	@Test
	void vcmpngt_uqpd_kr_xmm_m() {
		testAssembler(c -> c.vcmpngt_uqpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26), Register.K1));
	}

	@Test
	void vcmpngt_uqpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpngt_uqpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26));
	}

	@Test
	void vcmpngt_uqpd_kr_ymm_m() {
		testAssembler(c -> c.vcmpngt_uqpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26), Register.K1));
	}

	@Test
	void vcmpngt_uqpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpngt_uqpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26));
	}

	@Test
	void vcmpngt_uqpd_kr_zmm_m() {
		testAssembler(c -> c.vcmpngt_uqpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26), Register.K1));
	}

	@Test
	void vcmpngt_uqph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngt_uqph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 26), Register.K1));
	}

	@Test
	void vcmpngt_uqph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpngt_uqph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 26), Register.K1));
	}

	@Test
	void vcmpngt_uqph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpngt_uqph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 26), Register.K1));
	}

	@Test
	void vcmpngt_uqph_kr_xmm_m() {
		testAssembler(c -> c.vcmpngt_uqph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26), Register.K1));
	}

	@Test
	void vcmpngt_uqph_kr_ymm_m() {
		testAssembler(c -> c.vcmpngt_uqph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26), Register.K1));
	}

	@Test
	void vcmpngt_uqph_kr_zmm_m() {
		testAssembler(c -> c.vcmpngt_uqph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26), Register.K1));
	}

	@Test
	void vcmpngt_uqps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngt_uqps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 26), Register.K1));
	}

	@Test
	void vcmpngt_uqps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpngt_uqps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 26));
	}

	@Test
	void vcmpngt_uqps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpngt_uqps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 26), Register.K1));
	}

	@Test
	void vcmpngt_uqps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpngt_uqps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 26));
	}

	@Test
	void vcmpngt_uqps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpngt_uqps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 26), Register.K1));
	}

	@Test
	void vcmpngt_uqps_kr_xmm_m() {
		testAssembler(c -> c.vcmpngt_uqps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26), Register.K1));
	}

	@Test
	void vcmpngt_uqps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpngt_uqps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26));
	}

	@Test
	void vcmpngt_uqps_kr_ymm_m() {
		testAssembler(c -> c.vcmpngt_uqps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26), Register.K1));
	}

	@Test
	void vcmpngt_uqps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpngt_uqps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26));
	}

	@Test
	void vcmpngt_uqps_kr_zmm_m() {
		testAssembler(c -> c.vcmpngt_uqps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26), Register.K1));
	}

	@Test
	void vcmpngt_uqsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngt_uqsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 26), Register.K1));
	}

	@Test
	void vcmpngt_uqsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpngt_uqsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 26));
	}

	@Test
	void vcmpngt_uqsd_kr_xmm_m() {
		testAssembler(c -> c.vcmpngt_uqsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26), Register.K1));
	}

	@Test
	void vcmpngt_uqsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpngt_uqsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26));
	}

	@Test
	void vcmpngt_uqsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngt_uqsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 26), Register.K1));
	}

	@Test
	void vcmpngt_uqsh_kr_xmm_m() {
		testAssembler(c -> c.vcmpngt_uqsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26), Register.K1));
	}

	@Test
	void vcmpngt_uqss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngt_uqss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 26), Register.K1));
	}

	@Test
	void vcmpngt_uqss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpngt_uqss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 26));
	}

	@Test
	void vcmpngt_uqss_kr_xmm_m() {
		testAssembler(c -> c.vcmpngt_uqss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26), Register.K1));
	}

	@Test
	void vcmpngt_uqss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpngt_uqss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 26));
	}

	@Test
	void vcmpngtpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngtpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 10), Register.K1));
	}

	@Test
	void vcmpngtpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpngtpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 10));
	}

	@Test
	void vcmpngtpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpngtpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 10), Register.K1));
	}

	@Test
	void vcmpngtpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpngtpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 10));
	}

	@Test
	void vcmpngtpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpngtpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 10), Register.K1));
	}

	@Test
	void vcmpngtpd_kr_xmm_m() {
		testAssembler(c -> c.vcmpngtpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10), Register.K1));
	}

	@Test
	void vcmpngtpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpngtpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10));
	}

	@Test
	void vcmpngtpd_kr_ymm_m() {
		testAssembler(c -> c.vcmpngtpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10), Register.K1));
	}

	@Test
	void vcmpngtpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpngtpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10));
	}

	@Test
	void vcmpngtpd_kr_zmm_m() {
		testAssembler(c -> c.vcmpngtpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10), Register.K1));
	}

	@Test
	void vcmpngtph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngtph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 10), Register.K1));
	}

	@Test
	void vcmpngtph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpngtph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 10), Register.K1));
	}

	@Test
	void vcmpngtph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpngtph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 10), Register.K1));
	}

	@Test
	void vcmpngtph_kr_xmm_m() {
		testAssembler(c -> c.vcmpngtph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10), Register.K1));
	}

	@Test
	void vcmpngtph_kr_ymm_m() {
		testAssembler(c -> c.vcmpngtph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10), Register.K1));
	}

	@Test
	void vcmpngtph_kr_zmm_m() {
		testAssembler(c -> c.vcmpngtph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10), Register.K1));
	}

	@Test
	void vcmpngtps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngtps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 10), Register.K1));
	}

	@Test
	void vcmpngtps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpngtps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 10));
	}

	@Test
	void vcmpngtps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpngtps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 10), Register.K1));
	}

	@Test
	void vcmpngtps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpngtps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 10));
	}

	@Test
	void vcmpngtps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpngtps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 10), Register.K1));
	}

	@Test
	void vcmpngtps_kr_xmm_m() {
		testAssembler(c -> c.vcmpngtps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10), Register.K1));
	}

	@Test
	void vcmpngtps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpngtps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10));
	}

	@Test
	void vcmpngtps_kr_ymm_m() {
		testAssembler(c -> c.vcmpngtps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10), Register.K1));
	}

	@Test
	void vcmpngtps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpngtps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10));
	}

	@Test
	void vcmpngtps_kr_zmm_m() {
		testAssembler(c -> c.vcmpngtps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10), Register.K1));
	}

	@Test
	void vcmpngtsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngtsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 10), Register.K1));
	}

	@Test
	void vcmpngtsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpngtsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 10));
	}

	@Test
	void vcmpngtsd_kr_xmm_m() {
		testAssembler(c -> c.vcmpngtsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10), Register.K1));
	}

	@Test
	void vcmpngtsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpngtsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10));
	}

	@Test
	void vcmpngtsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngtsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 10), Register.K1));
	}

	@Test
	void vcmpngtsh_kr_xmm_m() {
		testAssembler(c -> c.vcmpngtsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10), Register.K1));
	}

	@Test
	void vcmpngtss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpngtss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 10), Register.K1));
	}

	@Test
	void vcmpngtss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpngtss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 10));
	}

	@Test
	void vcmpngtss_kr_xmm_m() {
		testAssembler(c -> c.vcmpngtss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10), Register.K1));
	}

	@Test
	void vcmpngtss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpngtss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 10));
	}

	@Test
	void vcmpnle_uqpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnle_uqpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 22), Register.K1));
	}

	@Test
	void vcmpnle_uqpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnle_uqpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 22));
	}

	@Test
	void vcmpnle_uqpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpnle_uqpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 22), Register.K1));
	}

	@Test
	void vcmpnle_uqpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpnle_uqpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 22));
	}

	@Test
	void vcmpnle_uqpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpnle_uqpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 22), Register.K1));
	}

	@Test
	void vcmpnle_uqpd_kr_xmm_m() {
		testAssembler(c -> c.vcmpnle_uqpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22), Register.K1));
	}

	@Test
	void vcmpnle_uqpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnle_uqpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22));
	}

	@Test
	void vcmpnle_uqpd_kr_ymm_m() {
		testAssembler(c -> c.vcmpnle_uqpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22), Register.K1));
	}

	@Test
	void vcmpnle_uqpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpnle_uqpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22));
	}

	@Test
	void vcmpnle_uqpd_kr_zmm_m() {
		testAssembler(c -> c.vcmpnle_uqpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22), Register.K1));
	}

	@Test
	void vcmpnle_uqph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnle_uqph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 22), Register.K1));
	}

	@Test
	void vcmpnle_uqph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpnle_uqph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 22), Register.K1));
	}

	@Test
	void vcmpnle_uqph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpnle_uqph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 22), Register.K1));
	}

	@Test
	void vcmpnle_uqph_kr_xmm_m() {
		testAssembler(c -> c.vcmpnle_uqph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22), Register.K1));
	}

	@Test
	void vcmpnle_uqph_kr_ymm_m() {
		testAssembler(c -> c.vcmpnle_uqph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22), Register.K1));
	}

	@Test
	void vcmpnle_uqph_kr_zmm_m() {
		testAssembler(c -> c.vcmpnle_uqph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22), Register.K1));
	}

	@Test
	void vcmpnle_uqps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnle_uqps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 22), Register.K1));
	}

	@Test
	void vcmpnle_uqps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnle_uqps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 22));
	}

	@Test
	void vcmpnle_uqps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpnle_uqps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 22), Register.K1));
	}

	@Test
	void vcmpnle_uqps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpnle_uqps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 22));
	}

	@Test
	void vcmpnle_uqps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpnle_uqps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 22), Register.K1));
	}

	@Test
	void vcmpnle_uqps_kr_xmm_m() {
		testAssembler(c -> c.vcmpnle_uqps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22), Register.K1));
	}

	@Test
	void vcmpnle_uqps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnle_uqps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22));
	}

	@Test
	void vcmpnle_uqps_kr_ymm_m() {
		testAssembler(c -> c.vcmpnle_uqps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22), Register.K1));
	}

	@Test
	void vcmpnle_uqps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpnle_uqps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22));
	}

	@Test
	void vcmpnle_uqps_kr_zmm_m() {
		testAssembler(c -> c.vcmpnle_uqps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22), Register.K1));
	}

	@Test
	void vcmpnle_uqsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnle_uqsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 22), Register.K1));
	}

	@Test
	void vcmpnle_uqsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnle_uqsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 22));
	}

	@Test
	void vcmpnle_uqsd_kr_xmm_m() {
		testAssembler(c -> c.vcmpnle_uqsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22), Register.K1));
	}

	@Test
	void vcmpnle_uqsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnle_uqsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22));
	}

	@Test
	void vcmpnle_uqsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnle_uqsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 22), Register.K1));
	}

	@Test
	void vcmpnle_uqsh_kr_xmm_m() {
		testAssembler(c -> c.vcmpnle_uqsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22), Register.K1));
	}

	@Test
	void vcmpnle_uqss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnle_uqss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 22), Register.K1));
	}

	@Test
	void vcmpnle_uqss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnle_uqss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 22));
	}

	@Test
	void vcmpnle_uqss_kr_xmm_m() {
		testAssembler(c -> c.vcmpnle_uqss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22), Register.K1));
	}

	@Test
	void vcmpnle_uqss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnle_uqss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 22));
	}

	@Test
	void vcmpnlepd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnlepd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 6), Register.K1));
	}

	@Test
	void vcmpnlepd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnlepd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 6));
	}

	@Test
	void vcmpnlepd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpnlepd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 6), Register.K1));
	}

	@Test
	void vcmpnlepd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpnlepd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 6));
	}

	@Test
	void vcmpnlepd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpnlepd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 6), Register.K1));
	}

	@Test
	void vcmpnlepd_kr_xmm_m() {
		testAssembler(c -> c.vcmpnlepd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vcmpnlepd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnlepd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void vcmpnlepd_kr_ymm_m() {
		testAssembler(c -> c.vcmpnlepd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vcmpnlepd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpnlepd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void vcmpnlepd_kr_zmm_m() {
		testAssembler(c -> c.vcmpnlepd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vcmpnleph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnleph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 6), Register.K1));
	}

	@Test
	void vcmpnleph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpnleph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 6), Register.K1));
	}

	@Test
	void vcmpnleph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpnleph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 6), Register.K1));
	}

	@Test
	void vcmpnleph_kr_xmm_m() {
		testAssembler(c -> c.vcmpnleph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vcmpnleph_kr_ymm_m() {
		testAssembler(c -> c.vcmpnleph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vcmpnleph_kr_zmm_m() {
		testAssembler(c -> c.vcmpnleph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vcmpnleps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnleps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 6), Register.K1));
	}

	@Test
	void vcmpnleps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnleps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 6));
	}

	@Test
	void vcmpnleps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpnleps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 6), Register.K1));
	}

	@Test
	void vcmpnleps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpnleps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 6));
	}

	@Test
	void vcmpnleps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpnleps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 6), Register.K1));
	}

	@Test
	void vcmpnleps_kr_xmm_m() {
		testAssembler(c -> c.vcmpnleps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vcmpnleps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnleps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void vcmpnleps_kr_ymm_m() {
		testAssembler(c -> c.vcmpnleps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vcmpnleps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpnleps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void vcmpnleps_kr_zmm_m() {
		testAssembler(c -> c.vcmpnleps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vcmpnlesd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnlesd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 6), Register.K1));
	}

	@Test
	void vcmpnlesd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnlesd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 6));
	}

	@Test
	void vcmpnlesd_kr_xmm_m() {
		testAssembler(c -> c.vcmpnlesd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vcmpnlesd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnlesd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void vcmpnlesh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnlesh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 6), Register.K1));
	}

	@Test
	void vcmpnlesh_kr_xmm_m() {
		testAssembler(c -> c.vcmpnlesh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vcmpnless_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnless(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 6), Register.K1));
	}

	@Test
	void vcmpnless_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnless(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 6));
	}

	@Test
	void vcmpnless_kr_xmm_m() {
		testAssembler(c -> c.vcmpnless(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vcmpnless_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnless(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void vcmpnlt_uqpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnlt_uqpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnlt_uqpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 21));
	}

	@Test
	void vcmpnlt_uqpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpnlt_uqpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpnlt_uqpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 21));
	}

	@Test
	void vcmpnlt_uqpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpnlt_uqpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqpd_kr_xmm_m() {
		testAssembler(c -> c.vcmpnlt_uqpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnlt_uqpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21));
	}

	@Test
	void vcmpnlt_uqpd_kr_ymm_m() {
		testAssembler(c -> c.vcmpnlt_uqpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpnlt_uqpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21));
	}

	@Test
	void vcmpnlt_uqpd_kr_zmm_m() {
		testAssembler(c -> c.vcmpnlt_uqpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnlt_uqph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpnlt_uqph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpnlt_uqph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqph_kr_xmm_m() {
		testAssembler(c -> c.vcmpnlt_uqph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqph_kr_ymm_m() {
		testAssembler(c -> c.vcmpnlt_uqph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqph_kr_zmm_m() {
		testAssembler(c -> c.vcmpnlt_uqph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnlt_uqps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnlt_uqps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 21));
	}

	@Test
	void vcmpnlt_uqps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpnlt_uqps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpnlt_uqps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 21));
	}

	@Test
	void vcmpnlt_uqps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpnlt_uqps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqps_kr_xmm_m() {
		testAssembler(c -> c.vcmpnlt_uqps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnlt_uqps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21));
	}

	@Test
	void vcmpnlt_uqps_kr_ymm_m() {
		testAssembler(c -> c.vcmpnlt_uqps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpnlt_uqps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21));
	}

	@Test
	void vcmpnlt_uqps_kr_zmm_m() {
		testAssembler(c -> c.vcmpnlt_uqps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnlt_uqsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnlt_uqsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 21));
	}

	@Test
	void vcmpnlt_uqsd_kr_xmm_m() {
		testAssembler(c -> c.vcmpnlt_uqsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnlt_uqsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21));
	}

	@Test
	void vcmpnlt_uqsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnlt_uqsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqsh_kr_xmm_m() {
		testAssembler(c -> c.vcmpnlt_uqsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnlt_uqss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnlt_uqss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 21));
	}

	@Test
	void vcmpnlt_uqss_kr_xmm_m() {
		testAssembler(c -> c.vcmpnlt_uqss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21), Register.K1));
	}

	@Test
	void vcmpnlt_uqss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnlt_uqss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 21));
	}

	@Test
	void vcmpnltpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnltpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 5), Register.K1));
	}

	@Test
	void vcmpnltpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnltpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 5));
	}

	@Test
	void vcmpnltpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpnltpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 5), Register.K1));
	}

	@Test
	void vcmpnltpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpnltpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 5));
	}

	@Test
	void vcmpnltpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpnltpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 5), Register.K1));
	}

	@Test
	void vcmpnltpd_kr_xmm_m() {
		testAssembler(c -> c.vcmpnltpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vcmpnltpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnltpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void vcmpnltpd_kr_ymm_m() {
		testAssembler(c -> c.vcmpnltpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vcmpnltpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpnltpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void vcmpnltpd_kr_zmm_m() {
		testAssembler(c -> c.vcmpnltpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vcmpnltph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnltph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 5), Register.K1));
	}

	@Test
	void vcmpnltph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpnltph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 5), Register.K1));
	}

	@Test
	void vcmpnltph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpnltph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 5), Register.K1));
	}

	@Test
	void vcmpnltph_kr_xmm_m() {
		testAssembler(c -> c.vcmpnltph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vcmpnltph_kr_ymm_m() {
		testAssembler(c -> c.vcmpnltph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vcmpnltph_kr_zmm_m() {
		testAssembler(c -> c.vcmpnltph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vcmpnltps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnltps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 5), Register.K1));
	}

	@Test
	void vcmpnltps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnltps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 5));
	}

	@Test
	void vcmpnltps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpnltps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 5), Register.K1));
	}

	@Test
	void vcmpnltps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpnltps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 5));
	}

	@Test
	void vcmpnltps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpnltps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 5), Register.K1));
	}

	@Test
	void vcmpnltps_kr_xmm_m() {
		testAssembler(c -> c.vcmpnltps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vcmpnltps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnltps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void vcmpnltps_kr_ymm_m() {
		testAssembler(c -> c.vcmpnltps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vcmpnltps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpnltps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void vcmpnltps_kr_zmm_m() {
		testAssembler(c -> c.vcmpnltps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vcmpnltsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnltsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 5), Register.K1));
	}

	@Test
	void vcmpnltsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnltsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 5));
	}

	@Test
	void vcmpnltsd_kr_xmm_m() {
		testAssembler(c -> c.vcmpnltsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vcmpnltsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnltsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void vcmpnltsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnltsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 5), Register.K1));
	}

	@Test
	void vcmpnltsh_kr_xmm_m() {
		testAssembler(c -> c.vcmpnltsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vcmpnltss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpnltss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 5), Register.K1));
	}

	@Test
	void vcmpnltss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpnltss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 5));
	}

	@Test
	void vcmpnltss_kr_xmm_m() {
		testAssembler(c -> c.vcmpnltss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vcmpnltss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpnltss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void vcmpord_spd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpord_spd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 23), Register.K1));
	}

	@Test
	void vcmpord_spd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpord_spd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 23));
	}

	@Test
	void vcmpord_spd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpord_spd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 23), Register.K1));
	}

	@Test
	void vcmpord_spd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpord_spd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 23));
	}

	@Test
	void vcmpord_spd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpord_spd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 23), Register.K1));
	}

	@Test
	void vcmpord_spd_kr_xmm_m() {
		testAssembler(c -> c.vcmpord_spd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23), Register.K1));
	}

	@Test
	void vcmpord_spd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpord_spd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23));
	}

	@Test
	void vcmpord_spd_kr_ymm_m() {
		testAssembler(c -> c.vcmpord_spd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23), Register.K1));
	}

	@Test
	void vcmpord_spd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpord_spd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23));
	}

	@Test
	void vcmpord_spd_kr_zmm_m() {
		testAssembler(c -> c.vcmpord_spd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23), Register.K1));
	}

	@Test
	void vcmpord_sph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpord_sph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 23), Register.K1));
	}

	@Test
	void vcmpord_sph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpord_sph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 23), Register.K1));
	}

	@Test
	void vcmpord_sph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpord_sph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 23), Register.K1));
	}

	@Test
	void vcmpord_sph_kr_xmm_m() {
		testAssembler(c -> c.vcmpord_sph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23), Register.K1));
	}

	@Test
	void vcmpord_sph_kr_ymm_m() {
		testAssembler(c -> c.vcmpord_sph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23), Register.K1));
	}

	@Test
	void vcmpord_sph_kr_zmm_m() {
		testAssembler(c -> c.vcmpord_sph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23), Register.K1));
	}

	@Test
	void vcmpord_sps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpord_sps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 23), Register.K1));
	}

	@Test
	void vcmpord_sps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpord_sps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 23));
	}

	@Test
	void vcmpord_sps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpord_sps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 23), Register.K1));
	}

	@Test
	void vcmpord_sps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpord_sps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 23));
	}

	@Test
	void vcmpord_sps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpord_sps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 23), Register.K1));
	}

	@Test
	void vcmpord_sps_kr_xmm_m() {
		testAssembler(c -> c.vcmpord_sps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23), Register.K1));
	}

	@Test
	void vcmpord_sps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpord_sps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23));
	}

	@Test
	void vcmpord_sps_kr_ymm_m() {
		testAssembler(c -> c.vcmpord_sps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23), Register.K1));
	}

	@Test
	void vcmpord_sps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpord_sps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23));
	}

	@Test
	void vcmpord_sps_kr_zmm_m() {
		testAssembler(c -> c.vcmpord_sps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23), Register.K1));
	}

	@Test
	void vcmpord_ssd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpord_ssd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 23), Register.K1));
	}

	@Test
	void vcmpord_ssd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpord_ssd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 23));
	}

	@Test
	void vcmpord_ssd_kr_xmm_m() {
		testAssembler(c -> c.vcmpord_ssd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23), Register.K1));
	}

	@Test
	void vcmpord_ssd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpord_ssd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23));
	}

	@Test
	void vcmpord_ssh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpord_ssh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 23), Register.K1));
	}

	@Test
	void vcmpord_ssh_kr_xmm_m() {
		testAssembler(c -> c.vcmpord_ssh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23), Register.K1));
	}

	@Test
	void vcmpord_sss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpord_sss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 23), Register.K1));
	}

	@Test
	void vcmpord_sss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpord_sss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 23));
	}

	@Test
	void vcmpord_sss_kr_xmm_m() {
		testAssembler(c -> c.vcmpord_sss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23), Register.K1));
	}

	@Test
	void vcmpord_sss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpord_sss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 23));
	}

	@Test
	void vcmpordpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpordpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 7), Register.K1));
	}

	@Test
	void vcmpordpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpordpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 7));
	}

	@Test
	void vcmpordpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpordpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 7), Register.K1));
	}

	@Test
	void vcmpordpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpordpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 7));
	}

	@Test
	void vcmpordpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpordpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 7), Register.K1));
	}

	@Test
	void vcmpordpd_kr_xmm_m() {
		testAssembler(c -> c.vcmpordpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vcmpordpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpordpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

	@Test
	void vcmpordpd_kr_ymm_m() {
		testAssembler(c -> c.vcmpordpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vcmpordpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpordpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

	@Test
	void vcmpordpd_kr_zmm_m() {
		testAssembler(c -> c.vcmpordpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vcmpordph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpordph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 7), Register.K1));
	}

	@Test
	void vcmpordph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpordph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 7), Register.K1));
	}

	@Test
	void vcmpordph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpordph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 7), Register.K1));
	}

	@Test
	void vcmpordph_kr_xmm_m() {
		testAssembler(c -> c.vcmpordph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vcmpordph_kr_ymm_m() {
		testAssembler(c -> c.vcmpordph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vcmpordph_kr_zmm_m() {
		testAssembler(c -> c.vcmpordph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vcmpordps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpordps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 7), Register.K1));
	}

	@Test
	void vcmpordps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpordps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 7));
	}

	@Test
	void vcmpordps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpordps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 7), Register.K1));
	}

	@Test
	void vcmpordps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpordps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 7));
	}

	@Test
	void vcmpordps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpordps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 7), Register.K1));
	}

	@Test
	void vcmpordps_kr_xmm_m() {
		testAssembler(c -> c.vcmpordps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vcmpordps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpordps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

	@Test
	void vcmpordps_kr_ymm_m() {
		testAssembler(c -> c.vcmpordps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vcmpordps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpordps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

	@Test
	void vcmpordps_kr_zmm_m() {
		testAssembler(c -> c.vcmpordps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vcmpordsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpordsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 7), Register.K1));
	}

	@Test
	void vcmpordsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpordsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 7));
	}

	@Test
	void vcmpordsd_kr_xmm_m() {
		testAssembler(c -> c.vcmpordsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vcmpordsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpordsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

	@Test
	void vcmpordsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpordsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 7), Register.K1));
	}

	@Test
	void vcmpordsh_kr_xmm_m() {
		testAssembler(c -> c.vcmpordsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vcmpordss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpordss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 7), Register.K1));
	}

	@Test
	void vcmpordss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpordss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 7));
	}

	@Test
	void vcmpordss_kr_xmm_m() {
		testAssembler(c -> c.vcmpordss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vcmpordss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpordss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

	@Test
	void vcmptrue_uspd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmptrue_uspd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 31), Register.K1));
	}

	@Test
	void vcmptrue_uspd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmptrue_uspd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 31));
	}

	@Test
	void vcmptrue_uspd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmptrue_uspd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 31), Register.K1));
	}

	@Test
	void vcmptrue_uspd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmptrue_uspd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 31));
	}

	@Test
	void vcmptrue_uspd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmptrue_uspd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 31), Register.K1));
	}

	@Test
	void vcmptrue_uspd_kr_xmm_m() {
		testAssembler(c -> c.vcmptrue_uspd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31), Register.K1));
	}

	@Test
	void vcmptrue_uspd_xmm_xmm_m() {
		testAssembler(c -> c.vcmptrue_uspd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31));
	}

	@Test
	void vcmptrue_uspd_kr_ymm_m() {
		testAssembler(c -> c.vcmptrue_uspd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31), Register.K1));
	}

	@Test
	void vcmptrue_uspd_ymm_ymm_m() {
		testAssembler(c -> c.vcmptrue_uspd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31));
	}

	@Test
	void vcmptrue_uspd_kr_zmm_m() {
		testAssembler(c -> c.vcmptrue_uspd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31), Register.K1));
	}

	@Test
	void vcmptrue_usph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmptrue_usph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 31), Register.K1));
	}

	@Test
	void vcmptrue_usph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmptrue_usph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 31), Register.K1));
	}

	@Test
	void vcmptrue_usph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmptrue_usph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 31), Register.K1));
	}

	@Test
	void vcmptrue_usph_kr_xmm_m() {
		testAssembler(c -> c.vcmptrue_usph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31), Register.K1));
	}

	@Test
	void vcmptrue_usph_kr_ymm_m() {
		testAssembler(c -> c.vcmptrue_usph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31), Register.K1));
	}

	@Test
	void vcmptrue_usph_kr_zmm_m() {
		testAssembler(c -> c.vcmptrue_usph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31), Register.K1));
	}

	@Test
	void vcmptrue_usps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmptrue_usps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 31), Register.K1));
	}

	@Test
	void vcmptrue_usps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmptrue_usps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 31));
	}

	@Test
	void vcmptrue_usps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmptrue_usps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 31), Register.K1));
	}

	@Test
	void vcmptrue_usps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmptrue_usps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 31));
	}

	@Test
	void vcmptrue_usps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmptrue_usps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 31), Register.K1));
	}

	@Test
	void vcmptrue_usps_kr_xmm_m() {
		testAssembler(c -> c.vcmptrue_usps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31), Register.K1));
	}

	@Test
	void vcmptrue_usps_xmm_xmm_m() {
		testAssembler(c -> c.vcmptrue_usps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31));
	}

	@Test
	void vcmptrue_usps_kr_ymm_m() {
		testAssembler(c -> c.vcmptrue_usps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31), Register.K1));
	}

	@Test
	void vcmptrue_usps_ymm_ymm_m() {
		testAssembler(c -> c.vcmptrue_usps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31));
	}

	@Test
	void vcmptrue_usps_kr_zmm_m() {
		testAssembler(c -> c.vcmptrue_usps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31), Register.K1));
	}

	@Test
	void vcmptrue_ussd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmptrue_ussd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 31), Register.K1));
	}

	@Test
	void vcmptrue_ussd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmptrue_ussd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 31));
	}

	@Test
	void vcmptrue_ussd_kr_xmm_m() {
		testAssembler(c -> c.vcmptrue_ussd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31), Register.K1));
	}

	@Test
	void vcmptrue_ussd_xmm_xmm_m() {
		testAssembler(c -> c.vcmptrue_ussd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31));
	}

	@Test
	void vcmptrue_ussh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmptrue_ussh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 31), Register.K1));
	}

	@Test
	void vcmptrue_ussh_kr_xmm_m() {
		testAssembler(c -> c.vcmptrue_ussh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31), Register.K1));
	}

	@Test
	void vcmptrue_usss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmptrue_usss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 31), Register.K1));
	}

	@Test
	void vcmptrue_usss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmptrue_usss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 31));
	}

	@Test
	void vcmptrue_usss_kr_xmm_m() {
		testAssembler(c -> c.vcmptrue_usss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31), Register.K1));
	}

	@Test
	void vcmptrue_usss_xmm_xmm_m() {
		testAssembler(c -> c.vcmptrue_usss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 31));
	}

	@Test
	void vcmptruepd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmptruepd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 15), Register.K1));
	}

	@Test
	void vcmptruepd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmptruepd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 15));
	}

	@Test
	void vcmptruepd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmptruepd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 15), Register.K1));
	}

	@Test
	void vcmptruepd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmptruepd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 15));
	}

	@Test
	void vcmptruepd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmptruepd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 15), Register.K1));
	}

	@Test
	void vcmptruepd_kr_xmm_m() {
		testAssembler(c -> c.vcmptruepd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15), Register.K1));
	}

	@Test
	void vcmptruepd_xmm_xmm_m() {
		testAssembler(c -> c.vcmptruepd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15));
	}

	@Test
	void vcmptruepd_kr_ymm_m() {
		testAssembler(c -> c.vcmptruepd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15), Register.K1));
	}

	@Test
	void vcmptruepd_ymm_ymm_m() {
		testAssembler(c -> c.vcmptruepd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15));
	}

	@Test
	void vcmptruepd_kr_zmm_m() {
		testAssembler(c -> c.vcmptruepd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15), Register.K1));
	}

	@Test
	void vcmptrueph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmptrueph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 15), Register.K1));
	}

	@Test
	void vcmptrueph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmptrueph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 15), Register.K1));
	}

	@Test
	void vcmptrueph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmptrueph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 15), Register.K1));
	}

	@Test
	void vcmptrueph_kr_xmm_m() {
		testAssembler(c -> c.vcmptrueph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15), Register.K1));
	}

	@Test
	void vcmptrueph_kr_ymm_m() {
		testAssembler(c -> c.vcmptrueph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15), Register.K1));
	}

	@Test
	void vcmptrueph_kr_zmm_m() {
		testAssembler(c -> c.vcmptrueph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15), Register.K1));
	}

	@Test
	void vcmptrueps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmptrueps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 15), Register.K1));
	}

	@Test
	void vcmptrueps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmptrueps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 15));
	}

	@Test
	void vcmptrueps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmptrueps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 15), Register.K1));
	}

	@Test
	void vcmptrueps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmptrueps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 15));
	}

	@Test
	void vcmptrueps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmptrueps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 15), Register.K1));
	}

	@Test
	void vcmptrueps_kr_xmm_m() {
		testAssembler(c -> c.vcmptrueps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15), Register.K1));
	}

	@Test
	void vcmptrueps_xmm_xmm_m() {
		testAssembler(c -> c.vcmptrueps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15));
	}

	@Test
	void vcmptrueps_kr_ymm_m() {
		testAssembler(c -> c.vcmptrueps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15), Register.K1));
	}

	@Test
	void vcmptrueps_ymm_ymm_m() {
		testAssembler(c -> c.vcmptrueps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15));
	}

	@Test
	void vcmptrueps_kr_zmm_m() {
		testAssembler(c -> c.vcmptrueps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15), Register.K1));
	}

	@Test
	void vcmptruesd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmptruesd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 15), Register.K1));
	}

	@Test
	void vcmptruesd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmptruesd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 15));
	}

	@Test
	void vcmptruesd_kr_xmm_m() {
		testAssembler(c -> c.vcmptruesd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15), Register.K1));
	}

	@Test
	void vcmptruesd_xmm_xmm_m() {
		testAssembler(c -> c.vcmptruesd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15));
	}

	@Test
	void vcmptruesh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmptruesh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 15), Register.K1));
	}

	@Test
	void vcmptruesh_kr_xmm_m() {
		testAssembler(c -> c.vcmptruesh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15), Register.K1));
	}

	@Test
	void vcmptruess_kr_xmm_xmm() {
		testAssembler(c -> c.vcmptruess(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 15), Register.K1));
	}

	@Test
	void vcmptruess_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmptruess(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 15));
	}

	@Test
	void vcmptruess_kr_xmm_m() {
		testAssembler(c -> c.vcmptruess(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15), Register.K1));
	}

	@Test
	void vcmptruess_xmm_xmm_m() {
		testAssembler(c -> c.vcmptruess(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 15));
	}

	@Test
	void vcmpunord_spd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpunord_spd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 19), Register.K1));
	}

	@Test
	void vcmpunord_spd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpunord_spd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 19));
	}

	@Test
	void vcmpunord_spd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpunord_spd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 19), Register.K1));
	}

	@Test
	void vcmpunord_spd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpunord_spd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 19));
	}

	@Test
	void vcmpunord_spd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpunord_spd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 19), Register.K1));
	}

	@Test
	void vcmpunord_spd_kr_xmm_m() {
		testAssembler(c -> c.vcmpunord_spd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19), Register.K1));
	}

	@Test
	void vcmpunord_spd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpunord_spd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19));
	}

	@Test
	void vcmpunord_spd_kr_ymm_m() {
		testAssembler(c -> c.vcmpunord_spd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19), Register.K1));
	}

	@Test
	void vcmpunord_spd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpunord_spd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19));
	}

	@Test
	void vcmpunord_spd_kr_zmm_m() {
		testAssembler(c -> c.vcmpunord_spd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19), Register.K1));
	}

	@Test
	void vcmpunord_sph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpunord_sph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 19), Register.K1));
	}

	@Test
	void vcmpunord_sph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpunord_sph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 19), Register.K1));
	}

	@Test
	void vcmpunord_sph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpunord_sph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 19), Register.K1));
	}

	@Test
	void vcmpunord_sph_kr_xmm_m() {
		testAssembler(c -> c.vcmpunord_sph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19), Register.K1));
	}

	@Test
	void vcmpunord_sph_kr_ymm_m() {
		testAssembler(c -> c.vcmpunord_sph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19), Register.K1));
	}

	@Test
	void vcmpunord_sph_kr_zmm_m() {
		testAssembler(c -> c.vcmpunord_sph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19), Register.K1));
	}

	@Test
	void vcmpunord_sps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpunord_sps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 19), Register.K1));
	}

	@Test
	void vcmpunord_sps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpunord_sps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 19));
	}

	@Test
	void vcmpunord_sps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpunord_sps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 19), Register.K1));
	}

	@Test
	void vcmpunord_sps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpunord_sps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 19));
	}

	@Test
	void vcmpunord_sps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpunord_sps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 19), Register.K1));
	}

	@Test
	void vcmpunord_sps_kr_xmm_m() {
		testAssembler(c -> c.vcmpunord_sps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19), Register.K1));
	}

	@Test
	void vcmpunord_sps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpunord_sps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19));
	}

	@Test
	void vcmpunord_sps_kr_ymm_m() {
		testAssembler(c -> c.vcmpunord_sps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19), Register.K1));
	}

	@Test
	void vcmpunord_sps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpunord_sps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19));
	}

	@Test
	void vcmpunord_sps_kr_zmm_m() {
		testAssembler(c -> c.vcmpunord_sps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19), Register.K1));
	}

	@Test
	void vcmpunord_ssd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpunord_ssd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 19), Register.K1));
	}

	@Test
	void vcmpunord_ssd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpunord_ssd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 19));
	}

	@Test
	void vcmpunord_ssd_kr_xmm_m() {
		testAssembler(c -> c.vcmpunord_ssd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19), Register.K1));
	}

	@Test
	void vcmpunord_ssd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpunord_ssd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19));
	}

	@Test
	void vcmpunord_ssh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpunord_ssh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 19), Register.K1));
	}

	@Test
	void vcmpunord_ssh_kr_xmm_m() {
		testAssembler(c -> c.vcmpunord_ssh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19), Register.K1));
	}

	@Test
	void vcmpunord_sss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpunord_sss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 19), Register.K1));
	}

	@Test
	void vcmpunord_sss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpunord_sss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 19));
	}

	@Test
	void vcmpunord_sss_kr_xmm_m() {
		testAssembler(c -> c.vcmpunord_sss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19), Register.K1));
	}

	@Test
	void vcmpunord_sss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpunord_sss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 19));
	}

	@Test
	void vcmpunordpd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpunordpd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 3), Register.K1));
	}

	@Test
	void vcmpunordpd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpunordpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 3));
	}

	@Test
	void vcmpunordpd_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpunordpd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 3), Register.K1));
	}

	@Test
	void vcmpunordpd_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpunordpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 3));
	}

	@Test
	void vcmpunordpd_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpunordpd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 3), Register.K1));
	}

	@Test
	void vcmpunordpd_kr_xmm_m() {
		testAssembler(c -> c.vcmpunordpd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vcmpunordpd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpunordpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void vcmpunordpd_kr_ymm_m() {
		testAssembler(c -> c.vcmpunordpd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vcmpunordpd_ymm_ymm_m() {
		testAssembler(c -> c.vcmpunordpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void vcmpunordpd_kr_zmm_m() {
		testAssembler(c -> c.vcmpunordpd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vcmpunordph_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpunordph(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 3), Register.K1));
	}

	@Test
	void vcmpunordph_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpunordph(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 3), Register.K1));
	}

	@Test
	void vcmpunordph_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpunordph(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 3), Register.K1));
	}

	@Test
	void vcmpunordph_kr_xmm_m() {
		testAssembler(c -> c.vcmpunordph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vcmpunordph_kr_ymm_m() {
		testAssembler(c -> c.vcmpunordph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vcmpunordph_kr_zmm_m() {
		testAssembler(c -> c.vcmpunordph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vcmpunordps_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpunordps(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 3), Register.K1));
	}

	@Test
	void vcmpunordps_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpunordps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 3));
	}

	@Test
	void vcmpunordps_kr_ymm_ymm() {
		testAssembler(c -> c.vcmpunordps(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 3), Register.K1));
	}

	@Test
	void vcmpunordps_ymm_ymm_ymm() {
		testAssembler(c -> c.vcmpunordps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 3));
	}

	@Test
	void vcmpunordps_kr_zmm_zmm() {
		testAssembler(c -> c.vcmpunordps(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 3), Register.K1));
	}

	@Test
	void vcmpunordps_kr_xmm_m() {
		testAssembler(c -> c.vcmpunordps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vcmpunordps_xmm_xmm_m() {
		testAssembler(c -> c.vcmpunordps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void vcmpunordps_kr_ymm_m() {
		testAssembler(c -> c.vcmpunordps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vcmpunordps_ymm_ymm_m() {
		testAssembler(c -> c.vcmpunordps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void vcmpunordps_kr_zmm_m() {
		testAssembler(c -> c.vcmpunordps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vcmpunordsd_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpunordsd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 3), Register.K1));
	}

	@Test
	void vcmpunordsd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpunordsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 3));
	}

	@Test
	void vcmpunordsd_kr_xmm_m() {
		testAssembler(c -> c.vcmpunordsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vcmpunordsd_xmm_xmm_m() {
		testAssembler(c -> c.vcmpunordsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void vcmpunordsh_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpunordsh(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 3), Register.K1));
	}

	@Test
	void vcmpunordsh_kr_xmm_m() {
		testAssembler(c -> c.vcmpunordsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vcmpunordss_kr_xmm_xmm() {
		testAssembler(c -> c.vcmpunordss(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 3), Register.K1));
	}

	@Test
	void vcmpunordss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcmpunordss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 3));
	}

	@Test
	void vcmpunordss_kr_xmm_m() {
		testAssembler(c -> c.vcmpunordss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vcmpunordss_xmm_xmm_m() {
		testAssembler(c -> c.vcmpunordss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void verr_r16() {
		testAssembler(c -> c.verr(dx), Instruction.create(Code.VERR_RM16, ICRegisters.dx));
	}

	@Test
	void verr_r32() {
		testAssembler(c -> c.verr(edx), Instruction.create(Code.VERR_R32M16, ICRegisters.edx));
	}

	@Test
	void verr_m() {
		{ /* if (getBitness() >= 32) */
			testAssembler(c -> c.verr(dword_ptr(0x0L).base(ecx)), Instruction.create(Code.VERR_R32M16, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void verw_r16() {
		testAssembler(c -> c.verw(dx), Instruction.create(Code.VERW_RM16, ICRegisters.dx));
	}

	@Test
	void verw_r32() {
		testAssembler(c -> c.verw(edx), Instruction.create(Code.VERW_R32M16, ICRegisters.edx));
	}

	@Test
	void verw_m() {
		{ /* if (getBitness() >= 32) */
			testAssembler(c -> c.verw(dword_ptr(0x0L).base(ecx)), Instruction.create(Code.VERW_R32M16, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void vmcall() {
		testAssembler(c -> c.vmcall(), Instruction.create(Code.VMCALL));
	}

	@Test
	void vmclear_m() {
		testAssembler(c -> c.vmclear(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VMCLEAR_M64, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vmfunc() {
		testAssembler(c -> c.vmfunc(), Instruction.create(Code.VMFUNC));
	}

	@Test
	void vmgexit() {
		testAssembler(c -> c.vmgexit(), Instruction.create(Code.VMGEXIT));
	}

	@Test
	void vmlaunch() {
		testAssembler(c -> c.vmlaunch(), Instruction.create(Code.VMLAUNCH));
	}

	@Test
	void vmload() {
		{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { /* if (getBitness() >= 32) */
			testAssembler(c -> c.vmload(), Instruction.create(Code.VMLOADD));
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void vmmcall() {
		testAssembler(c -> c.vmmcall(), Instruction.create(Code.VMMCALL));
	}

	@Test
	void vmptrld_m() {
		testAssembler(c -> c.vmptrld(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VMPTRLD_M64, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vmptrst_m() {
		testAssembler(c -> c.vmptrst(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VMPTRST_M64, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vmread_r32_r32() {
		testAssembler(c -> c.vmread(edx, ebx), Instruction.create(Code.VMREAD_RM32_R32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void vmread_m_r32() {
		testAssembler(c -> c.vmread(dword_ptr(0x0L).base(ecx), ebx), Instruction.create(Code.VMREAD_RM32_R32, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void vmresume() {
		testAssembler(c -> c.vmresume(), Instruction.create(Code.VMRESUME));
	}

	@Test
	void vmrun() {
		{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { /* if (getBitness() >= 32) */
			testAssembler(c -> c.vmrun(), Instruction.create(Code.VMRUND));
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void vmsave() {
		{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { /* if (getBitness() >= 32) */
			testAssembler(c -> c.vmsave(), Instruction.create(Code.VMSAVED));
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void vmwrite_r32_r32() {
		testAssembler(c -> c.vmwrite(edx, ebx), Instruction.create(Code.VMWRITE_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void vmwrite_r32_m() {
		testAssembler(c -> c.vmwrite(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.VMWRITE_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vmxoff() {
		testAssembler(c -> c.vmxoff(), Instruction.create(Code.VMXOFF));
	}

	@Test
	void vmxon_m() {
		testAssembler(c -> c.vmxon(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VMXON_M64, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vpclmulhqhqdq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpclmulhqhqdq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPCLMULQDQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 17));
	}

	@Test
	void vpclmulhqhqdq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpclmulhqhqdq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPCLMULQDQ_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 17));
	}

	@Test
	void vpclmulhqhqdq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpclmulhqhqdq(zmm2, zmm3, zmm4), Instruction.create(Code.EVEX_VPCLMULQDQ_ZMM_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, 17));
	}

	@Test
	void vpclmulhqhqdq_xmm_xmm_m() {
		testAssembler(c -> c.vpclmulhqhqdq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCLMULQDQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17));
	}

	@Test
	void vpclmulhqhqdq_ymm_ymm_m() {
		testAssembler(c -> c.vpclmulhqhqdq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCLMULQDQ_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17));
	}

	@Test
	void vpclmulhqhqdq_zmm_zmm_m() {
		testAssembler(c -> c.vpclmulhqhqdq(zmm2, zmm3, zmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VPCLMULQDQ_ZMM_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 17));
	}

	@Test
	void vpclmulhqlqdq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpclmulhqlqdq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPCLMULQDQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 1));
	}

	@Test
	void vpclmulhqlqdq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpclmulhqlqdq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPCLMULQDQ_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 1));
	}

	@Test
	void vpclmulhqlqdq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpclmulhqlqdq(zmm2, zmm3, zmm4), Instruction.create(Code.EVEX_VPCLMULQDQ_ZMM_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, 1));
	}

	@Test
	void vpclmulhqlqdq_xmm_xmm_m() {
		testAssembler(c -> c.vpclmulhqlqdq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCLMULQDQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void vpclmulhqlqdq_ymm_ymm_m() {
		testAssembler(c -> c.vpclmulhqlqdq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCLMULQDQ_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void vpclmulhqlqdq_zmm_zmm_m() {
		testAssembler(c -> c.vpclmulhqlqdq(zmm2, zmm3, zmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VPCLMULQDQ_ZMM_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void vpclmullqhqdq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpclmullqhqdq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPCLMULQDQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 16));
	}

	@Test
	void vpclmullqhqdq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpclmullqhqdq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPCLMULQDQ_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 16));
	}

	@Test
	void vpclmullqhqdq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpclmullqhqdq(zmm2, zmm3, zmm4), Instruction.create(Code.EVEX_VPCLMULQDQ_ZMM_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, 16));
	}

	@Test
	void vpclmullqhqdq_xmm_xmm_m() {
		testAssembler(c -> c.vpclmullqhqdq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCLMULQDQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16));
	}

	@Test
	void vpclmullqhqdq_ymm_ymm_m() {
		testAssembler(c -> c.vpclmullqhqdq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCLMULQDQ_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16));
	}

	@Test
	void vpclmullqhqdq_zmm_zmm_m() {
		testAssembler(c -> c.vpclmullqhqdq(zmm2, zmm3, zmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VPCLMULQDQ_ZMM_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 16));
	}

	@Test
	void vpclmullqlqdq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpclmullqlqdq(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VPCLMULQDQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 0));
	}

	@Test
	void vpclmullqlqdq_ymm_ymm_ymm() {
		testAssembler(c -> c.vpclmullqlqdq(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VPCLMULQDQ_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, 0));
	}

	@Test
	void vpclmullqlqdq_zmm_zmm_zmm() {
		testAssembler(c -> c.vpclmullqlqdq(zmm2, zmm3, zmm4), Instruction.create(Code.EVEX_VPCLMULQDQ_ZMM_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, 0));
	}

	@Test
	void vpclmullqlqdq_xmm_xmm_m() {
		testAssembler(c -> c.vpclmullqlqdq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCLMULQDQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void vpclmullqlqdq_ymm_ymm_m() {
		testAssembler(c -> c.vpclmullqlqdq(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VPCLMULQDQ_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void vpclmullqlqdq_zmm_zmm_m() {
		testAssembler(c -> c.vpclmullqlqdq(zmm2, zmm3, zmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VPCLMULQDQ_ZMM_ZMM_ZMMM512_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void vpcmpequb_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpequb(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 0), Register.K1));
	}

	@Test
	void vpcmpequb_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpequb(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 0), Register.K1));
	}

	@Test
	void vpcmpequb_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpequb(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 0), Register.K1));
	}

	@Test
	void vpcmpequb_kr_xmm_m() {
		testAssembler(c -> c.vpcmpequb(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vpcmpequb_kr_ymm_m() {
		testAssembler(c -> c.vpcmpequb(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vpcmpequb_kr_zmm_m() {
		testAssembler(c -> c.vpcmpequb(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vpcmpequd_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpequd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 0), Register.K1));
	}

	@Test
	void vpcmpequd_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpequd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 0), Register.K1));
	}

	@Test
	void vpcmpequd_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpequd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 0), Register.K1));
	}

	@Test
	void vpcmpequd_kr_xmm_m() {
		testAssembler(c -> c.vpcmpequd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vpcmpequd_kr_ymm_m() {
		testAssembler(c -> c.vpcmpequd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vpcmpequd_kr_zmm_m() {
		testAssembler(c -> c.vpcmpequd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vpcmpequq_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpequq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 0), Register.K1));
	}

	@Test
	void vpcmpequq_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpequq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 0), Register.K1));
	}

	@Test
	void vpcmpequq_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpequq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 0), Register.K1));
	}

	@Test
	void vpcmpequq_kr_xmm_m() {
		testAssembler(c -> c.vpcmpequq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vpcmpequq_kr_ymm_m() {
		testAssembler(c -> c.vpcmpequq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vpcmpequq_kr_zmm_m() {
		testAssembler(c -> c.vpcmpequq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vpcmpequw_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpequw(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 0), Register.K1));
	}

	@Test
	void vpcmpequw_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpequw(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 0), Register.K1));
	}

	@Test
	void vpcmpequw_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpequw(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 0), Register.K1));
	}

	@Test
	void vpcmpequw_kr_xmm_m() {
		testAssembler(c -> c.vpcmpequw(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vpcmpequw_kr_ymm_m() {
		testAssembler(c -> c.vpcmpequw(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vpcmpequw_kr_zmm_m() {
		testAssembler(c -> c.vpcmpequw(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0), Register.K1));
	}

	@Test
	void vpcmpfalseb_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpfalseb(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseb_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpfalseb(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseb_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpfalseb(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseb_kr_xmm_m() {
		testAssembler(c -> c.vpcmpfalseb(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalseb_kr_ymm_m() {
		testAssembler(c -> c.vpcmpfalseb(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalseb_kr_zmm_m() {
		testAssembler(c -> c.vpcmpfalseb(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalsed_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpfalsed(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalsed_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpfalsed(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalsed_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpfalsed(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalsed_kr_xmm_m() {
		testAssembler(c -> c.vpcmpfalsed(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalsed_kr_ymm_m() {
		testAssembler(c -> c.vpcmpfalsed(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalsed_kr_zmm_m() {
		testAssembler(c -> c.vpcmpfalsed(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalseq_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpfalseq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseq_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpfalseq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseq_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpfalseq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseq_kr_xmm_m() {
		testAssembler(c -> c.vpcmpfalseq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalseq_kr_ymm_m() {
		testAssembler(c -> c.vpcmpfalseq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalseq_kr_zmm_m() {
		testAssembler(c -> c.vpcmpfalseq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalseub_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpfalseub(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseub_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpfalseub(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseub_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpfalseub(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseub_kr_xmm_m() {
		testAssembler(c -> c.vpcmpfalseub(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalseub_kr_ymm_m() {
		testAssembler(c -> c.vpcmpfalseub(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalseub_kr_zmm_m() {
		testAssembler(c -> c.vpcmpfalseub(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalseud_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpfalseud(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseud_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpfalseud(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseud_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpfalseud(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseud_kr_xmm_m() {
		testAssembler(c -> c.vpcmpfalseud(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalseud_kr_ymm_m() {
		testAssembler(c -> c.vpcmpfalseud(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalseud_kr_zmm_m() {
		testAssembler(c -> c.vpcmpfalseud(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalseuq_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpfalseuq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseuq_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpfalseuq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseuq_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpfalseuq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseuq_kr_xmm_m() {
		testAssembler(c -> c.vpcmpfalseuq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalseuq_kr_ymm_m() {
		testAssembler(c -> c.vpcmpfalseuq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalseuq_kr_zmm_m() {
		testAssembler(c -> c.vpcmpfalseuq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalseuw_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpfalseuw(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseuw_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpfalseuw(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseuw_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpfalseuw(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalseuw_kr_xmm_m() {
		testAssembler(c -> c.vpcmpfalseuw(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalseuw_kr_ymm_m() {
		testAssembler(c -> c.vpcmpfalseuw(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalseuw_kr_zmm_m() {
		testAssembler(c -> c.vpcmpfalseuw(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalsew_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpfalsew(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalsew_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpfalsew(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalsew_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpfalsew(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 3), Register.K1));
	}

	@Test
	void vpcmpfalsew_kr_xmm_m() {
		testAssembler(c -> c.vpcmpfalsew(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalsew_kr_ymm_m() {
		testAssembler(c -> c.vpcmpfalsew(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpfalsew_kr_zmm_m() {
		testAssembler(c -> c.vpcmpfalsew(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3), Register.K1));
	}

	@Test
	void vpcmpleb_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpleb(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 2), Register.K1));
	}

	@Test
	void vpcmpleb_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpleb(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 2), Register.K1));
	}

	@Test
	void vpcmpleb_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpleb(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 2), Register.K1));
	}

	@Test
	void vpcmpleb_kr_xmm_m() {
		testAssembler(c -> c.vpcmpleb(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpleb_kr_ymm_m() {
		testAssembler(c -> c.vpcmpleb(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpleb_kr_zmm_m() {
		testAssembler(c -> c.vpcmpleb(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpled_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpled(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 2), Register.K1));
	}

	@Test
	void vpcmpled_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpled(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 2), Register.K1));
	}

	@Test
	void vpcmpled_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpled(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 2), Register.K1));
	}

	@Test
	void vpcmpled_kr_xmm_m() {
		testAssembler(c -> c.vpcmpled(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpled_kr_ymm_m() {
		testAssembler(c -> c.vpcmpled(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpled_kr_zmm_m() {
		testAssembler(c -> c.vpcmpled(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpleq_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpleq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 2), Register.K1));
	}

	@Test
	void vpcmpleq_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpleq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 2), Register.K1));
	}

	@Test
	void vpcmpleq_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpleq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 2), Register.K1));
	}

	@Test
	void vpcmpleq_kr_xmm_m() {
		testAssembler(c -> c.vpcmpleq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpleq_kr_ymm_m() {
		testAssembler(c -> c.vpcmpleq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpleq_kr_zmm_m() {
		testAssembler(c -> c.vpcmpleq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpleub_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpleub(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 2), Register.K1));
	}

	@Test
	void vpcmpleub_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpleub(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 2), Register.K1));
	}

	@Test
	void vpcmpleub_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpleub(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 2), Register.K1));
	}

	@Test
	void vpcmpleub_kr_xmm_m() {
		testAssembler(c -> c.vpcmpleub(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpleub_kr_ymm_m() {
		testAssembler(c -> c.vpcmpleub(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpleub_kr_zmm_m() {
		testAssembler(c -> c.vpcmpleub(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpleud_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpleud(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 2), Register.K1));
	}

	@Test
	void vpcmpleud_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpleud(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 2), Register.K1));
	}

	@Test
	void vpcmpleud_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpleud(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 2), Register.K1));
	}

	@Test
	void vpcmpleud_kr_xmm_m() {
		testAssembler(c -> c.vpcmpleud(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpleud_kr_ymm_m() {
		testAssembler(c -> c.vpcmpleud(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpleud_kr_zmm_m() {
		testAssembler(c -> c.vpcmpleud(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpleuq_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpleuq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 2), Register.K1));
	}

	@Test
	void vpcmpleuq_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpleuq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 2), Register.K1));
	}

	@Test
	void vpcmpleuq_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpleuq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 2), Register.K1));
	}

	@Test
	void vpcmpleuq_kr_xmm_m() {
		testAssembler(c -> c.vpcmpleuq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpleuq_kr_ymm_m() {
		testAssembler(c -> c.vpcmpleuq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpleuq_kr_zmm_m() {
		testAssembler(c -> c.vpcmpleuq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpleuw_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpleuw(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 2), Register.K1));
	}

	@Test
	void vpcmpleuw_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpleuw(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 2), Register.K1));
	}

	@Test
	void vpcmpleuw_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpleuw(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 2), Register.K1));
	}

	@Test
	void vpcmpleuw_kr_xmm_m() {
		testAssembler(c -> c.vpcmpleuw(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpleuw_kr_ymm_m() {
		testAssembler(c -> c.vpcmpleuw(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpleuw_kr_zmm_m() {
		testAssembler(c -> c.vpcmpleuw(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmplew_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmplew(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 2), Register.K1));
	}

	@Test
	void vpcmplew_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmplew(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 2), Register.K1));
	}

	@Test
	void vpcmplew_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmplew(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 2), Register.K1));
	}

	@Test
	void vpcmplew_kr_xmm_m() {
		testAssembler(c -> c.vpcmplew(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmplew_kr_ymm_m() {
		testAssembler(c -> c.vpcmplew(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmplew_kr_zmm_m() {
		testAssembler(c -> c.vpcmplew(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2), Register.K1));
	}

	@Test
	void vpcmpltb_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpltb(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 1), Register.K1));
	}

	@Test
	void vpcmpltb_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpltb(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 1), Register.K1));
	}

	@Test
	void vpcmpltb_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpltb(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 1), Register.K1));
	}

	@Test
	void vpcmpltb_kr_xmm_m() {
		testAssembler(c -> c.vpcmpltb(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltb_kr_ymm_m() {
		testAssembler(c -> c.vpcmpltb(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltb_kr_zmm_m() {
		testAssembler(c -> c.vpcmpltb(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltd_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpltd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 1), Register.K1));
	}

	@Test
	void vpcmpltd_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpltd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 1), Register.K1));
	}

	@Test
	void vpcmpltd_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpltd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 1), Register.K1));
	}

	@Test
	void vpcmpltd_kr_xmm_m() {
		testAssembler(c -> c.vpcmpltd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltd_kr_ymm_m() {
		testAssembler(c -> c.vpcmpltd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltd_kr_zmm_m() {
		testAssembler(c -> c.vpcmpltd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltq_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpltq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 1), Register.K1));
	}

	@Test
	void vpcmpltq_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpltq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 1), Register.K1));
	}

	@Test
	void vpcmpltq_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpltq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 1), Register.K1));
	}

	@Test
	void vpcmpltq_kr_xmm_m() {
		testAssembler(c -> c.vpcmpltq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltq_kr_ymm_m() {
		testAssembler(c -> c.vpcmpltq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltq_kr_zmm_m() {
		testAssembler(c -> c.vpcmpltq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltub_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpltub(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 1), Register.K1));
	}

	@Test
	void vpcmpltub_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpltub(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 1), Register.K1));
	}

	@Test
	void vpcmpltub_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpltub(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 1), Register.K1));
	}

	@Test
	void vpcmpltub_kr_xmm_m() {
		testAssembler(c -> c.vpcmpltub(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltub_kr_ymm_m() {
		testAssembler(c -> c.vpcmpltub(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltub_kr_zmm_m() {
		testAssembler(c -> c.vpcmpltub(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltud_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpltud(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 1), Register.K1));
	}

	@Test
	void vpcmpltud_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpltud(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 1), Register.K1));
	}

	@Test
	void vpcmpltud_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpltud(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 1), Register.K1));
	}

	@Test
	void vpcmpltud_kr_xmm_m() {
		testAssembler(c -> c.vpcmpltud(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltud_kr_ymm_m() {
		testAssembler(c -> c.vpcmpltud(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltud_kr_zmm_m() {
		testAssembler(c -> c.vpcmpltud(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltuq_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpltuq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 1), Register.K1));
	}

	@Test
	void vpcmpltuq_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpltuq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 1), Register.K1));
	}

	@Test
	void vpcmpltuq_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpltuq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 1), Register.K1));
	}

	@Test
	void vpcmpltuq_kr_xmm_m() {
		testAssembler(c -> c.vpcmpltuq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltuq_kr_ymm_m() {
		testAssembler(c -> c.vpcmpltuq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltuq_kr_zmm_m() {
		testAssembler(c -> c.vpcmpltuq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltuw_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpltuw(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 1), Register.K1));
	}

	@Test
	void vpcmpltuw_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpltuw(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 1), Register.K1));
	}

	@Test
	void vpcmpltuw_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpltuw(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 1), Register.K1));
	}

	@Test
	void vpcmpltuw_kr_xmm_m() {
		testAssembler(c -> c.vpcmpltuw(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltuw_kr_ymm_m() {
		testAssembler(c -> c.vpcmpltuw(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltuw_kr_zmm_m() {
		testAssembler(c -> c.vpcmpltuw(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltw_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpltw(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 1), Register.K1));
	}

	@Test
	void vpcmpltw_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpltw(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 1), Register.K1));
	}

	@Test
	void vpcmpltw_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpltw(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 1), Register.K1));
	}

	@Test
	void vpcmpltw_kr_xmm_m() {
		testAssembler(c -> c.vpcmpltw(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltw_kr_ymm_m() {
		testAssembler(c -> c.vpcmpltw(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpltw_kr_zmm_m() {
		testAssembler(c -> c.vpcmpltw(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1), Register.K1));
	}

	@Test
	void vpcmpneqb_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpneqb(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 4), Register.K1));
	}

	@Test
	void vpcmpneqb_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpneqb(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 4), Register.K1));
	}

	@Test
	void vpcmpneqb_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpneqb(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 4), Register.K1));
	}

	@Test
	void vpcmpneqb_kr_xmm_m() {
		testAssembler(c -> c.vpcmpneqb(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpneqb_kr_ymm_m() {
		testAssembler(c -> c.vpcmpneqb(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpneqb_kr_zmm_m() {
		testAssembler(c -> c.vpcmpneqb(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpneqd_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpneqd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 4), Register.K1));
	}

	@Test
	void vpcmpneqd_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpneqd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 4), Register.K1));
	}

	@Test
	void vpcmpneqd_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpneqd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 4), Register.K1));
	}

	@Test
	void vpcmpneqd_kr_xmm_m() {
		testAssembler(c -> c.vpcmpneqd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpneqd_kr_ymm_m() {
		testAssembler(c -> c.vpcmpneqd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpneqd_kr_zmm_m() {
		testAssembler(c -> c.vpcmpneqd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpneqq_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpneqq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 4), Register.K1));
	}

	@Test
	void vpcmpneqq_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpneqq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 4), Register.K1));
	}

	@Test
	void vpcmpneqq_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpneqq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 4), Register.K1));
	}

	@Test
	void vpcmpneqq_kr_xmm_m() {
		testAssembler(c -> c.vpcmpneqq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpneqq_kr_ymm_m() {
		testAssembler(c -> c.vpcmpneqq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpneqq_kr_zmm_m() {
		testAssembler(c -> c.vpcmpneqq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpnequb_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnequb(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 4), Register.K1));
	}

	@Test
	void vpcmpnequb_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnequb(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 4), Register.K1));
	}

	@Test
	void vpcmpnequb_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnequb(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 4), Register.K1));
	}

	@Test
	void vpcmpnequb_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnequb(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpnequb_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnequb(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpnequb_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnequb(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpnequd_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnequd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 4), Register.K1));
	}

	@Test
	void vpcmpnequd_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnequd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 4), Register.K1));
	}

	@Test
	void vpcmpnequd_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnequd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 4), Register.K1));
	}

	@Test
	void vpcmpnequd_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnequd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpnequd_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnequd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpnequd_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnequd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpnequq_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnequq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 4), Register.K1));
	}

	@Test
	void vpcmpnequq_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnequq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 4), Register.K1));
	}

	@Test
	void vpcmpnequq_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnequq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 4), Register.K1));
	}

	@Test
	void vpcmpnequq_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnequq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpnequq_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnequq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpnequq_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnequq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpnequw_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnequw(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 4), Register.K1));
	}

	@Test
	void vpcmpnequw_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnequw(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 4), Register.K1));
	}

	@Test
	void vpcmpnequw_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnequw(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 4), Register.K1));
	}

	@Test
	void vpcmpnequw_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnequw(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpnequw_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnequw(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpnequw_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnequw(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpneqw_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpneqw(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 4), Register.K1));
	}

	@Test
	void vpcmpneqw_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpneqw(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 4), Register.K1));
	}

	@Test
	void vpcmpneqw_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpneqw(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 4), Register.K1));
	}

	@Test
	void vpcmpneqw_kr_xmm_m() {
		testAssembler(c -> c.vpcmpneqw(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpneqw_kr_ymm_m() {
		testAssembler(c -> c.vpcmpneqw(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpneqw_kr_zmm_m() {
		testAssembler(c -> c.vpcmpneqw(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4), Register.K1));
	}

	@Test
	void vpcmpnleb_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnleb(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleb_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnleb(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleb_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnleb(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleb_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnleb(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnleb_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnleb(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnleb_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnleb(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnled_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnled(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 6), Register.K1));
	}

	@Test
	void vpcmpnled_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnled(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 6), Register.K1));
	}

	@Test
	void vpcmpnled_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnled(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 6), Register.K1));
	}

	@Test
	void vpcmpnled_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnled(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnled_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnled(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnled_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnled(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnleq_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnleq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleq_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnleq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleq_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnleq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleq_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnleq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnleq_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnleq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnleq_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnleq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnleub_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnleub(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleub_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnleub(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleub_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnleub(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleub_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnleub(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnleub_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnleub(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnleub_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnleub(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnleud_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnleud(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleud_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnleud(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleud_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnleud(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleud_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnleud(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnleud_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnleud(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnleud_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnleud(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnleuq_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnleuq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleuq_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnleuq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleuq_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnleuq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleuq_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnleuq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnleuq_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnleuq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnleuq_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnleuq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnleuw_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnleuw(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleuw_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnleuw(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleuw_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnleuw(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 6), Register.K1));
	}

	@Test
	void vpcmpnleuw_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnleuw(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnleuw_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnleuw(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnleuw_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnleuw(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnlew_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnlew(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 6), Register.K1));
	}

	@Test
	void vpcmpnlew_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnlew(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 6), Register.K1));
	}

	@Test
	void vpcmpnlew_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnlew(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 6), Register.K1));
	}

	@Test
	void vpcmpnlew_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnlew(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnlew_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnlew(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnlew_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnlew(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6), Register.K1));
	}

	@Test
	void vpcmpnltb_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnltb(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltb_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnltb(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltb_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnltb(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltb_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnltb(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltb_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnltb(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltb_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnltb(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltd_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnltd(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltd_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnltd(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltd_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnltd(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltd_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnltd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltd_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnltd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltd_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnltd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltq_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnltq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltq_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnltq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltq_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnltq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltq_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnltq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltq_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnltq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltq_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnltq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltub_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnltub(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltub_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnltub(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltub_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnltub(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltub_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnltub(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltub_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnltub(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltub_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnltub(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltud_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnltud(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltud_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnltud(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltud_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnltud(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltud_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnltud(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltud_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnltud(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltud_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnltud(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltuq_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnltuq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltuq_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnltuq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltuq_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnltuq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltuq_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnltuq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltuq_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnltuq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltuq_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnltuq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltuw_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnltuw(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltuw_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnltuw(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltuw_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnltuw(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltuw_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnltuw(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltuw_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnltuw(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltuw_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnltuw(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltw_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmpnltw(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltw_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmpnltw(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltw_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmpnltw(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 5), Register.K1));
	}

	@Test
	void vpcmpnltw_kr_xmm_m() {
		testAssembler(c -> c.vpcmpnltw(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltw_kr_ymm_m() {
		testAssembler(c -> c.vpcmpnltw(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmpnltw_kr_zmm_m() {
		testAssembler(c -> c.vpcmpnltw(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5), Register.K1));
	}

	@Test
	void vpcmptrueb_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmptrueb(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueb_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmptrueb(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueb_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmptrueb(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueb_kr_xmm_m() {
		testAssembler(c -> c.vpcmptrueb(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrueb_kr_ymm_m() {
		testAssembler(c -> c.vpcmptrueb(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrueb_kr_zmm_m() {
		testAssembler(c -> c.vpcmptrueb(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrued_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmptrued(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 7), Register.K1));
	}

	@Test
	void vpcmptrued_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmptrued(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 7), Register.K1));
	}

	@Test
	void vpcmptrued_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmptrued(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 7), Register.K1));
	}

	@Test
	void vpcmptrued_kr_xmm_m() {
		testAssembler(c -> c.vpcmptrued(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrued_kr_ymm_m() {
		testAssembler(c -> c.vpcmptrued(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrued_kr_zmm_m() {
		testAssembler(c -> c.vpcmptrued(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrueq_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmptrueq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueq_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmptrueq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueq_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmptrueq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueq_kr_xmm_m() {
		testAssembler(c -> c.vpcmptrueq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrueq_kr_ymm_m() {
		testAssembler(c -> c.vpcmptrueq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrueq_kr_zmm_m() {
		testAssembler(c -> c.vpcmptrueq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrueub_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmptrueub(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueub_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmptrueub(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueub_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmptrueub(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueub_kr_xmm_m() {
		testAssembler(c -> c.vpcmptrueub(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrueub_kr_ymm_m() {
		testAssembler(c -> c.vpcmptrueub(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrueub_kr_zmm_m() {
		testAssembler(c -> c.vpcmptrueub(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUB_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrueud_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmptrueud(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueud_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmptrueud(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueud_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmptrueud(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueud_kr_xmm_m() {
		testAssembler(c -> c.vpcmptrueud(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrueud_kr_ymm_m() {
		testAssembler(c -> c.vpcmptrueud(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrueud_kr_zmm_m() {
		testAssembler(c -> c.vpcmptrueud(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUD_KR_K1_ZMM_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrueuq_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmptrueuq(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueuq_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmptrueuq(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueuq_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmptrueuq(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueuq_kr_xmm_m() {
		testAssembler(c -> c.vpcmptrueuq(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrueuq_kr_ymm_m() {
		testAssembler(c -> c.vpcmptrueuq(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrueuq_kr_zmm_m() {
		testAssembler(c -> c.vpcmptrueuq(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUQ_KR_K1_ZMM_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrueuw_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmptrueuw(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueuw_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmptrueuw(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueuw_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmptrueuw(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 7), Register.K1));
	}

	@Test
	void vpcmptrueuw_kr_xmm_m() {
		testAssembler(c -> c.vpcmptrueuw(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrueuw_kr_ymm_m() {
		testAssembler(c -> c.vpcmptrueuw(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptrueuw_kr_zmm_m() {
		testAssembler(c -> c.vpcmptrueuw(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPUW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptruew_kr_xmm_xmm() {
		testAssembler(c -> c.vpcmptruew(k2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, 7), Register.K1));
	}

	@Test
	void vpcmptruew_kr_ymm_ymm() {
		testAssembler(c -> c.vpcmptruew(k2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, 7), Register.K1));
	}

	@Test
	void vpcmptruew_kr_zmm_zmm() {
		testAssembler(c -> c.vpcmptruew(k2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, 7), Register.K1));
	}

	@Test
	void vpcmptruew_kr_xmm_m() {
		testAssembler(c -> c.vpcmptruew(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_XMM_XMMM128_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptruew_kr_ymm_m() {
		testAssembler(c -> c.vpcmptruew(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_YMM_YMMM256_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcmptruew_kr_zmm_m() {
		testAssembler(c -> c.vpcmptruew(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VPCMPW_KR_K1_ZMM_ZMMM512_IMM8, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7), Register.K1));
	}

	@Test
	void vpcomeqb_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomeqb(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 4));
	}

	@Test
	void vpcomeqb_xmm_xmm_m() {
		testAssembler(c -> c.vpcomeqb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void vpcomeqd_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomeqd(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 4));
	}

	@Test
	void vpcomeqd_xmm_xmm_m() {
		testAssembler(c -> c.vpcomeqd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void vpcomeqq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomeqq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 4));
	}

	@Test
	void vpcomeqq_xmm_xmm_m() {
		testAssembler(c -> c.vpcomeqq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void vpcomequb_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomequb(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 4));
	}

	@Test
	void vpcomequb_xmm_xmm_m() {
		testAssembler(c -> c.vpcomequb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void vpcomequd_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomequd(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 4));
	}

	@Test
	void vpcomequd_xmm_xmm_m() {
		testAssembler(c -> c.vpcomequd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void vpcomequq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomequq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 4));
	}

	@Test
	void vpcomequq_xmm_xmm_m() {
		testAssembler(c -> c.vpcomequq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void vpcomequw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomequw(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 4));
	}

	@Test
	void vpcomequw_xmm_xmm_m() {
		testAssembler(c -> c.vpcomequw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void vpcomeqw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomeqw(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 4));
	}

	@Test
	void vpcomeqw_xmm_xmm_m() {
		testAssembler(c -> c.vpcomeqw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void vpcomfalseb_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomfalseb(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 6));
	}

	@Test
	void vpcomfalseb_xmm_xmm_m() {
		testAssembler(c -> c.vpcomfalseb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void vpcomfalsed_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomfalsed(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 6));
	}

	@Test
	void vpcomfalsed_xmm_xmm_m() {
		testAssembler(c -> c.vpcomfalsed(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void vpcomfalseq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomfalseq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 6));
	}

	@Test
	void vpcomfalseq_xmm_xmm_m() {
		testAssembler(c -> c.vpcomfalseq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void vpcomfalseub_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomfalseub(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 6));
	}

	@Test
	void vpcomfalseub_xmm_xmm_m() {
		testAssembler(c -> c.vpcomfalseub(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void vpcomfalseud_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomfalseud(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 6));
	}

	@Test
	void vpcomfalseud_xmm_xmm_m() {
		testAssembler(c -> c.vpcomfalseud(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void vpcomfalseuq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomfalseuq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 6));
	}

	@Test
	void vpcomfalseuq_xmm_xmm_m() {
		testAssembler(c -> c.vpcomfalseuq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void vpcomfalseuw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomfalseuw(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 6));
	}

	@Test
	void vpcomfalseuw_xmm_xmm_m() {
		testAssembler(c -> c.vpcomfalseuw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void vpcomfalsew_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomfalsew(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 6));
	}

	@Test
	void vpcomfalsew_xmm_xmm_m() {
		testAssembler(c -> c.vpcomfalsew(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void vpcomgeb_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomgeb(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 3));
	}

	@Test
	void vpcomgeb_xmm_xmm_m() {
		testAssembler(c -> c.vpcomgeb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void vpcomged_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomged(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 3));
	}

	@Test
	void vpcomged_xmm_xmm_m() {
		testAssembler(c -> c.vpcomged(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void vpcomgeq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomgeq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 3));
	}

	@Test
	void vpcomgeq_xmm_xmm_m() {
		testAssembler(c -> c.vpcomgeq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void vpcomgeub_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomgeub(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 3));
	}

	@Test
	void vpcomgeub_xmm_xmm_m() {
		testAssembler(c -> c.vpcomgeub(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void vpcomgeud_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomgeud(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 3));
	}

	@Test
	void vpcomgeud_xmm_xmm_m() {
		testAssembler(c -> c.vpcomgeud(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void vpcomgeuq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomgeuq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 3));
	}

	@Test
	void vpcomgeuq_xmm_xmm_m() {
		testAssembler(c -> c.vpcomgeuq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void vpcomgeuw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomgeuw(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 3));
	}

	@Test
	void vpcomgeuw_xmm_xmm_m() {
		testAssembler(c -> c.vpcomgeuw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void vpcomgew_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomgew(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 3));
	}

	@Test
	void vpcomgew_xmm_xmm_m() {
		testAssembler(c -> c.vpcomgew(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void vpcomgtb_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomgtb(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 2));
	}

	@Test
	void vpcomgtb_xmm_xmm_m() {
		testAssembler(c -> c.vpcomgtb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void vpcomgtd_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomgtd(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 2));
	}

	@Test
	void vpcomgtd_xmm_xmm_m() {
		testAssembler(c -> c.vpcomgtd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void vpcomgtq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomgtq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 2));
	}

	@Test
	void vpcomgtq_xmm_xmm_m() {
		testAssembler(c -> c.vpcomgtq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void vpcomgtub_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomgtub(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 2));
	}

	@Test
	void vpcomgtub_xmm_xmm_m() {
		testAssembler(c -> c.vpcomgtub(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void vpcomgtud_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomgtud(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 2));
	}

	@Test
	void vpcomgtud_xmm_xmm_m() {
		testAssembler(c -> c.vpcomgtud(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void vpcomgtuq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomgtuq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 2));
	}

	@Test
	void vpcomgtuq_xmm_xmm_m() {
		testAssembler(c -> c.vpcomgtuq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void vpcomgtuw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomgtuw(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 2));
	}

	@Test
	void vpcomgtuw_xmm_xmm_m() {
		testAssembler(c -> c.vpcomgtuw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void vpcomgtw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomgtw(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 2));
	}

	@Test
	void vpcomgtw_xmm_xmm_m() {
		testAssembler(c -> c.vpcomgtw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void vpcomleb_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomleb(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 1));
	}

	@Test
	void vpcomleb_xmm_xmm_m() {
		testAssembler(c -> c.vpcomleb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void vpcomled_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomled(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 1));
	}

	@Test
	void vpcomled_xmm_xmm_m() {
		testAssembler(c -> c.vpcomled(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void vpcomleq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomleq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 1));
	}

	@Test
	void vpcomleq_xmm_xmm_m() {
		testAssembler(c -> c.vpcomleq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void vpcomleub_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomleub(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 1));
	}

	@Test
	void vpcomleub_xmm_xmm_m() {
		testAssembler(c -> c.vpcomleub(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void vpcomleud_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomleud(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 1));
	}

	@Test
	void vpcomleud_xmm_xmm_m() {
		testAssembler(c -> c.vpcomleud(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void vpcomleuq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomleuq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 1));
	}

	@Test
	void vpcomleuq_xmm_xmm_m() {
		testAssembler(c -> c.vpcomleuq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void vpcomleuw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomleuw(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 1));
	}

	@Test
	void vpcomleuw_xmm_xmm_m() {
		testAssembler(c -> c.vpcomleuw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void vpcomlew_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomlew(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 1));
	}

	@Test
	void vpcomlew_xmm_xmm_m() {
		testAssembler(c -> c.vpcomlew(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void vpcomltb_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomltb(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 0));
	}

	@Test
	void vpcomltb_xmm_xmm_m() {
		testAssembler(c -> c.vpcomltb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void vpcomltd_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomltd(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 0));
	}

	@Test
	void vpcomltd_xmm_xmm_m() {
		testAssembler(c -> c.vpcomltd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void vpcomltq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomltq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 0));
	}

	@Test
	void vpcomltq_xmm_xmm_m() {
		testAssembler(c -> c.vpcomltq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void vpcomltub_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomltub(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 0));
	}

	@Test
	void vpcomltub_xmm_xmm_m() {
		testAssembler(c -> c.vpcomltub(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void vpcomltud_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomltud(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 0));
	}

	@Test
	void vpcomltud_xmm_xmm_m() {
		testAssembler(c -> c.vpcomltud(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void vpcomltuq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomltuq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 0));
	}

	@Test
	void vpcomltuq_xmm_xmm_m() {
		testAssembler(c -> c.vpcomltuq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void vpcomltuw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomltuw(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 0));
	}

	@Test
	void vpcomltuw_xmm_xmm_m() {
		testAssembler(c -> c.vpcomltuw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void vpcomltw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomltw(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 0));
	}

	@Test
	void vpcomltw_xmm_xmm_m() {
		testAssembler(c -> c.vpcomltw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void vpcomneqb_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomneqb(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 5));
	}

	@Test
	void vpcomneqb_xmm_xmm_m() {
		testAssembler(c -> c.vpcomneqb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void vpcomneqd_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomneqd(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 5));
	}

	@Test
	void vpcomneqd_xmm_xmm_m() {
		testAssembler(c -> c.vpcomneqd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void vpcomneqq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomneqq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 5));
	}

	@Test
	void vpcomneqq_xmm_xmm_m() {
		testAssembler(c -> c.vpcomneqq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void vpcomnequb_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomnequb(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 5));
	}

	@Test
	void vpcomnequb_xmm_xmm_m() {
		testAssembler(c -> c.vpcomnequb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void vpcomnequd_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomnequd(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 5));
	}

	@Test
	void vpcomnequd_xmm_xmm_m() {
		testAssembler(c -> c.vpcomnequd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void vpcomnequq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomnequq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 5));
	}

	@Test
	void vpcomnequq_xmm_xmm_m() {
		testAssembler(c -> c.vpcomnequq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void vpcomnequw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomnequw(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 5));
	}

	@Test
	void vpcomnequw_xmm_xmm_m() {
		testAssembler(c -> c.vpcomnequw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void vpcomneqw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomneqw(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 5));
	}

	@Test
	void vpcomneqw_xmm_xmm_m() {
		testAssembler(c -> c.vpcomneqw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void vpcomtrueb_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomtrueb(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 7));
	}

	@Test
	void vpcomtrueb_xmm_xmm_m() {
		testAssembler(c -> c.vpcomtrueb(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

	@Test
	void vpcomtrued_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomtrued(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 7));
	}

	@Test
	void vpcomtrued_xmm_xmm_m() {
		testAssembler(c -> c.vpcomtrued(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

	@Test
	void vpcomtrueq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomtrueq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 7));
	}

	@Test
	void vpcomtrueq_xmm_xmm_m() {
		testAssembler(c -> c.vpcomtrueq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

	@Test
	void vpcomtrueub_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomtrueub(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 7));
	}

	@Test
	void vpcomtrueub_xmm_xmm_m() {
		testAssembler(c -> c.vpcomtrueub(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUB_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

	@Test
	void vpcomtrueud_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomtrueud(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 7));
	}

	@Test
	void vpcomtrueud_xmm_xmm_m() {
		testAssembler(c -> c.vpcomtrueud(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

	@Test
	void vpcomtrueuq_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomtrueuq(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 7));
	}

	@Test
	void vpcomtrueuq_xmm_xmm_m() {
		testAssembler(c -> c.vpcomtrueuq(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUQ_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

	@Test
	void vpcomtrueuw_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomtrueuw(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 7));
	}

	@Test
	void vpcomtrueuw_xmm_xmm_m() {
		testAssembler(c -> c.vpcomtrueuw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMUW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

	@Test
	void vpcomtruew_xmm_xmm_xmm() {
		testAssembler(c -> c.vpcomtruew(xmm2, xmm3, xmm4), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, 7));
	}

	@Test
	void vpcomtruew_xmm_xmm_m() {
		testAssembler(c -> c.vpcomtruew(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.XOP_VPCOMW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

}
