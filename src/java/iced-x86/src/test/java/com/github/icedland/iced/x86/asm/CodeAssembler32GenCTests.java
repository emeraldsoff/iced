// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

package com.github.icedland.iced.x86.asm;

import org.junit.jupiter.api.Test;

import com.github.icedland.iced.x86.*;
import static com.github.icedland.iced.x86.asm.AsmRegisters.*;

final class CodeAssembler32GenCTests extends CodeAssemblerTestsBase {
	CodeAssembler32GenCTests() {
		super(32);
	}

	@Test
	void call_r16() {
		testAssembler(c -> c.call(dx), Instruction.create(Code.CALL_RM16, ICRegisters.dx));
	}

	@Test
	void call_r32() {
		testAssembler(c -> c.call(edx), Instruction.create(Code.CALL_RM32, ICRegisters.edx));
	}

	@Test
	void call_m() {
		{ /* if (dst.size == MemoryOperandSize.TBYTE) */
			// Skipping CALL_M1664 - Not supported by current bitness
		} /* else */ { /* if (dst.size == MemoryOperandSize.QWORD) */
			// Skipping CALL_RM64 - Not supported by current bitness
		} /* else */ { /* if (dst.size == MemoryOperandSize.FWORD) */
			testAssembler(c -> c.call(fword_ptr(0x0L).base(edx)), Instruction.create(Code.CALL_M1632, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			{ /* if (getBitness() >= 32) */
				testAssembler(c -> c.call(dword_ptr(0x0L).base(edx)), Instruction.create(Code.CALL_RM32, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.call(word_ptr(0x0L).base(edx)), Instruction.create(Code.CALL_RM16, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.call(zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.CALL_RM16, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void call_l() {
		{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { /* if (getBitness() >= 32) */
			testAssembler(c -> c.call(createAndEmitLabel(c)), assignLabel(Instruction.createBranch(Code.CALL_REL32_32, FIRST_LABEL_ID), FIRST_LABEL_ID), TestInstrFlags.BRANCH);
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void call_lu64() {
		{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { /* if (getBitness() >= 32) */
			testAssembler(c -> c.call(0x31D0L), Instruction.createBranch(Code.CALL_REL32_32, 0x31D0L), TestInstrFlags.BRANCH_U64);
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void cbw() {
		testAssembler(c -> c.cbw(), Instruction.create(Code.CBW));
	}

	@Test
	void ccs_encrypt() {
		{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { /* if (getBitness() >= 32) */
			testAssembler(c -> c.ccs_encrypt(), Instruction.create(Code.CCS_ENCRYPT_32), TestInstrFlags.REMOVE_REP_REPNE_PREFIXES);
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void ccs_hash() {
		{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { /* if (getBitness() >= 32) */
			testAssembler(c -> c.ccs_hash(), Instruction.create(Code.CCS_HASH_32), TestInstrFlags.REMOVE_REP_REPNE_PREFIXES);
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void cdq() {
		testAssembler(c -> c.cdq(), Instruction.create(Code.CDQ));
	}

	@Test
	void cl1invmb() {
		testAssembler(c -> c.cl1invmb(), Instruction.create(Code.CL1INVMB), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CL1INVMB);
	}

	@Test
	void clac() {
		testAssembler(c -> c.clac(), Instruction.create(Code.CLAC));
	}

	@Test
	void clc() {
		testAssembler(c -> c.clc(), Instruction.create(Code.CLC));
	}

	@Test
	void cld() {
		testAssembler(c -> c.cld(), Instruction.create(Code.CLD));
	}

	@Test
	void cldemote_m() {
		testAssembler(c -> c.cldemote(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.CLDEMOTE_M8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void clflush_m() {
		testAssembler(c -> c.clflush(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.CLFLUSH_M8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void clflushopt_m() {
		testAssembler(c -> c.clflushopt(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.CLFLUSHOPT_M8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void clgi() {
		testAssembler(c -> c.clgi(), Instruction.create(Code.CLGI));
	}

	@Test
	void cli() {
		testAssembler(c -> c.cli(), Instruction.create(Code.CLI));
	}

	@Test
	void clrssbsy_m() {
		testAssembler(c -> c.clrssbsy(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.CLRSSBSY_M64, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void clts() {
		testAssembler(c -> c.clts(), Instruction.create(Code.CLTS));
	}

	@Test
	void clwb_m() {
		testAssembler(c -> c.clwb(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.CLWB_M8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void clzero() {
		{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { /* if (getBitness() >= 32) */
			testAssembler(c -> c.clzero(), Instruction.create(Code.CLZEROD));
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void cmc() {
		testAssembler(c -> c.cmc(), Instruction.create(Code.CMC));
	}

	@Test
	void cmova_r16_r16() {
		testAssembler(c -> c.cmova(dx, bx), Instruction.create(Code.CMOVA_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmova_r32_r32() {
		testAssembler(c -> c.cmova(edx, ebx), Instruction.create(Code.CMOVA_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmova_r16_m() {
		testAssembler(c -> c.cmova(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVA_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmova_r32_m() {
		testAssembler(c -> c.cmova(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVA_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovae_r16_r16() {
		testAssembler(c -> c.cmovae(dx, bx), Instruction.create(Code.CMOVAE_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovae_r32_r32() {
		testAssembler(c -> c.cmovae(edx, ebx), Instruction.create(Code.CMOVAE_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovae_r16_m() {
		testAssembler(c -> c.cmovae(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVAE_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovae_r32_m() {
		testAssembler(c -> c.cmovae(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVAE_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovb_r16_r16() {
		testAssembler(c -> c.cmovb(dx, bx), Instruction.create(Code.CMOVB_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovb_r32_r32() {
		testAssembler(c -> c.cmovb(edx, ebx), Instruction.create(Code.CMOVB_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovb_r16_m() {
		testAssembler(c -> c.cmovb(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVB_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovb_r32_m() {
		testAssembler(c -> c.cmovb(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVB_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovbe_r16_r16() {
		testAssembler(c -> c.cmovbe(dx, bx), Instruction.create(Code.CMOVBE_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovbe_r32_r32() {
		testAssembler(c -> c.cmovbe(edx, ebx), Instruction.create(Code.CMOVBE_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovbe_r16_m() {
		testAssembler(c -> c.cmovbe(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVBE_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovbe_r32_m() {
		testAssembler(c -> c.cmovbe(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVBE_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovc_r16_r16() {
		testAssembler(c -> c.cmovc(dx, bx), Instruction.create(Code.CMOVB_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovc_r32_r32() {
		testAssembler(c -> c.cmovc(edx, ebx), Instruction.create(Code.CMOVB_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovc_r16_m() {
		testAssembler(c -> c.cmovc(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVB_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovc_r32_m() {
		testAssembler(c -> c.cmovc(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVB_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmove_r16_r16() {
		testAssembler(c -> c.cmove(dx, bx), Instruction.create(Code.CMOVE_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmove_r32_r32() {
		testAssembler(c -> c.cmove(edx, ebx), Instruction.create(Code.CMOVE_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmove_r16_m() {
		testAssembler(c -> c.cmove(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVE_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmove_r32_m() {
		testAssembler(c -> c.cmove(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVE_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovg_r16_r16() {
		testAssembler(c -> c.cmovg(dx, bx), Instruction.create(Code.CMOVG_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovg_r32_r32() {
		testAssembler(c -> c.cmovg(edx, ebx), Instruction.create(Code.CMOVG_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovg_r16_m() {
		testAssembler(c -> c.cmovg(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVG_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovg_r32_m() {
		testAssembler(c -> c.cmovg(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVG_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovge_r16_r16() {
		testAssembler(c -> c.cmovge(dx, bx), Instruction.create(Code.CMOVGE_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovge_r32_r32() {
		testAssembler(c -> c.cmovge(edx, ebx), Instruction.create(Code.CMOVGE_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovge_r16_m() {
		testAssembler(c -> c.cmovge(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVGE_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovge_r32_m() {
		testAssembler(c -> c.cmovge(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVGE_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovl_r16_r16() {
		testAssembler(c -> c.cmovl(dx, bx), Instruction.create(Code.CMOVL_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovl_r32_r32() {
		testAssembler(c -> c.cmovl(edx, ebx), Instruction.create(Code.CMOVL_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovl_r16_m() {
		testAssembler(c -> c.cmovl(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVL_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovl_r32_m() {
		testAssembler(c -> c.cmovl(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVL_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovle_r16_r16() {
		testAssembler(c -> c.cmovle(dx, bx), Instruction.create(Code.CMOVLE_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovle_r32_r32() {
		testAssembler(c -> c.cmovle(edx, ebx), Instruction.create(Code.CMOVLE_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovle_r16_m() {
		testAssembler(c -> c.cmovle(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVLE_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovle_r32_m() {
		testAssembler(c -> c.cmovle(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVLE_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovna_r16_r16() {
		testAssembler(c -> c.cmovna(dx, bx), Instruction.create(Code.CMOVBE_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovna_r32_r32() {
		testAssembler(c -> c.cmovna(edx, ebx), Instruction.create(Code.CMOVBE_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovna_r16_m() {
		testAssembler(c -> c.cmovna(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVBE_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovna_r32_m() {
		testAssembler(c -> c.cmovna(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVBE_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnae_r16_r16() {
		testAssembler(c -> c.cmovnae(dx, bx), Instruction.create(Code.CMOVB_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovnae_r32_r32() {
		testAssembler(c -> c.cmovnae(edx, ebx), Instruction.create(Code.CMOVB_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovnae_r16_m() {
		testAssembler(c -> c.cmovnae(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVB_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnae_r32_m() {
		testAssembler(c -> c.cmovnae(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVB_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnb_r16_r16() {
		testAssembler(c -> c.cmovnb(dx, bx), Instruction.create(Code.CMOVAE_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovnb_r32_r32() {
		testAssembler(c -> c.cmovnb(edx, ebx), Instruction.create(Code.CMOVAE_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovnb_r16_m() {
		testAssembler(c -> c.cmovnb(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVAE_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnb_r32_m() {
		testAssembler(c -> c.cmovnb(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVAE_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnbe_r16_r16() {
		testAssembler(c -> c.cmovnbe(dx, bx), Instruction.create(Code.CMOVA_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovnbe_r32_r32() {
		testAssembler(c -> c.cmovnbe(edx, ebx), Instruction.create(Code.CMOVA_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovnbe_r16_m() {
		testAssembler(c -> c.cmovnbe(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVA_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnbe_r32_m() {
		testAssembler(c -> c.cmovnbe(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVA_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnc_r16_r16() {
		testAssembler(c -> c.cmovnc(dx, bx), Instruction.create(Code.CMOVAE_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovnc_r32_r32() {
		testAssembler(c -> c.cmovnc(edx, ebx), Instruction.create(Code.CMOVAE_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovnc_r16_m() {
		testAssembler(c -> c.cmovnc(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVAE_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnc_r32_m() {
		testAssembler(c -> c.cmovnc(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVAE_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovne_r16_r16() {
		testAssembler(c -> c.cmovne(dx, bx), Instruction.create(Code.CMOVNE_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovne_r32_r32() {
		testAssembler(c -> c.cmovne(edx, ebx), Instruction.create(Code.CMOVNE_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovne_r16_m() {
		testAssembler(c -> c.cmovne(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVNE_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovne_r32_m() {
		testAssembler(c -> c.cmovne(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVNE_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovng_r16_r16() {
		testAssembler(c -> c.cmovng(dx, bx), Instruction.create(Code.CMOVLE_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovng_r32_r32() {
		testAssembler(c -> c.cmovng(edx, ebx), Instruction.create(Code.CMOVLE_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovng_r16_m() {
		testAssembler(c -> c.cmovng(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVLE_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovng_r32_m() {
		testAssembler(c -> c.cmovng(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVLE_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnge_r16_r16() {
		testAssembler(c -> c.cmovnge(dx, bx), Instruction.create(Code.CMOVL_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovnge_r32_r32() {
		testAssembler(c -> c.cmovnge(edx, ebx), Instruction.create(Code.CMOVL_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovnge_r16_m() {
		testAssembler(c -> c.cmovnge(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVL_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnge_r32_m() {
		testAssembler(c -> c.cmovnge(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVL_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnl_r16_r16() {
		testAssembler(c -> c.cmovnl(dx, bx), Instruction.create(Code.CMOVGE_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovnl_r32_r32() {
		testAssembler(c -> c.cmovnl(edx, ebx), Instruction.create(Code.CMOVGE_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovnl_r16_m() {
		testAssembler(c -> c.cmovnl(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVGE_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnl_r32_m() {
		testAssembler(c -> c.cmovnl(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVGE_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnle_r16_r16() {
		testAssembler(c -> c.cmovnle(dx, bx), Instruction.create(Code.CMOVG_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovnle_r32_r32() {
		testAssembler(c -> c.cmovnle(edx, ebx), Instruction.create(Code.CMOVG_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovnle_r16_m() {
		testAssembler(c -> c.cmovnle(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVG_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnle_r32_m() {
		testAssembler(c -> c.cmovnle(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVG_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovno_r16_r16() {
		testAssembler(c -> c.cmovno(dx, bx), Instruction.create(Code.CMOVNO_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovno_r32_r32() {
		testAssembler(c -> c.cmovno(edx, ebx), Instruction.create(Code.CMOVNO_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovno_r16_m() {
		testAssembler(c -> c.cmovno(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVNO_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovno_r32_m() {
		testAssembler(c -> c.cmovno(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVNO_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnp_r16_r16() {
		testAssembler(c -> c.cmovnp(dx, bx), Instruction.create(Code.CMOVNP_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovnp_r32_r32() {
		testAssembler(c -> c.cmovnp(edx, ebx), Instruction.create(Code.CMOVNP_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovnp_r16_m() {
		testAssembler(c -> c.cmovnp(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVNP_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnp_r32_m() {
		testAssembler(c -> c.cmovnp(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVNP_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovns_r16_r16() {
		testAssembler(c -> c.cmovns(dx, bx), Instruction.create(Code.CMOVNS_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovns_r32_r32() {
		testAssembler(c -> c.cmovns(edx, ebx), Instruction.create(Code.CMOVNS_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovns_r16_m() {
		testAssembler(c -> c.cmovns(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVNS_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovns_r32_m() {
		testAssembler(c -> c.cmovns(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVNS_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnz_r16_r16() {
		testAssembler(c -> c.cmovnz(dx, bx), Instruction.create(Code.CMOVNE_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovnz_r32_r32() {
		testAssembler(c -> c.cmovnz(edx, ebx), Instruction.create(Code.CMOVNE_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovnz_r16_m() {
		testAssembler(c -> c.cmovnz(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVNE_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovnz_r32_m() {
		testAssembler(c -> c.cmovnz(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVNE_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovo_r16_r16() {
		testAssembler(c -> c.cmovo(dx, bx), Instruction.create(Code.CMOVO_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovo_r32_r32() {
		testAssembler(c -> c.cmovo(edx, ebx), Instruction.create(Code.CMOVO_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovo_r16_m() {
		testAssembler(c -> c.cmovo(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVO_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovo_r32_m() {
		testAssembler(c -> c.cmovo(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVO_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovp_r16_r16() {
		testAssembler(c -> c.cmovp(dx, bx), Instruction.create(Code.CMOVP_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovp_r32_r32() {
		testAssembler(c -> c.cmovp(edx, ebx), Instruction.create(Code.CMOVP_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovp_r16_m() {
		testAssembler(c -> c.cmovp(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVP_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovp_r32_m() {
		testAssembler(c -> c.cmovp(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVP_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovpe_r16_r16() {
		testAssembler(c -> c.cmovpe(dx, bx), Instruction.create(Code.CMOVP_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovpe_r32_r32() {
		testAssembler(c -> c.cmovpe(edx, ebx), Instruction.create(Code.CMOVP_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovpe_r16_m() {
		testAssembler(c -> c.cmovpe(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVP_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovpe_r32_m() {
		testAssembler(c -> c.cmovpe(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVP_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovpo_r16_r16() {
		testAssembler(c -> c.cmovpo(dx, bx), Instruction.create(Code.CMOVNP_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovpo_r32_r32() {
		testAssembler(c -> c.cmovpo(edx, ebx), Instruction.create(Code.CMOVNP_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovpo_r16_m() {
		testAssembler(c -> c.cmovpo(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVNP_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovpo_r32_m() {
		testAssembler(c -> c.cmovpo(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVNP_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovs_r16_r16() {
		testAssembler(c -> c.cmovs(dx, bx), Instruction.create(Code.CMOVS_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovs_r32_r32() {
		testAssembler(c -> c.cmovs(edx, ebx), Instruction.create(Code.CMOVS_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovs_r16_m() {
		testAssembler(c -> c.cmovs(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVS_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovs_r32_m() {
		testAssembler(c -> c.cmovs(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVS_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovz_r16_r16() {
		testAssembler(c -> c.cmovz(dx, bx), Instruction.create(Code.CMOVE_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmovz_r32_r32() {
		testAssembler(c -> c.cmovz(edx, ebx), Instruction.create(Code.CMOVE_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmovz_r16_m() {
		testAssembler(c -> c.cmovz(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVE_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmovz_r32_m() {
		testAssembler(c -> c.cmovz(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMOVE_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmp_r8_r8() {
		testAssembler(c -> c.cmp(dl, bl), Instruction.create(Code.CMP_RM8_R8, ICRegisters.dl, ICRegisters.bl));
	}

	@Test
	void cmp_m_r8() {
		testAssembler(c -> c.cmp(byte_ptr(0x0L).base(ecx), bl), Instruction.create(Code.CMP_RM8_R8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bl));
	}

	@Test
	void cmp_r16_r16() {
		testAssembler(c -> c.cmp(dx, bx), Instruction.create(Code.CMP_RM16_R16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmp_m_r16() {
		testAssembler(c -> c.cmp(word_ptr(0x0L).base(ecx), bx), Instruction.create(Code.CMP_RM16_R16, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bx));
	}

	@Test
	void cmp_r32_r32() {
		testAssembler(c -> c.cmp(edx, ebx), Instruction.create(Code.CMP_RM32_R32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmp_m_r32() {
		testAssembler(c -> c.cmp(dword_ptr(0x0L).base(ecx), ebx), Instruction.create(Code.CMP_RM32_R32, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void cmp_r8_m() {
		testAssembler(c -> c.cmp(dl, byte_ptr(0x0L).base(ecx)), Instruction.create(Code.CMP_R8_RM8, ICRegisters.dl, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmp_r16_m() {
		testAssembler(c -> c.cmp(dx, word_ptr(0x0L).base(ecx)), Instruction.create(Code.CMP_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmp_r32_m() {
		testAssembler(c -> c.cmp(edx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMP_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cmp_r8_i() {
		{ /* if (dst.getRegister() == Register.AL) */
			testAssembler(c -> c.cmp(al, -5), Instruction.create(Code.CMP_AL_IMM8, ICRegisters.al, -5));
		} /* else */ testAssembler(c -> c.cmp(dl, -5), Instruction.create(Code.CMP_RM8_IMM8, ICRegisters.dl, -5));
	}

	@Test
	void cmp_r16_i() {
		{ /* if (dst.getRegister() == Register.AX) */
			testAssembler(c -> c.cmp(ax, 0x40B7), Instruction.create(Code.CMP_AX_IMM16, ICRegisters.ax, 0x40B7));
		} /* else */ { /* if (imm >= -0x80 && imm <= 0x7F) */
			testAssembler(c -> c.cmp(dx, -0x80), Instruction.create(Code.CMP_RM16_IMM8, ICRegisters.dx, -0x80));
			testAssembler(c -> c.cmp(dx, 0x7F), Instruction.create(Code.CMP_RM16_IMM8, ICRegisters.dx, 0x7F));
		} /* else */ testAssembler(c -> c.cmp(dx, 0x40B7), Instruction.create(Code.CMP_RM16_IMM16, ICRegisters.dx, 0x40B7));
	}

	@Test
	void cmp_r32_i() {
		{ /* if (dst.getRegister() == Register.EAX) */
			testAssembler(c -> c.cmp(eax, 0x7FFFFFFF), Instruction.create(Code.CMP_EAX_IMM32, ICRegisters.eax, 0x7FFFFFFF));
		} /* else */ { /* if (imm >= -0x80 && imm <= 0x7F) */
			testAssembler(c -> c.cmp(edx, -0x80), Instruction.create(Code.CMP_RM32_IMM8, ICRegisters.edx, -0x80));
			testAssembler(c -> c.cmp(edx, 0x7F), Instruction.create(Code.CMP_RM32_IMM8, ICRegisters.edx, 0x7F));
		} /* else */ testAssembler(c -> c.cmp(edx, 0x7FFFFFFF), Instruction.create(Code.CMP_RM32_IMM32, ICRegisters.edx, 0x7FFFFFFF));
	}

	@Test
	void cmp_m_i() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			{ /* if (imm >= -0x80 && imm <= 0x7F) */
				// Skipping CMP_RM64_IMM8 - Not supported by current bitness
				// Skipping CMP_RM64_IMM8 - Not supported by current bitness
			} /* else */ // Skipping CMP_RM64_IMM32 - Not supported by current bitness
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			{ /* if (imm >= -0x80 && imm <= 0x7F) */
				testAssembler(c -> c.cmp(dword_ptr(0x0L).base(edx), -0x80), Instruction.create(Code.CMP_RM32_IMM8, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80));
				testAssembler(c -> c.cmp(dword_ptr(0x0L).base(edx), 0x7F), Instruction.create(Code.CMP_RM32_IMM8, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7F));
			} /* else */ testAssembler(c -> c.cmp(dword_ptr(0x0L).base(edx), 0x7FFFFFFF), Instruction.create(Code.CMP_RM32_IMM32, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7FFFFFFF));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			{ /* if (imm >= -0x80 && imm <= 0x7F) */
				testAssembler(c -> c.cmp(word_ptr(0x0L).base(edx), -0x80), Instruction.create(Code.CMP_RM16_IMM8, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80));
				testAssembler(c -> c.cmp(word_ptr(0x0L).base(edx), 0x7F), Instruction.create(Code.CMP_RM16_IMM8, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7F));
			} /* else */ testAssembler(c -> c.cmp(word_ptr(0x0L).base(edx), 0x40B7), Instruction.create(Code.CMP_RM16_IMM16, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x40B7));
		} /* else */ { /* if (dst.size == MemoryOperandSize.BYTE) */
			testAssembler(c -> c.cmp(byte_ptr(0x0L).base(edx), -5), Instruction.create(Code.CMP_RM8_IMM8, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.cmp(zmmword_ptr(0x0L).base(edx), -5), Instruction.create(Code.CMP_RM8_IMM8, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
			});
		}
	}

	@Test
	void cmpeqpd_xmm_xmm() {
		testAssembler(c -> c.cmpeqpd(xmm2, xmm3), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 0));
	}

	@Test
	void cmpeqpd_xmm_m() {
		testAssembler(c -> c.cmpeqpd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void cmpeqps_xmm_xmm() {
		testAssembler(c -> c.cmpeqps(xmm2, xmm3), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 0));
	}

	@Test
	void cmpeqps_xmm_m() {
		testAssembler(c -> c.cmpeqps(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void cmpeqsd_xmm_xmm() {
		testAssembler(c -> c.cmpeqsd(xmm2, xmm3), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 0));
	}

	@Test
	void cmpeqsd_xmm_m() {
		testAssembler(c -> c.cmpeqsd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void cmpeqss_xmm_xmm() {
		testAssembler(c -> c.cmpeqss(xmm2, xmm3), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 0));
	}

	@Test
	void cmpeqss_xmm_m() {
		testAssembler(c -> c.cmpeqss(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0));
	}

	@Test
	void cmplepd_xmm_xmm() {
		testAssembler(c -> c.cmplepd(xmm2, xmm3), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 2));
	}

	@Test
	void cmplepd_xmm_m() {
		testAssembler(c -> c.cmplepd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void cmpleps_xmm_xmm() {
		testAssembler(c -> c.cmpleps(xmm2, xmm3), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 2));
	}

	@Test
	void cmpleps_xmm_m() {
		testAssembler(c -> c.cmpleps(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void cmplesd_xmm_xmm() {
		testAssembler(c -> c.cmplesd(xmm2, xmm3), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 2));
	}

	@Test
	void cmplesd_xmm_m() {
		testAssembler(c -> c.cmplesd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void cmpless_xmm_xmm() {
		testAssembler(c -> c.cmpless(xmm2, xmm3), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 2));
	}

	@Test
	void cmpless_xmm_m() {
		testAssembler(c -> c.cmpless(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 2));
	}

	@Test
	void cmpltpd_xmm_xmm() {
		testAssembler(c -> c.cmpltpd(xmm2, xmm3), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 1));
	}

	@Test
	void cmpltpd_xmm_m() {
		testAssembler(c -> c.cmpltpd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void cmpltps_xmm_xmm() {
		testAssembler(c -> c.cmpltps(xmm2, xmm3), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 1));
	}

	@Test
	void cmpltps_xmm_m() {
		testAssembler(c -> c.cmpltps(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void cmpltsd_xmm_xmm() {
		testAssembler(c -> c.cmpltsd(xmm2, xmm3), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 1));
	}

	@Test
	void cmpltsd_xmm_m() {
		testAssembler(c -> c.cmpltsd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void cmpltss_xmm_xmm() {
		testAssembler(c -> c.cmpltss(xmm2, xmm3), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 1));
	}

	@Test
	void cmpltss_xmm_m() {
		testAssembler(c -> c.cmpltss(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 1));
	}

	@Test
	void cmpneqpd_xmm_xmm() {
		testAssembler(c -> c.cmpneqpd(xmm2, xmm3), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 4));
	}

	@Test
	void cmpneqpd_xmm_m() {
		testAssembler(c -> c.cmpneqpd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void cmpneqps_xmm_xmm() {
		testAssembler(c -> c.cmpneqps(xmm2, xmm3), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 4));
	}

	@Test
	void cmpneqps_xmm_m() {
		testAssembler(c -> c.cmpneqps(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void cmpneqsd_xmm_xmm() {
		testAssembler(c -> c.cmpneqsd(xmm2, xmm3), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 4));
	}

	@Test
	void cmpneqsd_xmm_m() {
		testAssembler(c -> c.cmpneqsd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void cmpneqss_xmm_xmm() {
		testAssembler(c -> c.cmpneqss(xmm2, xmm3), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 4));
	}

	@Test
	void cmpneqss_xmm_m() {
		testAssembler(c -> c.cmpneqss(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 4));
	}

	@Test
	void cmpnlepd_xmm_xmm() {
		testAssembler(c -> c.cmpnlepd(xmm2, xmm3), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 6));
	}

	@Test
	void cmpnlepd_xmm_m() {
		testAssembler(c -> c.cmpnlepd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void cmpnleps_xmm_xmm() {
		testAssembler(c -> c.cmpnleps(xmm2, xmm3), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 6));
	}

	@Test
	void cmpnleps_xmm_m() {
		testAssembler(c -> c.cmpnleps(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void cmpnlesd_xmm_xmm() {
		testAssembler(c -> c.cmpnlesd(xmm2, xmm3), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 6));
	}

	@Test
	void cmpnlesd_xmm_m() {
		testAssembler(c -> c.cmpnlesd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void cmpnless_xmm_xmm() {
		testAssembler(c -> c.cmpnless(xmm2, xmm3), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 6));
	}

	@Test
	void cmpnless_xmm_m() {
		testAssembler(c -> c.cmpnless(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 6));
	}

	@Test
	void cmpnltpd_xmm_xmm() {
		testAssembler(c -> c.cmpnltpd(xmm2, xmm3), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 5));
	}

	@Test
	void cmpnltpd_xmm_m() {
		testAssembler(c -> c.cmpnltpd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void cmpnltps_xmm_xmm() {
		testAssembler(c -> c.cmpnltps(xmm2, xmm3), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 5));
	}

	@Test
	void cmpnltps_xmm_m() {
		testAssembler(c -> c.cmpnltps(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void cmpnltsd_xmm_xmm() {
		testAssembler(c -> c.cmpnltsd(xmm2, xmm3), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 5));
	}

	@Test
	void cmpnltsd_xmm_m() {
		testAssembler(c -> c.cmpnltsd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void cmpnltss_xmm_xmm() {
		testAssembler(c -> c.cmpnltss(xmm2, xmm3), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 5));
	}

	@Test
	void cmpnltss_xmm_m() {
		testAssembler(c -> c.cmpnltss(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 5));
	}

	@Test
	void cmpordpd_xmm_xmm() {
		testAssembler(c -> c.cmpordpd(xmm2, xmm3), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 7));
	}

	@Test
	void cmpordpd_xmm_m() {
		testAssembler(c -> c.cmpordpd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

	@Test
	void cmpordps_xmm_xmm() {
		testAssembler(c -> c.cmpordps(xmm2, xmm3), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 7));
	}

	@Test
	void cmpordps_xmm_m() {
		testAssembler(c -> c.cmpordps(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

	@Test
	void cmpordsd_xmm_xmm() {
		testAssembler(c -> c.cmpordsd(xmm2, xmm3), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 7));
	}

	@Test
	void cmpordsd_xmm_m() {
		testAssembler(c -> c.cmpordsd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

	@Test
	void cmpordss_xmm_xmm() {
		testAssembler(c -> c.cmpordss(xmm2, xmm3), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 7));
	}

	@Test
	void cmpordss_xmm_m() {
		testAssembler(c -> c.cmpordss(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 7));
	}

	@Test
	void cmppd_xmm_xmm_i() {
		testAssembler(c -> c.cmppd(xmm2, xmm3, -5), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void cmppd_xmm_m_i() {
		testAssembler(c -> c.cmppd(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void cmpps_xmm_xmm_i() {
		testAssembler(c -> c.cmpps(xmm2, xmm3, -5), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void cmpps_xmm_m_i() {
		testAssembler(c -> c.cmpps(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void cmpsb() {
		testAssembler(c -> c.cmpsb(), Instruction.createCmpsb(32));
	}

	@Test
	void cmpsd() {
		testAssembler(c -> c.cmpsd(), Instruction.createCmpsd(32));
	}

	@Test
	void cmpsd_xmm_xmm_i() {
		testAssembler(c -> c.cmpsd(xmm2, xmm3, -5), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void cmpsd_xmm_m_i() {
		testAssembler(c -> c.cmpsd(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void cmpss_xmm_xmm_i() {
		testAssembler(c -> c.cmpss(xmm2, xmm3, -5), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void cmpss_xmm_m_i() {
		testAssembler(c -> c.cmpss(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void cmpsw() {
		testAssembler(c -> c.cmpsw(), Instruction.createCmpsw(32));
	}

	@Test
	void cmpunordpd_xmm_xmm() {
		testAssembler(c -> c.cmpunordpd(xmm2, xmm3), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 3));
	}

	@Test
	void cmpunordpd_xmm_m() {
		testAssembler(c -> c.cmpunordpd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPPD_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void cmpunordps_xmm_xmm() {
		testAssembler(c -> c.cmpunordps(xmm2, xmm3), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 3));
	}

	@Test
	void cmpunordps_xmm_m() {
		testAssembler(c -> c.cmpunordps(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPPS_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void cmpunordsd_xmm_xmm() {
		testAssembler(c -> c.cmpunordsd(xmm2, xmm3), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 3));
	}

	@Test
	void cmpunordsd_xmm_m() {
		testAssembler(c -> c.cmpunordsd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPSD_XMM_XMMM64_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void cmpunordss_xmm_xmm() {
		testAssembler(c -> c.cmpunordss(xmm2, xmm3), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, 3));
	}

	@Test
	void cmpunordss_xmm_m() {
		testAssembler(c -> c.cmpunordss(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPSS_XMM_XMMM32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 3));
	}

	@Test
	void cmpxchg_r8_r8() {
		testAssembler(c -> c.cmpxchg(dl, bl), Instruction.create(Code.CMPXCHG_RM8_R8, ICRegisters.dl, ICRegisters.bl));
	}

	@Test
	void cmpxchg_m_r8() {
		testAssembler(c -> c.cmpxchg(byte_ptr(0x0L).base(ecx), bl), Instruction.create(Code.CMPXCHG_RM8_R8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bl));
	}

	@Test
	void cmpxchg_r16_r16() {
		testAssembler(c -> c.cmpxchg(dx, bx), Instruction.create(Code.CMPXCHG_RM16_R16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void cmpxchg_m_r16() {
		testAssembler(c -> c.cmpxchg(word_ptr(0x0L).base(ecx), bx), Instruction.create(Code.CMPXCHG_RM16_R16, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bx));
	}

	@Test
	void cmpxchg_r32_r32() {
		testAssembler(c -> c.cmpxchg(edx, ebx), Instruction.create(Code.CMPXCHG_RM32_R32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void cmpxchg_m_r32() {
		testAssembler(c -> c.cmpxchg(dword_ptr(0x0L).base(ecx), ebx), Instruction.create(Code.CMPXCHG_RM32_R32, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void cmpxchg8b_m() {
		testAssembler(c -> c.cmpxchg8b(mem_ptr(0x0L).base(ecx)), Instruction.create(Code.CMPXCHG8B_M64, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void comisd_xmm_xmm() {
		testAssembler(c -> c.comisd(xmm2, xmm3), Instruction.create(Code.COMISD_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void comisd_xmm_m() {
		testAssembler(c -> c.comisd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.COMISD_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void comiss_xmm_xmm() {
		testAssembler(c -> c.comiss(xmm2, xmm3), Instruction.create(Code.COMISS_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void comiss_xmm_m() {
		testAssembler(c -> c.comiss(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.COMISS_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cpu_read() {
		testAssembler(c -> c.cpu_read(), Instruction.create(Code.CPU_READ), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void cpu_write() {
		testAssembler(c -> c.cpu_write(), Instruction.create(Code.CPU_WRITE), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.CYRIX);
	}

	@Test
	void cpuid() {
		testAssembler(c -> c.cpuid(), Instruction.create(Code.CPUID));
	}

	@Test
	void crc32_r32_r8() {
		testAssembler(c -> c.crc32(edx, bl), Instruction.create(Code.CRC32_R32_RM8, ICRegisters.edx, ICRegisters.bl));
	}

	@Test
	void crc32_r32_r16() {
		testAssembler(c -> c.crc32(edx, bx), Instruction.create(Code.CRC32_R32_RM16, ICRegisters.edx, ICRegisters.bx));
	}

	@Test
	void crc32_r32_r32() {
		testAssembler(c -> c.crc32(edx, ebx), Instruction.create(Code.CRC32_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void crc32_r32_m() {
		{ /* if (src.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.crc32(edx, dword_ptr(0x0L).base(edx)), Instruction.create(Code.CRC32_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (src.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.crc32(edx, word_ptr(0x0L).base(edx)), Instruction.create(Code.CRC32_R32_RM16, ICRegisters.edx, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (src.size == MemoryOperandSize.BYTE) */
			testAssembler(c -> c.crc32(edx, byte_ptr(0x0L).base(edx)), Instruction.create(Code.CRC32_R32_RM8, ICRegisters.edx, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.crc32(edx, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.CRC32_R32_RM8, ICRegisters.edx, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void cvtdq2pd_xmm_xmm() {
		testAssembler(c -> c.cvtdq2pd(xmm2, xmm3), Instruction.create(Code.CVTDQ2PD_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void cvtdq2pd_xmm_m() {
		testAssembler(c -> c.cvtdq2pd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTDQ2PD_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvtdq2ps_xmm_xmm() {
		testAssembler(c -> c.cvtdq2ps(xmm2, xmm3), Instruction.create(Code.CVTDQ2PS_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void cvtdq2ps_xmm_m() {
		testAssembler(c -> c.cvtdq2ps(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTDQ2PS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvtpd2dq_xmm_xmm() {
		testAssembler(c -> c.cvtpd2dq(xmm2, xmm3), Instruction.create(Code.CVTPD2DQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void cvtpd2dq_xmm_m() {
		testAssembler(c -> c.cvtpd2dq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTPD2DQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvtpd2pi_mm_xmm() {
		testAssembler(c -> c.cvtpd2pi(mm2, xmm3), Instruction.create(Code.CVTPD2PI_MM_XMMM128, ICRegisters.mm2, ICRegisters.xmm3));
	}

	@Test
	void cvtpd2pi_mm_m() {
		testAssembler(c -> c.cvtpd2pi(mm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTPD2PI_MM_XMMM128, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvtpd2ps_xmm_xmm() {
		testAssembler(c -> c.cvtpd2ps(xmm2, xmm3), Instruction.create(Code.CVTPD2PS_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void cvtpd2ps_xmm_m() {
		testAssembler(c -> c.cvtpd2ps(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTPD2PS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvtpi2pd_xmm_mm() {
		testAssembler(c -> c.cvtpi2pd(xmm2, mm3), Instruction.create(Code.CVTPI2PD_XMM_MMM64, ICRegisters.xmm2, ICRegisters.mm3));
	}

	@Test
	void cvtpi2pd_xmm_m() {
		testAssembler(c -> c.cvtpi2pd(xmm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTPI2PD_XMM_MMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvtpi2ps_xmm_mm() {
		testAssembler(c -> c.cvtpi2ps(xmm2, mm3), Instruction.create(Code.CVTPI2PS_XMM_MMM64, ICRegisters.xmm2, ICRegisters.mm3));
	}

	@Test
	void cvtpi2ps_xmm_m() {
		testAssembler(c -> c.cvtpi2ps(xmm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTPI2PS_XMM_MMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvtps2dq_xmm_xmm() {
		testAssembler(c -> c.cvtps2dq(xmm2, xmm3), Instruction.create(Code.CVTPS2DQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void cvtps2dq_xmm_m() {
		testAssembler(c -> c.cvtps2dq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTPS2DQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvtps2pd_xmm_xmm() {
		testAssembler(c -> c.cvtps2pd(xmm2, xmm3), Instruction.create(Code.CVTPS2PD_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void cvtps2pd_xmm_m() {
		testAssembler(c -> c.cvtps2pd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTPS2PD_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvtps2pi_mm_xmm() {
		testAssembler(c -> c.cvtps2pi(mm2, xmm3), Instruction.create(Code.CVTPS2PI_MM_XMMM64, ICRegisters.mm2, ICRegisters.xmm3));
	}

	@Test
	void cvtps2pi_mm_m() {
		testAssembler(c -> c.cvtps2pi(mm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTPS2PI_MM_XMMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvtsd2si_r32_xmm() {
		testAssembler(c -> c.cvtsd2si(edx, xmm3), Instruction.create(Code.CVTSD2SI_R32_XMMM64, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void cvtsd2si_r32_m() {
		testAssembler(c -> c.cvtsd2si(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTSD2SI_R32_XMMM64, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvtsd2ss_xmm_xmm() {
		testAssembler(c -> c.cvtsd2ss(xmm2, xmm3), Instruction.create(Code.CVTSD2SS_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void cvtsd2ss_xmm_m() {
		testAssembler(c -> c.cvtsd2ss(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTSD2SS_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvtsi2sd_xmm_r32() {
		testAssembler(c -> c.cvtsi2sd(xmm2, ebx), Instruction.create(Code.CVTSI2SD_XMM_RM32, ICRegisters.xmm2, ICRegisters.ebx));
	}

	@Test
	void cvtsi2sd_xmm_m() {
		{ /* if (src.size == MemoryOperandSize.QWORD) */
			// Skipping CVTSI2SD_XMM_RM64 - Not supported by current bitness
		} /* else */ { /* if (src.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.cvtsi2sd(xmm2, dword_ptr(0x0L).base(edx)), Instruction.create(Code.CVTSI2SD_XMM_RM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.cvtsi2sd(xmm2, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.CVTSI2SD_XMM_RM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void cvtsi2ss_xmm_r32() {
		testAssembler(c -> c.cvtsi2ss(xmm2, ebx), Instruction.create(Code.CVTSI2SS_XMM_RM32, ICRegisters.xmm2, ICRegisters.ebx));
	}

	@Test
	void cvtsi2ss_xmm_m() {
		{ /* if (src.size == MemoryOperandSize.QWORD) */
			// Skipping CVTSI2SS_XMM_RM64 - Not supported by current bitness
		} /* else */ { /* if (src.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.cvtsi2ss(xmm2, dword_ptr(0x0L).base(edx)), Instruction.create(Code.CVTSI2SS_XMM_RM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.cvtsi2ss(xmm2, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.CVTSI2SS_XMM_RM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void cvtss2sd_xmm_xmm() {
		testAssembler(c -> c.cvtss2sd(xmm2, xmm3), Instruction.create(Code.CVTSS2SD_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void cvtss2sd_xmm_m() {
		testAssembler(c -> c.cvtss2sd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTSS2SD_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvtss2si_r32_xmm() {
		testAssembler(c -> c.cvtss2si(edx, xmm3), Instruction.create(Code.CVTSS2SI_R32_XMMM32, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void cvtss2si_r32_m() {
		testAssembler(c -> c.cvtss2si(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTSS2SI_R32_XMMM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvttpd2dq_xmm_xmm() {
		testAssembler(c -> c.cvttpd2dq(xmm2, xmm3), Instruction.create(Code.CVTTPD2DQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void cvttpd2dq_xmm_m() {
		testAssembler(c -> c.cvttpd2dq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTTPD2DQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvttpd2pi_mm_xmm() {
		testAssembler(c -> c.cvttpd2pi(mm2, xmm3), Instruction.create(Code.CVTTPD2PI_MM_XMMM128, ICRegisters.mm2, ICRegisters.xmm3));
	}

	@Test
	void cvttpd2pi_mm_m() {
		testAssembler(c -> c.cvttpd2pi(mm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTTPD2PI_MM_XMMM128, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvttps2dq_xmm_xmm() {
		testAssembler(c -> c.cvttps2dq(xmm2, xmm3), Instruction.create(Code.CVTTPS2DQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void cvttps2dq_xmm_m() {
		testAssembler(c -> c.cvttps2dq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTTPS2DQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvttps2pi_mm_xmm() {
		testAssembler(c -> c.cvttps2pi(mm2, xmm3), Instruction.create(Code.CVTTPS2PI_MM_XMMM64, ICRegisters.mm2, ICRegisters.xmm3));
	}

	@Test
	void cvttps2pi_mm_m() {
		testAssembler(c -> c.cvttps2pi(mm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTTPS2PI_MM_XMMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvttsd2si_r32_xmm() {
		testAssembler(c -> c.cvttsd2si(edx, xmm3), Instruction.create(Code.CVTTSD2SI_R32_XMMM64, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void cvttsd2si_r32_m() {
		testAssembler(c -> c.cvttsd2si(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTTSD2SI_R32_XMMM64, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cvttss2si_r32_xmm() {
		testAssembler(c -> c.cvttss2si(edx, xmm3), Instruction.create(Code.CVTTSS2SI_R32_XMMM32, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void cvttss2si_r32_m() {
		testAssembler(c -> c.cvttss2si(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.CVTTSS2SI_R32_XMMM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void cwd() {
		testAssembler(c -> c.cwd(), Instruction.create(Code.CWD));
	}

	@Test
	void cwde() {
		testAssembler(c -> c.cwde(), Instruction.create(Code.CWDE));
	}

	@Test
	void vcmppd_kr_xmm_xmm_i() {
		testAssembler(c -> c.vcmppd(k2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vcmppd_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vcmppd(xmm2, xmm3, xmm4, -5), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vcmppd_kr_ymm_ymm_i() {
		testAssembler(c -> c.vcmppd(k2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vcmppd_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vcmppd(ymm2, ymm3, ymm4, -5), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5));
	}

	@Test
	void vcmppd_kr_zmm_zmm_i() {
		testAssembler(c -> c.vcmppd(k2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vcmppd_kr_xmm_m_i() {
		testAssembler(c -> c.vcmppd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_XMM_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vcmppd_xmm_xmm_m_i() {
		testAssembler(c -> c.vcmppd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VCMPPD_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vcmppd_kr_ymm_m_i() {
		testAssembler(c -> c.vcmppd(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_YMM_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vcmppd_ymm_ymm_m_i() {
		testAssembler(c -> c.vcmppd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VCMPPD_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vcmppd_kr_zmm_m_i() {
		testAssembler(c -> c.vcmppd(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VCMPPD_KR_K1_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vcmpph_kr_xmm_xmm_i() {
		testAssembler(c -> c.vcmpph(k2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vcmpph_kr_ymm_ymm_i() {
		testAssembler(c -> c.vcmpph(k2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vcmpph_kr_zmm_zmm_i() {
		testAssembler(c -> c.vcmpph(k2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vcmpph_kr_xmm_m_i() {
		testAssembler(c -> c.vcmpph(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_XMM_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vcmpph_kr_ymm_m_i() {
		testAssembler(c -> c.vcmpph(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_YMM_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vcmpph_kr_zmm_m_i() {
		testAssembler(c -> c.vcmpph(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VCMPPH_KR_K1_ZMM_ZMMM512B16_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vcmpps_kr_xmm_xmm_i() {
		testAssembler(c -> c.vcmpps(k2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vcmpps_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vcmpps(xmm2, xmm3, xmm4, -5), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vcmpps_kr_ymm_ymm_i() {
		testAssembler(c -> c.vcmpps(k2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vcmpps_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vcmpps(ymm2, ymm3, ymm4, -5), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5));
	}

	@Test
	void vcmpps_kr_zmm_zmm_i() {
		testAssembler(c -> c.vcmpps(k2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vcmpps_kr_xmm_m_i() {
		testAssembler(c -> c.vcmpps(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_XMM_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vcmpps_xmm_xmm_m_i() {
		testAssembler(c -> c.vcmpps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VCMPPS_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vcmpps_kr_ymm_m_i() {
		testAssembler(c -> c.vcmpps(k2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_YMM_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vcmpps_ymm_ymm_m_i() {
		testAssembler(c -> c.vcmpps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VCMPPS_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vcmpps_kr_zmm_m_i() {
		testAssembler(c -> c.vcmpps(k2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VCMPPS_KR_K1_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.k2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vcmpsd_kr_xmm_xmm_i() {
		testAssembler(c -> c.vcmpsd(k2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vcmpsd_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vcmpsd(xmm2, xmm3, xmm4, -5), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vcmpsd_kr_xmm_m_i() {
		testAssembler(c -> c.vcmpsd(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VCMPSD_KR_K1_XMM_XMMM64_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vcmpsd_xmm_xmm_m_i() {
		testAssembler(c -> c.vcmpsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VCMPSD_XMM_XMM_XMMM64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vcmpsh_kr_xmm_xmm_i() {
		testAssembler(c -> c.vcmpsh(k2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vcmpsh_kr_xmm_m_i() {
		testAssembler(c -> c.vcmpsh(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VCMPSH_KR_K1_XMM_XMMM16_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vcmpss_kr_xmm_xmm_i() {
		testAssembler(c -> c.vcmpss(k2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vcmpss_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vcmpss(xmm2, xmm3, xmm4, -5), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vcmpss_kr_xmm_m_i() {
		testAssembler(c -> c.vcmpss(k2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx), -5), applyK(Instruction.create(Code.EVEX_VCMPSS_KR_K1_XMM_XMMM32_IMM8_SAE, ICRegisters.k2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vcmpss_xmm_xmm_m_i() {
		testAssembler(c -> c.vcmpss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VCMPSS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vcomisd_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcomisd(xmm2, xmm3), Instruction.create(Code.VEX_VCOMISD_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcomisd(xmm2, xmm3), Instruction.create(Code.EVEX_VCOMISD_XMM_XMMM64_SAE, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcomisd_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcomisd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCOMISD_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcomisd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VCOMISD_XMM_XMMM64_SAE, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcomish_xmm_xmm() {
		testAssembler(c -> c.vcomish(xmm2, xmm3), Instruction.create(Code.EVEX_VCOMISH_XMM_XMMM16_SAE, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vcomish_xmm_m() {
		testAssembler(c -> c.vcomish(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VCOMISH_XMM_XMMM16_SAE, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vcomiss_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcomiss(xmm2, xmm3), Instruction.create(Code.VEX_VCOMISS_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcomiss(xmm2, xmm3), Instruction.create(Code.EVEX_VCOMISS_XMM_XMMM32_SAE, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcomiss_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcomiss(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCOMISS_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcomiss(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VCOMISS_XMM_XMMM32_SAE, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcompresspd_xmm_xmm() {
		testAssembler(c -> c.vcompresspd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCOMPRESSPD_XMMM128_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcompresspd_m_xmm() {
		testAssembler(c -> c.vcompresspd(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCOMPRESSPD_XMMM128_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcompresspd_ymm_ymm() {
		testAssembler(c -> c.vcompresspd(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCOMPRESSPD_YMMM256_K1Z_YMM, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcompresspd_m_ymm() {
		testAssembler(c -> c.vcompresspd(ymmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCOMPRESSPD_YMMM256_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcompresspd_zmm_zmm() {
		testAssembler(c -> c.vcompresspd(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCOMPRESSPD_ZMMM512_K1Z_ZMM, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcompresspd_m_zmm() {
		testAssembler(c -> c.vcompresspd(zmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCOMPRESSPD_ZMMM512_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcompressps_xmm_xmm() {
		testAssembler(c -> c.vcompressps(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCOMPRESSPS_XMMM128_K1Z_XMM, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcompressps_m_xmm() {
		testAssembler(c -> c.vcompressps(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCOMPRESSPS_XMMM128_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcompressps_ymm_ymm() {
		testAssembler(c -> c.vcompressps(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCOMPRESSPS_YMMM256_K1Z_YMM, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcompressps_m_ymm() {
		testAssembler(c -> c.vcompressps(ymmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCOMPRESSPS_YMMM256_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcompressps_zmm_zmm() {
		testAssembler(c -> c.vcompressps(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCOMPRESSPS_ZMMM512_K1Z_ZMM, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcompressps_m_zmm() {
		testAssembler(c -> c.vcompressps(zmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCOMPRESSPS_ZMMM512_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtdq2pd_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtdq2pd(xmm2, xmm3), Instruction.create(Code.VEX_VCVTDQ2PD_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtdq2pd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTDQ2PD_XMM_K1Z_XMMM64B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtdq2pd_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtdq2pd(ymm2, xmm3), Instruction.create(Code.VEX_VCVTDQ2PD_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtdq2pd(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTDQ2PD_YMM_K1Z_XMMM128B32, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtdq2pd_zmm_ymm() {
		testAssembler(c -> c.vcvtdq2pd(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTDQ2PD_ZMM_K1Z_YMMM256B32_ER, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtdq2pd_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtdq2pd(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTDQ2PD_XMM_K1Z_XMMM64B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtdq2pd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTDQ2PD_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtdq2pd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTDQ2PD_XMM_K1Z_XMMM64B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtdq2pd_ymm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtdq2pd(ymm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTDQ2PD_YMM_K1Z_XMMM128B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtdq2pd(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTDQ2PD_YMM_XMMM128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtdq2pd(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTDQ2PD_YMM_K1Z_XMMM128B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtdq2pd_zmm_m() {
		testAssembler(c -> c.vcvtdq2pd(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTDQ2PD_ZMM_K1Z_YMMM256B32_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtdq2ph_xmm_xmm() {
		testAssembler(c -> c.vcvtdq2ph(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTDQ2PH_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtdq2ph_xmm_ymm() {
		testAssembler(c -> c.vcvtdq2ph(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTDQ2PH_XMM_K1Z_YMMM256B32, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtdq2ph_ymm_zmm() {
		testAssembler(c -> c.vcvtdq2ph(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTDQ2PH_YMM_K1Z_ZMMM512B32_ER, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtdq2ph_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtdq2ph(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTDQ2PH_XMM_K1Z_YMMM256B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (src.size == MemoryOperandSize.YWORD) */
			testAssembler(c -> c.vcvtdq2ph(xmm2.k1(), ymmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTDQ2PH_XMM_K1Z_YMMM256B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		} /* else */ { /* if (src.size == MemoryOperandSize.XWORD) */
			testAssembler(c -> c.vcvtdq2ph(xmm2.k1(), xmmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTDQ2PH_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vcvtdq2ph(xmm2.k1(), byte_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTDQ2PH_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
			});
		}
	}

	@Test
	void vcvtdq2ph_ymm_m() {
		testAssembler(c -> c.vcvtdq2ph(ymm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTDQ2PH_YMM_K1Z_ZMMM512B32_ER, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtdq2phx_xmm_m() {
		testAssembler(c -> c.vcvtdq2phx(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTDQ2PH_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtdq2phy_xmm_m() {
		testAssembler(c -> c.vcvtdq2phy(xmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTDQ2PH_XMM_K1Z_YMMM256B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtdq2ps_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtdq2ps(xmm2, xmm3), Instruction.create(Code.VEX_VCVTDQ2PS_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtdq2ps(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTDQ2PS_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtdq2ps_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtdq2ps(ymm2, ymm3), Instruction.create(Code.VEX_VCVTDQ2PS_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtdq2ps(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTDQ2PS_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtdq2ps_zmm_zmm() {
		testAssembler(c -> c.vcvtdq2ps(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTDQ2PS_ZMM_K1Z_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtdq2ps_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtdq2ps(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTDQ2PS_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtdq2ps(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTDQ2PS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtdq2ps(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTDQ2PS_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtdq2ps_ymm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtdq2ps(ymm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTDQ2PS_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtdq2ps(ymm2, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTDQ2PS_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtdq2ps(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTDQ2PS_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtdq2ps_zmm_m() {
		testAssembler(c -> c.vcvtdq2ps(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTDQ2PS_ZMM_K1Z_ZMMM512B32_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtne2ps2bf16_xmm_xmm_xmm() {
		testAssembler(c -> c.vcvtne2ps2bf16(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCVTNE2PS2BF16_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vcvtne2ps2bf16_ymm_ymm_ymm() {
		testAssembler(c -> c.vcvtne2ps2bf16(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VCVTNE2PS2BF16_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vcvtne2ps2bf16_zmm_zmm_zmm() {
		testAssembler(c -> c.vcvtne2ps2bf16(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VCVTNE2PS2BF16_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vcvtne2ps2bf16_xmm_xmm_m() {
		testAssembler(c -> c.vcvtne2ps2bf16(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTNE2PS2BF16_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtne2ps2bf16_ymm_ymm_m() {
		testAssembler(c -> c.vcvtne2ps2bf16(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTNE2PS2BF16_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtne2ps2bf16_zmm_zmm_m() {
		testAssembler(c -> c.vcvtne2ps2bf16(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTNE2PS2BF16_ZMM_K1Z_ZMM_ZMMM512B32, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtneebf162ps_xmm_m() {
		testAssembler(c -> c.vcvtneebf162ps(xmm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTNEEBF162PS_XMM_M128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vcvtneebf162ps_ymm_m() {
		testAssembler(c -> c.vcvtneebf162ps(ymm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTNEEBF162PS_YMM_M256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vcvtneeph2ps_xmm_m() {
		testAssembler(c -> c.vcvtneeph2ps(xmm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTNEEPH2PS_XMM_M128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vcvtneeph2ps_ymm_m() {
		testAssembler(c -> c.vcvtneeph2ps(ymm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTNEEPH2PS_YMM_M256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vcvtneobf162ps_xmm_m() {
		testAssembler(c -> c.vcvtneobf162ps(xmm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTNEOBF162PS_XMM_M128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vcvtneobf162ps_ymm_m() {
		testAssembler(c -> c.vcvtneobf162ps(ymm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTNEOBF162PS_YMM_M256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vcvtneoph2ps_xmm_m() {
		testAssembler(c -> c.vcvtneoph2ps(xmm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTNEOPH2PS_XMM_M128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vcvtneoph2ps_ymm_m() {
		testAssembler(c -> c.vcvtneoph2ps(ymm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTNEOPH2PS_YMM_M256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vcvtneps2bf16_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtneps2bf16(xmm2, xmm3), Instruction.create(Code.VEX_VCVTNEPS2BF16_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtneps2bf16(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTNEPS2BF16_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtneps2bf16_xmm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtneps2bf16(xmm2, ymm3), Instruction.create(Code.VEX_VCVTNEPS2BF16_XMM_YMMM256, ICRegisters.xmm2, ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtneps2bf16(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTNEPS2BF16_XMM_K1Z_YMMM256B32, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtneps2bf16_ymm_zmm() {
		testAssembler(c -> c.vcvtneps2bf16(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTNEPS2BF16_YMM_K1Z_ZMMM512B32, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtneps2bf16_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtneps2bf16(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTNEPS2BF16_XMM_K1Z_YMMM256B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (src.size == MemoryOperandSize.YWORD) */
			{ /* if (getInstructionPreferVex()) */
				testAssembler(c -> c.vcvtneps2bf16(xmm2, ymmword_ptr(0x0L).base(edx)), Instruction.create(Code.VEX_VCVTNEPS2BF16_XMM_YMMM256, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
			} /* else */ testAssembler(c -> c.vcvtneps2bf16(xmm2.k1(), ymmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTNEPS2BF16_XMM_K1Z_YMMM256B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
		} /* else */ { /* if (src.size == MemoryOperandSize.XWORD) */
			{ /* if (getInstructionPreferVex()) */
				testAssembler(c -> c.vcvtneps2bf16(xmm2, xmmword_ptr(0x0L).base(edx)), Instruction.create(Code.VEX_VCVTNEPS2BF16_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
			} /* else */ testAssembler(c -> c.vcvtneps2bf16(xmm2.k1(), xmmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTNEPS2BF16_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
		}
		{
			assertInvalid(() -> {
				{ /* if (getInstructionPreferVex()) */
					testAssembler(c -> c.vcvtneps2bf16(xmm2, byte_ptr(0x0L).base(edx)), Instruction.create(Code.VEX_VCVTNEPS2BF16_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
				} /* else */ testAssembler(c -> c.vcvtneps2bf16(xmm2.k1(), byte_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTNEPS2BF16_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
			});
		}
	}

	@Test
	void vcvtneps2bf16_ymm_m() {
		testAssembler(c -> c.vcvtneps2bf16(ymm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTNEPS2BF16_YMM_K1Z_ZMMM512B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtneps2bf16x_xmm_m() {
		testAssembler(c -> c.vcvtneps2bf16x(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTNEPS2BF16_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtneps2bf16y_xmm_m() {
		testAssembler(c -> c.vcvtneps2bf16y(xmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTNEPS2BF16_XMM_K1Z_YMMM256B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2dq_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtpd2dq(xmm2, xmm3), Instruction.create(Code.VEX_VCVTPD2DQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtpd2dq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPD2DQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtpd2dq_xmm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtpd2dq(xmm2, ymm3), Instruction.create(Code.VEX_VCVTPD2DQ_XMM_YMMM256, ICRegisters.xmm2, ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtpd2dq(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPD2DQ_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtpd2dq_ymm_zmm() {
		testAssembler(c -> c.vcvtpd2dq(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTPD2DQ_YMM_K1Z_ZMMM512B64_ER, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtpd2dq_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtpd2dq(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPD2DQ_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (src.size == MemoryOperandSize.YWORD) */
			{ /* if (getInstructionPreferVex()) */
				testAssembler(c -> c.vcvtpd2dq(xmm2, ymmword_ptr(0x0L).base(edx)), Instruction.create(Code.VEX_VCVTPD2DQ_XMM_YMMM256, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
			} /* else */ testAssembler(c -> c.vcvtpd2dq(xmm2.k1(), ymmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPD2DQ_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
		} /* else */ { /* if (src.size == MemoryOperandSize.XWORD) */
			{ /* if (getInstructionPreferVex()) */
				testAssembler(c -> c.vcvtpd2dq(xmm2, xmmword_ptr(0x0L).base(edx)), Instruction.create(Code.VEX_VCVTPD2DQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
			} /* else */ testAssembler(c -> c.vcvtpd2dq(xmm2.k1(), xmmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPD2DQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
		}
		{
			assertInvalid(() -> {
				{ /* if (getInstructionPreferVex()) */
					testAssembler(c -> c.vcvtpd2dq(xmm2, byte_ptr(0x0L).base(edx)), Instruction.create(Code.VEX_VCVTPD2DQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
				} /* else */ testAssembler(c -> c.vcvtpd2dq(xmm2.k1(), byte_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPD2DQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
			});
		}
	}

	@Test
	void vcvtpd2dq_ymm_m() {
		testAssembler(c -> c.vcvtpd2dq(ymm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2DQ_YMM_K1Z_ZMMM512B64_ER, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2dqx_xmm_m() {
		testAssembler(c -> c.vcvtpd2dqx(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2DQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2dqy_xmm_m() {
		testAssembler(c -> c.vcvtpd2dqy(xmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2DQ_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2ph_xmm_xmm() {
		testAssembler(c -> c.vcvtpd2ph(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPD2PH_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtpd2ph_xmm_ymm() {
		testAssembler(c -> c.vcvtpd2ph(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPD2PH_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtpd2ph_xmm_zmm() {
		testAssembler(c -> c.vcvtpd2ph(xmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTPD2PH_XMM_K1Z_ZMMM512B64_ER, ICRegisters.xmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtpd2ph_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtpd2ph(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPD2PH_XMM_K1Z_ZMMM512B64_ER, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (src.size == MemoryOperandSize.ZWORD) */
			testAssembler(c -> c.vcvtpd2ph(xmm2.k1(), zmmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPD2PH_XMM_K1Z_ZMMM512B64_ER, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		} /* else */ { /* if (src.size == MemoryOperandSize.YWORD) */
			testAssembler(c -> c.vcvtpd2ph(xmm2.k1(), ymmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPD2PH_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		} /* else */ { /* if (src.size == MemoryOperandSize.XWORD) */
			testAssembler(c -> c.vcvtpd2ph(xmm2.k1(), xmmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPD2PH_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vcvtpd2ph(xmm2.k1(), byte_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPD2PH_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
			});
		}
	}

	@Test
	void vcvtpd2phx_xmm_m() {
		testAssembler(c -> c.vcvtpd2phx(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2PH_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2phy_xmm_m() {
		testAssembler(c -> c.vcvtpd2phy(xmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2PH_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2phz_xmm_m() {
		testAssembler(c -> c.vcvtpd2phz(xmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2PH_XMM_K1Z_ZMMM512B64_ER, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2ps_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtpd2ps(xmm2, xmm3), Instruction.create(Code.VEX_VCVTPD2PS_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtpd2ps(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPD2PS_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtpd2ps_xmm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtpd2ps(xmm2, ymm3), Instruction.create(Code.VEX_VCVTPD2PS_XMM_YMMM256, ICRegisters.xmm2, ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtpd2ps(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPD2PS_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtpd2ps_ymm_zmm() {
		testAssembler(c -> c.vcvtpd2ps(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTPD2PS_YMM_K1Z_ZMMM512B64_ER, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtpd2ps_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtpd2ps(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPD2PS_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (src.size == MemoryOperandSize.YWORD) */
			{ /* if (getInstructionPreferVex()) */
				testAssembler(c -> c.vcvtpd2ps(xmm2, ymmword_ptr(0x0L).base(edx)), Instruction.create(Code.VEX_VCVTPD2PS_XMM_YMMM256, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
			} /* else */ testAssembler(c -> c.vcvtpd2ps(xmm2.k1(), ymmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPD2PS_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
		} /* else */ { /* if (src.size == MemoryOperandSize.XWORD) */
			{ /* if (getInstructionPreferVex()) */
				testAssembler(c -> c.vcvtpd2ps(xmm2, xmmword_ptr(0x0L).base(edx)), Instruction.create(Code.VEX_VCVTPD2PS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
			} /* else */ testAssembler(c -> c.vcvtpd2ps(xmm2.k1(), xmmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPD2PS_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
		}
		{
			assertInvalid(() -> {
				{ /* if (getInstructionPreferVex()) */
					testAssembler(c -> c.vcvtpd2ps(xmm2, byte_ptr(0x0L).base(edx)), Instruction.create(Code.VEX_VCVTPD2PS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
				} /* else */ testAssembler(c -> c.vcvtpd2ps(xmm2.k1(), byte_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPD2PS_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
			});
		}
	}

	@Test
	void vcvtpd2ps_ymm_m() {
		testAssembler(c -> c.vcvtpd2ps(ymm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2PS_YMM_K1Z_ZMMM512B64_ER, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2psx_xmm_m() {
		testAssembler(c -> c.vcvtpd2psx(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2PS_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2psy_xmm_m() {
		testAssembler(c -> c.vcvtpd2psy(xmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2PS_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2qq_xmm_xmm() {
		testAssembler(c -> c.vcvtpd2qq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPD2QQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtpd2qq_ymm_ymm() {
		testAssembler(c -> c.vcvtpd2qq(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPD2QQ_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtpd2qq_zmm_zmm() {
		testAssembler(c -> c.vcvtpd2qq(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTPD2QQ_ZMM_K1Z_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtpd2qq_xmm_m() {
		testAssembler(c -> c.vcvtpd2qq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2QQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2qq_ymm_m() {
		testAssembler(c -> c.vcvtpd2qq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2QQ_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2qq_zmm_m() {
		testAssembler(c -> c.vcvtpd2qq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2QQ_ZMM_K1Z_ZMMM512B64_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2udq_xmm_xmm() {
		testAssembler(c -> c.vcvtpd2udq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPD2UDQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtpd2udq_xmm_ymm() {
		testAssembler(c -> c.vcvtpd2udq(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPD2UDQ_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtpd2udq_ymm_zmm() {
		testAssembler(c -> c.vcvtpd2udq(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTPD2UDQ_YMM_K1Z_ZMMM512B64_ER, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtpd2udq_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtpd2udq(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPD2UDQ_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (src.size == MemoryOperandSize.YWORD) */
			testAssembler(c -> c.vcvtpd2udq(xmm2.k1(), ymmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPD2UDQ_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		} /* else */ { /* if (src.size == MemoryOperandSize.XWORD) */
			testAssembler(c -> c.vcvtpd2udq(xmm2.k1(), xmmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPD2UDQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vcvtpd2udq(xmm2.k1(), byte_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPD2UDQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
			});
		}
	}

	@Test
	void vcvtpd2udq_ymm_m() {
		testAssembler(c -> c.vcvtpd2udq(ymm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2UDQ_YMM_K1Z_ZMMM512B64_ER, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2udqx_xmm_m() {
		testAssembler(c -> c.vcvtpd2udqx(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2UDQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2udqy_xmm_m() {
		testAssembler(c -> c.vcvtpd2udqy(xmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2UDQ_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2uqq_xmm_xmm() {
		testAssembler(c -> c.vcvtpd2uqq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPD2UQQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtpd2uqq_ymm_ymm() {
		testAssembler(c -> c.vcvtpd2uqq(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPD2UQQ_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtpd2uqq_zmm_zmm() {
		testAssembler(c -> c.vcvtpd2uqq(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTPD2UQQ_ZMM_K1Z_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtpd2uqq_xmm_m() {
		testAssembler(c -> c.vcvtpd2uqq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2UQQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2uqq_ymm_m() {
		testAssembler(c -> c.vcvtpd2uqq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2UQQ_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtpd2uqq_zmm_m() {
		testAssembler(c -> c.vcvtpd2uqq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPD2UQQ_ZMM_K1Z_ZMMM512B64_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2dq_xmm_xmm() {
		testAssembler(c -> c.vcvtph2dq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2DQ_XMM_K1Z_XMMM64B16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtph2dq_ymm_xmm() {
		testAssembler(c -> c.vcvtph2dq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2DQ_YMM_K1Z_XMMM128B16, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtph2dq_zmm_ymm() {
		testAssembler(c -> c.vcvtph2dq(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPH2DQ_ZMM_K1Z_YMMM256B16_ER, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtph2dq_xmm_m() {
		testAssembler(c -> c.vcvtph2dq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2DQ_XMM_K1Z_XMMM64B16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2dq_ymm_m() {
		testAssembler(c -> c.vcvtph2dq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2DQ_YMM_K1Z_XMMM128B16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2dq_zmm_m() {
		testAssembler(c -> c.vcvtph2dq(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2DQ_ZMM_K1Z_YMMM256B16_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2pd_xmm_xmm() {
		testAssembler(c -> c.vcvtph2pd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2PD_XMM_K1Z_XMMM32B16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtph2pd_ymm_xmm() {
		testAssembler(c -> c.vcvtph2pd(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2PD_YMM_K1Z_XMMM64B16, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtph2pd_zmm_xmm() {
		testAssembler(c -> c.vcvtph2pd(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2PD_ZMM_K1Z_XMMM128B16_SAE, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtph2pd_xmm_m() {
		testAssembler(c -> c.vcvtph2pd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2PD_XMM_K1Z_XMMM32B16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2pd_ymm_m() {
		testAssembler(c -> c.vcvtph2pd(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2PD_YMM_K1Z_XMMM64B16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2pd_zmm_m() {
		testAssembler(c -> c.vcvtph2pd(zmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2PD_ZMM_K1Z_XMMM128B16_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2ps_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtph2ps(xmm2, xmm3), Instruction.create(Code.VEX_VCVTPH2PS_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtph2ps(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2PS_XMM_K1Z_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtph2ps_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtph2ps(ymm2, xmm3), Instruction.create(Code.VEX_VCVTPH2PS_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtph2ps(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2PS_YMM_K1Z_XMMM128, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtph2ps_zmm_ymm() {
		testAssembler(c -> c.vcvtph2ps(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPH2PS_ZMM_K1Z_YMMM256_SAE, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtph2ps_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtph2ps(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTPH2PS_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtph2ps(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2PS_XMM_K1Z_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtph2ps_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtph2ps(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTPH2PS_YMM_XMMM128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtph2ps(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2PS_YMM_K1Z_XMMM128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtph2ps_zmm_m() {
		testAssembler(c -> c.vcvtph2ps(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2PS_ZMM_K1Z_YMMM256_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2psx_xmm_xmm() {
		testAssembler(c -> c.vcvtph2psx(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2PSX_XMM_K1Z_XMMM64B16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtph2psx_ymm_xmm() {
		testAssembler(c -> c.vcvtph2psx(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2PSX_YMM_K1Z_XMMM128B16, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtph2psx_zmm_ymm() {
		testAssembler(c -> c.vcvtph2psx(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPH2PSX_ZMM_K1Z_YMMM256B16_SAE, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtph2psx_xmm_m() {
		testAssembler(c -> c.vcvtph2psx(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2PSX_XMM_K1Z_XMMM64B16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2psx_ymm_m() {
		testAssembler(c -> c.vcvtph2psx(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2PSX_YMM_K1Z_XMMM128B16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2psx_zmm_m() {
		testAssembler(c -> c.vcvtph2psx(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2PSX_ZMM_K1Z_YMMM256B16_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2qq_xmm_xmm() {
		testAssembler(c -> c.vcvtph2qq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2QQ_XMM_K1Z_XMMM32B16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtph2qq_ymm_xmm() {
		testAssembler(c -> c.vcvtph2qq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2QQ_YMM_K1Z_XMMM64B16, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtph2qq_zmm_xmm() {
		testAssembler(c -> c.vcvtph2qq(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2QQ_ZMM_K1Z_XMMM128B16_ER, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtph2qq_xmm_m() {
		testAssembler(c -> c.vcvtph2qq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2QQ_XMM_K1Z_XMMM32B16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2qq_ymm_m() {
		testAssembler(c -> c.vcvtph2qq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2QQ_YMM_K1Z_XMMM64B16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2qq_zmm_m() {
		testAssembler(c -> c.vcvtph2qq(zmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2QQ_ZMM_K1Z_XMMM128B16_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2udq_xmm_xmm() {
		testAssembler(c -> c.vcvtph2udq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2UDQ_XMM_K1Z_XMMM64B16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtph2udq_ymm_xmm() {
		testAssembler(c -> c.vcvtph2udq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2UDQ_YMM_K1Z_XMMM128B16, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtph2udq_zmm_ymm() {
		testAssembler(c -> c.vcvtph2udq(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPH2UDQ_ZMM_K1Z_YMMM256B16_ER, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtph2udq_xmm_m() {
		testAssembler(c -> c.vcvtph2udq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2UDQ_XMM_K1Z_XMMM64B16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2udq_ymm_m() {
		testAssembler(c -> c.vcvtph2udq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2UDQ_YMM_K1Z_XMMM128B16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2udq_zmm_m() {
		testAssembler(c -> c.vcvtph2udq(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2UDQ_ZMM_K1Z_YMMM256B16_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2uqq_xmm_xmm() {
		testAssembler(c -> c.vcvtph2uqq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2UQQ_XMM_K1Z_XMMM32B16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtph2uqq_ymm_xmm() {
		testAssembler(c -> c.vcvtph2uqq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2UQQ_YMM_K1Z_XMMM64B16, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtph2uqq_zmm_xmm() {
		testAssembler(c -> c.vcvtph2uqq(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2UQQ_ZMM_K1Z_XMMM128B16_ER, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtph2uqq_xmm_m() {
		testAssembler(c -> c.vcvtph2uqq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2UQQ_XMM_K1Z_XMMM32B16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2uqq_ymm_m() {
		testAssembler(c -> c.vcvtph2uqq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2UQQ_YMM_K1Z_XMMM64B16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2uqq_zmm_m() {
		testAssembler(c -> c.vcvtph2uqq(zmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2UQQ_ZMM_K1Z_XMMM128B16_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2uw_xmm_xmm() {
		testAssembler(c -> c.vcvtph2uw(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2UW_XMM_K1Z_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtph2uw_ymm_ymm() {
		testAssembler(c -> c.vcvtph2uw(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPH2UW_YMM_K1Z_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtph2uw_zmm_zmm() {
		testAssembler(c -> c.vcvtph2uw(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2UW_ZMM_K1Z_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtph2uw_xmm_m() {
		testAssembler(c -> c.vcvtph2uw(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2UW_XMM_K1Z_XMMM128B16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2uw_ymm_m() {
		testAssembler(c -> c.vcvtph2uw(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2UW_YMM_K1Z_YMMM256B16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2uw_zmm_m() {
		testAssembler(c -> c.vcvtph2uw(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2UW_ZMM_K1Z_ZMMM512B16_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2w_xmm_xmm() {
		testAssembler(c -> c.vcvtph2w(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2W_XMM_K1Z_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtph2w_ymm_ymm() {
		testAssembler(c -> c.vcvtph2w(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPH2W_YMM_K1Z_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtph2w_zmm_zmm() {
		testAssembler(c -> c.vcvtph2w(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTPH2W_ZMM_K1Z_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtph2w_xmm_m() {
		testAssembler(c -> c.vcvtph2w(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2W_XMM_K1Z_XMMM128B16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2w_ymm_m() {
		testAssembler(c -> c.vcvtph2w(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2W_YMM_K1Z_YMMM256B16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtph2w_zmm_m() {
		testAssembler(c -> c.vcvtph2w(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPH2W_ZMM_K1Z_ZMMM512B16_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtps2dq_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtps2dq(xmm2, xmm3), Instruction.create(Code.VEX_VCVTPS2DQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtps2dq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPS2DQ_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtps2dq_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtps2dq(ymm2, ymm3), Instruction.create(Code.VEX_VCVTPS2DQ_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtps2dq(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPS2DQ_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtps2dq_zmm_zmm() {
		testAssembler(c -> c.vcvtps2dq(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTPS2DQ_ZMM_K1Z_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtps2dq_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtps2dq(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPS2DQ_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtps2dq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTPS2DQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtps2dq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2DQ_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtps2dq_ymm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtps2dq(ymm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPS2DQ_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtps2dq(ymm2, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTPS2DQ_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtps2dq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2DQ_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtps2dq_zmm_m() {
		testAssembler(c -> c.vcvtps2dq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2DQ_ZMM_K1Z_ZMMM512B32_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtps2pd_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtps2pd(xmm2, xmm3), Instruction.create(Code.VEX_VCVTPS2PD_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtps2pd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPS2PD_XMM_K1Z_XMMM64B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtps2pd_ymm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtps2pd(ymm2, xmm3), Instruction.create(Code.VEX_VCVTPS2PD_YMM_XMMM128, ICRegisters.ymm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtps2pd(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPS2PD_YMM_K1Z_XMMM128B32, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtps2pd_zmm_ymm() {
		testAssembler(c -> c.vcvtps2pd(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPS2PD_ZMM_K1Z_YMMM256B32_SAE, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtps2pd_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtps2pd(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPS2PD_XMM_K1Z_XMMM64B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtps2pd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTPS2PD_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtps2pd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2PD_XMM_K1Z_XMMM64B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtps2pd_ymm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtps2pd(ymm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPS2PD_YMM_K1Z_XMMM128B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtps2pd(ymm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTPS2PD_YMM_XMMM128, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtps2pd(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2PD_YMM_K1Z_XMMM128B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtps2pd_zmm_m() {
		testAssembler(c -> c.vcvtps2pd(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2PD_ZMM_K1Z_YMMM256B32_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtps2ph_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtps2ph(xmm2, xmm3, -5), Instruction.create(Code.VEX_VCVTPS2PH_XMMM64_XMM_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtps2ph(xmm2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VCVTPS2PH_XMMM64_K1Z_XMM_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtps2ph_m_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtps2ph(xmmword_ptr(0x0L).base(ecx), xmm3, -5), Instruction.create(Code.VEX_VCVTPS2PH_XMMM64_XMM_IMM8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtps2ph(xmmword_ptr(0x0L).base(ecx).k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VCVTPS2PH_XMMM64_K1Z_XMM_IMM8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtps2ph_xmm_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtps2ph(xmm2, ymm3, -5), Instruction.create(Code.VEX_VCVTPS2PH_XMMM128_YMM_IMM8, ICRegisters.xmm2, ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtps2ph(xmm2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VCVTPS2PH_XMMM128_K1Z_YMM_IMM8, ICRegisters.xmm2, ICRegisters.ymm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtps2ph_m_ymm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtps2ph(xmmword_ptr(0x0L).base(ecx), ymm3, -5), Instruction.create(Code.VEX_VCVTPS2PH_XMMM128_YMM_IMM8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtps2ph(xmmword_ptr(0x0L).base(ecx).k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VCVTPS2PH_XMMM128_K1Z_YMM_IMM8, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3, -5), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtps2ph_ymm_zmm_i() {
		testAssembler(c -> c.vcvtps2ph(ymm2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VCVTPS2PH_YMMM256_K1Z_ZMM_IMM8_SAE, ICRegisters.ymm2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vcvtps2ph_m_zmm_i() {
		testAssembler(c -> c.vcvtps2ph(ymmword_ptr(0x0L).base(ecx).k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VCVTPS2PH_YMMM256_K1Z_ZMM_IMM8_SAE, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vcvtps2phx_xmm_xmm() {
		testAssembler(c -> c.vcvtps2phx(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPS2PHX_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtps2phx_xmm_ymm() {
		testAssembler(c -> c.vcvtps2phx(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPS2PHX_XMM_K1Z_YMMM256B32, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtps2phx_ymm_zmm() {
		testAssembler(c -> c.vcvtps2phx(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTPS2PHX_YMM_K1Z_ZMMM512B32_ER, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtps2phx_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtps2phx(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPS2PHX_XMM_K1Z_YMMM256B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (src.size == MemoryOperandSize.YWORD) */
			testAssembler(c -> c.vcvtps2phx(xmm2.k1(), ymmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPS2PHX_XMM_K1Z_YMMM256B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		} /* else */ { /* if (src.size == MemoryOperandSize.XWORD) */
			testAssembler(c -> c.vcvtps2phx(xmm2.k1(), xmmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPS2PHX_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vcvtps2phx(xmm2.k1(), byte_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTPS2PHX_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
			});
		}
	}

	@Test
	void vcvtps2phx_ymm_m() {
		testAssembler(c -> c.vcvtps2phx(ymm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2PHX_YMM_K1Z_ZMMM512B32_ER, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtps2phxx_xmm_m() {
		testAssembler(c -> c.vcvtps2phxx(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2PHX_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtps2phxy_xmm_m() {
		testAssembler(c -> c.vcvtps2phxy(xmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2PHX_XMM_K1Z_YMMM256B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtps2qq_xmm_xmm() {
		testAssembler(c -> c.vcvtps2qq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPS2QQ_XMM_K1Z_XMMM64B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtps2qq_ymm_xmm() {
		testAssembler(c -> c.vcvtps2qq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPS2QQ_YMM_K1Z_XMMM128B32, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtps2qq_zmm_ymm() {
		testAssembler(c -> c.vcvtps2qq(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPS2QQ_ZMM_K1Z_YMMM256B32_ER, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtps2qq_xmm_m() {
		testAssembler(c -> c.vcvtps2qq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2QQ_XMM_K1Z_XMMM64B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtps2qq_ymm_m() {
		testAssembler(c -> c.vcvtps2qq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2QQ_YMM_K1Z_XMMM128B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtps2qq_zmm_m() {
		testAssembler(c -> c.vcvtps2qq(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2QQ_ZMM_K1Z_YMMM256B32_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtps2udq_xmm_xmm() {
		testAssembler(c -> c.vcvtps2udq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPS2UDQ_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtps2udq_ymm_ymm() {
		testAssembler(c -> c.vcvtps2udq(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPS2UDQ_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtps2udq_zmm_zmm() {
		testAssembler(c -> c.vcvtps2udq(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTPS2UDQ_ZMM_K1Z_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtps2udq_xmm_m() {
		testAssembler(c -> c.vcvtps2udq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2UDQ_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtps2udq_ymm_m() {
		testAssembler(c -> c.vcvtps2udq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2UDQ_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtps2udq_zmm_m() {
		testAssembler(c -> c.vcvtps2udq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2UDQ_ZMM_K1Z_ZMMM512B32_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtps2uqq_xmm_xmm() {
		testAssembler(c -> c.vcvtps2uqq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPS2UQQ_XMM_K1Z_XMMM64B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtps2uqq_ymm_xmm() {
		testAssembler(c -> c.vcvtps2uqq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTPS2UQQ_YMM_K1Z_XMMM128B32, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtps2uqq_zmm_ymm() {
		testAssembler(c -> c.vcvtps2uqq(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTPS2UQQ_ZMM_K1Z_YMMM256B32_ER, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtps2uqq_xmm_m() {
		testAssembler(c -> c.vcvtps2uqq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2UQQ_XMM_K1Z_XMMM64B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtps2uqq_ymm_m() {
		testAssembler(c -> c.vcvtps2uqq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2UQQ_YMM_K1Z_XMMM128B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtps2uqq_zmm_m() {
		testAssembler(c -> c.vcvtps2uqq(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTPS2UQQ_ZMM_K1Z_YMMM256B32_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtqq2pd_xmm_xmm() {
		testAssembler(c -> c.vcvtqq2pd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTQQ2PD_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtqq2pd_ymm_ymm() {
		testAssembler(c -> c.vcvtqq2pd(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTQQ2PD_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtqq2pd_zmm_zmm() {
		testAssembler(c -> c.vcvtqq2pd(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTQQ2PD_ZMM_K1Z_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtqq2pd_xmm_m() {
		testAssembler(c -> c.vcvtqq2pd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PD_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtqq2pd_ymm_m() {
		testAssembler(c -> c.vcvtqq2pd(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PD_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtqq2pd_zmm_m() {
		testAssembler(c -> c.vcvtqq2pd(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PD_ZMM_K1Z_ZMMM512B64_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtqq2ph_xmm_xmm() {
		testAssembler(c -> c.vcvtqq2ph(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTQQ2PH_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtqq2ph_xmm_ymm() {
		testAssembler(c -> c.vcvtqq2ph(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTQQ2PH_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtqq2ph_xmm_zmm() {
		testAssembler(c -> c.vcvtqq2ph(xmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTQQ2PH_XMM_K1Z_ZMMM512B64_ER, ICRegisters.xmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtqq2ph_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtqq2ph(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PH_XMM_K1Z_ZMMM512B64_ER, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (src.size == MemoryOperandSize.ZWORD) */
			testAssembler(c -> c.vcvtqq2ph(xmm2.k1(), zmmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PH_XMM_K1Z_ZMMM512B64_ER, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		} /* else */ { /* if (src.size == MemoryOperandSize.YWORD) */
			testAssembler(c -> c.vcvtqq2ph(xmm2.k1(), ymmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PH_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		} /* else */ { /* if (src.size == MemoryOperandSize.XWORD) */
			testAssembler(c -> c.vcvtqq2ph(xmm2.k1(), xmmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PH_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vcvtqq2ph(xmm2.k1(), byte_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PH_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
			});
		}
	}

	@Test
	void vcvtqq2phx_xmm_m() {
		testAssembler(c -> c.vcvtqq2phx(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PH_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtqq2phy_xmm_m() {
		testAssembler(c -> c.vcvtqq2phy(xmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PH_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtqq2phz_xmm_m() {
		testAssembler(c -> c.vcvtqq2phz(xmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PH_XMM_K1Z_ZMMM512B64_ER, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtqq2ps_xmm_xmm() {
		testAssembler(c -> c.vcvtqq2ps(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTQQ2PS_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtqq2ps_xmm_ymm() {
		testAssembler(c -> c.vcvtqq2ps(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTQQ2PS_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtqq2ps_ymm_zmm() {
		testAssembler(c -> c.vcvtqq2ps(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTQQ2PS_YMM_K1Z_ZMMM512B64_ER, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtqq2ps_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtqq2ps(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PS_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (src.size == MemoryOperandSize.YWORD) */
			testAssembler(c -> c.vcvtqq2ps(xmm2.k1(), ymmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PS_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		} /* else */ { /* if (src.size == MemoryOperandSize.XWORD) */
			testAssembler(c -> c.vcvtqq2ps(xmm2.k1(), xmmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PS_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vcvtqq2ps(xmm2.k1(), byte_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PS_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
			});
		}
	}

	@Test
	void vcvtqq2ps_ymm_m() {
		testAssembler(c -> c.vcvtqq2ps(ymm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PS_YMM_K1Z_ZMMM512B64_ER, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtqq2psx_xmm_m() {
		testAssembler(c -> c.vcvtqq2psx(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PS_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtqq2psy_xmm_m() {
		testAssembler(c -> c.vcvtqq2psy(xmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTQQ2PS_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtsd2sh_xmm_xmm_xmm() {
		testAssembler(c -> c.vcvtsd2sh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCVTSD2SH_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vcvtsd2sh_xmm_xmm_m() {
		testAssembler(c -> c.vcvtsd2sh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTSD2SH_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtsd2si_r32_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtsd2si(edx, xmm3), Instruction.create(Code.VEX_VCVTSD2SI_R32_XMMM64, ICRegisters.edx, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtsd2si(edx, xmm3), Instruction.create(Code.EVEX_VCVTSD2SI_R32_XMMM64_ER, ICRegisters.edx, ICRegisters.xmm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtsd2si_r32_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtsd2si(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTSD2SI_R32_XMMM64, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtsd2si(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VCVTSD2SI_R32_XMMM64_ER, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtsd2ss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtsd2ss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCVTSD2SS_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtsd2ss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCVTSD2SS_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtsd2ss_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtsd2ss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTSD2SS_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtsd2ss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTSD2SS_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtsd2usi_r32_xmm() {
		testAssembler(c -> c.vcvtsd2usi(edx, xmm3), Instruction.create(Code.EVEX_VCVTSD2USI_R32_XMMM64_ER, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void vcvtsd2usi_r32_m() {
		testAssembler(c -> c.vcvtsd2usi(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VCVTSD2USI_R32_XMMM64_ER, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vcvtsh2sd_xmm_xmm_xmm() {
		testAssembler(c -> c.vcvtsh2sd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCVTSH2SD_XMM_K1Z_XMM_XMMM16_SAE, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vcvtsh2sd_xmm_xmm_m() {
		testAssembler(c -> c.vcvtsh2sd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTSH2SD_XMM_K1Z_XMM_XMMM16_SAE, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtsh2si_r32_xmm() {
		testAssembler(c -> c.vcvtsh2si(edx, xmm3), Instruction.create(Code.EVEX_VCVTSH2SI_R32_XMMM16_ER, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void vcvtsh2si_r32_m() {
		testAssembler(c -> c.vcvtsh2si(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VCVTSH2SI_R32_XMMM16_ER, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vcvtsh2ss_xmm_xmm_xmm() {
		testAssembler(c -> c.vcvtsh2ss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCVTSH2SS_XMM_K1Z_XMM_XMMM16_SAE, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vcvtsh2ss_xmm_xmm_m() {
		testAssembler(c -> c.vcvtsh2ss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTSH2SS_XMM_K1Z_XMM_XMMM16_SAE, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtsh2usi_r32_xmm() {
		testAssembler(c -> c.vcvtsh2usi(edx, xmm3), Instruction.create(Code.EVEX_VCVTSH2USI_R32_XMMM16_ER, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void vcvtsh2usi_r32_m() {
		testAssembler(c -> c.vcvtsh2usi(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VCVTSH2USI_R32_XMMM16_ER, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vcvtsi2sd_xmm_xmm_r32() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtsi2sd(xmm2, xmm3, esp), Instruction.create(Code.VEX_VCVTSI2SD_XMM_XMM_RM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.esp), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtsi2sd(xmm2, xmm3, esp), Instruction.create(Code.EVEX_VCVTSI2SD_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.esp), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtsi2sd_xmm_xmm_m() {
		{ /* if (src2.size == MemoryOperandSize.QWORD) */
			{ /* if (getInstructionPreferVex()) */
				// Skipping VEX_VCVTSI2SD_XMM_XMM_RM64 - Not supported by current bitness
			} /* else */ // Skipping EVEX_VCVTSI2SD_XMM_XMM_RM64_ER - Not supported by current bitness
		} /* else */ { /* if (src2.size == MemoryOperandSize.DWORD) */
			{ /* if (getInstructionPreferVex()) */
				testAssembler(c -> c.vcvtsi2sd(xmm2, xmm3, dword_ptr(0x0L).base(edx)), Instruction.create(Code.VEX_VCVTSI2SD_XMM_XMM_RM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
			} /* else */ testAssembler(c -> c.vcvtsi2sd(xmm2, xmm3, dword_ptr(0x0L).base(edx)), Instruction.create(Code.EVEX_VCVTSI2SD_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
		}
		{
			assertInvalid(() -> {
				{ /* if (getInstructionPreferVex()) */
					testAssembler(c -> c.vcvtsi2sd(xmm2, xmm3, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.VEX_VCVTSI2SD_XMM_XMM_RM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
				} /* else */ testAssembler(c -> c.vcvtsi2sd(xmm2, xmm3, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.EVEX_VCVTSI2SD_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
			});
		}
	}

	@Test
	void vcvtsi2sh_xmm_xmm_r32() {
		testAssembler(c -> c.vcvtsi2sh(xmm2, xmm3, esp), Instruction.create(Code.EVEX_VCVTSI2SH_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.esp));
	}

	@Test
	void vcvtsi2sh_xmm_xmm_m() {
		{ /* if (src2.size == MemoryOperandSize.QWORD) */
			// Skipping EVEX_VCVTSI2SH_XMM_XMM_RM64_ER - Not supported by current bitness
		} /* else */ { /* if (src2.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.vcvtsi2sh(xmm2, xmm3, dword_ptr(0x0L).base(edx)), Instruction.create(Code.EVEX_VCVTSI2SH_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vcvtsi2sh(xmm2, xmm3, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.EVEX_VCVTSI2SH_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void vcvtsi2ss_xmm_xmm_r32() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtsi2ss(xmm2, xmm3, esp), Instruction.create(Code.VEX_VCVTSI2SS_XMM_XMM_RM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.esp), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtsi2ss(xmm2, xmm3, esp), Instruction.create(Code.EVEX_VCVTSI2SS_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.esp), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtsi2ss_xmm_xmm_m() {
		{ /* if (src2.size == MemoryOperandSize.QWORD) */
			{ /* if (getInstructionPreferVex()) */
				// Skipping VEX_VCVTSI2SS_XMM_XMM_RM64 - Not supported by current bitness
			} /* else */ // Skipping EVEX_VCVTSI2SS_XMM_XMM_RM64_ER - Not supported by current bitness
		} /* else */ { /* if (src2.size == MemoryOperandSize.DWORD) */
			{ /* if (getInstructionPreferVex()) */
				testAssembler(c -> c.vcvtsi2ss(xmm2, xmm3, dword_ptr(0x0L).base(edx)), Instruction.create(Code.VEX_VCVTSI2SS_XMM_XMM_RM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
			} /* else */ testAssembler(c -> c.vcvtsi2ss(xmm2, xmm3, dword_ptr(0x0L).base(edx)), Instruction.create(Code.EVEX_VCVTSI2SS_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
		}
		{
			assertInvalid(() -> {
				{ /* if (getInstructionPreferVex()) */
					testAssembler(c -> c.vcvtsi2ss(xmm2, xmm3, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.VEX_VCVTSI2SS_XMM_XMM_RM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
				} /* else */ testAssembler(c -> c.vcvtsi2ss(xmm2, xmm3, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.EVEX_VCVTSI2SS_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
			});
		}
	}

	@Test
	void vcvtss2sd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtss2sd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VCVTSS2SD_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtss2sd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCVTSS2SD_XMM_K1Z_XMM_XMMM32_SAE, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtss2sd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtss2sd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTSS2SD_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtss2sd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTSS2SD_XMM_K1Z_XMM_XMMM32_SAE, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtss2sh_xmm_xmm_xmm() {
		testAssembler(c -> c.vcvtss2sh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VCVTSS2SH_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vcvtss2sh_xmm_xmm_m() {
		testAssembler(c -> c.vcvtss2sh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTSS2SH_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtss2si_r32_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtss2si(edx, xmm3), Instruction.create(Code.VEX_VCVTSS2SI_R32_XMMM32, ICRegisters.edx, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtss2si(edx, xmm3), Instruction.create(Code.EVEX_VCVTSS2SI_R32_XMMM32_ER, ICRegisters.edx, ICRegisters.xmm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtss2si_r32_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvtss2si(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTSS2SI_R32_XMMM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvtss2si(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VCVTSS2SI_R32_XMMM32_ER, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvtss2usi_r32_xmm() {
		testAssembler(c -> c.vcvtss2usi(edx, xmm3), Instruction.create(Code.EVEX_VCVTSS2USI_R32_XMMM32_ER, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void vcvtss2usi_r32_m() {
		testAssembler(c -> c.vcvtss2usi(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VCVTSS2USI_R32_XMMM32_ER, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vcvttpd2dq_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvttpd2dq(xmm2, xmm3), Instruction.create(Code.VEX_VCVTTPD2DQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvttpd2dq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPD2DQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvttpd2dq_xmm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvttpd2dq(xmm2, ymm3), Instruction.create(Code.VEX_VCVTTPD2DQ_XMM_YMMM256, ICRegisters.xmm2, ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvttpd2dq(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTTPD2DQ_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvttpd2dq_ymm_zmm() {
		testAssembler(c -> c.vcvttpd2dq(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTTPD2DQ_YMM_K1Z_ZMMM512B64_SAE, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvttpd2dq_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvttpd2dq(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2DQ_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (src.size == MemoryOperandSize.YWORD) */
			{ /* if (getInstructionPreferVex()) */
				testAssembler(c -> c.vcvttpd2dq(xmm2, ymmword_ptr(0x0L).base(edx)), Instruction.create(Code.VEX_VCVTTPD2DQ_XMM_YMMM256, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
			} /* else */ testAssembler(c -> c.vcvttpd2dq(xmm2.k1(), ymmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2DQ_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
		} /* else */ { /* if (src.size == MemoryOperandSize.XWORD) */
			{ /* if (getInstructionPreferVex()) */
				testAssembler(c -> c.vcvttpd2dq(xmm2, xmmword_ptr(0x0L).base(edx)), Instruction.create(Code.VEX_VCVTTPD2DQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
			} /* else */ testAssembler(c -> c.vcvttpd2dq(xmm2.k1(), xmmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2DQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
		}
		{
			assertInvalid(() -> {
				{ /* if (getInstructionPreferVex()) */
					testAssembler(c -> c.vcvttpd2dq(xmm2, byte_ptr(0x0L).base(edx)), Instruction.create(Code.VEX_VCVTTPD2DQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
				} /* else */ testAssembler(c -> c.vcvttpd2dq(xmm2.k1(), byte_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2DQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
			});
		}
	}

	@Test
	void vcvttpd2dq_ymm_m() {
		testAssembler(c -> c.vcvttpd2dq(ymm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2DQ_YMM_K1Z_ZMMM512B64_SAE, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttpd2dqx_xmm_m() {
		testAssembler(c -> c.vcvttpd2dqx(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2DQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttpd2dqy_xmm_m() {
		testAssembler(c -> c.vcvttpd2dqy(xmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2DQ_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttpd2qq_xmm_xmm() {
		testAssembler(c -> c.vcvttpd2qq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPD2QQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttpd2qq_ymm_ymm() {
		testAssembler(c -> c.vcvttpd2qq(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTTPD2QQ_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvttpd2qq_zmm_zmm() {
		testAssembler(c -> c.vcvttpd2qq(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTTPD2QQ_ZMM_K1Z_ZMMM512B64_SAE, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvttpd2qq_xmm_m() {
		testAssembler(c -> c.vcvttpd2qq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2QQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttpd2qq_ymm_m() {
		testAssembler(c -> c.vcvttpd2qq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2QQ_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttpd2qq_zmm_m() {
		testAssembler(c -> c.vcvttpd2qq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2QQ_ZMM_K1Z_ZMMM512B64_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttpd2udq_xmm_xmm() {
		testAssembler(c -> c.vcvttpd2udq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPD2UDQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttpd2udq_xmm_ymm() {
		testAssembler(c -> c.vcvttpd2udq(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTTPD2UDQ_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvttpd2udq_ymm_zmm() {
		testAssembler(c -> c.vcvttpd2udq(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTTPD2UDQ_YMM_K1Z_ZMMM512B64_SAE, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvttpd2udq_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvttpd2udq(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2UDQ_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (src.size == MemoryOperandSize.YWORD) */
			testAssembler(c -> c.vcvttpd2udq(xmm2.k1(), ymmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2UDQ_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		} /* else */ { /* if (src.size == MemoryOperandSize.XWORD) */
			testAssembler(c -> c.vcvttpd2udq(xmm2.k1(), xmmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2UDQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vcvttpd2udq(xmm2.k1(), byte_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2UDQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
			});
		}
	}

	@Test
	void vcvttpd2udq_ymm_m() {
		testAssembler(c -> c.vcvttpd2udq(ymm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2UDQ_YMM_K1Z_ZMMM512B64_SAE, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttpd2udqx_xmm_m() {
		testAssembler(c -> c.vcvttpd2udqx(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2UDQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttpd2udqy_xmm_m() {
		testAssembler(c -> c.vcvttpd2udqy(xmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2UDQ_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttpd2uqq_xmm_xmm() {
		testAssembler(c -> c.vcvttpd2uqq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPD2UQQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttpd2uqq_ymm_ymm() {
		testAssembler(c -> c.vcvttpd2uqq(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTTPD2UQQ_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvttpd2uqq_zmm_zmm() {
		testAssembler(c -> c.vcvttpd2uqq(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTTPD2UQQ_ZMM_K1Z_ZMMM512B64_SAE, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvttpd2uqq_xmm_m() {
		testAssembler(c -> c.vcvttpd2uqq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2UQQ_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttpd2uqq_ymm_m() {
		testAssembler(c -> c.vcvttpd2uqq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2UQQ_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttpd2uqq_zmm_m() {
		testAssembler(c -> c.vcvttpd2uqq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPD2UQQ_ZMM_K1Z_ZMMM512B64_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2dq_xmm_xmm() {
		testAssembler(c -> c.vcvttph2dq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2DQ_XMM_K1Z_XMMM64B16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttph2dq_ymm_xmm() {
		testAssembler(c -> c.vcvttph2dq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2DQ_YMM_K1Z_XMMM128B16, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttph2dq_zmm_ymm() {
		testAssembler(c -> c.vcvttph2dq(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2DQ_ZMM_K1Z_YMMM256B16_SAE, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvttph2dq_xmm_m() {
		testAssembler(c -> c.vcvttph2dq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2DQ_XMM_K1Z_XMMM64B16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2dq_ymm_m() {
		testAssembler(c -> c.vcvttph2dq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2DQ_YMM_K1Z_XMMM128B16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2dq_zmm_m() {
		testAssembler(c -> c.vcvttph2dq(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2DQ_ZMM_K1Z_YMMM256B16_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2qq_xmm_xmm() {
		testAssembler(c -> c.vcvttph2qq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2QQ_XMM_K1Z_XMMM32B16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttph2qq_ymm_xmm() {
		testAssembler(c -> c.vcvttph2qq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2QQ_YMM_K1Z_XMMM64B16, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttph2qq_zmm_xmm() {
		testAssembler(c -> c.vcvttph2qq(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2QQ_ZMM_K1Z_XMMM128B16_SAE, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttph2qq_xmm_m() {
		testAssembler(c -> c.vcvttph2qq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2QQ_XMM_K1Z_XMMM32B16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2qq_ymm_m() {
		testAssembler(c -> c.vcvttph2qq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2QQ_YMM_K1Z_XMMM64B16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2qq_zmm_m() {
		testAssembler(c -> c.vcvttph2qq(zmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2QQ_ZMM_K1Z_XMMM128B16_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2udq_xmm_xmm() {
		testAssembler(c -> c.vcvttph2udq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2UDQ_XMM_K1Z_XMMM64B16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttph2udq_ymm_xmm() {
		testAssembler(c -> c.vcvttph2udq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2UDQ_YMM_K1Z_XMMM128B16, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttph2udq_zmm_ymm() {
		testAssembler(c -> c.vcvttph2udq(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2UDQ_ZMM_K1Z_YMMM256B16_SAE, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvttph2udq_xmm_m() {
		testAssembler(c -> c.vcvttph2udq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2UDQ_XMM_K1Z_XMMM64B16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2udq_ymm_m() {
		testAssembler(c -> c.vcvttph2udq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2UDQ_YMM_K1Z_XMMM128B16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2udq_zmm_m() {
		testAssembler(c -> c.vcvttph2udq(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2UDQ_ZMM_K1Z_YMMM256B16_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2uqq_xmm_xmm() {
		testAssembler(c -> c.vcvttph2uqq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2UQQ_XMM_K1Z_XMMM32B16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttph2uqq_ymm_xmm() {
		testAssembler(c -> c.vcvttph2uqq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2UQQ_YMM_K1Z_XMMM64B16, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttph2uqq_zmm_xmm() {
		testAssembler(c -> c.vcvttph2uqq(zmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2UQQ_ZMM_K1Z_XMMM128B16_SAE, ICRegisters.zmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttph2uqq_xmm_m() {
		testAssembler(c -> c.vcvttph2uqq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2UQQ_XMM_K1Z_XMMM32B16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2uqq_ymm_m() {
		testAssembler(c -> c.vcvttph2uqq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2UQQ_YMM_K1Z_XMMM64B16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2uqq_zmm_m() {
		testAssembler(c -> c.vcvttph2uqq(zmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2UQQ_ZMM_K1Z_XMMM128B16_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2uw_xmm_xmm() {
		testAssembler(c -> c.vcvttph2uw(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2UW_XMM_K1Z_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttph2uw_ymm_ymm() {
		testAssembler(c -> c.vcvttph2uw(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2UW_YMM_K1Z_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvttph2uw_zmm_zmm() {
		testAssembler(c -> c.vcvttph2uw(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2UW_ZMM_K1Z_ZMMM512B16_SAE, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvttph2uw_xmm_m() {
		testAssembler(c -> c.vcvttph2uw(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2UW_XMM_K1Z_XMMM128B16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2uw_ymm_m() {
		testAssembler(c -> c.vcvttph2uw(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2UW_YMM_K1Z_YMMM256B16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2uw_zmm_m() {
		testAssembler(c -> c.vcvttph2uw(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2UW_ZMM_K1Z_ZMMM512B16_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2w_xmm_xmm() {
		testAssembler(c -> c.vcvttph2w(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2W_XMM_K1Z_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttph2w_ymm_ymm() {
		testAssembler(c -> c.vcvttph2w(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2W_YMM_K1Z_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvttph2w_zmm_zmm() {
		testAssembler(c -> c.vcvttph2w(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTTPH2W_ZMM_K1Z_ZMMM512B16_SAE, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvttph2w_xmm_m() {
		testAssembler(c -> c.vcvttph2w(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2W_XMM_K1Z_XMMM128B16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2w_ymm_m() {
		testAssembler(c -> c.vcvttph2w(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2W_YMM_K1Z_YMMM256B16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttph2w_zmm_m() {
		testAssembler(c -> c.vcvttph2w(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPH2W_ZMM_K1Z_ZMMM512B16_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttps2dq_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvttps2dq(xmm2, xmm3), Instruction.create(Code.VEX_VCVTTPS2DQ_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvttps2dq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPS2DQ_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvttps2dq_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvttps2dq(ymm2, ymm3), Instruction.create(Code.VEX_VCVTTPS2DQ_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvttps2dq(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTTPS2DQ_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvttps2dq_zmm_zmm() {
		testAssembler(c -> c.vcvttps2dq(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTTPS2DQ_ZMM_K1Z_ZMMM512B32_SAE, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvttps2dq_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvttps2dq(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTTPS2DQ_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvttps2dq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTTPS2DQ_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvttps2dq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPS2DQ_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvttps2dq_ymm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvttps2dq(ymm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTTPS2DQ_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvttps2dq(ymm2, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTTPS2DQ_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvttps2dq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPS2DQ_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvttps2dq_zmm_m() {
		testAssembler(c -> c.vcvttps2dq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPS2DQ_ZMM_K1Z_ZMMM512B32_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttps2qq_xmm_xmm() {
		testAssembler(c -> c.vcvttps2qq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPS2QQ_XMM_K1Z_XMMM64B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttps2qq_ymm_xmm() {
		testAssembler(c -> c.vcvttps2qq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPS2QQ_YMM_K1Z_XMMM128B32, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttps2qq_zmm_ymm() {
		testAssembler(c -> c.vcvttps2qq(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTTPS2QQ_ZMM_K1Z_YMMM256B32_SAE, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvttps2qq_xmm_m() {
		testAssembler(c -> c.vcvttps2qq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPS2QQ_XMM_K1Z_XMMM64B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttps2qq_ymm_m() {
		testAssembler(c -> c.vcvttps2qq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPS2QQ_YMM_K1Z_XMMM128B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttps2qq_zmm_m() {
		testAssembler(c -> c.vcvttps2qq(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPS2QQ_ZMM_K1Z_YMMM256B32_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttps2udq_xmm_xmm() {
		testAssembler(c -> c.vcvttps2udq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPS2UDQ_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttps2udq_ymm_ymm() {
		testAssembler(c -> c.vcvttps2udq(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTTPS2UDQ_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvttps2udq_zmm_zmm() {
		testAssembler(c -> c.vcvttps2udq(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTTPS2UDQ_ZMM_K1Z_ZMMM512B32_SAE, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvttps2udq_xmm_m() {
		testAssembler(c -> c.vcvttps2udq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPS2UDQ_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttps2udq_ymm_m() {
		testAssembler(c -> c.vcvttps2udq(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPS2UDQ_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttps2udq_zmm_m() {
		testAssembler(c -> c.vcvttps2udq(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPS2UDQ_ZMM_K1Z_ZMMM512B32_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttps2uqq_xmm_xmm() {
		testAssembler(c -> c.vcvttps2uqq(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPS2UQQ_XMM_K1Z_XMMM64B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttps2uqq_ymm_xmm() {
		testAssembler(c -> c.vcvttps2uqq(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTTPS2UQQ_YMM_K1Z_XMMM128B32, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvttps2uqq_zmm_ymm() {
		testAssembler(c -> c.vcvttps2uqq(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTTPS2UQQ_ZMM_K1Z_YMMM256B32_SAE, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvttps2uqq_xmm_m() {
		testAssembler(c -> c.vcvttps2uqq(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPS2UQQ_XMM_K1Z_XMMM64B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttps2uqq_ymm_m() {
		testAssembler(c -> c.vcvttps2uqq(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPS2UQQ_YMM_K1Z_XMMM128B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttps2uqq_zmm_m() {
		testAssembler(c -> c.vcvttps2uqq(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTTPS2UQQ_ZMM_K1Z_YMMM256B32_SAE, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvttsd2si_r32_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvttsd2si(edx, xmm3), Instruction.create(Code.VEX_VCVTTSD2SI_R32_XMMM64, ICRegisters.edx, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvttsd2si(edx, xmm3), Instruction.create(Code.EVEX_VCVTTSD2SI_R32_XMMM64_SAE, ICRegisters.edx, ICRegisters.xmm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvttsd2si_r32_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvttsd2si(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTTSD2SI_R32_XMMM64, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvttsd2si(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VCVTTSD2SI_R32_XMMM64_SAE, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvttsd2usi_r32_xmm() {
		testAssembler(c -> c.vcvttsd2usi(edx, xmm3), Instruction.create(Code.EVEX_VCVTTSD2USI_R32_XMMM64_SAE, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void vcvttsd2usi_r32_m() {
		testAssembler(c -> c.vcvttsd2usi(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VCVTTSD2USI_R32_XMMM64_SAE, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vcvttsh2si_r32_xmm() {
		testAssembler(c -> c.vcvttsh2si(edx, xmm3), Instruction.create(Code.EVEX_VCVTTSH2SI_R32_XMMM16_SAE, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void vcvttsh2si_r32_m() {
		testAssembler(c -> c.vcvttsh2si(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VCVTTSH2SI_R32_XMMM16_SAE, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vcvttsh2usi_r32_xmm() {
		testAssembler(c -> c.vcvttsh2usi(edx, xmm3), Instruction.create(Code.EVEX_VCVTTSH2USI_R32_XMMM16_SAE, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void vcvttsh2usi_r32_m() {
		testAssembler(c -> c.vcvttsh2usi(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VCVTTSH2USI_R32_XMMM16_SAE, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vcvttss2si_r32_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvttss2si(edx, xmm3), Instruction.create(Code.VEX_VCVTTSS2SI_R32_XMMM32, ICRegisters.edx, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvttss2si(edx, xmm3), Instruction.create(Code.EVEX_VCVTTSS2SI_R32_XMMM32_SAE, ICRegisters.edx, ICRegisters.xmm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvttss2si_r32_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vcvttss2si(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VCVTTSS2SI_R32_XMMM32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vcvttss2si(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VCVTTSS2SI_R32_XMMM32_SAE, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vcvttss2usi_r32_xmm() {
		testAssembler(c -> c.vcvttss2usi(edx, xmm3), Instruction.create(Code.EVEX_VCVTTSS2USI_R32_XMMM32_SAE, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void vcvttss2usi_r32_m() {
		testAssembler(c -> c.vcvttss2usi(edx, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VCVTTSS2USI_R32_XMMM32_SAE, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vcvtudq2pd_xmm_xmm() {
		testAssembler(c -> c.vcvtudq2pd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PD_XMM_K1Z_XMMM64B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtudq2pd_ymm_xmm() {
		testAssembler(c -> c.vcvtudq2pd(ymm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PD_YMM_K1Z_XMMM128B32, ICRegisters.ymm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtudq2pd_zmm_ymm() {
		testAssembler(c -> c.vcvtudq2pd(zmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PD_ZMM_K1Z_YMMM256B32_ER, ICRegisters.zmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtudq2pd_xmm_m() {
		testAssembler(c -> c.vcvtudq2pd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PD_XMM_K1Z_XMMM64B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtudq2pd_ymm_m() {
		testAssembler(c -> c.vcvtudq2pd(ymm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PD_YMM_K1Z_XMMM128B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtudq2pd_zmm_m() {
		testAssembler(c -> c.vcvtudq2pd(zmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PD_ZMM_K1Z_YMMM256B32_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtudq2ph_xmm_xmm() {
		testAssembler(c -> c.vcvtudq2ph(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PH_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtudq2ph_xmm_ymm() {
		testAssembler(c -> c.vcvtudq2ph(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PH_XMM_K1Z_YMMM256B32, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtudq2ph_ymm_zmm() {
		testAssembler(c -> c.vcvtudq2ph(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PH_YMM_K1Z_ZMMM512B32_ER, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtudq2ph_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtudq2ph(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PH_XMM_K1Z_YMMM256B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (src.size == MemoryOperandSize.YWORD) */
			testAssembler(c -> c.vcvtudq2ph(xmm2.k1(), ymmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PH_XMM_K1Z_YMMM256B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		} /* else */ { /* if (src.size == MemoryOperandSize.XWORD) */
			testAssembler(c -> c.vcvtudq2ph(xmm2.k1(), xmmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PH_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vcvtudq2ph(xmm2.k1(), byte_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PH_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
			});
		}
	}

	@Test
	void vcvtudq2ph_ymm_m() {
		testAssembler(c -> c.vcvtudq2ph(ymm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PH_YMM_K1Z_ZMMM512B32_ER, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtudq2phx_xmm_m() {
		testAssembler(c -> c.vcvtudq2phx(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PH_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtudq2phy_xmm_m() {
		testAssembler(c -> c.vcvtudq2phy(xmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PH_XMM_K1Z_YMMM256B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtudq2ps_xmm_xmm() {
		testAssembler(c -> c.vcvtudq2ps(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PS_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtudq2ps_ymm_ymm() {
		testAssembler(c -> c.vcvtudq2ps(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PS_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtudq2ps_zmm_zmm() {
		testAssembler(c -> c.vcvtudq2ps(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PS_ZMM_K1Z_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtudq2ps_xmm_m() {
		testAssembler(c -> c.vcvtudq2ps(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PS_XMM_K1Z_XMMM128B32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtudq2ps_ymm_m() {
		testAssembler(c -> c.vcvtudq2ps(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PS_YMM_K1Z_YMMM256B32, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtudq2ps_zmm_m() {
		testAssembler(c -> c.vcvtudq2ps(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUDQ2PS_ZMM_K1Z_ZMMM512B32_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtuqq2pd_xmm_xmm() {
		testAssembler(c -> c.vcvtuqq2pd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PD_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtuqq2pd_ymm_ymm() {
		testAssembler(c -> c.vcvtuqq2pd(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PD_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtuqq2pd_zmm_zmm() {
		testAssembler(c -> c.vcvtuqq2pd(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PD_ZMM_K1Z_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtuqq2pd_xmm_m() {
		testAssembler(c -> c.vcvtuqq2pd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PD_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtuqq2pd_ymm_m() {
		testAssembler(c -> c.vcvtuqq2pd(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PD_YMM_K1Z_YMMM256B64, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtuqq2pd_zmm_m() {
		testAssembler(c -> c.vcvtuqq2pd(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PD_ZMM_K1Z_ZMMM512B64_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtuqq2ph_xmm_xmm() {
		testAssembler(c -> c.vcvtuqq2ph(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PH_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtuqq2ph_xmm_ymm() {
		testAssembler(c -> c.vcvtuqq2ph(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PH_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtuqq2ph_xmm_zmm() {
		testAssembler(c -> c.vcvtuqq2ph(xmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PH_XMM_K1Z_ZMMM512B64_ER, ICRegisters.xmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtuqq2ph_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtuqq2ph(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PH_XMM_K1Z_ZMMM512B64_ER, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (src.size == MemoryOperandSize.ZWORD) */
			testAssembler(c -> c.vcvtuqq2ph(xmm2.k1(), zmmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PH_XMM_K1Z_ZMMM512B64_ER, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		} /* else */ { /* if (src.size == MemoryOperandSize.YWORD) */
			testAssembler(c -> c.vcvtuqq2ph(xmm2.k1(), ymmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PH_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		} /* else */ { /* if (src.size == MemoryOperandSize.XWORD) */
			testAssembler(c -> c.vcvtuqq2ph(xmm2.k1(), xmmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PH_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vcvtuqq2ph(xmm2.k1(), byte_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PH_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
			});
		}
	}

	@Test
	void vcvtuqq2phx_xmm_m() {
		testAssembler(c -> c.vcvtuqq2phx(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PH_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtuqq2phy_xmm_m() {
		testAssembler(c -> c.vcvtuqq2phy(xmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PH_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtuqq2phz_xmm_m() {
		testAssembler(c -> c.vcvtuqq2phz(xmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PH_XMM_K1Z_ZMMM512B64_ER, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtuqq2ps_xmm_xmm() {
		testAssembler(c -> c.vcvtuqq2ps(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PS_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtuqq2ps_xmm_ymm() {
		testAssembler(c -> c.vcvtuqq2ps(xmm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PS_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtuqq2ps_ymm_zmm() {
		testAssembler(c -> c.vcvtuqq2ps(ymm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PS_YMM_K1Z_ZMMM512B64_ER, ICRegisters.ymm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtuqq2ps_xmm_m() {
		{ /* if (src.isBroadcast()) */
			testAssembler(c -> c.vcvtuqq2ps(xmm2.k1(), dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PS_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (src.size == MemoryOperandSize.YWORD) */
			testAssembler(c -> c.vcvtuqq2ps(xmm2.k1(), ymmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PS_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		} /* else */ { /* if (src.size == MemoryOperandSize.XWORD) */
			testAssembler(c -> c.vcvtuqq2ps(xmm2.k1(), xmmword_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PS_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vcvtuqq2ps(xmm2.k1(), byte_ptr(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PS_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
			});
		}
	}

	@Test
	void vcvtuqq2ps_ymm_m() {
		testAssembler(c -> c.vcvtuqq2ps(ymm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PS_YMM_K1Z_ZMMM512B64_ER, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtuqq2psx_xmm_m() {
		testAssembler(c -> c.vcvtuqq2psx(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PS_XMM_K1Z_XMMM128B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtuqq2psy_xmm_m() {
		testAssembler(c -> c.vcvtuqq2psy(xmm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUQQ2PS_XMM_K1Z_YMMM256B64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtusi2sd_xmm_xmm_r32() {
		testAssembler(c -> c.vcvtusi2sd(xmm2, xmm3, esp), Instruction.create(Code.EVEX_VCVTUSI2SD_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.esp));
	}

	@Test
	void vcvtusi2sd_xmm_xmm_m() {
		{ /* if (src2.size == MemoryOperandSize.QWORD) */
			// Skipping EVEX_VCVTUSI2SD_XMM_XMM_RM64_ER - Not supported by current bitness
		} /* else */ { /* if (src2.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.vcvtusi2sd(xmm2, xmm3, dword_ptr(0x0L).base(edx)), Instruction.create(Code.EVEX_VCVTUSI2SD_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vcvtusi2sd(xmm2, xmm3, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.EVEX_VCVTUSI2SD_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void vcvtusi2sh_xmm_xmm_r32() {
		testAssembler(c -> c.vcvtusi2sh(xmm2, xmm3, esp), Instruction.create(Code.EVEX_VCVTUSI2SH_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.esp));
	}

	@Test
	void vcvtusi2sh_xmm_xmm_m() {
		{ /* if (src2.size == MemoryOperandSize.QWORD) */
			// Skipping EVEX_VCVTUSI2SH_XMM_XMM_RM64_ER - Not supported by current bitness
		} /* else */ { /* if (src2.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.vcvtusi2sh(xmm2, xmm3, dword_ptr(0x0L).base(edx)), Instruction.create(Code.EVEX_VCVTUSI2SH_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vcvtusi2sh(xmm2, xmm3, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.EVEX_VCVTUSI2SH_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void vcvtusi2ss_xmm_xmm_r32() {
		testAssembler(c -> c.vcvtusi2ss(xmm2, xmm3, esp), Instruction.create(Code.EVEX_VCVTUSI2SS_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.esp));
	}

	@Test
	void vcvtusi2ss_xmm_xmm_m() {
		{ /* if (src2.size == MemoryOperandSize.QWORD) */
			// Skipping EVEX_VCVTUSI2SS_XMM_XMM_RM64_ER - Not supported by current bitness
		} /* else */ { /* if (src2.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.vcvtusi2ss(xmm2, xmm3, dword_ptr(0x0L).base(edx)), Instruction.create(Code.EVEX_VCVTUSI2SS_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vcvtusi2ss(xmm2, xmm3, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.EVEX_VCVTUSI2SS_XMM_XMM_RM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void vcvtuw2ph_xmm_xmm() {
		testAssembler(c -> c.vcvtuw2ph(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTUW2PH_XMM_K1Z_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtuw2ph_ymm_ymm() {
		testAssembler(c -> c.vcvtuw2ph(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTUW2PH_YMM_K1Z_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtuw2ph_zmm_zmm() {
		testAssembler(c -> c.vcvtuw2ph(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTUW2PH_ZMM_K1Z_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtuw2ph_xmm_m() {
		testAssembler(c -> c.vcvtuw2ph(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUW2PH_XMM_K1Z_XMMM128B16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtuw2ph_ymm_m() {
		testAssembler(c -> c.vcvtuw2ph(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUW2PH_YMM_K1Z_YMMM256B16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtuw2ph_zmm_m() {
		testAssembler(c -> c.vcvtuw2ph(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTUW2PH_ZMM_K1Z_ZMMM512B16_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtw2ph_xmm_xmm() {
		testAssembler(c -> c.vcvtw2ph(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VCVTW2PH_XMM_K1Z_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vcvtw2ph_ymm_ymm() {
		testAssembler(c -> c.vcvtw2ph(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VCVTW2PH_YMM_K1Z_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vcvtw2ph_zmm_zmm() {
		testAssembler(c -> c.vcvtw2ph(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VCVTW2PH_ZMM_K1Z_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vcvtw2ph_xmm_m() {
		testAssembler(c -> c.vcvtw2ph(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTW2PH_XMM_K1Z_XMMM128B16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtw2ph_ymm_m() {
		testAssembler(c -> c.vcvtw2ph(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTW2PH_YMM_K1Z_YMMM256B16, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vcvtw2ph_zmm_m() {
		testAssembler(c -> c.vcvtw2ph(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VCVTW2PH_ZMM_K1Z_ZMMM512B16_ER, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

}
