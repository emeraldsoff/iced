// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

package com.github.icedland.iced.x86.asm;

import org.junit.jupiter.api.Test;

import com.github.icedland.iced.x86.*;
import static com.github.icedland.iced.x86.asm.AsmRegisters.*;

final class CodeAssembler32GenMTests extends CodeAssemblerTestsBase {
	CodeAssembler32GenMTests() {
		super(32);
	}

	@Test
	void maskmovdqu_xmm_xmm() {
		testAssembler(c -> c.maskmovdqu(xmm2, xmm3), Instruction.createMaskmovdqu(32, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void maskmovq_mm_mm() {
		testAssembler(c -> c.maskmovq(mm2, mm3), Instruction.createMaskmovq(32, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void maxpd_xmm_xmm() {
		testAssembler(c -> c.maxpd(xmm2, xmm3), Instruction.create(Code.MAXPD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void maxpd_xmm_m() {
		testAssembler(c -> c.maxpd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MAXPD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void maxps_xmm_xmm() {
		testAssembler(c -> c.maxps(xmm2, xmm3), Instruction.create(Code.MAXPS_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void maxps_xmm_m() {
		testAssembler(c -> c.maxps(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MAXPS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void maxsd_xmm_xmm() {
		testAssembler(c -> c.maxsd(xmm2, xmm3), Instruction.create(Code.MAXSD_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void maxsd_xmm_m() {
		testAssembler(c -> c.maxsd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MAXSD_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void maxss_xmm_xmm() {
		testAssembler(c -> c.maxss(xmm2, xmm3), Instruction.create(Code.MAXSS_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void maxss_xmm_m() {
		testAssembler(c -> c.maxss(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MAXSS_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void mcommit() {
		testAssembler(c -> c.mcommit(), Instruction.create(Code.MCOMMIT));
	}

	@Test
	void mfence() {
		testAssembler(c -> c.mfence(), Instruction.create(Code.MFENCE));
	}

	@Test
	void minpd_xmm_xmm() {
		testAssembler(c -> c.minpd(xmm2, xmm3), Instruction.create(Code.MINPD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void minpd_xmm_m() {
		testAssembler(c -> c.minpd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MINPD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void minps_xmm_xmm() {
		testAssembler(c -> c.minps(xmm2, xmm3), Instruction.create(Code.MINPS_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void minps_xmm_m() {
		testAssembler(c -> c.minps(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MINPS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void minsd_xmm_xmm() {
		testAssembler(c -> c.minsd(xmm2, xmm3), Instruction.create(Code.MINSD_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void minsd_xmm_m() {
		testAssembler(c -> c.minsd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MINSD_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void minss_xmm_xmm() {
		testAssembler(c -> c.minss(xmm2, xmm3), Instruction.create(Code.MINSS_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void minss_xmm_m() {
		testAssembler(c -> c.minss(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MINSS_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void monitor() {
		{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { /* if (getBitness() >= 32) */
			testAssembler(c -> c.monitor(), Instruction.create(Code.MONITORD));
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void monitorx() {
		{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { /* if (getBitness() >= 32) */
			testAssembler(c -> c.monitorx(), Instruction.create(Code.MONITORXD));
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void montmul() {
		{ // skip (getBitness() == 64) not supported by this CodeAssembler bitness
		} /* else */ { /* if (getBitness() >= 32) */
			testAssembler(c -> c.montmul(), Instruction.create(Code.MONTMUL_32), TestInstrFlags.REMOVE_REP_REPNE_PREFIXES);
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void mov_r8_r8() {
		testAssembler(c -> c.mov(dl, bl), Instruction.create(Code.MOV_RM8_R8, ICRegisters.dl, ICRegisters.bl));
	}

	@Test
	void mov_m_r8() {
		{ // skip (src.getRegister() == Register.AL && getBitness() == 64 && dst.isDisplacementOnly()) not supported by this CodeAssembler bitness
		} /* else */ { /* if (src.getRegister() == Register.AL && getBitness() < 64 && dst.isDisplacementOnly()) */
			testAssembler(c -> c.mov(mem_ptr(0x12345678L), al), Instruction.create(Code.MOV_MOFFS8_AL, new MemoryOperand(0x12345678L, 4), ICRegisters.al));
		} /* else */ testAssembler(c -> c.mov(mem_ptr(0x0L).base(edi), bl), Instruction.create(Code.MOV_RM8_R8, new MemoryOperand(ICRegisters.edi, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bl));
	}

	@Test
	void mov_r16_r16() {
		testAssembler(c -> c.mov(dx, bx), Instruction.create(Code.MOV_RM16_R16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void mov_seg_r16() {
		testAssembler(c -> c.mov(ds, bx), Instruction.create(Code.MOV_SREG_RM16, ICRegisters.ds, ICRegisters.bx));
	}

	@Test
	void mov_m_r16() {
		{ // skip (src.getRegister() == Register.AX && getBitness() == 64 && dst.isDisplacementOnly()) not supported by this CodeAssembler bitness
		} /* else */ { /* if (src.getRegister() == Register.AX && getBitness() < 64 && dst.isDisplacementOnly()) */
			testAssembler(c -> c.mov(mem_ptr(0x12345678L), ax), Instruction.create(Code.MOV_MOFFS16_AX, new MemoryOperand(0x12345678L, 4), ICRegisters.ax));
		} /* else */ testAssembler(c -> c.mov(mem_ptr(0x0L).base(edi), bx), Instruction.create(Code.MOV_RM16_R16, new MemoryOperand(ICRegisters.edi, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bx));
	}

	@Test
	void mov_r32_r32() {
		testAssembler(c -> c.mov(edx, ebx), Instruction.create(Code.MOV_RM32_R32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void mov_seg_r32() {
		testAssembler(c -> c.mov(ds, ebx), Instruction.create(Code.MOV_SREG_R32M16, ICRegisters.ds, ICRegisters.ebx));
	}

	@Test
	void mov_cr_r32() {
		testAssembler(c -> c.mov(cr2, ebx), Instruction.create(Code.MOV_CR_R32, ICRegisters.cr2, ICRegisters.ebx));
	}

	@Test
	void mov_dr_r32() {
		testAssembler(c -> c.mov(dr1, ebx), Instruction.create(Code.MOV_DR_R32, ICRegisters.dr1, ICRegisters.ebx));
	}

	@Test
	void mov_tr_r32() {
		testAssembler(c -> c.mov(tr1, ebx), Instruction.create(Code.MOV_TR_R32, ICRegisters.tr1, ICRegisters.ebx), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MOV_TR);
	}

	@Test
	void mov_m_r32() {
		{ // skip (src.getRegister() == Register.EAX && getBitness() == 64 && dst.isDisplacementOnly()) not supported by this CodeAssembler bitness
		} /* else */ { /* if (src.getRegister() == Register.EAX && getBitness() < 64 && dst.isDisplacementOnly()) */
			testAssembler(c -> c.mov(mem_ptr(0x12345678L), eax), Instruction.create(Code.MOV_MOFFS32_EAX, new MemoryOperand(0x12345678L, 4), ICRegisters.eax));
		} /* else */ testAssembler(c -> c.mov(mem_ptr(0x0L).base(edi), ebx), Instruction.create(Code.MOV_RM32_R32, new MemoryOperand(ICRegisters.edi, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void mov_r16_seg() {
		testAssembler(c -> c.mov(dx, ds), Instruction.create(Code.MOV_RM16_SREG, ICRegisters.dx, ICRegisters.ds));
	}

	@Test
	void mov_r32_seg() {
		testAssembler(c -> c.mov(edx, ds), Instruction.create(Code.MOV_R32M16_SREG, ICRegisters.edx, ICRegisters.ds));
	}

	@Test
	void mov_m_seg() {
		{ /* if (getBitness() >= 32) */
			testAssembler(c -> c.mov(dword_ptr(0x0L).base(ecx), ds), Instruction.create(Code.MOV_R32M16_SREG, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ds));
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void mov_r32_cr() {
		testAssembler(c -> c.mov(edx, cr2), Instruction.create(Code.MOV_R32_CR, ICRegisters.edx, ICRegisters.cr2));
	}

	@Test
	void mov_r32_dr() {
		testAssembler(c -> c.mov(edx, dr1), Instruction.create(Code.MOV_R32_DR, ICRegisters.edx, ICRegisters.dr1));
	}

	@Test
	void mov_r32_tr() {
		testAssembler(c -> c.mov(edx, tr1), Instruction.create(Code.MOV_R32_TR, ICRegisters.edx, ICRegisters.tr1), TestInstrFlags.NONE, com.github.icedland.iced.x86.dec.DecoderOptions.MOV_TR);
	}

	@Test
	void mov_r8_m() {
		{ // skip (dst.getRegister() == Register.AL && getBitness() == 64 && src.isDisplacementOnly()) not supported by this CodeAssembler bitness
		} /* else */ { /* if (dst.getRegister() == Register.AL && getBitness() < 64 && src.isDisplacementOnly()) */
			testAssembler(c -> c.mov(al, mem_ptr(0x12345678L)), Instruction.create(Code.MOV_AL_MOFFS8, ICRegisters.al, new MemoryOperand(0x12345678L, 4)));
		} /* else */ testAssembler(c -> c.mov(dl, mem_ptr(0x0L).base(esi)), Instruction.create(Code.MOV_R8_RM8, ICRegisters.dl, new MemoryOperand(ICRegisters.esi, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void mov_r16_m() {
		{ // skip (dst.getRegister() == Register.AX && getBitness() == 64 && src.isDisplacementOnly()) not supported by this CodeAssembler bitness
		} /* else */ { /* if (dst.getRegister() == Register.AX && getBitness() < 64 && src.isDisplacementOnly()) */
			testAssembler(c -> c.mov(ax, mem_ptr(0x12345678L)), Instruction.create(Code.MOV_AX_MOFFS16, ICRegisters.ax, new MemoryOperand(0x12345678L, 4)));
		} /* else */ testAssembler(c -> c.mov(dx, mem_ptr(0x0L).base(esi)), Instruction.create(Code.MOV_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.esi, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void mov_r32_m() {
		{ // skip (dst.getRegister() == Register.EAX && getBitness() == 64 && src.isDisplacementOnly()) not supported by this CodeAssembler bitness
		} /* else */ { /* if (dst.getRegister() == Register.EAX && getBitness() < 64 && src.isDisplacementOnly()) */
			testAssembler(c -> c.mov(eax, mem_ptr(0x12345678L)), Instruction.create(Code.MOV_EAX_MOFFS32, ICRegisters.eax, new MemoryOperand(0x12345678L, 4)));
		} /* else */ testAssembler(c -> c.mov(edx, mem_ptr(0x0L).base(esi)), Instruction.create(Code.MOV_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.esi, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void mov_seg_m() {
		{ /* if (getBitness() >= 32) */
			testAssembler(c -> c.mov(ds, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.MOV_SREG_R32M16, ICRegisters.ds, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void mov_r8_i() {
		testAssembler(c -> c.mov(dl, -5), Instruction.create(Code.MOV_R8_IMM8, ICRegisters.dl, -5));
	}

	@Test
	void mov_r16_i() {
		testAssembler(c -> c.mov(dx, 0x40B7), Instruction.create(Code.MOV_R16_IMM16, ICRegisters.dx, 0x40B7));
	}

	@Test
	void mov_r32_i() {
		testAssembler(c -> c.mov(edx, 0x7FFFFFFF), Instruction.create(Code.MOV_R32_IMM32, ICRegisters.edx, 0x7FFFFFFF));
	}

	@Test
	void mov_m_i() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			// Skipping MOV_RM64_IMM32 - Not supported by current bitness
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.mov(dword_ptr(0x0L).base(edx), 0x7FFFFFFF), Instruction.create(Code.MOV_RM32_IMM32, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7FFFFFFF));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.mov(word_ptr(0x0L).base(edx), 0x40B7), Instruction.create(Code.MOV_RM16_IMM16, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x40B7));
		} /* else */ { /* if (dst.size == MemoryOperandSize.BYTE) */
			testAssembler(c -> c.mov(byte_ptr(0x0L).base(edx), -5), Instruction.create(Code.MOV_RM8_IMM8, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.mov(zmmword_ptr(0x0L).base(edx), -5), Instruction.create(Code.MOV_RM8_IMM8, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
			});
		}
	}

	@Test
	void movapd_xmm_xmm() {
		testAssembler(c -> c.movapd(xmm2, xmm3), Instruction.create(Code.MOVAPD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void movapd_m_xmm() {
		testAssembler(c -> c.movapd(xmmword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVAPD_XMMM128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movapd_xmm_m() {
		testAssembler(c -> c.movapd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVAPD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movaps_xmm_xmm() {
		testAssembler(c -> c.movaps(xmm2, xmm3), Instruction.create(Code.MOVAPS_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void movaps_m_xmm() {
		testAssembler(c -> c.movaps(xmmword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVAPS_XMMM128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movaps_xmm_m() {
		testAssembler(c -> c.movaps(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVAPS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movbe_m_r16() {
		testAssembler(c -> c.movbe(mem_ptr(0x0L).base(ecx), bx), Instruction.create(Code.MOVBE_M16_R16, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.bx));
	}

	@Test
	void movbe_m_r32() {
		testAssembler(c -> c.movbe(mem_ptr(0x0L).base(ecx), ebx), Instruction.create(Code.MOVBE_M32_R32, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void movbe_r16_m() {
		testAssembler(c -> c.movbe(dx, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVBE_R16_M16, ICRegisters.dx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movbe_r32_m() {
		testAssembler(c -> c.movbe(edx, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVBE_R32_M32, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movd_mm_r32() {
		testAssembler(c -> c.movd(mm2, ebx), Instruction.create(Code.MOVD_MM_RM32, ICRegisters.mm2, ICRegisters.ebx));
	}

	@Test
	void movd_xmm_r32() {
		testAssembler(c -> c.movd(xmm2, ebx), Instruction.create(Code.MOVD_XMM_RM32, ICRegisters.xmm2, ICRegisters.ebx));
	}

	@Test
	void movd_r32_mm() {
		testAssembler(c -> c.movd(edx, mm3), Instruction.create(Code.MOVD_RM32_MM, ICRegisters.edx, ICRegisters.mm3));
	}

	@Test
	void movd_m_mm() {
		testAssembler(c -> c.movd(dword_ptr(0x0L).base(ecx), mm3), Instruction.create(Code.MOVD_RM32_MM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.mm3));
	}

	@Test
	void movd_r32_xmm() {
		testAssembler(c -> c.movd(edx, xmm3), Instruction.create(Code.MOVD_RM32_XMM, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void movd_m_xmm() {
		testAssembler(c -> c.movd(dword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVD_RM32_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movd_mm_m() {
		testAssembler(c -> c.movd(mm2, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVD_MM_RM32, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movd_xmm_m() {
		testAssembler(c -> c.movd(xmm2, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVD_XMM_RM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movddup_xmm_xmm() {
		testAssembler(c -> c.movddup(xmm2, xmm3), Instruction.create(Code.MOVDDUP_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void movddup_xmm_m() {
		testAssembler(c -> c.movddup(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVDDUP_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movdir64b_r16_m() {
		testAssembler(c -> c.movdir64b(dx, mem_ptr(0x0L).base(si)), Instruction.create(Code.MOVDIR64B_R16_M512, ICRegisters.dx, new MemoryOperand(ICRegisters.si, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movdir64b_r32_m() {
		testAssembler(c -> c.movdir64b(edx, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVDIR64B_R32_M512, ICRegisters.edx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movdiri_m_r32() {
		testAssembler(c -> c.movdiri(mem_ptr(0x0L).base(ecx), ebx), Instruction.create(Code.MOVDIRI_M32_R32, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void movdq2q_mm_xmm() {
		testAssembler(c -> c.movdq2q(mm2, xmm3), Instruction.create(Code.MOVDQ2Q_MM_XMM, ICRegisters.mm2, ICRegisters.xmm3));
	}

	@Test
	void movdqa_xmm_xmm() {
		testAssembler(c -> c.movdqa(xmm2, xmm3), Instruction.create(Code.MOVDQA_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void movdqa_m_xmm() {
		testAssembler(c -> c.movdqa(xmmword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVDQA_XMMM128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movdqa_xmm_m() {
		testAssembler(c -> c.movdqa(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVDQA_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movdqu_xmm_xmm() {
		testAssembler(c -> c.movdqu(xmm2, xmm3), Instruction.create(Code.MOVDQU_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void movdqu_m_xmm() {
		testAssembler(c -> c.movdqu(xmmword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVDQU_XMMM128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movdqu_xmm_m() {
		testAssembler(c -> c.movdqu(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVDQU_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movhlps_xmm_xmm() {
		testAssembler(c -> c.movhlps(xmm2, xmm3), Instruction.create(Code.MOVHLPS_XMM_XMM, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void movhpd_m_xmm() {
		testAssembler(c -> c.movhpd(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVHPD_M64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movhpd_xmm_m() {
		testAssembler(c -> c.movhpd(xmm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVHPD_XMM_M64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movhps_m_xmm() {
		testAssembler(c -> c.movhps(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVHPS_M64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movhps_xmm_m() {
		testAssembler(c -> c.movhps(xmm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVHPS_XMM_M64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movlhps_xmm_xmm() {
		testAssembler(c -> c.movlhps(xmm2, xmm3), Instruction.create(Code.MOVLHPS_XMM_XMM, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void movlpd_m_xmm() {
		testAssembler(c -> c.movlpd(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVLPD_M64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movlpd_xmm_m() {
		testAssembler(c -> c.movlpd(xmm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVLPD_XMM_M64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movlps_m_xmm() {
		testAssembler(c -> c.movlps(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVLPS_M64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movlps_xmm_m() {
		testAssembler(c -> c.movlps(xmm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVLPS_XMM_M64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movmskpd_r32_xmm() {
		testAssembler(c -> c.movmskpd(edx, xmm3), Instruction.create(Code.MOVMSKPD_R32_XMM, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void movmskps_r32_xmm() {
		testAssembler(c -> c.movmskps(edx, xmm3), Instruction.create(Code.MOVMSKPS_R32_XMM, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void movntdq_m_xmm() {
		testAssembler(c -> c.movntdq(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVNTDQ_M128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movntdqa_xmm_m() {
		testAssembler(c -> c.movntdqa(xmm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVNTDQA_XMM_M128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movnti_m_r32() {
		testAssembler(c -> c.movnti(mem_ptr(0x0L).base(ecx), ebx), Instruction.create(Code.MOVNTI_M32_R32, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ebx));
	}

	@Test
	void movntpd_m_xmm() {
		testAssembler(c -> c.movntpd(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVNTPD_M128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movntps_m_xmm() {
		testAssembler(c -> c.movntps(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVNTPS_M128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movntq_m_mm() {
		testAssembler(c -> c.movntq(mem_ptr(0x0L).base(ecx), mm3), Instruction.create(Code.MOVNTQ_M64_MM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.mm3));
	}

	@Test
	void movntsd_m_xmm() {
		testAssembler(c -> c.movntsd(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVNTSD_M64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movntss_m_xmm() {
		testAssembler(c -> c.movntss(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVNTSS_M32_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movq_mm_mm() {
		testAssembler(c -> c.movq(mm2, mm3), Instruction.create(Code.MOVQ_MM_MMM64, ICRegisters.mm2, ICRegisters.mm3));
	}

	@Test
	void movq_m_mm() {
		testAssembler(c -> c.movq(qword_ptr(0x0L).base(ecx), mm3), Instruction.create(Code.MOVQ_MMM64_MM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.mm3));
	}

	@Test
	void movq_xmm_xmm() {
		testAssembler(c -> c.movq(xmm2, xmm3), Instruction.create(Code.MOVQ_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void movq_m_xmm() {
		testAssembler(c -> c.movq(xmmword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVQ_XMMM64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movq_mm_m() {
		testAssembler(c -> c.movq(mm2, qword_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVQ_MM_MMM64, ICRegisters.mm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movq_xmm_m() {
		testAssembler(c -> c.movq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVQ_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movq2dq_xmm_mm() {
		testAssembler(c -> c.movq2dq(xmm2, mm3), Instruction.create(Code.MOVQ2DQ_XMM_MM, ICRegisters.xmm2, ICRegisters.mm3));
	}

	@Test
	void movsb() {
		testAssembler(c -> c.movsb(), Instruction.createMovsb(32));
	}

	@Test
	void movsd() {
		testAssembler(c -> c.movsd(), Instruction.createMovsd(32));
	}

	@Test
	void movsd_xmm_xmm() {
		testAssembler(c -> c.movsd(xmm2, xmm3), Instruction.create(Code.MOVSD_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void movsd_m_xmm() {
		testAssembler(c -> c.movsd(xmmword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVSD_XMMM64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movsd_xmm_m() {
		testAssembler(c -> c.movsd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVSD_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movshdup_xmm_xmm() {
		testAssembler(c -> c.movshdup(xmm2, xmm3), Instruction.create(Code.MOVSHDUP_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void movshdup_xmm_m() {
		testAssembler(c -> c.movshdup(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVSHDUP_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movsldup_xmm_xmm() {
		testAssembler(c -> c.movsldup(xmm2, xmm3), Instruction.create(Code.MOVSLDUP_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void movsldup_xmm_m() {
		testAssembler(c -> c.movsldup(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVSLDUP_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movss_xmm_xmm() {
		testAssembler(c -> c.movss(xmm2, xmm3), Instruction.create(Code.MOVSS_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void movss_m_xmm() {
		testAssembler(c -> c.movss(xmmword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVSS_XMMM32_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movss_xmm_m() {
		testAssembler(c -> c.movss(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVSS_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movsw() {
		testAssembler(c -> c.movsw(), Instruction.createMovsw(32));
	}

	@Test
	void movsx_r16_r8() {
		testAssembler(c -> c.movsx(dx, bl), Instruction.create(Code.MOVSX_R16_RM8, ICRegisters.dx, ICRegisters.bl));
	}

	@Test
	void movsx_r32_r8() {
		testAssembler(c -> c.movsx(edx, bl), Instruction.create(Code.MOVSX_R32_RM8, ICRegisters.edx, ICRegisters.bl));
	}

	@Test
	void movsx_r16_r16() {
		testAssembler(c -> c.movsx(dx, bx), Instruction.create(Code.MOVSX_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void movsx_r32_r16() {
		testAssembler(c -> c.movsx(edx, bx), Instruction.create(Code.MOVSX_R32_RM16, ICRegisters.edx, ICRegisters.bx));
	}

	@Test
	void movsx_r16_m() {
		{ /* if (src.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.movsx(dx, word_ptr(0x0L).base(edx)), Instruction.create(Code.MOVSX_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (src.size == MemoryOperandSize.BYTE) */
			testAssembler(c -> c.movsx(dx, byte_ptr(0x0L).base(edx)), Instruction.create(Code.MOVSX_R16_RM8, ICRegisters.dx, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.movsx(dx, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.MOVSX_R16_RM8, ICRegisters.dx, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void movsx_r32_m() {
		{ /* if (src.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.movsx(edx, word_ptr(0x0L).base(edx)), Instruction.create(Code.MOVSX_R32_RM16, ICRegisters.edx, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (src.size == MemoryOperandSize.BYTE) */
			testAssembler(c -> c.movsx(edx, byte_ptr(0x0L).base(edx)), Instruction.create(Code.MOVSX_R32_RM8, ICRegisters.edx, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.movsx(edx, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.MOVSX_R32_RM8, ICRegisters.edx, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void movupd_xmm_xmm() {
		testAssembler(c -> c.movupd(xmm2, xmm3), Instruction.create(Code.MOVUPD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void movupd_m_xmm() {
		testAssembler(c -> c.movupd(xmmword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVUPD_XMMM128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movupd_xmm_m() {
		testAssembler(c -> c.movupd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVUPD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movups_xmm_xmm() {
		testAssembler(c -> c.movups(xmm2, xmm3), Instruction.create(Code.MOVUPS_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void movups_m_xmm() {
		testAssembler(c -> c.movups(xmmword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.MOVUPS_XMMM128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void movups_xmm_m() {
		testAssembler(c -> c.movups(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MOVUPS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void movzx_r16_r8() {
		testAssembler(c -> c.movzx(dx, bl), Instruction.create(Code.MOVZX_R16_RM8, ICRegisters.dx, ICRegisters.bl));
	}

	@Test
	void movzx_r32_r8() {
		testAssembler(c -> c.movzx(edx, bl), Instruction.create(Code.MOVZX_R32_RM8, ICRegisters.edx, ICRegisters.bl));
	}

	@Test
	void movzx_r16_r16() {
		testAssembler(c -> c.movzx(dx, bx), Instruction.create(Code.MOVZX_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void movzx_r32_r16() {
		testAssembler(c -> c.movzx(edx, bx), Instruction.create(Code.MOVZX_R32_RM16, ICRegisters.edx, ICRegisters.bx));
	}

	@Test
	void movzx_r16_m() {
		{ /* if (src.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.movzx(dx, word_ptr(0x0L).base(edx)), Instruction.create(Code.MOVZX_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (src.size == MemoryOperandSize.BYTE) */
			testAssembler(c -> c.movzx(dx, byte_ptr(0x0L).base(edx)), Instruction.create(Code.MOVZX_R16_RM8, ICRegisters.dx, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.movzx(dx, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.MOVZX_R16_RM8, ICRegisters.dx, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void movzx_r32_m() {
		{ /* if (src.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.movzx(edx, word_ptr(0x0L).base(edx)), Instruction.create(Code.MOVZX_R32_RM16, ICRegisters.edx, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (src.size == MemoryOperandSize.BYTE) */
			testAssembler(c -> c.movzx(edx, byte_ptr(0x0L).base(edx)), Instruction.create(Code.MOVZX_R32_RM8, ICRegisters.edx, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.movzx(edx, zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.MOVZX_R32_RM8, ICRegisters.edx, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void mpsadbw_xmm_xmm_i() {
		testAssembler(c -> c.mpsadbw(xmm2, xmm3, -5), Instruction.create(Code.MPSADBW_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void mpsadbw_xmm_m_i() {
		testAssembler(c -> c.mpsadbw(xmm2, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.MPSADBW_XMM_XMMM128_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void mul_r8() {
		testAssembler(c -> c.mul(dl), Instruction.create(Code.MUL_RM8, ICRegisters.dl));
	}

	@Test
	void mul_r16() {
		testAssembler(c -> c.mul(dx), Instruction.create(Code.MUL_RM16, ICRegisters.dx));
	}

	@Test
	void mul_r32() {
		testAssembler(c -> c.mul(edx), Instruction.create(Code.MUL_RM32, ICRegisters.edx));
	}

	@Test
	void mul_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			// Skipping MUL_RM64 - Not supported by current bitness
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.mul(dword_ptr(0x0L).base(edx)), Instruction.create(Code.MUL_RM32, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.mul(word_ptr(0x0L).base(edx)), Instruction.create(Code.MUL_RM16, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.BYTE) */
			testAssembler(c -> c.mul(byte_ptr(0x0L).base(edx)), Instruction.create(Code.MUL_RM8, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.mul(zmmword_ptr(0x0L).base(edx)), Instruction.create(Code.MUL_RM8, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void mulpd_xmm_xmm() {
		testAssembler(c -> c.mulpd(xmm2, xmm3), Instruction.create(Code.MULPD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void mulpd_xmm_m() {
		testAssembler(c -> c.mulpd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MULPD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void mulps_xmm_xmm() {
		testAssembler(c -> c.mulps(xmm2, xmm3), Instruction.create(Code.MULPS_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void mulps_xmm_m() {
		testAssembler(c -> c.mulps(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MULPS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void mulsd_xmm_xmm() {
		testAssembler(c -> c.mulsd(xmm2, xmm3), Instruction.create(Code.MULSD_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void mulsd_xmm_m() {
		testAssembler(c -> c.mulsd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MULSD_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void mulss_xmm_xmm() {
		testAssembler(c -> c.mulss(xmm2, xmm3), Instruction.create(Code.MULSS_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void mulss_xmm_m() {
		testAssembler(c -> c.mulss(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.MULSS_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void mulx_r32_r32_r32() {
		testAssembler(c -> c.mulx(edx, ebx, esp), Instruction.create(Code.VEX_MULX_R32_R32_RM32, ICRegisters.edx, ICRegisters.ebx, ICRegisters.esp));
	}

	@Test
	void mulx_r32_r32_m() {
		testAssembler(c -> c.mulx(edx, ebx, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_MULX_R32_R32_RM32, ICRegisters.edx, ICRegisters.ebx, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void mwait() {
		testAssembler(c -> c.mwait(), Instruction.create(Code.MWAIT));
	}

	@Test
	void mwaitx() {
		testAssembler(c -> c.mwaitx(), Instruction.create(Code.MWAITX));
	}

	@Test
	void vmaskmovdqu_xmm_xmm() {
		testAssembler(c -> c.vmaskmovdqu(xmm2, xmm3), Instruction.createVmaskmovdqu(32, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vmaskmovpd_m_xmm_xmm() {
		testAssembler(c -> c.vmaskmovpd(mem_ptr(0x0L).base(ecx), xmm3, xmm4), Instruction.create(Code.VEX_VMASKMOVPD_M128_XMM_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vmaskmovpd_m_ymm_ymm() {
		testAssembler(c -> c.vmaskmovpd(mem_ptr(0x0L).base(ecx), ymm3, ymm4), Instruction.create(Code.VEX_VMASKMOVPD_M256_YMM_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vmaskmovpd_xmm_xmm_m() {
		testAssembler(c -> c.vmaskmovpd(xmm2, xmm3, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMASKMOVPD_XMM_XMM_M128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vmaskmovpd_ymm_ymm_m() {
		testAssembler(c -> c.vmaskmovpd(ymm2, ymm3, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMASKMOVPD_YMM_YMM_M256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vmaskmovps_m_xmm_xmm() {
		testAssembler(c -> c.vmaskmovps(mem_ptr(0x0L).base(ecx), xmm3, xmm4), Instruction.create(Code.VEX_VMASKMOVPS_M128_XMM_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3, ICRegisters.xmm4));
	}

	@Test
	void vmaskmovps_m_ymm_ymm() {
		testAssembler(c -> c.vmaskmovps(mem_ptr(0x0L).base(ecx), ymm3, ymm4), Instruction.create(Code.VEX_VMASKMOVPS_M256_YMM_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3, ICRegisters.ymm4));
	}

	@Test
	void vmaskmovps_xmm_xmm_m() {
		testAssembler(c -> c.vmaskmovps(xmm2, xmm3, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMASKMOVPS_XMM_XMM_M128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vmaskmovps_ymm_ymm_m() {
		testAssembler(c -> c.vmaskmovps(ymm2, ymm3, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMASKMOVPS_YMM_YMM_M256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vmaxpd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmaxpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VMAXPD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmaxpd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMAXPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmaxpd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmaxpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VMAXPD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmaxpd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VMAXPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmaxpd_zmm_zmm_zmm() {
		testAssembler(c -> c.vmaxpd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VMAXPD_ZMM_K1Z_ZMM_ZMMM512B64_SAE, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vmaxpd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vmaxpd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VMAXPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmaxpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMAXPD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmaxpd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMAXPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmaxpd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vmaxpd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VMAXPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmaxpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMAXPD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmaxpd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMAXPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmaxpd_zmm_zmm_m() {
		testAssembler(c -> c.vmaxpd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMAXPD_ZMM_K1Z_ZMM_ZMMM512B64_SAE, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmaxph_xmm_xmm_xmm() {
		testAssembler(c -> c.vmaxph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMAXPH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vmaxph_ymm_ymm_ymm() {
		testAssembler(c -> c.vmaxph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VMAXPH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vmaxph_zmm_zmm_zmm() {
		testAssembler(c -> c.vmaxph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VMAXPH_ZMM_K1Z_ZMM_ZMMM512B16_SAE, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vmaxph_xmm_xmm_m() {
		testAssembler(c -> c.vmaxph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMAXPH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmaxph_ymm_ymm_m() {
		testAssembler(c -> c.vmaxph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMAXPH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmaxph_zmm_zmm_m() {
		testAssembler(c -> c.vmaxph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMAXPH_ZMM_K1Z_ZMM_ZMMM512B16_SAE, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmaxps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmaxps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VMAXPS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmaxps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMAXPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmaxps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmaxps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VMAXPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmaxps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VMAXPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmaxps_zmm_zmm_zmm() {
		testAssembler(c -> c.vmaxps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VMAXPS_ZMM_K1Z_ZMM_ZMMM512B32_SAE, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vmaxps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vmaxps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VMAXPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmaxps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMAXPS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmaxps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMAXPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmaxps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vmaxps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VMAXPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmaxps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMAXPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmaxps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMAXPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmaxps_zmm_zmm_m() {
		testAssembler(c -> c.vmaxps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMAXPS_ZMM_K1Z_ZMM_ZMMM512B32_SAE, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmaxsd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmaxsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VMAXSD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmaxsd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMAXSD_XMM_K1Z_XMM_XMMM64_SAE, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmaxsd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmaxsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMAXSD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmaxsd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMAXSD_XMM_K1Z_XMM_XMMM64_SAE, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmaxsh_xmm_xmm_xmm() {
		testAssembler(c -> c.vmaxsh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMAXSH_XMM_K1Z_XMM_XMMM16_SAE, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vmaxsh_xmm_xmm_m() {
		testAssembler(c -> c.vmaxsh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMAXSH_XMM_K1Z_XMM_XMMM16_SAE, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmaxss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmaxss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VMAXSS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmaxss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMAXSS_XMM_K1Z_XMM_XMMM32_SAE, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmaxss_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmaxss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMAXSS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmaxss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMAXSS_XMM_K1Z_XMM_XMMM32_SAE, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vminpd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vminpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VMINPD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vminpd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMINPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vminpd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vminpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VMINPD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vminpd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VMINPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vminpd_zmm_zmm_zmm() {
		testAssembler(c -> c.vminpd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VMINPD_ZMM_K1Z_ZMM_ZMMM512B64_SAE, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vminpd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vminpd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VMINPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vminpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMINPD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vminpd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMINPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vminpd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vminpd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VMINPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vminpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMINPD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vminpd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMINPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vminpd_zmm_zmm_m() {
		testAssembler(c -> c.vminpd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMINPD_ZMM_K1Z_ZMM_ZMMM512B64_SAE, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vminph_xmm_xmm_xmm() {
		testAssembler(c -> c.vminph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMINPH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vminph_ymm_ymm_ymm() {
		testAssembler(c -> c.vminph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VMINPH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vminph_zmm_zmm_zmm() {
		testAssembler(c -> c.vminph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VMINPH_ZMM_K1Z_ZMM_ZMMM512B16_SAE, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vminph_xmm_xmm_m() {
		testAssembler(c -> c.vminph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMINPH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vminph_ymm_ymm_m() {
		testAssembler(c -> c.vminph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMINPH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vminph_zmm_zmm_m() {
		testAssembler(c -> c.vminph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMINPH_ZMM_K1Z_ZMM_ZMMM512B16_SAE, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vminps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vminps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VMINPS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vminps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMINPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vminps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vminps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VMINPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vminps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VMINPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vminps_zmm_zmm_zmm() {
		testAssembler(c -> c.vminps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VMINPS_ZMM_K1Z_ZMM_ZMMM512B32_SAE, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vminps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vminps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VMINPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vminps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMINPS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vminps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMINPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vminps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vminps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VMINPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vminps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMINPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vminps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMINPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vminps_zmm_zmm_m() {
		testAssembler(c -> c.vminps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMINPS_ZMM_K1Z_ZMM_ZMMM512B32_SAE, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vminsd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vminsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VMINSD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vminsd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMINSD_XMM_K1Z_XMM_XMMM64_SAE, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vminsd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vminsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMINSD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vminsd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMINSD_XMM_K1Z_XMM_XMMM64_SAE, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vminsh_xmm_xmm_xmm() {
		testAssembler(c -> c.vminsh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMINSH_XMM_K1Z_XMM_XMMM16_SAE, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vminsh_xmm_xmm_m() {
		testAssembler(c -> c.vminsh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMINSH_XMM_K1Z_XMM_XMMM16_SAE, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vminss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vminss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VMINSS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vminss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMINSS_XMM_K1Z_XMM_XMMM32_SAE, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vminss_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vminss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMINSS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vminss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMINSS_XMM_K1Z_XMM_XMMM32_SAE, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovapd_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovapd(xmm2, xmm3), Instruction.create(Code.VEX_VMOVAPD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovapd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVAPD_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovapd_m_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovapd(xmmword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.VEX_VMOVAPD_XMMM128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovapd(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVAPD_XMMM128_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovapd_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovapd(ymm2, ymm3), Instruction.create(Code.VEX_VMOVAPD_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovapd(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVAPD_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovapd_m_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovapd(ymmword_ptr(0x0L).base(ecx), ymm3), Instruction.create(Code.VEX_VMOVAPD_YMMM256_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovapd(ymmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVAPD_YMMM256_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovapd_zmm_zmm() {
		testAssembler(c -> c.vmovapd(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVAPD_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovapd_m_zmm() {
		testAssembler(c -> c.vmovapd(zmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVAPD_ZMMM512_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovapd_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovapd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVAPD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovapd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVAPD_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovapd_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovapd(ymm2, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVAPD_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovapd(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVAPD_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovapd_zmm_m() {
		testAssembler(c -> c.vmovapd(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVAPD_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovaps_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovaps(xmm2, xmm3), Instruction.create(Code.VEX_VMOVAPS_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovaps(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVAPS_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovaps_m_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovaps(xmmword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.VEX_VMOVAPS_XMMM128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovaps(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVAPS_XMMM128_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovaps_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovaps(ymm2, ymm3), Instruction.create(Code.VEX_VMOVAPS_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovaps(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVAPS_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovaps_m_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovaps(ymmword_ptr(0x0L).base(ecx), ymm3), Instruction.create(Code.VEX_VMOVAPS_YMMM256_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovaps(ymmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVAPS_YMMM256_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovaps_zmm_zmm() {
		testAssembler(c -> c.vmovaps(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVAPS_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovaps_m_zmm() {
		testAssembler(c -> c.vmovaps(zmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVAPS_ZMMM512_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovaps_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovaps(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVAPS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovaps(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVAPS_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovaps_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovaps(ymm2, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVAPS_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovaps(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVAPS_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovaps_zmm_m() {
		testAssembler(c -> c.vmovaps(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVAPS_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovd_xmm_r32() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovd(xmm2, ebx), Instruction.create(Code.VEX_VMOVD_XMM_RM32, ICRegisters.xmm2, ICRegisters.ebx), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovd(xmm2, ebx), Instruction.create(Code.EVEX_VMOVD_XMM_RM32, ICRegisters.xmm2, ICRegisters.ebx), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovd_r32_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovd(edx, xmm3), Instruction.create(Code.VEX_VMOVD_RM32_XMM, ICRegisters.edx, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovd(edx, xmm3), Instruction.create(Code.EVEX_VMOVD_RM32_XMM, ICRegisters.edx, ICRegisters.xmm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovd_m_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovd(dword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.VEX_VMOVD_RM32_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovd(dword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.EVEX_VMOVD_RM32_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovd_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovd(xmm2, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVD_XMM_RM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovd(xmm2, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VMOVD_XMM_RM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovddup_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovddup(xmm2, xmm3), Instruction.create(Code.VEX_VMOVDDUP_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovddup(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVDDUP_XMM_K1Z_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovddup_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovddup(ymm2, ymm3), Instruction.create(Code.VEX_VMOVDDUP_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovddup(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVDDUP_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovddup_zmm_zmm() {
		testAssembler(c -> c.vmovddup(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVDDUP_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovddup_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovddup(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVDDUP_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovddup(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDDUP_XMM_K1Z_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovddup_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovddup(ymm2, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVDDUP_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovddup(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDDUP_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovddup_zmm_m() {
		testAssembler(c -> c.vmovddup(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDDUP_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqa_xmm_xmm() {
		testAssembler(c -> c.vmovdqa(xmm2, xmm3), Instruction.create(Code.VEX_VMOVDQA_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vmovdqa_m_xmm() {
		testAssembler(c -> c.vmovdqa(xmmword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.VEX_VMOVDQA_XMMM128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void vmovdqa_ymm_ymm() {
		testAssembler(c -> c.vmovdqa(ymm2, ymm3), Instruction.create(Code.VEX_VMOVDQA_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3));
	}

	@Test
	void vmovdqa_m_ymm() {
		testAssembler(c -> c.vmovdqa(ymmword_ptr(0x0L).base(ecx), ymm3), Instruction.create(Code.VEX_VMOVDQA_YMMM256_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3));
	}

	@Test
	void vmovdqa_xmm_m() {
		testAssembler(c -> c.vmovdqa(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVDQA_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vmovdqa_ymm_m() {
		testAssembler(c -> c.vmovdqa(ymm2, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVDQA_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vmovdqa32_xmm_xmm() {
		testAssembler(c -> c.vmovdqa32(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVDQA32_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vmovdqa32_m_xmm() {
		testAssembler(c -> c.vmovdqa32(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVDQA32_XMMM128_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vmovdqa32_ymm_ymm() {
		testAssembler(c -> c.vmovdqa32(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVDQA32_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vmovdqa32_m_ymm() {
		testAssembler(c -> c.vmovdqa32(ymmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVDQA32_YMMM256_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vmovdqa32_zmm_zmm() {
		testAssembler(c -> c.vmovdqa32(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVDQA32_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovdqa32_m_zmm() {
		testAssembler(c -> c.vmovdqa32(zmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVDQA32_ZMMM512_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovdqa32_xmm_m() {
		testAssembler(c -> c.vmovdqa32(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQA32_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqa32_ymm_m() {
		testAssembler(c -> c.vmovdqa32(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQA32_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqa32_zmm_m() {
		testAssembler(c -> c.vmovdqa32(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQA32_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqa64_xmm_xmm() {
		testAssembler(c -> c.vmovdqa64(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVDQA64_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vmovdqa64_m_xmm() {
		testAssembler(c -> c.vmovdqa64(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVDQA64_XMMM128_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vmovdqa64_ymm_ymm() {
		testAssembler(c -> c.vmovdqa64(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVDQA64_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vmovdqa64_m_ymm() {
		testAssembler(c -> c.vmovdqa64(ymmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVDQA64_YMMM256_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vmovdqa64_zmm_zmm() {
		testAssembler(c -> c.vmovdqa64(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVDQA64_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovdqa64_m_zmm() {
		testAssembler(c -> c.vmovdqa64(zmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVDQA64_ZMMM512_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovdqa64_xmm_m() {
		testAssembler(c -> c.vmovdqa64(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQA64_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqa64_ymm_m() {
		testAssembler(c -> c.vmovdqa64(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQA64_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqa64_zmm_m() {
		testAssembler(c -> c.vmovdqa64(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQA64_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqu_xmm_xmm() {
		testAssembler(c -> c.vmovdqu(xmm2, xmm3), Instruction.create(Code.VEX_VMOVDQU_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vmovdqu_m_xmm() {
		testAssembler(c -> c.vmovdqu(xmmword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.VEX_VMOVDQU_XMMM128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void vmovdqu_ymm_ymm() {
		testAssembler(c -> c.vmovdqu(ymm2, ymm3), Instruction.create(Code.VEX_VMOVDQU_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3));
	}

	@Test
	void vmovdqu_m_ymm() {
		testAssembler(c -> c.vmovdqu(ymmword_ptr(0x0L).base(ecx), ymm3), Instruction.create(Code.VEX_VMOVDQU_YMMM256_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3));
	}

	@Test
	void vmovdqu_xmm_m() {
		testAssembler(c -> c.vmovdqu(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVDQU_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vmovdqu_ymm_m() {
		testAssembler(c -> c.vmovdqu(ymm2, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVDQU_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vmovdqu16_xmm_xmm() {
		testAssembler(c -> c.vmovdqu16(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVDQU16_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vmovdqu16_m_xmm() {
		testAssembler(c -> c.vmovdqu16(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVDQU16_XMMM128_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vmovdqu16_ymm_ymm() {
		testAssembler(c -> c.vmovdqu16(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVDQU16_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vmovdqu16_m_ymm() {
		testAssembler(c -> c.vmovdqu16(ymmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVDQU16_YMMM256_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vmovdqu16_zmm_zmm() {
		testAssembler(c -> c.vmovdqu16(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVDQU16_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovdqu16_m_zmm() {
		testAssembler(c -> c.vmovdqu16(zmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVDQU16_ZMMM512_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovdqu16_xmm_m() {
		testAssembler(c -> c.vmovdqu16(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQU16_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqu16_ymm_m() {
		testAssembler(c -> c.vmovdqu16(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQU16_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqu16_zmm_m() {
		testAssembler(c -> c.vmovdqu16(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQU16_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqu32_xmm_xmm() {
		testAssembler(c -> c.vmovdqu32(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVDQU32_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vmovdqu32_m_xmm() {
		testAssembler(c -> c.vmovdqu32(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVDQU32_XMMM128_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vmovdqu32_ymm_ymm() {
		testAssembler(c -> c.vmovdqu32(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVDQU32_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vmovdqu32_m_ymm() {
		testAssembler(c -> c.vmovdqu32(ymmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVDQU32_YMMM256_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vmovdqu32_zmm_zmm() {
		testAssembler(c -> c.vmovdqu32(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVDQU32_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovdqu32_m_zmm() {
		testAssembler(c -> c.vmovdqu32(zmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVDQU32_ZMMM512_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovdqu32_xmm_m() {
		testAssembler(c -> c.vmovdqu32(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQU32_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqu32_ymm_m() {
		testAssembler(c -> c.vmovdqu32(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQU32_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqu32_zmm_m() {
		testAssembler(c -> c.vmovdqu32(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQU32_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqu64_xmm_xmm() {
		testAssembler(c -> c.vmovdqu64(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVDQU64_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vmovdqu64_m_xmm() {
		testAssembler(c -> c.vmovdqu64(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVDQU64_XMMM128_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vmovdqu64_ymm_ymm() {
		testAssembler(c -> c.vmovdqu64(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVDQU64_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vmovdqu64_m_ymm() {
		testAssembler(c -> c.vmovdqu64(ymmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVDQU64_YMMM256_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vmovdqu64_zmm_zmm() {
		testAssembler(c -> c.vmovdqu64(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVDQU64_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovdqu64_m_zmm() {
		testAssembler(c -> c.vmovdqu64(zmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVDQU64_ZMMM512_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovdqu64_xmm_m() {
		testAssembler(c -> c.vmovdqu64(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQU64_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqu64_ymm_m() {
		testAssembler(c -> c.vmovdqu64(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQU64_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqu64_zmm_m() {
		testAssembler(c -> c.vmovdqu64(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQU64_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqu8_xmm_xmm() {
		testAssembler(c -> c.vmovdqu8(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVDQU8_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vmovdqu8_m_xmm() {
		testAssembler(c -> c.vmovdqu8(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVDQU8_XMMM128_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vmovdqu8_ymm_ymm() {
		testAssembler(c -> c.vmovdqu8(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVDQU8_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vmovdqu8_m_ymm() {
		testAssembler(c -> c.vmovdqu8(ymmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVDQU8_YMMM256_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1));
	}

	@Test
	void vmovdqu8_zmm_zmm() {
		testAssembler(c -> c.vmovdqu8(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVDQU8_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovdqu8_m_zmm() {
		testAssembler(c -> c.vmovdqu8(zmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVDQU8_ZMMM512_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovdqu8_xmm_m() {
		testAssembler(c -> c.vmovdqu8(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQU8_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqu8_ymm_m() {
		testAssembler(c -> c.vmovdqu8(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQU8_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovdqu8_zmm_m() {
		testAssembler(c -> c.vmovdqu8(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVDQU8_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovhlps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovhlps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VMOVHLPS_XMM_XMM_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovhlps(xmm2, xmm3, xmm4), Instruction.create(Code.EVEX_VMOVHLPS_XMM_XMM_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovhpd_m_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovhpd(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.VEX_VMOVHPD_M64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovhpd(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.EVEX_VMOVHPD_M64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovhpd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovhpd(xmm2, xmm3, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVHPD_XMM_XMM_M64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovhpd(xmm2, xmm3, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VMOVHPD_XMM_XMM_M64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovhps_m_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovhps(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.VEX_VMOVHPS_M64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovhps(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.EVEX_VMOVHPS_M64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovhps_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovhps(xmm2, xmm3, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVHPS_XMM_XMM_M64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovhps(xmm2, xmm3, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VMOVHPS_XMM_XMM_M64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovlhps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovlhps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VMOVLHPS_XMM_XMM_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovlhps(xmm2, xmm3, xmm4), Instruction.create(Code.EVEX_VMOVLHPS_XMM_XMM_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovlpd_m_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovlpd(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.VEX_VMOVLPD_M64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovlpd(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.EVEX_VMOVLPD_M64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovlpd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovlpd(xmm2, xmm3, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVLPD_XMM_XMM_M64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovlpd(xmm2, xmm3, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VMOVLPD_XMM_XMM_M64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovlps_m_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovlps(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.VEX_VMOVLPS_M64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovlps(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.EVEX_VMOVLPS_M64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovlps_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovlps(xmm2, xmm3, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVLPS_XMM_XMM_M64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovlps(xmm2, xmm3, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VMOVLPS_XMM_XMM_M64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovmskpd_r32_xmm() {
		testAssembler(c -> c.vmovmskpd(edx, xmm3), Instruction.create(Code.VEX_VMOVMSKPD_R32_XMM, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void vmovmskpd_r32_ymm() {
		testAssembler(c -> c.vmovmskpd(edx, ymm3), Instruction.create(Code.VEX_VMOVMSKPD_R32_YMM, ICRegisters.edx, ICRegisters.ymm3));
	}

	@Test
	void vmovmskps_r32_xmm() {
		testAssembler(c -> c.vmovmskps(edx, xmm3), Instruction.create(Code.VEX_VMOVMSKPS_R32_XMM, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void vmovmskps_r32_ymm() {
		testAssembler(c -> c.vmovmskps(edx, ymm3), Instruction.create(Code.VEX_VMOVMSKPS_R32_YMM, ICRegisters.edx, ICRegisters.ymm3));
	}

	@Test
	void vmovntdq_m_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovntdq(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.VEX_VMOVNTDQ_M128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovntdq(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.EVEX_VMOVNTDQ_M128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovntdq_m_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovntdq(mem_ptr(0x0L).base(ecx), ymm3), Instruction.create(Code.VEX_VMOVNTDQ_M256_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovntdq(mem_ptr(0x0L).base(ecx), ymm3), Instruction.create(Code.EVEX_VMOVNTDQ_M256_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovntdq_m_zmm() {
		testAssembler(c -> c.vmovntdq(mem_ptr(0x0L).base(ecx), zmm3), Instruction.create(Code.EVEX_VMOVNTDQ_M512_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3));
	}

	@Test
	void vmovntdqa_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovntdqa(xmm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVNTDQA_XMM_M128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovntdqa(xmm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VMOVNTDQA_XMM_M128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovntdqa_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovntdqa(ymm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVNTDQA_YMM_M256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovntdqa(ymm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VMOVNTDQA_YMM_M256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovntdqa_zmm_m() {
		testAssembler(c -> c.vmovntdqa(zmm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VMOVNTDQA_ZMM_M512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vmovntpd_m_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovntpd(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.VEX_VMOVNTPD_M128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovntpd(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.EVEX_VMOVNTPD_M128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovntpd_m_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovntpd(mem_ptr(0x0L).base(ecx), ymm3), Instruction.create(Code.VEX_VMOVNTPD_M256_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovntpd(mem_ptr(0x0L).base(ecx), ymm3), Instruction.create(Code.EVEX_VMOVNTPD_M256_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovntpd_m_zmm() {
		testAssembler(c -> c.vmovntpd(mem_ptr(0x0L).base(ecx), zmm3), Instruction.create(Code.EVEX_VMOVNTPD_M512_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3));
	}

	@Test
	void vmovntps_m_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovntps(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.VEX_VMOVNTPS_M128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovntps(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.EVEX_VMOVNTPS_M128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovntps_m_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovntps(mem_ptr(0x0L).base(ecx), ymm3), Instruction.create(Code.VEX_VMOVNTPS_M256_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovntps(mem_ptr(0x0L).base(ecx), ymm3), Instruction.create(Code.EVEX_VMOVNTPS_M256_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovntps_m_zmm() {
		testAssembler(c -> c.vmovntps(mem_ptr(0x0L).base(ecx), zmm3), Instruction.create(Code.EVEX_VMOVNTPS_M512_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3));
	}

	@Test
	void vmovq_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovq(xmm2, xmm3), Instruction.create(Code.VEX_VMOVQ_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovq(xmm2, xmm3), Instruction.create(Code.EVEX_VMOVQ_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovq_m_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovq(xmmword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.VEX_VMOVQ_XMMM64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovq(xmmword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.EVEX_VMOVQ_XMMM64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovq_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVQ_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovq(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VMOVQ_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovsd_m_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovsd(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.VEX_VMOVSD_M64_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovsd(mem_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVSD_M64_K1_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovsd_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovsd(xmm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVSD_XMM_M64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovsd(xmm2.k1(), mem_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVSD_XMM_K1Z_M64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovsd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VMOVSD_XMM_XMM_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovsd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMOVSD_XMM_K1Z_XMM_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovsh_m_xmm() {
		testAssembler(c -> c.vmovsh(mem_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVSH_M16_K1_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1));
	}

	@Test
	void vmovsh_xmm_m() {
		testAssembler(c -> c.vmovsh(xmm2.k1(), mem_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVSH_XMM_K1Z_M16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovsh_xmm_xmm_xmm() {
		testAssembler(c -> c.vmovsh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMOVSH_XMM_K1Z_XMM_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vmovshdup_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovshdup(xmm2, xmm3), Instruction.create(Code.VEX_VMOVSHDUP_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovshdup(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVSHDUP_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovshdup_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovshdup(ymm2, ymm3), Instruction.create(Code.VEX_VMOVSHDUP_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovshdup(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVSHDUP_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovshdup_zmm_zmm() {
		testAssembler(c -> c.vmovshdup(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVSHDUP_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovshdup_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovshdup(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVSHDUP_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovshdup(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVSHDUP_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovshdup_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovshdup(ymm2, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVSHDUP_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovshdup(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVSHDUP_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovshdup_zmm_m() {
		testAssembler(c -> c.vmovshdup(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVSHDUP_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovsldup_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovsldup(xmm2, xmm3), Instruction.create(Code.VEX_VMOVSLDUP_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovsldup(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVSLDUP_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovsldup_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovsldup(ymm2, ymm3), Instruction.create(Code.VEX_VMOVSLDUP_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovsldup(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVSLDUP_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovsldup_zmm_zmm() {
		testAssembler(c -> c.vmovsldup(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVSLDUP_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovsldup_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovsldup(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVSLDUP_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovsldup(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVSLDUP_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovsldup_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovsldup(ymm2, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVSLDUP_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovsldup(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVSLDUP_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovsldup_zmm_m() {
		testAssembler(c -> c.vmovsldup(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVSLDUP_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovss_m_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovss(mem_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.VEX_VMOVSS_M32_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovss(mem_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVSS_M32_K1_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovss_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovss(xmm2, mem_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVSS_XMM_M32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovss(xmm2.k1(), mem_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVSS_XMM_K1Z_M32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VMOVSS_XMM_XMM_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMOVSS_XMM_K1Z_XMM_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovupd_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovupd(xmm2, xmm3), Instruction.create(Code.VEX_VMOVUPD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovupd(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVUPD_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovupd_m_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovupd(xmmword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.VEX_VMOVUPD_XMMM128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovupd(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVUPD_XMMM128_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovupd_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovupd(ymm2, ymm3), Instruction.create(Code.VEX_VMOVUPD_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovupd(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVUPD_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovupd_m_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovupd(ymmword_ptr(0x0L).base(ecx), ymm3), Instruction.create(Code.VEX_VMOVUPD_YMMM256_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovupd(ymmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVUPD_YMMM256_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovupd_zmm_zmm() {
		testAssembler(c -> c.vmovupd(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVUPD_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovupd_m_zmm() {
		testAssembler(c -> c.vmovupd(zmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVUPD_ZMMM512_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovupd_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovupd(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVUPD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovupd(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVUPD_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovupd_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovupd(ymm2, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVUPD_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovupd(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVUPD_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovupd_zmm_m() {
		testAssembler(c -> c.vmovupd(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVUPD_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovups_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovups(xmm2, xmm3), Instruction.create(Code.VEX_VMOVUPS_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovups(xmm2.k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVUPS_XMM_K1Z_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovups_m_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovups(xmmword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.VEX_VMOVUPS_XMMM128_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovups(xmmword_ptr(0x0L).base(ecx).k1(), xmm3), applyK(Instruction.create(Code.EVEX_VMOVUPS_XMMM128_K1Z_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovups_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovups(ymm2, ymm3), Instruction.create(Code.VEX_VMOVUPS_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovups(ymm2.k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVUPS_YMM_K1Z_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovups_m_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovups(ymmword_ptr(0x0L).base(ecx), ymm3), Instruction.create(Code.VEX_VMOVUPS_YMMM256_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovups(ymmword_ptr(0x0L).base(ecx).k1(), ymm3), applyK(Instruction.create(Code.EVEX_VMOVUPS_YMMM256_K1Z_YMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm3), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovups_zmm_zmm() {
		testAssembler(c -> c.vmovups(zmm2.k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVUPS_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovups_m_zmm() {
		testAssembler(c -> c.vmovups(zmmword_ptr(0x0L).base(ecx).k1(), zmm3), applyK(Instruction.create(Code.EVEX_VMOVUPS_ZMMM512_K1Z_ZMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.zmm3), Register.K1));
	}

	@Test
	void vmovups_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovups(xmm2, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVUPS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovups(xmm2.k1(), xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVUPS_XMM_K1Z_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovups_ymm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmovups(ymm2, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMOVUPS_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmovups(ymm2.k1(), ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVUPS_YMM_K1Z_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmovups_zmm_m() {
		testAssembler(c -> c.vmovups(zmm2.k1(), zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMOVUPS_ZMM_K1Z_ZMMM512, ICRegisters.zmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmovw_xmm_r32() {
		testAssembler(c -> c.vmovw(xmm2, ebx), Instruction.create(Code.EVEX_VMOVW_XMM_R32M16, ICRegisters.xmm2, ICRegisters.ebx));
	}

	@Test
	void vmovw_r32_xmm() {
		testAssembler(c -> c.vmovw(edx, xmm3), Instruction.create(Code.EVEX_VMOVW_R32M16_XMM, ICRegisters.edx, ICRegisters.xmm3));
	}

	@Test
	void vmovw_m_xmm() {
		testAssembler(c -> c.vmovw(dword_ptr(0x0L).base(ecx), xmm3), Instruction.create(Code.EVEX_VMOVW_R32M16_XMM, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm3));
	}

	@Test
	void vmovw_xmm_m() {
		testAssembler(c -> c.vmovw(xmm2, dword_ptr(0x0L).base(ecx)), Instruction.create(Code.EVEX_VMOVW_XMM_R32M16, ICRegisters.xmm2, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vmpsadbw_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vmpsadbw(xmm2, xmm3, xmm4, -5), Instruction.create(Code.VEX_VMPSADBW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vmpsadbw_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vmpsadbw(ymm2, ymm3, ymm4, -5), Instruction.create(Code.VEX_VMPSADBW_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5));
	}

	@Test
	void vmpsadbw_xmm_xmm_m_i() {
		testAssembler(c -> c.vmpsadbw(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VMPSADBW_XMM_XMM_XMMM128_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vmpsadbw_ymm_ymm_m_i() {
		testAssembler(c -> c.vmpsadbw(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx), -5), Instruction.create(Code.VEX_VMPSADBW_YMM_YMM_YMMM256_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vmulpd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmulpd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VMULPD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmulpd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMULPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmulpd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmulpd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VMULPD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmulpd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VMULPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmulpd_zmm_zmm_zmm() {
		testAssembler(c -> c.vmulpd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VMULPD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vmulpd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vmulpd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VMULPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmulpd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMULPD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmulpd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMULPD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmulpd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vmulpd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VMULPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmulpd(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMULPD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmulpd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMULPD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmulpd_zmm_zmm_m() {
		testAssembler(c -> c.vmulpd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMULPD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmulph_xmm_xmm_xmm() {
		testAssembler(c -> c.vmulph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMULPH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vmulph_ymm_ymm_ymm() {
		testAssembler(c -> c.vmulph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VMULPH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vmulph_zmm_zmm_zmm() {
		testAssembler(c -> c.vmulph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VMULPH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vmulph_xmm_xmm_m() {
		testAssembler(c -> c.vmulph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMULPH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmulph_ymm_ymm_m() {
		testAssembler(c -> c.vmulph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMULPH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmulph_zmm_zmm_m() {
		testAssembler(c -> c.vmulph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMULPH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmulps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmulps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VMULPS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmulps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMULPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmulps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmulps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VMULPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmulps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VMULPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmulps_zmm_zmm_zmm() {
		testAssembler(c -> c.vmulps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VMULPS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vmulps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vmulps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VMULPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmulps(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMULPS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmulps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMULPS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmulps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vmulps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(edx)), applyK(Instruction.create(Code.EVEX_VMULPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.edx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmulps(ymm2, ymm3, ymmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMULPS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmulps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMULPS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmulps_zmm_zmm_m() {
		testAssembler(c -> c.vmulps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMULPS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmulsd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmulsd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VMULSD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmulsd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMULSD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmulsd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmulsd(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMULSD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmulsd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMULSD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmulsh_xmm_xmm_xmm() {
		testAssembler(c -> c.vmulsh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMULSH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vmulsh_xmm_xmm_m() {
		testAssembler(c -> c.vmulsh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMULSH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vmulss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmulss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VMULSS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmulss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VMULSS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vmulss_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vmulss(xmm2, xmm3, xmmword_ptr(0x0L).base(ecx)), Instruction.create(Code.VEX_VMULSS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vmulss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(ecx)), applyK(Instruction.create(Code.EVEX_VMULSS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.ecx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

}
