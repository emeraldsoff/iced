// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

package com.github.icedland.iced.x86.asm;

import org.junit.jupiter.api.Test;

import com.github.icedland.iced.x86.*;
import static com.github.icedland.iced.x86.asm.AsmRegisters.*;

final class CodeAssembler64GenITests extends CodeAssemblerTestsBase {
	CodeAssembler64GenITests() {
		super(64);
	}

	@Test
	void idiv_r8() {
		testAssembler(c -> c.idiv(dl), Instruction.create(Code.IDIV_RM8, ICRegisters.dl));
	}

	@Test
	void idiv_r16() {
		testAssembler(c -> c.idiv(dx), Instruction.create(Code.IDIV_RM16, ICRegisters.dx));
	}

	@Test
	void idiv_r32() {
		testAssembler(c -> c.idiv(edx), Instruction.create(Code.IDIV_RM32, ICRegisters.edx));
	}

	@Test
	void idiv_r64() {
		testAssembler(c -> c.idiv(rdx), Instruction.create(Code.IDIV_RM64, ICRegisters.rdx));
	}

	@Test
	void idiv_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.idiv(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.IDIV_RM64, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.idiv(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.IDIV_RM32, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.idiv(word_ptr(0x0L).base(rdx)), Instruction.create(Code.IDIV_RM16, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.BYTE) */
			testAssembler(c -> c.idiv(byte_ptr(0x0L).base(rdx)), Instruction.create(Code.IDIV_RM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.idiv(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.IDIV_RM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void imul_r8() {
		testAssembler(c -> c.imul(dl), Instruction.create(Code.IMUL_RM8, ICRegisters.dl));
	}

	@Test
	void imul_r16() {
		testAssembler(c -> c.imul(dx), Instruction.create(Code.IMUL_RM16, ICRegisters.dx));
	}

	@Test
	void imul_r32() {
		testAssembler(c -> c.imul(edx), Instruction.create(Code.IMUL_RM32, ICRegisters.edx));
	}

	@Test
	void imul_r64() {
		testAssembler(c -> c.imul(rdx), Instruction.create(Code.IMUL_RM64, ICRegisters.rdx));
	}

	@Test
	void imul_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.imul(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.IMUL_RM64, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.imul(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.IMUL_RM32, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.imul(word_ptr(0x0L).base(rdx)), Instruction.create(Code.IMUL_RM16, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.BYTE) */
			testAssembler(c -> c.imul(byte_ptr(0x0L).base(rdx)), Instruction.create(Code.IMUL_RM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.imul(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.IMUL_RM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void imul_r16_r16() {
		testAssembler(c -> c.imul(dx, bx), Instruction.create(Code.IMUL_R16_RM16, ICRegisters.dx, ICRegisters.bx));
	}

	@Test
	void imul_r32_r32() {
		testAssembler(c -> c.imul(edx, ebx), Instruction.create(Code.IMUL_R32_RM32, ICRegisters.edx, ICRegisters.ebx));
	}

	@Test
	void imul_r64_r64() {
		testAssembler(c -> c.imul(rdx, rbx), Instruction.create(Code.IMUL_R64_RM64, ICRegisters.rdx, ICRegisters.rbx));
	}

	@Test
	void imul_r16_m() {
		testAssembler(c -> c.imul(dx, word_ptr(0x0L).base(rcx)), Instruction.create(Code.IMUL_R16_RM16, ICRegisters.dx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void imul_r32_m() {
		testAssembler(c -> c.imul(edx, dword_ptr(0x0L).base(rcx)), Instruction.create(Code.IMUL_R32_RM32, ICRegisters.edx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void imul_r64_m() {
		testAssembler(c -> c.imul(rdx, qword_ptr(0x0L).base(rcx)), Instruction.create(Code.IMUL_R64_RM64, ICRegisters.rdx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void imul_r16_r16_i() {
		{ /* if (imm >= -0x80 && imm <= 0x7F) */
			testAssembler(c -> c.imul(dx, bx, -0x80), Instruction.create(Code.IMUL_R16_RM16_IMM8, ICRegisters.dx, ICRegisters.bx, -0x80));
			testAssembler(c -> c.imul(dx, bx, 0x7F), Instruction.create(Code.IMUL_R16_RM16_IMM8, ICRegisters.dx, ICRegisters.bx, 0x7F));
		} /* else */ testAssembler(c -> c.imul(dx, bx, 0x40B7), Instruction.create(Code.IMUL_R16_RM16_IMM16, ICRegisters.dx, ICRegisters.bx, 0x40B7));
	}

	@Test
	void imul_r32_r32_i() {
		{ /* if (imm >= -0x80 && imm <= 0x7F) */
			testAssembler(c -> c.imul(edx, ebx, -0x80), Instruction.create(Code.IMUL_R32_RM32_IMM8, ICRegisters.edx, ICRegisters.ebx, -0x80));
			testAssembler(c -> c.imul(edx, ebx, 0x7F), Instruction.create(Code.IMUL_R32_RM32_IMM8, ICRegisters.edx, ICRegisters.ebx, 0x7F));
		} /* else */ testAssembler(c -> c.imul(edx, ebx, 0x7FFFFFFF), Instruction.create(Code.IMUL_R32_RM32_IMM32, ICRegisters.edx, ICRegisters.ebx, 0x7FFFFFFF));
	}

	@Test
	void imul_r64_r64_i() {
		{ /* if (imm >= -0x80 && imm <= 0x7F) */
			testAssembler(c -> c.imul(rdx, rbx, -0x80), Instruction.create(Code.IMUL_R64_RM64_IMM8, ICRegisters.rdx, ICRegisters.rbx, -0x80));
			testAssembler(c -> c.imul(rdx, rbx, 0x7F), Instruction.create(Code.IMUL_R64_RM64_IMM8, ICRegisters.rdx, ICRegisters.rbx, 0x7F));
		} /* else */ testAssembler(c -> c.imul(rdx, rbx, -0x80000000), Instruction.create(Code.IMUL_R64_RM64_IMM32, ICRegisters.rdx, ICRegisters.rbx, -0x80000000));
	}

	@Test
	void imul_r16_m_i() {
		{ /* if (imm >= -0x80 && imm <= 0x7F) */
			testAssembler(c -> c.imul(dx, word_ptr(0x0L).base(rcx), -0x80), Instruction.create(Code.IMUL_R16_RM16_IMM8, ICRegisters.dx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80));
			testAssembler(c -> c.imul(dx, word_ptr(0x0L).base(rcx), 0x7F), Instruction.create(Code.IMUL_R16_RM16_IMM8, ICRegisters.dx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7F));
		} /* else */ testAssembler(c -> c.imul(dx, word_ptr(0x0L).base(rcx), 0x40B7), Instruction.create(Code.IMUL_R16_RM16_IMM16, ICRegisters.dx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x40B7));
	}

	@Test
	void imul_r32_m_i() {
		{ /* if (imm >= -0x80 && imm <= 0x7F) */
			testAssembler(c -> c.imul(edx, dword_ptr(0x0L).base(rcx), -0x80), Instruction.create(Code.IMUL_R32_RM32_IMM8, ICRegisters.edx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80));
			testAssembler(c -> c.imul(edx, dword_ptr(0x0L).base(rcx), 0x7F), Instruction.create(Code.IMUL_R32_RM32_IMM8, ICRegisters.edx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7F));
		} /* else */ testAssembler(c -> c.imul(edx, dword_ptr(0x0L).base(rcx), 0x7FFFFFFF), Instruction.create(Code.IMUL_R32_RM32_IMM32, ICRegisters.edx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7FFFFFFF));
	}

	@Test
	void imul_r64_m_i() {
		{ /* if (imm >= -0x80 && imm <= 0x7F) */
			testAssembler(c -> c.imul(rdx, qword_ptr(0x0L).base(rcx), -0x80), Instruction.create(Code.IMUL_R64_RM64_IMM8, ICRegisters.rdx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80));
			testAssembler(c -> c.imul(rdx, qword_ptr(0x0L).base(rcx), 0x7F), Instruction.create(Code.IMUL_R64_RM64_IMM8, ICRegisters.rdx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), 0x7F));
		} /* else */ testAssembler(c -> c.imul(rdx, qword_ptr(0x0L).base(rcx), -0x80000000), Instruction.create(Code.IMUL_R64_RM64_IMM32, ICRegisters.rdx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -0x80000000));
	}

	@Test
	void in_r8_r16() {
		testAssembler(c -> c.in(al, dx), Instruction.create(Code.IN_AL_DX, ICRegisters.al, ICRegisters.dx));
	}

	@Test
	void in_r16_r16() {
		testAssembler(c -> c.in(ax, dx), Instruction.create(Code.IN_AX_DX, ICRegisters.ax, ICRegisters.dx));
	}

	@Test
	void in_r32_r16() {
		testAssembler(c -> c.in(eax, dx), Instruction.create(Code.IN_EAX_DX, ICRegisters.eax, ICRegisters.dx));
	}

	@Test
	void in_r8_i() {
		testAssembler(c -> c.in(al, -5), Instruction.create(Code.IN_AL_IMM8, ICRegisters.al, -5));
	}

	@Test
	void in_r16_i() {
		testAssembler(c -> c.in(ax, -5), Instruction.create(Code.IN_AX_IMM8, ICRegisters.ax, -5));
	}

	@Test
	void in_r32_i() {
		testAssembler(c -> c.in(eax, -5), Instruction.create(Code.IN_EAX_IMM8, ICRegisters.eax, -5));
	}

	@Test
	void inc_r8() {
		testAssembler(c -> c.inc(dl), Instruction.create(Code.INC_RM8, ICRegisters.dl));
	}

	@Test
	void inc_r16() {
		{ /* if (getBitness() == 64) */
			testAssembler(c -> c.inc(dx), Instruction.create(Code.INC_RM16, ICRegisters.dx));
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void inc_r32() {
		{ /* if (getBitness() == 64) */
			testAssembler(c -> c.inc(edx), Instruction.create(Code.INC_RM32, ICRegisters.edx));
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void inc_r64() {
		testAssembler(c -> c.inc(rdx), Instruction.create(Code.INC_RM64, ICRegisters.rdx));
	}

	@Test
	void inc_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.inc(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.INC_RM64, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.inc(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.INC_RM32, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.inc(word_ptr(0x0L).base(rdx)), Instruction.create(Code.INC_RM16, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.BYTE) */
			testAssembler(c -> c.inc(byte_ptr(0x0L).base(rdx)), Instruction.create(Code.INC_RM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.inc(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.INC_RM8, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void incsspd_r32() {
		testAssembler(c -> c.incsspd(edx), Instruction.create(Code.INCSSPD_R32, ICRegisters.edx));
	}

	@Test
	void incsspq_r64() {
		testAssembler(c -> c.incsspq(rdx), Instruction.create(Code.INCSSPQ_R64, ICRegisters.rdx));
	}

	@Test
	void insb() {
		testAssembler(c -> c.insb(), Instruction.createInsb(64));
	}

	@Test
	void insd() {
		testAssembler(c -> c.insd(), Instruction.createInsd(64));
	}

	@Test
	void insertps_xmm_xmm_i() {
		testAssembler(c -> c.insertps(xmm2, xmm3, -5), Instruction.create(Code.INSERTPS_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5));
	}

	@Test
	void insertps_xmm_m_i() {
		testAssembler(c -> c.insertps(xmm2, xmmword_ptr(0x0L).base(rcx), -5), Instruction.create(Code.INSERTPS_XMM_XMMM32_IMM8, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void insertq_xmm_xmm() {
		testAssembler(c -> c.insertq(xmm2, xmm3), Instruction.create(Code.INSERTQ_XMM_XMM, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void insertq_xmm_xmm_i_i() {
		testAssembler(c -> c.insertq(xmm2, xmm3, -5, -5), Instruction.create(Code.INSERTQ_XMM_XMM_IMM8_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, -5, -5));
	}

	@Test
	void insw() {
		testAssembler(c -> c.insw(), Instruction.createInsw(64));
	}

	@Test
	void int__i() {
		testAssembler(c -> c.int_(-5), Instruction.create(Code.INT_IMM8, -5));
	}

	@Test
	void int1() {
		testAssembler(c -> c.int1(), Instruction.create(Code.INT1));
	}

	@Test
	void int3() {
		testAssembler(c -> c.int3(), Instruction.create(Code.INT3));
	}

	@Test
	void invd() {
		testAssembler(c -> c.invd(), Instruction.create(Code.INVD));
	}

	@Test
	void invept_r64_m() {
		testAssembler(c -> c.invept(rdx, mem_ptr(0x0L).base(rcx)), Instruction.create(Code.INVEPT_R64_M128, ICRegisters.rdx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void invlpg_m() {
		testAssembler(c -> c.invlpg(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.INVLPG_M, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void invlpga() {
		{ /* if (getBitness() == 64) */
			testAssembler(c -> c.invlpga(), Instruction.create(Code.INVLPGAQ));
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void invlpgb() {
		{ /* if (getBitness() == 64) */
			testAssembler(c -> c.invlpgb(), Instruction.create(Code.INVLPGBQ));
		} /* else skip !(getBitness() == 64) not supported by this CodeAssembler bitness */
	}

	@Test
	void invpcid_r64_m() {
		testAssembler(c -> c.invpcid(rdx, mem_ptr(0x0L).base(rcx)), Instruction.create(Code.INVPCID_R64_M128, ICRegisters.rdx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void invvpid_r64_m() {
		testAssembler(c -> c.invvpid(rdx, mem_ptr(0x0L).base(rcx)), Instruction.create(Code.INVVPID_R64_M128, ICRegisters.rdx, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void iret() {
		testAssembler(c -> c.iret(), Instruction.create(Code.IRETW));
	}

	@Test
	void iretd() {
		testAssembler(c -> c.iretd(), Instruction.create(Code.IRETD));
	}

	@Test
	void iretq() {
		testAssembler(c -> c.iretq(), Instruction.create(Code.IRETQ));
	}

	@Test
	void vinsertf128_ymm_ymm_xmm_i() {
		testAssembler(c -> c.vinsertf128(ymm2, ymm3, xmm4, -5), Instruction.create(Code.VEX_VINSERTF128_YMM_YMM_XMMM128_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vinsertf128_ymm_ymm_m_i() {
		testAssembler(c -> c.vinsertf128(ymm2, ymm3, xmmword_ptr(0x0L).base(rcx), -5), Instruction.create(Code.VEX_VINSERTF128_YMM_YMM_XMMM128_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vinsertf32x4_ymm_ymm_xmm_i() {
		testAssembler(c -> c.vinsertf32x4(ymm2.k1(), ymm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VINSERTF32X4_YMM_K1Z_YMM_XMMM128_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vinsertf32x4_zmm_zmm_xmm_i() {
		testAssembler(c -> c.vinsertf32x4(zmm2.k1(), zmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VINSERTF32X4_ZMM_K1Z_ZMM_XMMM128_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vinsertf32x4_ymm_ymm_m_i() {
		testAssembler(c -> c.vinsertf32x4(ymm2.k1(), ymm3, xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VINSERTF32X4_YMM_K1Z_YMM_XMMM128_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vinsertf32x4_zmm_zmm_m_i() {
		testAssembler(c -> c.vinsertf32x4(zmm2.k1(), zmm3, xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VINSERTF32X4_ZMM_K1Z_ZMM_XMMM128_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vinsertf32x8_zmm_zmm_ymm_i() {
		testAssembler(c -> c.vinsertf32x8(zmm2.k1(), zmm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VINSERTF32X8_ZMM_K1Z_ZMM_YMMM256_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vinsertf32x8_zmm_zmm_m_i() {
		testAssembler(c -> c.vinsertf32x8(zmm2.k1(), zmm3, ymmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VINSERTF32X8_ZMM_K1Z_ZMM_YMMM256_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vinsertf64x2_ymm_ymm_xmm_i() {
		testAssembler(c -> c.vinsertf64x2(ymm2.k1(), ymm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VINSERTF64X2_YMM_K1Z_YMM_XMMM128_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vinsertf64x2_zmm_zmm_xmm_i() {
		testAssembler(c -> c.vinsertf64x2(zmm2.k1(), zmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VINSERTF64X2_ZMM_K1Z_ZMM_XMMM128_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vinsertf64x2_ymm_ymm_m_i() {
		testAssembler(c -> c.vinsertf64x2(ymm2.k1(), ymm3, xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VINSERTF64X2_YMM_K1Z_YMM_XMMM128_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vinsertf64x2_zmm_zmm_m_i() {
		testAssembler(c -> c.vinsertf64x2(zmm2.k1(), zmm3, xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VINSERTF64X2_ZMM_K1Z_ZMM_XMMM128_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vinsertf64x4_zmm_zmm_ymm_i() {
		testAssembler(c -> c.vinsertf64x4(zmm2.k1(), zmm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VINSERTF64X4_ZMM_K1Z_ZMM_YMMM256_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vinsertf64x4_zmm_zmm_m_i() {
		testAssembler(c -> c.vinsertf64x4(zmm2.k1(), zmm3, ymmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VINSERTF64X4_ZMM_K1Z_ZMM_YMMM256_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vinserti128_ymm_ymm_xmm_i() {
		testAssembler(c -> c.vinserti128(ymm2, ymm3, xmm4, -5), Instruction.create(Code.VEX_VINSERTI128_YMM_YMM_XMMM128_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4, -5));
	}

	@Test
	void vinserti128_ymm_ymm_m_i() {
		testAssembler(c -> c.vinserti128(ymm2, ymm3, xmmword_ptr(0x0L).base(rcx), -5), Instruction.create(Code.VEX_VINSERTI128_YMM_YMM_XMMM128_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5));
	}

	@Test
	void vinserti32x4_ymm_ymm_xmm_i() {
		testAssembler(c -> c.vinserti32x4(ymm2.k1(), ymm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VINSERTI32X4_YMM_K1Z_YMM_XMMM128_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vinserti32x4_zmm_zmm_xmm_i() {
		testAssembler(c -> c.vinserti32x4(zmm2.k1(), zmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VINSERTI32X4_ZMM_K1Z_ZMM_XMMM128_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vinserti32x4_ymm_ymm_m_i() {
		testAssembler(c -> c.vinserti32x4(ymm2.k1(), ymm3, xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VINSERTI32X4_YMM_K1Z_YMM_XMMM128_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vinserti32x4_zmm_zmm_m_i() {
		testAssembler(c -> c.vinserti32x4(zmm2.k1(), zmm3, xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VINSERTI32X4_ZMM_K1Z_ZMM_XMMM128_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vinserti32x8_zmm_zmm_ymm_i() {
		testAssembler(c -> c.vinserti32x8(zmm2.k1(), zmm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VINSERTI32X8_ZMM_K1Z_ZMM_YMMM256_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vinserti32x8_zmm_zmm_m_i() {
		testAssembler(c -> c.vinserti32x8(zmm2.k1(), zmm3, ymmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VINSERTI32X8_ZMM_K1Z_ZMM_YMMM256_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vinserti64x2_ymm_ymm_xmm_i() {
		testAssembler(c -> c.vinserti64x2(ymm2.k1(), ymm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VINSERTI64X2_YMM_K1Z_YMM_XMMM128_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vinserti64x2_zmm_zmm_xmm_i() {
		testAssembler(c -> c.vinserti64x2(zmm2.k1(), zmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VINSERTI64X2_ZMM_K1Z_ZMM_XMMM128_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vinserti64x2_ymm_ymm_m_i() {
		testAssembler(c -> c.vinserti64x2(ymm2.k1(), ymm3, xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VINSERTI64X2_YMM_K1Z_YMM_XMMM128_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vinserti64x2_zmm_zmm_m_i() {
		testAssembler(c -> c.vinserti64x2(zmm2.k1(), zmm3, xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VINSERTI64X2_ZMM_K1Z_ZMM_XMMM128_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vinserti64x4_zmm_zmm_ymm_i() {
		testAssembler(c -> c.vinserti64x4(zmm2.k1(), zmm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VINSERTI64X4_ZMM_K1Z_ZMM_YMMM256_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vinserti64x4_zmm_zmm_m_i() {
		testAssembler(c -> c.vinserti64x4(zmm2.k1(), zmm3, ymmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VINSERTI64X4_ZMM_K1Z_ZMM_YMMM256_IMM8, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vinsertps_xmm_xmm_xmm_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vinsertps(xmm2, xmm3, xmm4, -5), Instruction.create(Code.VEX_VINSERTPS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vinsertps(xmm2, xmm3, xmm4, -5), Instruction.create(Code.EVEX_VINSERTPS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vinsertps_xmm_xmm_m_i() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vinsertps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), -5), Instruction.create(Code.VEX_VINSERTPS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vinsertps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), -5), Instruction.create(Code.EVEX_VINSERTPS_XMM_XMM_XMMM32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), TestInstrFlags.PREFER_EVEX);
	}

}
