// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

package com.github.icedland.iced.x86;

import java.util.HashMap;

import com.github.icedland.iced.x86.fmt.OptionsProps;

public final class ToOptionsProps {
	public static Integer tryGet(String key) {
		return map.get(key);
	}

	public static int get(String key) {
		Integer value = tryGet(key);
		if (value == null)
			throw new UnsupportedOperationException(String.format("Couldn't find enum variant OptionsProps.%s", key));
		return value.intValue();
	}

	public static String[] names() {
		return map.entrySet().stream().sorted((a, b) -> Integer.compareUnsigned(a.getValue(), b.getValue())).map(a -> a.getKey()).toArray(String[]::new);
	}

	public static Iterable<Integer> values() {
		return map.values();
	}

	public static int size() {
		return map.size();
	}

	public static HashMap<String, Integer> copy() {
		return new HashMap<String, Integer>(map);
	}

	private static final HashMap<String, Integer> map = getMap();

	private static HashMap<String, Integer> getMap() {
		HashMap<String, Integer> map = new HashMap<String, Integer>(64);
		initMap0(map);
		return map;
	}

	private static void initMap0(HashMap<String, Integer> map) {
		map.put("AddLeadingZeroToHexNumbers", OptionsProps.ADD_LEADING_ZERO_TO_HEX_NUMBERS);
		map.put("AlwaysShowScale", OptionsProps.ALWAYS_SHOW_SCALE);
		map.put("AlwaysShowSegmentRegister", OptionsProps.ALWAYS_SHOW_SEGMENT_REGISTER);
		map.put("BinaryDigitGroupSize", OptionsProps.BINARY_DIGIT_GROUP_SIZE);
		map.put("BinaryPrefix", OptionsProps.BINARY_PREFIX);
		map.put("BinarySuffix", OptionsProps.BINARY_SUFFIX);
		map.put("BranchLeadingZeros", OptionsProps.BRANCH_LEADING_ZEROS);
		map.put("DecimalDigitGroupSize", OptionsProps.DECIMAL_DIGIT_GROUP_SIZE);
		map.put("DecimalPrefix", OptionsProps.DECIMAL_PREFIX);
		map.put("DecimalSuffix", OptionsProps.DECIMAL_SUFFIX);
		map.put("DigitSeparator", OptionsProps.DIGIT_SEPARATOR);
		map.put("DisplacementLeadingZeros", OptionsProps.DISPLACEMENT_LEADING_ZEROS);
		map.put("FirstOperandCharIndex", OptionsProps.FIRST_OPERAND_CHAR_INDEX);
		map.put("GasNakedRegisters", OptionsProps.GAS_NAKED_REGISTERS);
		map.put("GasShowMnemonicSizeSuffix", OptionsProps.GAS_SHOW_MNEMONIC_SIZE_SUFFIX);
		map.put("GasSpaceAfterMemoryOperandComma", OptionsProps.GAS_SPACE_AFTER_MEMORY_OPERAND_COMMA);
		map.put("HexDigitGroupSize", OptionsProps.HEX_DIGIT_GROUP_SIZE);
		map.put("HexPrefix", OptionsProps.HEX_PREFIX);
		map.put("HexSuffix", OptionsProps.HEX_SUFFIX);
		map.put("IP", OptionsProps.IP);
		map.put("LeadingZeros", OptionsProps.LEADING_ZEROS);
		map.put("MasmAddDsPrefix32", OptionsProps.MASM_ADD_DS_PREFIX32);
		map.put("MemorySizeOptions", OptionsProps.MEMORY_SIZE_OPTIONS);
		map.put("NasmShowSignExtendedImmediateSize", OptionsProps.NASM_SHOW_SIGN_EXTENDED_IMMEDIATE_SIZE);
		map.put("NumberBase", OptionsProps.NUMBER_BASE);
		map.put("OctalDigitGroupSize", OptionsProps.OCTAL_DIGIT_GROUP_SIZE);
		map.put("OctalPrefix", OptionsProps.OCTAL_PREFIX);
		map.put("OctalSuffix", OptionsProps.OCTAL_SUFFIX);
		map.put("PreferST0", OptionsProps.PREFER_ST0);
		map.put("RipRelativeAddresses", OptionsProps.RIP_RELATIVE_ADDRESSES);
		map.put("ScaleBeforeIndex", OptionsProps.SCALE_BEFORE_INDEX);
		map.put("ShowBranchSize", OptionsProps.SHOW_BRANCH_SIZE);
		map.put("ShowSymbolAddress", OptionsProps.SHOW_SYMBOL_ADDRESS);
		map.put("ShowZeroDisplacements", OptionsProps.SHOW_ZERO_DISPLACEMENTS);
		map.put("SignedImmediateOperands", OptionsProps.SIGNED_IMMEDIATE_OPERANDS);
		map.put("SignedMemoryDisplacements", OptionsProps.SIGNED_MEMORY_DISPLACEMENTS);
		map.put("SmallHexNumbersInDecimal", OptionsProps.SMALL_HEX_NUMBERS_IN_DECIMAL);
		map.put("SpaceAfterMemoryBracket", OptionsProps.SPACE_AFTER_MEMORY_BRACKET);
		map.put("SpaceAfterOperandSeparator", OptionsProps.SPACE_AFTER_OPERAND_SEPARATOR);
		map.put("SpaceBetweenMemoryAddOperators", OptionsProps.SPACE_BETWEEN_MEMORY_ADD_OPERATORS);
		map.put("SpaceBetweenMemoryMulOperators", OptionsProps.SPACE_BETWEEN_MEMORY_MUL_OPERATORS);
		map.put("TabSize", OptionsProps.TAB_SIZE);
		map.put("UppercaseAll", OptionsProps.UPPERCASE_ALL);
		map.put("UppercaseDecorators", OptionsProps.UPPERCASE_DECORATORS);
		map.put("UppercaseHex", OptionsProps.UPPERCASE_HEX);
		map.put("UppercaseKeywords", OptionsProps.UPPERCASE_KEYWORDS);
		map.put("UppercaseMnemonics", OptionsProps.UPPERCASE_MNEMONICS);
		map.put("UppercasePrefixes", OptionsProps.UPPERCASE_PREFIXES);
		map.put("UppercaseRegisters", OptionsProps.UPPERCASE_REGISTERS);
		map.put("UsePseudoOps", OptionsProps.USE_PSEUDO_OPS);
		map.put("CC_b", OptionsProps.CC_B);
		map.put("CC_ae", OptionsProps.CC_AE);
		map.put("CC_e", OptionsProps.CC_E);
		map.put("CC_ne", OptionsProps.CC_NE);
		map.put("CC_be", OptionsProps.CC_BE);
		map.put("CC_a", OptionsProps.CC_A);
		map.put("CC_p", OptionsProps.CC_P);
		map.put("CC_np", OptionsProps.CC_NP);
		map.put("CC_l", OptionsProps.CC_L);
		map.put("CC_ge", OptionsProps.CC_GE);
		map.put("CC_le", OptionsProps.CC_LE);
		map.put("CC_g", OptionsProps.CC_G);
		map.put("DecoderOptions", OptionsProps.DECODER_OPTIONS);
		map.put("ShowUselessPrefixes", OptionsProps.SHOW_USELESS_PREFIXES);
	}
}
