// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

package com.github.icedland.iced.x86.asm;

import org.junit.jupiter.api.Test;

import com.github.icedland.iced.x86.*;
import static com.github.icedland.iced.x86.asm.AsmRegisters.*;

final class CodeAssembler64GenFTests extends CodeAssemblerTestsBase {
	CodeAssembler64GenFTests() {
		super(64);
	}

	@Test
	void f2xm1() {
		testAssembler(c -> c.f2xm1(), Instruction.create(Code.F2XM1));
	}

	@Test
	void fabs() {
		testAssembler(c -> c.fabs(), Instruction.create(Code.FABS));
	}

	@Test
	void fadd_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.fadd(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.FADD_M64FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fadd(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FADD_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fadd(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FADD_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fadd_st_st() {
		{ /* if (dst.getRegister() == Register.ST0) */
			testAssembler(c -> c.fadd(st0, st1), Instruction.create(Code.FADD_ST0_STI, ICRegisters.st0, ICRegisters.st1));
		} /* else */ testAssembler(c -> c.fadd(st1, st0), Instruction.create(Code.FADD_STI_ST0, ICRegisters.st1, ICRegisters.st0));
	}

	@Test
	void faddp_st_st() {
		testAssembler(c -> c.faddp(st1, st0), Instruction.create(Code.FADDP_STI_ST0, ICRegisters.st1, ICRegisters.st0));
	}

	@Test
	void fbld_m() {
		testAssembler(c -> c.fbld(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.FBLD_M80BCD, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void fbstp_m() {
		testAssembler(c -> c.fbstp(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.FBSTP_M80BCD, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void fchs() {
		testAssembler(c -> c.fchs(), Instruction.create(Code.FCHS));
	}

	@Test
	void fclex() {
		testAssembler(c -> c.fclex(), Instruction.create(Code.FCLEX), TestInstrFlags.FWAIT);
	}

	@Test
	void fcmovb_st_st() {
		testAssembler(c -> c.fcmovb(st0, st1), Instruction.create(Code.FCMOVB_ST0_STI, ICRegisters.st0, ICRegisters.st1));
	}

	@Test
	void fcmovbe_st_st() {
		testAssembler(c -> c.fcmovbe(st0, st1), Instruction.create(Code.FCMOVBE_ST0_STI, ICRegisters.st0, ICRegisters.st1));
	}

	@Test
	void fcmove_st_st() {
		testAssembler(c -> c.fcmove(st0, st1), Instruction.create(Code.FCMOVE_ST0_STI, ICRegisters.st0, ICRegisters.st1));
	}

	@Test
	void fcmovnb_st_st() {
		testAssembler(c -> c.fcmovnb(st0, st1), Instruction.create(Code.FCMOVNB_ST0_STI, ICRegisters.st0, ICRegisters.st1));
	}

	@Test
	void fcmovnbe_st_st() {
		testAssembler(c -> c.fcmovnbe(st0, st1), Instruction.create(Code.FCMOVNBE_ST0_STI, ICRegisters.st0, ICRegisters.st1));
	}

	@Test
	void fcmovne_st_st() {
		testAssembler(c -> c.fcmovne(st0, st1), Instruction.create(Code.FCMOVNE_ST0_STI, ICRegisters.st0, ICRegisters.st1));
	}

	@Test
	void fcmovnu_st_st() {
		testAssembler(c -> c.fcmovnu(st0, st1), Instruction.create(Code.FCMOVNU_ST0_STI, ICRegisters.st0, ICRegisters.st1));
	}

	@Test
	void fcmovu_st_st() {
		testAssembler(c -> c.fcmovu(st0, st1), Instruction.create(Code.FCMOVU_ST0_STI, ICRegisters.st0, ICRegisters.st1));
	}

	@Test
	void fcom_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.fcom(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.FCOM_M64FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fcom(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FCOM_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fcom(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FCOM_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fcom_st_st() {
		testAssembler(c -> c.fcom(st0, st1), Instruction.create(Code.FCOM_ST0_STI, ICRegisters.st0, ICRegisters.st1));
	}

	@Test
	void fcomi_st_st() {
		testAssembler(c -> c.fcomi(st0, st1), Instruction.create(Code.FCOMI_ST0_STI, ICRegisters.st0, ICRegisters.st1));
	}

	@Test
	void fcomip_st_st() {
		testAssembler(c -> c.fcomip(st0, st1), Instruction.create(Code.FCOMIP_ST0_STI, ICRegisters.st0, ICRegisters.st1));
	}

	@Test
	void fcomp_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.fcomp(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.FCOMP_M64FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fcomp(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FCOMP_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fcomp(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FCOMP_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fcomp_st_st() {
		testAssembler(c -> c.fcomp(st0, st1), Instruction.create(Code.FCOMP_ST0_STI, ICRegisters.st0, ICRegisters.st1));
	}

	@Test
	void fcompp() {
		testAssembler(c -> c.fcompp(), Instruction.create(Code.FCOMPP));
	}

	@Test
	void fcos() {
		testAssembler(c -> c.fcos(), Instruction.create(Code.FCOS));
	}

	@Test
	void fdecstp() {
		testAssembler(c -> c.fdecstp(), Instruction.create(Code.FDECSTP));
	}

	@Test
	void fdisi() {
		testAssembler(c -> c.fdisi(), Instruction.create(Code.FDISI), TestInstrFlags.FWAIT);
	}

	@Test
	void fdiv_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.fdiv(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.FDIV_M64FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fdiv(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FDIV_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fdiv(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FDIV_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fdiv_st_st() {
		{ /* if (dst.getRegister() == Register.ST0) */
			testAssembler(c -> c.fdiv(st0, st1), Instruction.create(Code.FDIV_ST0_STI, ICRegisters.st0, ICRegisters.st1));
		} /* else */ testAssembler(c -> c.fdiv(st1, st0), Instruction.create(Code.FDIV_STI_ST0, ICRegisters.st1, ICRegisters.st0));
	}

	@Test
	void fdivp_st_st() {
		testAssembler(c -> c.fdivp(st1, st0), Instruction.create(Code.FDIVP_STI_ST0, ICRegisters.st1, ICRegisters.st0));
	}

	@Test
	void fdivr_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.fdivr(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.FDIVR_M64FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fdivr(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FDIVR_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fdivr(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FDIVR_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fdivr_st_st() {
		{ /* if (dst.getRegister() == Register.ST0) */
			testAssembler(c -> c.fdivr(st0, st1), Instruction.create(Code.FDIVR_ST0_STI, ICRegisters.st0, ICRegisters.st1));
		} /* else */ testAssembler(c -> c.fdivr(st1, st0), Instruction.create(Code.FDIVR_STI_ST0, ICRegisters.st1, ICRegisters.st0));
	}

	@Test
	void fdivrp_st_st() {
		testAssembler(c -> c.fdivrp(st1, st0), Instruction.create(Code.FDIVRP_STI_ST0, ICRegisters.st1, ICRegisters.st0));
	}

	@Test
	void femms() {
		testAssembler(c -> c.femms(), Instruction.create(Code.FEMMS));
	}

	@Test
	void feni() {
		testAssembler(c -> c.feni(), Instruction.create(Code.FENI), TestInstrFlags.FWAIT);
	}

	@Test
	void ffree_st() {
		testAssembler(c -> c.ffree(st1), Instruction.create(Code.FFREE_STI, ICRegisters.st1));
	}

	@Test
	void ffreep_st() {
		testAssembler(c -> c.ffreep(st1), Instruction.create(Code.FFREEP_STI, ICRegisters.st1));
	}

	@Test
	void fiadd_m() {
		{ /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fiadd(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FIADD_M32INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.fiadd(word_ptr(0x0L).base(rdx)), Instruction.create(Code.FIADD_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fiadd(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FIADD_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void ficom_m() {
		{ /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.ficom(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FICOM_M32INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.ficom(word_ptr(0x0L).base(rdx)), Instruction.create(Code.FICOM_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.ficom(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FICOM_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void ficomp_m() {
		{ /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.ficomp(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FICOMP_M32INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.ficomp(word_ptr(0x0L).base(rdx)), Instruction.create(Code.FICOMP_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.ficomp(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FICOMP_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fidiv_m() {
		{ /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fidiv(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FIDIV_M32INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.fidiv(word_ptr(0x0L).base(rdx)), Instruction.create(Code.FIDIV_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fidiv(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FIDIV_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fidivr_m() {
		{ /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fidivr(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FIDIVR_M32INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.fidivr(word_ptr(0x0L).base(rdx)), Instruction.create(Code.FIDIVR_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fidivr(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FIDIVR_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fild_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.fild(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.FILD_M64INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fild(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FILD_M32INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.fild(word_ptr(0x0L).base(rdx)), Instruction.create(Code.FILD_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fild(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FILD_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fimul_m() {
		{ /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fimul(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FIMUL_M32INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.fimul(word_ptr(0x0L).base(rdx)), Instruction.create(Code.FIMUL_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fimul(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FIMUL_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fincstp() {
		testAssembler(c -> c.fincstp(), Instruction.create(Code.FINCSTP));
	}

	@Test
	void finit() {
		testAssembler(c -> c.finit(), Instruction.create(Code.FINIT), TestInstrFlags.FWAIT);
	}

	@Test
	void fist_m() {
		{ /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fist(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FIST_M32INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.fist(word_ptr(0x0L).base(rdx)), Instruction.create(Code.FIST_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fist(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FIST_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fistp_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.fistp(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.FISTP_M64INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fistp(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FISTP_M32INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.fistp(word_ptr(0x0L).base(rdx)), Instruction.create(Code.FISTP_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fistp(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FISTP_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fisttp_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.fisttp(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.FISTTP_M64INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fisttp(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FISTTP_M32INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.fisttp(word_ptr(0x0L).base(rdx)), Instruction.create(Code.FISTTP_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fisttp(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FISTTP_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fisub_m() {
		{ /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fisub(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FISUB_M32INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.fisub(word_ptr(0x0L).base(rdx)), Instruction.create(Code.FISUB_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fisub(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FISUB_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fisubr_m() {
		{ /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fisubr(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FISUBR_M32INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.WORD) */
			testAssembler(c -> c.fisubr(word_ptr(0x0L).base(rdx)), Instruction.create(Code.FISUBR_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fisubr(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FISUBR_M16INT, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fld_st() {
		testAssembler(c -> c.fld(st1), Instruction.create(Code.FLD_STI, ICRegisters.st1));
	}

	@Test
	void fld_m() {
		{ /* if (dst.size == MemoryOperandSize.TBYTE) */
			testAssembler(c -> c.fld(tword_ptr(0x0L).base(rdx)), Instruction.create(Code.FLD_M80FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.fld(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.FLD_M64FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fld(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FLD_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fld(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FLD_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fld1() {
		testAssembler(c -> c.fld1(), Instruction.create(Code.FLD1));
	}

	@Test
	void fldcw_m() {
		testAssembler(c -> c.fldcw(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.FLDCW_M2BYTE, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void fldenv_m() {
		{ /* if (getBitness() >= 32) */
			testAssembler(c -> c.fldenv(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.FLDENV_M28BYTE, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void fldl2e() {
		testAssembler(c -> c.fldl2e(), Instruction.create(Code.FLDL2E));
	}

	@Test
	void fldl2t() {
		testAssembler(c -> c.fldl2t(), Instruction.create(Code.FLDL2T));
	}

	@Test
	void fldlg2() {
		testAssembler(c -> c.fldlg2(), Instruction.create(Code.FLDLG2));
	}

	@Test
	void fldln2() {
		testAssembler(c -> c.fldln2(), Instruction.create(Code.FLDLN2));
	}

	@Test
	void fldpi() {
		testAssembler(c -> c.fldpi(), Instruction.create(Code.FLDPI));
	}

	@Test
	void fldz() {
		testAssembler(c -> c.fldz(), Instruction.create(Code.FLDZ));
	}

	@Test
	void fmul_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.fmul(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.FMUL_M64FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fmul(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FMUL_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fmul(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FMUL_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fmul_st_st() {
		{ /* if (dst.getRegister() == Register.ST0) */
			testAssembler(c -> c.fmul(st0, st1), Instruction.create(Code.FMUL_ST0_STI, ICRegisters.st0, ICRegisters.st1));
		} /* else */ testAssembler(c -> c.fmul(st1, st0), Instruction.create(Code.FMUL_STI_ST0, ICRegisters.st1, ICRegisters.st0));
	}

	@Test
	void fmulp_st_st() {
		testAssembler(c -> c.fmulp(st1, st0), Instruction.create(Code.FMULP_STI_ST0, ICRegisters.st1, ICRegisters.st0));
	}

	@Test
	void fnclex() {
		testAssembler(c -> c.fnclex(), Instruction.create(Code.FNCLEX));
	}

	@Test
	void fndisi() {
		testAssembler(c -> c.fndisi(), Instruction.create(Code.FNDISI));
	}

	@Test
	void fneni() {
		testAssembler(c -> c.fneni(), Instruction.create(Code.FNENI));
	}

	@Test
	void fninit() {
		testAssembler(c -> c.fninit(), Instruction.create(Code.FNINIT));
	}

	@Test
	void fnop() {
		testAssembler(c -> c.fnop(), Instruction.create(Code.FNOP));
	}

	@Test
	void fnsave_m() {
		{ /* if (getBitness() >= 32) */
			testAssembler(c -> c.fnsave(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.FNSAVE_M108BYTE, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void fnsetpm() {
		testAssembler(c -> c.fnsetpm(), Instruction.create(Code.FNSETPM));
	}

	@Test
	void fnstcw_m() {
		testAssembler(c -> c.fnstcw(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.FNSTCW_M2BYTE, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void fnstenv_m() {
		{ /* if (getBitness() >= 32) */
			testAssembler(c -> c.fnstenv(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.FNSTENV_M28BYTE, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void fnstsw_r16() {
		testAssembler(c -> c.fnstsw(ax), Instruction.create(Code.FNSTSW_AX, ICRegisters.ax));
	}

	@Test
	void fnstsw_m() {
		testAssembler(c -> c.fnstsw(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.FNSTSW_M2BYTE, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void fpatan() {
		testAssembler(c -> c.fpatan(), Instruction.create(Code.FPATAN));
	}

	@Test
	void fprem() {
		testAssembler(c -> c.fprem(), Instruction.create(Code.FPREM));
	}

	@Test
	void fprem1() {
		testAssembler(c -> c.fprem1(), Instruction.create(Code.FPREM1));
	}

	@Test
	void fptan() {
		testAssembler(c -> c.fptan(), Instruction.create(Code.FPTAN));
	}

	@Test
	void frndint() {
		testAssembler(c -> c.frndint(), Instruction.create(Code.FRNDINT));
	}

	@Test
	void frstor_m() {
		{ /* if (getBitness() >= 32) */
			testAssembler(c -> c.frstor(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.FRSTOR_M108BYTE, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void fsave_m() {
		{ /* if (getBitness() >= 32) */
			testAssembler(c -> c.fsave(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.FSAVE_M108BYTE, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.FWAIT);
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void fscale() {
		testAssembler(c -> c.fscale(), Instruction.create(Code.FSCALE));
	}

	@Test
	void fsetpm() {
		testAssembler(c -> c.fsetpm(), Instruction.create(Code.FSETPM), TestInstrFlags.FWAIT);
	}

	@Test
	void fsin() {
		testAssembler(c -> c.fsin(), Instruction.create(Code.FSIN));
	}

	@Test
	void fsincos() {
		testAssembler(c -> c.fsincos(), Instruction.create(Code.FSINCOS));
	}

	@Test
	void fsqrt() {
		testAssembler(c -> c.fsqrt(), Instruction.create(Code.FSQRT));
	}

	@Test
	void fst_st() {
		testAssembler(c -> c.fst(st1), Instruction.create(Code.FST_STI, ICRegisters.st1));
	}

	@Test
	void fst_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.fst(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.FST_M64FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fst(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FST_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fst(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FST_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fstcw_m() {
		testAssembler(c -> c.fstcw(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.FSTCW_M2BYTE, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.FWAIT);
	}

	@Test
	void fstenv_m() {
		{ /* if (getBitness() >= 32) */
			testAssembler(c -> c.fstenv(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.FSTENV_M28BYTE, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.FWAIT);
		} /* else skip !(getBitness() >= 32) not supported by this CodeAssembler bitness */
	}

	@Test
	void fstp_st() {
		testAssembler(c -> c.fstp(st1), Instruction.create(Code.FSTP_STI, ICRegisters.st1));
	}

	@Test
	void fstp_m() {
		{ /* if (dst.size == MemoryOperandSize.TBYTE) */
			testAssembler(c -> c.fstp(tword_ptr(0x0L).base(rdx)), Instruction.create(Code.FSTP_M80FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.fstp(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.FSTP_M64FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fstp(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FSTP_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fstp(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FSTP_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fstpnce_st() {
		testAssembler(c -> c.fstpnce(st1), Instruction.create(Code.FSTPNCE_STI, ICRegisters.st1));
	}

	@Test
	void fstsw_r16() {
		testAssembler(c -> c.fstsw(ax), Instruction.create(Code.FSTSW_AX, ICRegisters.ax), TestInstrFlags.FWAIT);
	}

	@Test
	void fstsw_m() {
		testAssembler(c -> c.fstsw(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.FSTSW_M2BYTE, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.FWAIT);
	}

	@Test
	void fsub_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.fsub(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.FSUB_M64FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fsub(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FSUB_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fsub(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FSUB_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fsub_st_st() {
		{ /* if (dst.getRegister() == Register.ST0) */
			testAssembler(c -> c.fsub(st0, st1), Instruction.create(Code.FSUB_ST0_STI, ICRegisters.st0, ICRegisters.st1));
		} /* else */ testAssembler(c -> c.fsub(st1, st0), Instruction.create(Code.FSUB_STI_ST0, ICRegisters.st1, ICRegisters.st0));
	}

	@Test
	void fsubp_st_st() {
		testAssembler(c -> c.fsubp(st1, st0), Instruction.create(Code.FSUBP_STI_ST0, ICRegisters.st1, ICRegisters.st0));
	}

	@Test
	void fsubr_m() {
		{ /* if (dst.size == MemoryOperandSize.QWORD) */
			testAssembler(c -> c.fsubr(qword_ptr(0x0L).base(rdx)), Instruction.create(Code.FSUBR_M64FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		} /* else */ { /* if (dst.size == MemoryOperandSize.DWORD) */
			testAssembler(c -> c.fsubr(dword_ptr(0x0L).base(rdx)), Instruction.create(Code.FSUBR_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.fsubr(zmmword_ptr(0x0L).base(rdx)), Instruction.create(Code.FSUBR_M32FP, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
			});
		}
	}

	@Test
	void fsubr_st_st() {
		{ /* if (dst.getRegister() == Register.ST0) */
			testAssembler(c -> c.fsubr(st0, st1), Instruction.create(Code.FSUBR_ST0_STI, ICRegisters.st0, ICRegisters.st1));
		} /* else */ testAssembler(c -> c.fsubr(st1, st0), Instruction.create(Code.FSUBR_STI_ST0, ICRegisters.st1, ICRegisters.st0));
	}

	@Test
	void fsubrp_st_st() {
		testAssembler(c -> c.fsubrp(st1, st0), Instruction.create(Code.FSUBRP_STI_ST0, ICRegisters.st1, ICRegisters.st0));
	}

	@Test
	void ftst() {
		testAssembler(c -> c.ftst(), Instruction.create(Code.FTST));
	}

	@Test
	void fucom_st_st() {
		testAssembler(c -> c.fucom(st0, st1), Instruction.create(Code.FUCOM_ST0_STI, ICRegisters.st0, ICRegisters.st1));
	}

	@Test
	void fucomi_st_st() {
		testAssembler(c -> c.fucomi(st0, st1), Instruction.create(Code.FUCOMI_ST0_STI, ICRegisters.st0, ICRegisters.st1));
	}

	@Test
	void fucomip_st_st() {
		testAssembler(c -> c.fucomip(st0, st1), Instruction.create(Code.FUCOMIP_ST0_STI, ICRegisters.st0, ICRegisters.st1));
	}

	@Test
	void fucomp_st_st() {
		testAssembler(c -> c.fucomp(st0, st1), Instruction.create(Code.FUCOMP_ST0_STI, ICRegisters.st0, ICRegisters.st1));
	}

	@Test
	void fucompp() {
		testAssembler(c -> c.fucompp(), Instruction.create(Code.FUCOMPP));
	}

	@Test
	void fxam() {
		testAssembler(c -> c.fxam(), Instruction.create(Code.FXAM));
	}

	@Test
	void fxch_st_st() {
		testAssembler(c -> c.fxch(st0, st1), Instruction.create(Code.FXCH_ST0_STI, ICRegisters.st0, ICRegisters.st1));
	}

	@Test
	void fxrstor_m() {
		testAssembler(c -> c.fxrstor(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.FXRSTOR_M512BYTE, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void fxrstor64_m() {
		testAssembler(c -> c.fxrstor64(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.FXRSTOR64_M512BYTE, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void fxsave_m() {
		testAssembler(c -> c.fxsave(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.FXSAVE_M512BYTE, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void fxsave64_m() {
		testAssembler(c -> c.fxsave64(mem_ptr(0x0L).base(rcx)), Instruction.create(Code.FXSAVE64_M512BYTE, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void fxtract() {
		testAssembler(c -> c.fxtract(), Instruction.create(Code.FXTRACT));
	}

	@Test
	void fyl2x() {
		testAssembler(c -> c.fyl2x(), Instruction.create(Code.FYL2X));
	}

	@Test
	void fyl2xp1() {
		testAssembler(c -> c.fyl2xp1(), Instruction.create(Code.FYL2XP1));
	}

	@Test
	void vfcmaddcph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfcmaddcph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFCMADDCPH_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfcmaddcph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfcmaddcph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFCMADDCPH_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfcmaddcph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfcmaddcph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFCMADDCPH_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfcmaddcph_xmm_xmm_m() {
		testAssembler(c -> c.vfcmaddcph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFCMADDCPH_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfcmaddcph_ymm_ymm_m() {
		testAssembler(c -> c.vfcmaddcph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFCMADDCPH_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfcmaddcph_zmm_zmm_m() {
		testAssembler(c -> c.vfcmaddcph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFCMADDCPH_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfcmaddcsh_xmm_xmm_xmm() {
		testAssembler(c -> c.vfcmaddcsh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFCMADDCSH_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfcmaddcsh_xmm_xmm_m() {
		testAssembler(c -> c.vfcmaddcsh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFCMADDCSH_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfcmulcph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfcmulcph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFCMULCPH_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfcmulcph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfcmulcph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFCMULCPH_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfcmulcph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfcmulcph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFCMULCPH_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfcmulcph_xmm_xmm_m() {
		testAssembler(c -> c.vfcmulcph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFCMULCPH_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfcmulcph_ymm_ymm_m() {
		testAssembler(c -> c.vfcmulcph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFCMULCPH_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfcmulcph_zmm_zmm_m() {
		testAssembler(c -> c.vfcmulcph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFCMULCPH_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfcmulcsh_xmm_xmm_xmm() {
		testAssembler(c -> c.vfcmulcsh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFCMULCSH_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfcmulcsh_xmm_xmm_m() {
		testAssembler(c -> c.vfcmulcsh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFCMULCSH_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfixupimmpd_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vfixupimmpd(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VFIXUPIMMPD_XMM_K1Z_XMM_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vfixupimmpd_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vfixupimmpd(ymm2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VFIXUPIMMPD_YMM_K1Z_YMM_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vfixupimmpd_zmm_zmm_zmm_i() {
		testAssembler(c -> c.vfixupimmpd(zmm2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VFIXUPIMMPD_ZMM_K1Z_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vfixupimmpd_xmm_xmm_m_i() {
		testAssembler(c -> c.vfixupimmpd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFIXUPIMMPD_XMM_K1Z_XMM_XMMM128B64_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfixupimmpd_ymm_ymm_m_i() {
		testAssembler(c -> c.vfixupimmpd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFIXUPIMMPD_YMM_K1Z_YMM_YMMM256B64_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfixupimmpd_zmm_zmm_m_i() {
		testAssembler(c -> c.vfixupimmpd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFIXUPIMMPD_ZMM_K1Z_ZMM_ZMMM512B64_IMM8_SAE, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfixupimmps_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vfixupimmps(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VFIXUPIMMPS_XMM_K1Z_XMM_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vfixupimmps_ymm_ymm_ymm_i() {
		testAssembler(c -> c.vfixupimmps(ymm2.k1(), ymm3, ymm4, -5), applyK(Instruction.create(Code.EVEX_VFIXUPIMMPS_YMM_K1Z_YMM_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, -5), Register.K1));
	}

	@Test
	void vfixupimmps_zmm_zmm_zmm_i() {
		testAssembler(c -> c.vfixupimmps(zmm2.k1(), zmm3, zmm4, -5), applyK(Instruction.create(Code.EVEX_VFIXUPIMMPS_ZMM_K1Z_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4, -5), Register.K1));
	}

	@Test
	void vfixupimmps_xmm_xmm_m_i() {
		testAssembler(c -> c.vfixupimmps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFIXUPIMMPS_XMM_K1Z_XMM_XMMM128B32_IMM8, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfixupimmps_ymm_ymm_m_i() {
		testAssembler(c -> c.vfixupimmps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFIXUPIMMPS_YMM_K1Z_YMM_YMMM256B32_IMM8, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfixupimmps_zmm_zmm_m_i() {
		testAssembler(c -> c.vfixupimmps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFIXUPIMMPS_ZMM_K1Z_ZMM_ZMMM512B32_IMM8_SAE, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfixupimmsd_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vfixupimmsd(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VFIXUPIMMSD_XMM_K1Z_XMM_XMMM64_IMM8_SAE, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vfixupimmsd_xmm_xmm_m_i() {
		testAssembler(c -> c.vfixupimmsd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFIXUPIMMSD_XMM_K1Z_XMM_XMMM64_IMM8_SAE, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfixupimmss_xmm_xmm_xmm_i() {
		testAssembler(c -> c.vfixupimmss(xmm2.k1(), xmm3, xmm4, -5), applyK(Instruction.create(Code.EVEX_VFIXUPIMMSS_XMM_K1Z_XMM_XMMM32_IMM8_SAE, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, -5), Register.K1));
	}

	@Test
	void vfixupimmss_xmm_xmm_m_i() {
		testAssembler(c -> c.vfixupimmss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFIXUPIMMSS_XMM_K1Z_XMM_XMMM32_IMM8_SAE, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfmadd132pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd132pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADD132PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd132pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd132pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd132pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMADD132PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd132pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADD132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd132pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmadd132pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADD132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmadd132pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmadd132pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADD132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd132pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD132PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd132pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd132pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmadd132pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADD132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd132pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD132PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd132pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd132pd_zmm_zmm_m() {
		testAssembler(c -> c.vfmadd132pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd132ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmadd132ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD132PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmadd132ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmadd132ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADD132PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfmadd132ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmadd132ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADD132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmadd132ph_xmm_xmm_m() {
		testAssembler(c -> c.vfmadd132ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD132PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd132ph_ymm_ymm_m() {
		testAssembler(c -> c.vfmadd132ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD132PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd132ph_zmm_zmm_m() {
		testAssembler(c -> c.vfmadd132ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd132ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd132ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADD132PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd132ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd132ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd132ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMADD132PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd132ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADD132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd132ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmadd132ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADD132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmadd132ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmadd132ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADD132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd132ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD132PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd132ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd132ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmadd132ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADD132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd132ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD132PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd132ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd132ps_zmm_zmm_m() {
		testAssembler(c -> c.vfmadd132ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd132sd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd132sd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADD132SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd132sd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD132SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd132sd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd132sd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD132SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd132sd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD132SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd132sh_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmadd132sh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD132SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmadd132sh_xmm_xmm_m() {
		testAssembler(c -> c.vfmadd132sh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD132SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd132ss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd132ss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADD132SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd132ss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD132SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd132ss_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd132ss(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD132SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd132ss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD132SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd213pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd213pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADD213PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd213pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd213pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd213pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMADD213PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd213pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADD213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd213pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmadd213pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADD213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmadd213pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmadd213pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADD213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd213pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD213PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd213pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd213pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmadd213pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADD213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd213pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD213PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd213pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd213pd_zmm_zmm_m() {
		testAssembler(c -> c.vfmadd213pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd213ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmadd213ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD213PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmadd213ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmadd213ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADD213PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfmadd213ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmadd213ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADD213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmadd213ph_xmm_xmm_m() {
		testAssembler(c -> c.vfmadd213ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD213PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd213ph_ymm_ymm_m() {
		testAssembler(c -> c.vfmadd213ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD213PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd213ph_zmm_zmm_m() {
		testAssembler(c -> c.vfmadd213ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd213ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd213ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADD213PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd213ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd213ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd213ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMADD213PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd213ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADD213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd213ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmadd213ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADD213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmadd213ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmadd213ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADD213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd213ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD213PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd213ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd213ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmadd213ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADD213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd213ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD213PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd213ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd213ps_zmm_zmm_m() {
		testAssembler(c -> c.vfmadd213ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd213sd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd213sd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADD213SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd213sd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD213SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd213sd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd213sd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD213SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd213sd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD213SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd213sh_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmadd213sh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD213SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmadd213sh_xmm_xmm_m() {
		testAssembler(c -> c.vfmadd213sh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD213SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd213ss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd213ss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADD213SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd213ss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD213SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd213ss_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd213ss(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD213SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd213ss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD213SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd231pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd231pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADD231PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd231pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd231pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd231pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMADD231PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd231pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADD231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd231pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmadd231pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADD231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmadd231pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmadd231pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADD231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd231pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD231PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd231pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd231pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmadd231pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADD231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd231pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD231PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd231pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd231pd_zmm_zmm_m() {
		testAssembler(c -> c.vfmadd231pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd231ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmadd231ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD231PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmadd231ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmadd231ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADD231PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfmadd231ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmadd231ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADD231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmadd231ph_xmm_xmm_m() {
		testAssembler(c -> c.vfmadd231ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD231PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd231ph_ymm_ymm_m() {
		testAssembler(c -> c.vfmadd231ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD231PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd231ph_zmm_zmm_m() {
		testAssembler(c -> c.vfmadd231ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd231ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd231ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADD231PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd231ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd231ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd231ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMADD231PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd231ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADD231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd231ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmadd231ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADD231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmadd231ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmadd231ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADD231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd231ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD231PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd231ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd231ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmadd231ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADD231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd231ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD231PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd231ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd231ps_zmm_zmm_m() {
		testAssembler(c -> c.vfmadd231ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd231sd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd231sd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADD231SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd231sd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD231SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd231sd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd231sd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD231SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd231sd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD231SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd231sh_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmadd231sh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD231SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmadd231sh_xmm_xmm_m() {
		testAssembler(c -> c.vfmadd231sh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD231SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmadd231ss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd231ss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADD231SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd231ss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADD231SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmadd231ss_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmadd231ss(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADD231SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmadd231ss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADD231SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddcph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmaddcph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADDCPH_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmaddcph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmaddcph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADDCPH_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfmaddcph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmaddcph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADDCPH_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmaddcph_xmm_xmm_m() {
		testAssembler(c -> c.vfmaddcph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDCPH_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddcph_ymm_ymm_m() {
		testAssembler(c -> c.vfmaddcph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDCPH_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddcph_zmm_zmm_m() {
		testAssembler(c -> c.vfmaddcph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDCPH_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddcsh_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmaddcsh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADDCSH_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmaddcsh_xmm_xmm_m() {
		testAssembler(c -> c.vfmaddcsh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDCSH_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddpd_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmaddpd(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFMADDPD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfmaddpd_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfmaddpd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFMADDPD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfmaddpd_ymm_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmaddpd(ymm2, ymm3, ymm4, ymm5), Instruction.create(Code.VEX_VFMADDPD_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5));
	}

	@Test
	void vfmaddpd_ymm_ymm_m_ymm() {
		testAssembler(c -> c.vfmaddpd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx), ymm5), Instruction.create(Code.VEX_VFMADDPD_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5));
	}

	@Test
	void vfmaddpd_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfmaddpd(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDPD_XMM_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmaddpd_ymm_ymm_ymm_m() {
		testAssembler(c -> c.vfmaddpd(ymm2, ymm3, ymm4, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDPD_YMM_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmaddps_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmaddps(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFMADDPS_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfmaddps_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfmaddps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFMADDPS_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfmaddps_ymm_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmaddps(ymm2, ymm3, ymm4, ymm5), Instruction.create(Code.VEX_VFMADDPS_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5));
	}

	@Test
	void vfmaddps_ymm_ymm_m_ymm() {
		testAssembler(c -> c.vfmaddps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx), ymm5), Instruction.create(Code.VEX_VFMADDPS_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5));
	}

	@Test
	void vfmaddps_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfmaddps(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDPS_XMM_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmaddps_ymm_ymm_ymm_m() {
		testAssembler(c -> c.vfmaddps(ymm2, ymm3, ymm4, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDPS_YMM_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmaddsd_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmaddsd(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFMADDSD_XMM_XMM_XMMM64_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfmaddsd_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfmaddsd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFMADDSD_XMM_XMM_XMMM64_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfmaddsd_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfmaddsd(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSD_XMM_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmaddss_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmaddss(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFMADDSS_XMM_XMM_XMMM32_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfmaddss_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfmaddss(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFMADDSS_XMM_XMM_XMMM32_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfmaddss_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfmaddss(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSS_XMM_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmaddsub132pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub132pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADDSUB132PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub132pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub132pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub132pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMADDSUB132PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub132pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub132pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmaddsub132pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmaddsub132pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmaddsub132pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub132pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSUB132PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub132pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub132pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmaddsub132pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub132pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSUB132PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub132pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub132pd_zmm_zmm_m() {
		testAssembler(c -> c.vfmaddsub132pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddsub132ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmaddsub132ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmaddsub132ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmaddsub132ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfmaddsub132ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmaddsub132ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmaddsub132ph_xmm_xmm_m() {
		testAssembler(c -> c.vfmaddsub132ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddsub132ph_ymm_ymm_m() {
		testAssembler(c -> c.vfmaddsub132ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddsub132ph_zmm_zmm_m() {
		testAssembler(c -> c.vfmaddsub132ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddsub132ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub132ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADDSUB132PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub132ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub132ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub132ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMADDSUB132PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub132ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub132ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmaddsub132ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmaddsub132ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmaddsub132ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub132ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSUB132PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub132ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub132ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmaddsub132ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub132ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSUB132PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub132ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub132ps_zmm_zmm_m() {
		testAssembler(c -> c.vfmaddsub132ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddsub213pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub213pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADDSUB213PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub213pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub213pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub213pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMADDSUB213PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub213pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub213pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmaddsub213pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmaddsub213pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmaddsub213pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub213pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSUB213PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub213pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub213pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmaddsub213pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub213pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSUB213PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub213pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub213pd_zmm_zmm_m() {
		testAssembler(c -> c.vfmaddsub213pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddsub213ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmaddsub213ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmaddsub213ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmaddsub213ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfmaddsub213ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmaddsub213ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmaddsub213ph_xmm_xmm_m() {
		testAssembler(c -> c.vfmaddsub213ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddsub213ph_ymm_ymm_m() {
		testAssembler(c -> c.vfmaddsub213ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddsub213ph_zmm_zmm_m() {
		testAssembler(c -> c.vfmaddsub213ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddsub213ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub213ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADDSUB213PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub213ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub213ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub213ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMADDSUB213PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub213ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub213ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmaddsub213ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmaddsub213ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmaddsub213ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub213ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSUB213PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub213ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub213ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmaddsub213ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub213ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSUB213PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub213ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub213ps_zmm_zmm_m() {
		testAssembler(c -> c.vfmaddsub213ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddsub231pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub231pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADDSUB231PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub231pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub231pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub231pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMADDSUB231PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub231pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub231pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmaddsub231pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmaddsub231pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmaddsub231pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub231pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSUB231PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub231pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub231pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmaddsub231pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub231pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSUB231PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub231pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub231pd_zmm_zmm_m() {
		testAssembler(c -> c.vfmaddsub231pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddsub231ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmaddsub231ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmaddsub231ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmaddsub231ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfmaddsub231ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmaddsub231ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmaddsub231ph_xmm_xmm_m() {
		testAssembler(c -> c.vfmaddsub231ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddsub231ph_ymm_ymm_m() {
		testAssembler(c -> c.vfmaddsub231ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddsub231ph_zmm_zmm_m() {
		testAssembler(c -> c.vfmaddsub231ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddsub231ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub231ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMADDSUB231PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub231ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub231ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub231ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMADDSUB231PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub231ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub231ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmaddsub231ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmaddsub231ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmaddsub231ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub231ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSUB231PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub231ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub231ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmaddsub231ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmaddsub231ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSUB231PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmaddsub231ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmaddsub231ps_zmm_zmm_m() {
		testAssembler(c -> c.vfmaddsub231ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMADDSUB231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmaddsubpd_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmaddsubpd(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFMADDSUBPD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfmaddsubpd_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfmaddsubpd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFMADDSUBPD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfmaddsubpd_ymm_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmaddsubpd(ymm2, ymm3, ymm4, ymm5), Instruction.create(Code.VEX_VFMADDSUBPD_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5));
	}

	@Test
	void vfmaddsubpd_ymm_ymm_m_ymm() {
		testAssembler(c -> c.vfmaddsubpd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx), ymm5), Instruction.create(Code.VEX_VFMADDSUBPD_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5));
	}

	@Test
	void vfmaddsubpd_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfmaddsubpd(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSUBPD_XMM_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmaddsubpd_ymm_ymm_ymm_m() {
		testAssembler(c -> c.vfmaddsubpd(ymm2, ymm3, ymm4, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSUBPD_YMM_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmaddsubps_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmaddsubps(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFMADDSUBPS_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfmaddsubps_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfmaddsubps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFMADDSUBPS_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfmaddsubps_ymm_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmaddsubps(ymm2, ymm3, ymm4, ymm5), Instruction.create(Code.VEX_VFMADDSUBPS_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5));
	}

	@Test
	void vfmaddsubps_ymm_ymm_m_ymm() {
		testAssembler(c -> c.vfmaddsubps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx), ymm5), Instruction.create(Code.VEX_VFMADDSUBPS_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5));
	}

	@Test
	void vfmaddsubps_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfmaddsubps(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSUBPS_XMM_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmaddsubps_ymm_ymm_ymm_m() {
		testAssembler(c -> c.vfmaddsubps(ymm2, ymm3, ymm4, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMADDSUBPS_YMM_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmsub132pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub132pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUB132PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub132pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub132pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub132pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMSUB132PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub132pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUB132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub132pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsub132pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUB132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsub132pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsub132pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUB132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub132pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB132PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub132pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub132pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsub132pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUB132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub132pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB132PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub132pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub132pd_zmm_zmm_m() {
		testAssembler(c -> c.vfmsub132pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub132ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmsub132ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB132PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmsub132ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmsub132ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUB132PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfmsub132ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsub132ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUB132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsub132ph_xmm_xmm_m() {
		testAssembler(c -> c.vfmsub132ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB132PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub132ph_ymm_ymm_m() {
		testAssembler(c -> c.vfmsub132ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB132PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub132ph_zmm_zmm_m() {
		testAssembler(c -> c.vfmsub132ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub132ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub132ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUB132PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub132ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub132ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub132ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMSUB132PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub132ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUB132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub132ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsub132ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUB132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsub132ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsub132ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUB132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub132ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB132PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub132ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub132ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsub132ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUB132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub132ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB132PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub132ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub132ps_zmm_zmm_m() {
		testAssembler(c -> c.vfmsub132ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub132sd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub132sd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUB132SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub132sd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB132SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub132sd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub132sd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB132SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub132sd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB132SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub132sh_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmsub132sh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB132SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmsub132sh_xmm_xmm_m() {
		testAssembler(c -> c.vfmsub132sh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB132SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub132ss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub132ss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUB132SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub132ss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB132SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub132ss_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub132ss(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB132SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub132ss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB132SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub213pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub213pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUB213PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub213pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub213pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub213pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMSUB213PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub213pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUB213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub213pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsub213pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUB213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsub213pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsub213pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUB213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub213pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB213PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub213pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub213pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsub213pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUB213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub213pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB213PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub213pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub213pd_zmm_zmm_m() {
		testAssembler(c -> c.vfmsub213pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub213ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmsub213ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB213PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmsub213ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmsub213ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUB213PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfmsub213ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsub213ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUB213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsub213ph_xmm_xmm_m() {
		testAssembler(c -> c.vfmsub213ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB213PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub213ph_ymm_ymm_m() {
		testAssembler(c -> c.vfmsub213ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB213PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub213ph_zmm_zmm_m() {
		testAssembler(c -> c.vfmsub213ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub213ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub213ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUB213PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub213ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub213ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub213ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMSUB213PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub213ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUB213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub213ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsub213ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUB213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsub213ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsub213ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUB213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub213ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB213PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub213ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub213ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsub213ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUB213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub213ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB213PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub213ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub213ps_zmm_zmm_m() {
		testAssembler(c -> c.vfmsub213ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub213sd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub213sd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUB213SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub213sd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB213SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub213sd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub213sd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB213SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub213sd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB213SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub213sh_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmsub213sh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB213SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmsub213sh_xmm_xmm_m() {
		testAssembler(c -> c.vfmsub213sh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB213SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub213ss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub213ss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUB213SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub213ss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB213SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub213ss_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub213ss(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB213SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub213ss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB213SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub231pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub231pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUB231PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub231pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub231pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub231pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMSUB231PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub231pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUB231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub231pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsub231pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUB231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsub231pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsub231pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUB231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub231pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB231PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub231pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub231pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsub231pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUB231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub231pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB231PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub231pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub231pd_zmm_zmm_m() {
		testAssembler(c -> c.vfmsub231pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub231ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmsub231ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB231PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmsub231ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmsub231ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUB231PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfmsub231ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsub231ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUB231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsub231ph_xmm_xmm_m() {
		testAssembler(c -> c.vfmsub231ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB231PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub231ph_ymm_ymm_m() {
		testAssembler(c -> c.vfmsub231ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB231PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub231ph_zmm_zmm_m() {
		testAssembler(c -> c.vfmsub231ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub231ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub231ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUB231PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub231ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub231ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub231ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMSUB231PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub231ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUB231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub231ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsub231ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUB231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsub231ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsub231ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUB231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub231ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB231PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub231ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub231ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsub231ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUB231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub231ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB231PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub231ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub231ps_zmm_zmm_m() {
		testAssembler(c -> c.vfmsub231ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub231sd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub231sd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUB231SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub231sd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB231SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub231sd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub231sd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB231SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub231sd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB231SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub231sh_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmsub231sh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB231SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmsub231sh_xmm_xmm_m() {
		testAssembler(c -> c.vfmsub231sh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB231SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsub231ss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub231ss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUB231SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub231ss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUB231SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsub231ss_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsub231ss(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUB231SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsub231ss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUB231SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd132pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd132pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUBADD132PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd132pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd132pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd132pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMSUBADD132PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd132pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd132pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsubadd132pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsubadd132pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsubadd132pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd132pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBADD132PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd132pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd132pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsubadd132pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd132pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBADD132PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd132pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd132pd_zmm_zmm_m() {
		testAssembler(c -> c.vfmsubadd132pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsubadd132ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmsubadd132ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmsubadd132ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmsubadd132ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfmsubadd132ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsubadd132ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsubadd132ph_xmm_xmm_m() {
		testAssembler(c -> c.vfmsubadd132ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsubadd132ph_ymm_ymm_m() {
		testAssembler(c -> c.vfmsubadd132ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsubadd132ph_zmm_zmm_m() {
		testAssembler(c -> c.vfmsubadd132ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsubadd132ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd132ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUBADD132PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd132ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd132ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd132ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMSUBADD132PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd132ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd132ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsubadd132ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsubadd132ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsubadd132ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd132ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBADD132PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd132ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd132ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsubadd132ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd132ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBADD132PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd132ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd132ps_zmm_zmm_m() {
		testAssembler(c -> c.vfmsubadd132ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsubadd213pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd213pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUBADD213PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd213pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd213pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd213pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMSUBADD213PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd213pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd213pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsubadd213pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsubadd213pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsubadd213pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd213pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBADD213PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd213pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd213pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsubadd213pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd213pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBADD213PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd213pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd213pd_zmm_zmm_m() {
		testAssembler(c -> c.vfmsubadd213pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsubadd213ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmsubadd213ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmsubadd213ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmsubadd213ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfmsubadd213ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsubadd213ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsubadd213ph_xmm_xmm_m() {
		testAssembler(c -> c.vfmsubadd213ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsubadd213ph_ymm_ymm_m() {
		testAssembler(c -> c.vfmsubadd213ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsubadd213ph_zmm_zmm_m() {
		testAssembler(c -> c.vfmsubadd213ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsubadd213ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd213ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUBADD213PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd213ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd213ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd213ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMSUBADD213PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd213ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd213ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsubadd213ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsubadd213ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsubadd213ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd213ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBADD213PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd213ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd213ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsubadd213ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd213ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBADD213PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd213ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd213ps_zmm_zmm_m() {
		testAssembler(c -> c.vfmsubadd213ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsubadd231pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd231pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUBADD231PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd231pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd231pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd231pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMSUBADD231PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd231pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd231pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsubadd231pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsubadd231pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsubadd231pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd231pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBADD231PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd231pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd231pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsubadd231pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd231pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBADD231PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd231pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd231pd_zmm_zmm_m() {
		testAssembler(c -> c.vfmsubadd231pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsubadd231ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmsubadd231ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmsubadd231ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmsubadd231ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfmsubadd231ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsubadd231ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsubadd231ph_xmm_xmm_m() {
		testAssembler(c -> c.vfmsubadd231ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsubadd231ph_ymm_ymm_m() {
		testAssembler(c -> c.vfmsubadd231ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsubadd231ph_zmm_zmm_m() {
		testAssembler(c -> c.vfmsubadd231ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsubadd231ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd231ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFMSUBADD231PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd231ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd231ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd231ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFMSUBADD231PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd231ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd231ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmsubadd231ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmsubadd231ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsubadd231ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd231ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBADD231PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd231ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd231ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfmsubadd231ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfmsubadd231ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBADD231PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfmsubadd231ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfmsubadd231ps_zmm_zmm_m() {
		testAssembler(c -> c.vfmsubadd231ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMSUBADD231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmsubaddpd_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmsubaddpd(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFMSUBADDPD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfmsubaddpd_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfmsubaddpd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFMSUBADDPD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfmsubaddpd_ymm_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmsubaddpd(ymm2, ymm3, ymm4, ymm5), Instruction.create(Code.VEX_VFMSUBADDPD_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5));
	}

	@Test
	void vfmsubaddpd_ymm_ymm_m_ymm() {
		testAssembler(c -> c.vfmsubaddpd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx), ymm5), Instruction.create(Code.VEX_VFMSUBADDPD_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5));
	}

	@Test
	void vfmsubaddpd_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfmsubaddpd(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBADDPD_XMM_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmsubaddpd_ymm_ymm_ymm_m() {
		testAssembler(c -> c.vfmsubaddpd(ymm2, ymm3, ymm4, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBADDPD_YMM_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmsubaddps_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmsubaddps(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFMSUBADDPS_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfmsubaddps_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfmsubaddps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFMSUBADDPS_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfmsubaddps_ymm_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmsubaddps(ymm2, ymm3, ymm4, ymm5), Instruction.create(Code.VEX_VFMSUBADDPS_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5));
	}

	@Test
	void vfmsubaddps_ymm_ymm_m_ymm() {
		testAssembler(c -> c.vfmsubaddps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx), ymm5), Instruction.create(Code.VEX_VFMSUBADDPS_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5));
	}

	@Test
	void vfmsubaddps_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfmsubaddps(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBADDPS_XMM_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmsubaddps_ymm_ymm_ymm_m() {
		testAssembler(c -> c.vfmsubaddps(ymm2, ymm3, ymm4, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBADDPS_YMM_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmsubpd_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmsubpd(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFMSUBPD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfmsubpd_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfmsubpd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFMSUBPD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfmsubpd_ymm_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmsubpd(ymm2, ymm3, ymm4, ymm5), Instruction.create(Code.VEX_VFMSUBPD_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5));
	}

	@Test
	void vfmsubpd_ymm_ymm_m_ymm() {
		testAssembler(c -> c.vfmsubpd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx), ymm5), Instruction.create(Code.VEX_VFMSUBPD_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5));
	}

	@Test
	void vfmsubpd_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfmsubpd(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBPD_XMM_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmsubpd_ymm_ymm_ymm_m() {
		testAssembler(c -> c.vfmsubpd(ymm2, ymm3, ymm4, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBPD_YMM_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmsubps_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmsubps(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFMSUBPS_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfmsubps_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfmsubps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFMSUBPS_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfmsubps_ymm_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmsubps(ymm2, ymm3, ymm4, ymm5), Instruction.create(Code.VEX_VFMSUBPS_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5));
	}

	@Test
	void vfmsubps_ymm_ymm_m_ymm() {
		testAssembler(c -> c.vfmsubps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx), ymm5), Instruction.create(Code.VEX_VFMSUBPS_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5));
	}

	@Test
	void vfmsubps_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfmsubps(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBPS_XMM_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmsubps_ymm_ymm_ymm_m() {
		testAssembler(c -> c.vfmsubps(ymm2, ymm3, ymm4, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBPS_YMM_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmsubsd_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmsubsd(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFMSUBSD_XMM_XMM_XMMM64_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfmsubsd_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfmsubsd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFMSUBSD_XMM_XMM_XMMM64_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfmsubsd_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfmsubsd(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBSD_XMM_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmsubss_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmsubss(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFMSUBSS_XMM_XMM_XMMM32_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfmsubss_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfmsubss(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFMSUBSS_XMM_XMM_XMMM32_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfmsubss_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfmsubss(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFMSUBSS_XMM_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfmulcph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmulcph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMULCPH_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmulcph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfmulcph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFMULCPH_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfmulcph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfmulcph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFMULCPH_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfmulcph_xmm_xmm_m() {
		testAssembler(c -> c.vfmulcph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMULCPH_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmulcph_ymm_ymm_m() {
		testAssembler(c -> c.vfmulcph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMULCPH_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmulcph_zmm_zmm_m() {
		testAssembler(c -> c.vfmulcph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMULCPH_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfmulcsh_xmm_xmm_xmm() {
		testAssembler(c -> c.vfmulcsh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFMULCSH_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfmulcsh_xmm_xmm_m() {
		testAssembler(c -> c.vfmulcsh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFMULCSH_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd132pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd132pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMADD132PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd132pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd132pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd132pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFNMADD132PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd132pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMADD132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd132pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmadd132pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMADD132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmadd132pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmadd132pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMADD132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd132pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD132PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd132pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd132pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmadd132pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMADD132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd132pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD132PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd132pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd132pd_zmm_zmm_m() {
		testAssembler(c -> c.vfnmadd132pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd132ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmadd132ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD132PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfnmadd132ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfnmadd132ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMADD132PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfnmadd132ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmadd132ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMADD132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmadd132ph_xmm_xmm_m() {
		testAssembler(c -> c.vfnmadd132ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD132PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd132ph_ymm_ymm_m() {
		testAssembler(c -> c.vfnmadd132ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD132PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd132ph_zmm_zmm_m() {
		testAssembler(c -> c.vfnmadd132ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd132ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd132ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMADD132PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd132ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd132ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd132ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFNMADD132PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd132ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMADD132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd132ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmadd132ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMADD132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmadd132ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmadd132ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMADD132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd132ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD132PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd132ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd132ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmadd132ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMADD132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd132ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD132PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd132ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd132ps_zmm_zmm_m() {
		testAssembler(c -> c.vfnmadd132ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd132sd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd132sd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMADD132SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd132sd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD132SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd132sd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd132sd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD132SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd132sd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD132SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd132sh_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmadd132sh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD132SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfnmadd132sh_xmm_xmm_m() {
		testAssembler(c -> c.vfnmadd132sh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD132SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd132ss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd132ss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMADD132SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd132ss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD132SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd132ss_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd132ss(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD132SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd132ss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD132SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd213pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd213pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMADD213PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd213pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd213pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd213pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFNMADD213PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd213pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMADD213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd213pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmadd213pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMADD213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmadd213pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmadd213pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMADD213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd213pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD213PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd213pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd213pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmadd213pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMADD213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd213pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD213PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd213pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd213pd_zmm_zmm_m() {
		testAssembler(c -> c.vfnmadd213pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd213ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmadd213ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD213PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfnmadd213ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfnmadd213ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMADD213PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfnmadd213ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmadd213ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMADD213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmadd213ph_xmm_xmm_m() {
		testAssembler(c -> c.vfnmadd213ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD213PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd213ph_ymm_ymm_m() {
		testAssembler(c -> c.vfnmadd213ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD213PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd213ph_zmm_zmm_m() {
		testAssembler(c -> c.vfnmadd213ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd213ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd213ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMADD213PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd213ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd213ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd213ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFNMADD213PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd213ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMADD213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd213ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmadd213ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMADD213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmadd213ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmadd213ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMADD213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd213ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD213PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd213ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd213ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmadd213ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMADD213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd213ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD213PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd213ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd213ps_zmm_zmm_m() {
		testAssembler(c -> c.vfnmadd213ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd213sd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd213sd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMADD213SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd213sd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD213SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd213sd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd213sd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD213SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd213sd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD213SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd213sh_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmadd213sh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD213SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfnmadd213sh_xmm_xmm_m() {
		testAssembler(c -> c.vfnmadd213sh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD213SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd213ss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd213ss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMADD213SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd213ss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD213SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd213ss_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd213ss(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD213SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd213ss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD213SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd231pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd231pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMADD231PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd231pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd231pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd231pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFNMADD231PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd231pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMADD231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd231pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmadd231pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMADD231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmadd231pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmadd231pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMADD231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd231pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD231PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd231pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd231pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmadd231pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMADD231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd231pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD231PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd231pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd231pd_zmm_zmm_m() {
		testAssembler(c -> c.vfnmadd231pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd231ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmadd231ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD231PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfnmadd231ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfnmadd231ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMADD231PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfnmadd231ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmadd231ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMADD231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmadd231ph_xmm_xmm_m() {
		testAssembler(c -> c.vfnmadd231ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD231PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd231ph_ymm_ymm_m() {
		testAssembler(c -> c.vfnmadd231ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD231PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd231ph_zmm_zmm_m() {
		testAssembler(c -> c.vfnmadd231ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd231ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd231ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMADD231PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd231ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd231ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd231ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFNMADD231PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd231ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMADD231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd231ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmadd231ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMADD231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmadd231ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmadd231ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMADD231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd231ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD231PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd231ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd231ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmadd231ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMADD231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd231ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD231PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd231ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd231ps_zmm_zmm_m() {
		testAssembler(c -> c.vfnmadd231ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd231sd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd231sd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMADD231SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd231sd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD231SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd231sd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd231sd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD231SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd231sd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD231SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd231sh_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmadd231sh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD231SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfnmadd231sh_xmm_xmm_m() {
		testAssembler(c -> c.vfnmadd231sh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD231SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmadd231ss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd231ss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMADD231SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd231ss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMADD231SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmadd231ss_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmadd231ss(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADD231SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmadd231ss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMADD231SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmaddpd_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmaddpd(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFNMADDPD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfnmaddpd_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfnmaddpd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFNMADDPD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfnmaddpd_ymm_ymm_ymm_ymm() {
		testAssembler(c -> c.vfnmaddpd(ymm2, ymm3, ymm4, ymm5), Instruction.create(Code.VEX_VFNMADDPD_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5));
	}

	@Test
	void vfnmaddpd_ymm_ymm_m_ymm() {
		testAssembler(c -> c.vfnmaddpd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx), ymm5), Instruction.create(Code.VEX_VFNMADDPD_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5));
	}

	@Test
	void vfnmaddpd_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfnmaddpd(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADDPD_XMM_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfnmaddpd_ymm_ymm_ymm_m() {
		testAssembler(c -> c.vfnmaddpd(ymm2, ymm3, ymm4, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADDPD_YMM_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfnmaddps_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmaddps(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFNMADDPS_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfnmaddps_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfnmaddps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFNMADDPS_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfnmaddps_ymm_ymm_ymm_ymm() {
		testAssembler(c -> c.vfnmaddps(ymm2, ymm3, ymm4, ymm5), Instruction.create(Code.VEX_VFNMADDPS_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5));
	}

	@Test
	void vfnmaddps_ymm_ymm_m_ymm() {
		testAssembler(c -> c.vfnmaddps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx), ymm5), Instruction.create(Code.VEX_VFNMADDPS_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5));
	}

	@Test
	void vfnmaddps_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfnmaddps(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADDPS_XMM_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfnmaddps_ymm_ymm_ymm_m() {
		testAssembler(c -> c.vfnmaddps(ymm2, ymm3, ymm4, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADDPS_YMM_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfnmaddsd_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmaddsd(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFNMADDSD_XMM_XMM_XMMM64_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfnmaddsd_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfnmaddsd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFNMADDSD_XMM_XMM_XMMM64_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfnmaddsd_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfnmaddsd(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADDSD_XMM_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfnmaddss_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmaddss(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFNMADDSS_XMM_XMM_XMMM32_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfnmaddss_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfnmaddss(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFNMADDSS_XMM_XMM_XMMM32_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfnmaddss_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfnmaddss(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMADDSS_XMM_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfnmsub132pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub132pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMSUB132PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub132pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub132pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub132pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFNMSUB132PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub132pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMSUB132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub132pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmsub132pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmsub132pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmsub132pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMSUB132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub132pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB132PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub132pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB132PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub132pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmsub132pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMSUB132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub132pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB132PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub132pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB132PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub132pd_zmm_zmm_m() {
		testAssembler(c -> c.vfnmsub132pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB132PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub132ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmsub132ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB132PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfnmsub132ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfnmsub132ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMSUB132PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfnmsub132ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmsub132ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmsub132ph_xmm_xmm_m() {
		testAssembler(c -> c.vfnmsub132ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB132PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub132ph_ymm_ymm_m() {
		testAssembler(c -> c.vfnmsub132ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB132PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub132ph_zmm_zmm_m() {
		testAssembler(c -> c.vfnmsub132ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB132PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub132ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub132ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMSUB132PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub132ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub132ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub132ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFNMSUB132PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub132ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMSUB132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub132ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmsub132ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmsub132ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmsub132ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMSUB132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub132ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB132PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub132ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB132PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub132ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmsub132ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMSUB132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub132ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB132PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub132ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB132PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub132ps_zmm_zmm_m() {
		testAssembler(c -> c.vfnmsub132ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB132PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub132sd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub132sd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMSUB132SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub132sd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB132SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub132sd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub132sd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB132SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub132sd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB132SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub132sh_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmsub132sh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB132SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfnmsub132sh_xmm_xmm_m() {
		testAssembler(c -> c.vfnmsub132sh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB132SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub132ss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub132ss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMSUB132SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub132ss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB132SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub132ss_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub132ss(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB132SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub132ss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB132SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub213pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub213pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMSUB213PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub213pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub213pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub213pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFNMSUB213PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub213pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMSUB213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub213pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmsub213pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmsub213pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmsub213pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMSUB213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub213pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB213PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub213pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB213PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub213pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmsub213pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMSUB213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub213pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB213PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub213pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB213PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub213pd_zmm_zmm_m() {
		testAssembler(c -> c.vfnmsub213pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB213PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub213ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmsub213ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB213PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfnmsub213ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfnmsub213ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMSUB213PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfnmsub213ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmsub213ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmsub213ph_xmm_xmm_m() {
		testAssembler(c -> c.vfnmsub213ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB213PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub213ph_ymm_ymm_m() {
		testAssembler(c -> c.vfnmsub213ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB213PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub213ph_zmm_zmm_m() {
		testAssembler(c -> c.vfnmsub213ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB213PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub213ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub213ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMSUB213PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub213ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub213ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub213ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFNMSUB213PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub213ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMSUB213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub213ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmsub213ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmsub213ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmsub213ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMSUB213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub213ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB213PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub213ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB213PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub213ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmsub213ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMSUB213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub213ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB213PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub213ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB213PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub213ps_zmm_zmm_m() {
		testAssembler(c -> c.vfnmsub213ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB213PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub213sd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub213sd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMSUB213SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub213sd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB213SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub213sd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub213sd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB213SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub213sd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB213SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub213sh_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmsub213sh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB213SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfnmsub213sh_xmm_xmm_m() {
		testAssembler(c -> c.vfnmsub213sh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB213SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub213ss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub213ss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMSUB213SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub213ss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB213SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub213ss_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub213ss(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB213SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub213ss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB213SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub231pd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub231pd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMSUB231PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub231pd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub231pd_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub231pd(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFNMSUB231PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub231pd(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMSUB231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub231pd_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmsub231pd(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmsub231pd_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmsub231pd(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMSUB231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub231pd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB231PD_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub231pd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB231PD_XMM_K1Z_XMM_XMMM128B64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub231pd_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmsub231pd(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMSUB231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub231pd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB231PD_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub231pd(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB231PD_YMM_K1Z_YMM_YMMM256B64, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub231pd_zmm_zmm_m() {
		testAssembler(c -> c.vfnmsub231pd(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB231PD_ZMM_K1Z_ZMM_ZMMM512B64_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub231ph_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmsub231ph(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB231PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfnmsub231ph_ymm_ymm_ymm() {
		testAssembler(c -> c.vfnmsub231ph(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMSUB231PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1));
	}

	@Test
	void vfnmsub231ph_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmsub231ph(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmsub231ph_xmm_xmm_m() {
		testAssembler(c -> c.vfnmsub231ph(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB231PH_XMM_K1Z_XMM_XMMM128B16, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub231ph_ymm_ymm_m() {
		testAssembler(c -> c.vfnmsub231ph(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB231PH_YMM_K1Z_YMM_YMMM256B16, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub231ph_zmm_zmm_m() {
		testAssembler(c -> c.vfnmsub231ph(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB231PH_ZMM_K1Z_ZMM_ZMMM512B16_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub231ps_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub231ps(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMSUB231PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub231ps(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub231ps_ymm_ymm_ymm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub231ps(ymm2, ymm3, ymm4), Instruction.create(Code.VEX_VFNMSUB231PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub231ps(ymm2.k1(), ymm3, ymm4), applyK(Instruction.create(Code.EVEX_VFNMSUB231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub231ps_zmm_zmm_zmm() {
		testAssembler(c -> c.vfnmsub231ps(zmm2.k1(), zmm3, zmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, ICRegisters.zmm4), Register.K1));
	}

	@Test
	void vfnmsub231ps_xmm_xmm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmsub231ps(xmm2.k1(), xmm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMSUB231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub231ps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB231PS_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub231ps(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB231PS_XMM_K1Z_XMM_XMMM128B32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub231ps_ymm_ymm_m() {
		{ /* if (src2.isBroadcast()) */
			testAssembler(c -> c.vfnmsub231ps(ymm2.k1(), ymm3, dword_bcst(0x0L).base(rdx)), applyK(Instruction.create(Code.EVEX_VFNMSUB231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub231ps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB231PS_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub231ps(ymm2.k1(), ymm3, ymmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB231PS_YMM_K1Z_YMM_YMMM256B32, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub231ps_zmm_zmm_m() {
		testAssembler(c -> c.vfnmsub231ps(zmm2.k1(), zmm3, zmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB231PS_ZMM_K1Z_ZMM_ZMMM512B32_ER, ICRegisters.zmm2, ICRegisters.zmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub231sd_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub231sd(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMSUB231SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub231sd(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB231SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub231sd_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub231sd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB231SD_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub231sd(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB231SD_XMM_K1Z_XMM_XMMM64_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub231sh_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmsub231sh(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB231SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1));
	}

	@Test
	void vfnmsub231sh_xmm_xmm_m() {
		testAssembler(c -> c.vfnmsub231sh(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB231SH_XMM_K1Z_XMM_XMMM16_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1));
	}

	@Test
	void vfnmsub231ss_xmm_xmm_xmm() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub231ss(xmm2, xmm3, xmm4), Instruction.create(Code.VEX_VFNMSUB231SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub231ss(xmm2.k1(), xmm3, xmm4), applyK(Instruction.create(Code.EVEX_VFNMSUB231SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsub231ss_xmm_xmm_m() {
		{ /* if (getInstructionPreferVex()) */
			testAssembler(c -> c.vfnmsub231ss(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUB231SS_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), TestInstrFlags.PREFER_VEX);
		} /* else */ testAssembler(c -> c.vfnmsub231ss(xmm2.k1(), xmm3, xmmword_ptr(0x0L).base(rcx)), applyK(Instruction.create(Code.EVEX_VFNMSUB231SS_XMM_K1Z_XMM_XMMM32_ER, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)), Register.K1), TestInstrFlags.PREFER_EVEX);
	}

	@Test
	void vfnmsubpd_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmsubpd(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFNMSUBPD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfnmsubpd_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfnmsubpd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFNMSUBPD_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfnmsubpd_ymm_ymm_ymm_ymm() {
		testAssembler(c -> c.vfnmsubpd(ymm2, ymm3, ymm4, ymm5), Instruction.create(Code.VEX_VFNMSUBPD_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5));
	}

	@Test
	void vfnmsubpd_ymm_ymm_m_ymm() {
		testAssembler(c -> c.vfnmsubpd(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx), ymm5), Instruction.create(Code.VEX_VFNMSUBPD_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5));
	}

	@Test
	void vfnmsubpd_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfnmsubpd(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUBPD_XMM_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfnmsubpd_ymm_ymm_ymm_m() {
		testAssembler(c -> c.vfnmsubpd(ymm2, ymm3, ymm4, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUBPD_YMM_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfnmsubps_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmsubps(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFNMSUBPS_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfnmsubps_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfnmsubps(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFNMSUBPS_XMM_XMM_XMMM128_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfnmsubps_ymm_ymm_ymm_ymm() {
		testAssembler(c -> c.vfnmsubps(ymm2, ymm3, ymm4, ymm5), Instruction.create(Code.VEX_VFNMSUBPS_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, ICRegisters.ymm5));
	}

	@Test
	void vfnmsubps_ymm_ymm_m_ymm() {
		testAssembler(c -> c.vfnmsubps(ymm2, ymm3, ymmword_ptr(0x0L).base(rcx), ymm5), Instruction.create(Code.VEX_VFNMSUBPS_YMM_YMM_YMMM256_YMM, ICRegisters.ymm2, ICRegisters.ymm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.ymm5));
	}

	@Test
	void vfnmsubps_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfnmsubps(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUBPS_XMM_XMM_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfnmsubps_ymm_ymm_ymm_m() {
		testAssembler(c -> c.vfnmsubps(ymm2, ymm3, ymm4, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUBPS_YMM_YMM_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3, ICRegisters.ymm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfnmsubsd_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmsubsd(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFNMSUBSD_XMM_XMM_XMMM64_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfnmsubsd_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfnmsubsd(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFNMSUBSD_XMM_XMM_XMMM64_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfnmsubsd_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfnmsubsd(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUBSD_XMM_XMM_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfnmsubss_xmm_xmm_xmm_xmm() {
		testAssembler(c -> c.vfnmsubss(xmm2, xmm3, xmm4, xmm5), Instruction.create(Code.VEX_VFNMSUBSS_XMM_XMM_XMMM32_XMM, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, ICRegisters.xmm5));
	}

	@Test
	void vfnmsubss_xmm_xmm_m_xmm() {
		testAssembler(c -> c.vfnmsubss(xmm2, xmm3, xmmword_ptr(0x0L).base(rcx), xmm5), Instruction.create(Code.VEX_VFNMSUBSS_XMM_XMM_XMMM32_XMM, ICRegisters.xmm2, ICRegisters.xmm3, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), ICRegisters.xmm5));
	}

	@Test
	void vfnmsubss_xmm_xmm_xmm_m() {
		testAssembler(c -> c.vfnmsubss(xmm2, xmm3, xmm4, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.VEX_VFNMSUBSS_XMM_XMM_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3, ICRegisters.xmm4, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfpclasspd_kr_xmm_i() {
		testAssembler(c -> c.vfpclasspd(k2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPD_KR_K1_XMMM128B64_IMM8, ICRegisters.k2, ICRegisters.xmm3, -5), Register.K1));
	}

	@Test
	void vfpclasspd_kr_ymm_i() {
		testAssembler(c -> c.vfpclasspd(k2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPD_KR_K1_YMMM256B64_IMM8, ICRegisters.k2, ICRegisters.ymm3, -5), Register.K1));
	}

	@Test
	void vfpclasspd_kr_zmm_i() {
		testAssembler(c -> c.vfpclasspd(k2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPD_KR_K1_ZMMM512B64_IMM8, ICRegisters.k2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vfpclasspd_kr_m_i() {
		{ /* if (src1.isBroadcast()) */
			testAssembler(c -> c.vfpclasspd(k2.k1(), dword_bcst(0x0L).base(rdx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPD_KR_K1_ZMMM512B64_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (src1.size == MemoryOperandSize.ZWORD) */
			testAssembler(c -> c.vfpclasspd(k2.k1(), zmmword_ptr(0x0L).base(rdx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPD_KR_K1_ZMMM512B64_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
		} /* else */ { /* if (src1.size == MemoryOperandSize.YWORD) */
			testAssembler(c -> c.vfpclasspd(k2.k1(), ymmword_ptr(0x0L).base(rdx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPD_KR_K1_YMMM256B64_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
		} /* else */ { /* if (src1.size == MemoryOperandSize.XWORD) */
			testAssembler(c -> c.vfpclasspd(k2.k1(), xmmword_ptr(0x0L).base(rdx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPD_KR_K1_XMMM128B64_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vfpclasspd(k2.k1(), byte_ptr(0x0L).base(rdx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPD_KR_K1_XMMM128B64_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
			});
		}
	}

	@Test
	void vfpclasspdx_kr_m_i() {
		testAssembler(c -> c.vfpclasspdx(k2.k1(), xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPD_KR_K1_XMMM128B64_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfpclasspdy_kr_m_i() {
		testAssembler(c -> c.vfpclasspdy(k2.k1(), ymmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPD_KR_K1_YMMM256B64_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfpclasspdz_kr_m_i() {
		testAssembler(c -> c.vfpclasspdz(k2.k1(), zmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPD_KR_K1_ZMMM512B64_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfpclassph_kr_xmm_i() {
		testAssembler(c -> c.vfpclassph(k2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPH_KR_K1_XMMM128B16_IMM8, ICRegisters.k2, ICRegisters.xmm3, -5), Register.K1));
	}

	@Test
	void vfpclassph_kr_ymm_i() {
		testAssembler(c -> c.vfpclassph(k2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPH_KR_K1_YMMM256B16_IMM8, ICRegisters.k2, ICRegisters.ymm3, -5), Register.K1));
	}

	@Test
	void vfpclassph_kr_zmm_i() {
		testAssembler(c -> c.vfpclassph(k2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPH_KR_K1_ZMMM512B16_IMM8, ICRegisters.k2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vfpclassph_kr_m_i() {
		{ /* if (src1.isBroadcast()) */
			testAssembler(c -> c.vfpclassph(k2.k1(), dword_bcst(0x0L).base(rdx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPH_KR_K1_ZMMM512B16_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (src1.size == MemoryOperandSize.ZWORD) */
			testAssembler(c -> c.vfpclassph(k2.k1(), zmmword_ptr(0x0L).base(rdx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPH_KR_K1_ZMMM512B16_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
		} /* else */ { /* if (src1.size == MemoryOperandSize.YWORD) */
			testAssembler(c -> c.vfpclassph(k2.k1(), ymmword_ptr(0x0L).base(rdx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPH_KR_K1_YMMM256B16_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
		} /* else */ { /* if (src1.size == MemoryOperandSize.XWORD) */
			testAssembler(c -> c.vfpclassph(k2.k1(), xmmword_ptr(0x0L).base(rdx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPH_KR_K1_XMMM128B16_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vfpclassph(k2.k1(), byte_ptr(0x0L).base(rdx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPH_KR_K1_XMMM128B16_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
			});
		}
	}

	@Test
	void vfpclassphx_kr_m_i() {
		testAssembler(c -> c.vfpclassphx(k2.k1(), xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPH_KR_K1_XMMM128B16_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfpclassphy_kr_m_i() {
		testAssembler(c -> c.vfpclassphy(k2.k1(), ymmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPH_KR_K1_YMMM256B16_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfpclassphz_kr_m_i() {
		testAssembler(c -> c.vfpclassphz(k2.k1(), zmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPH_KR_K1_ZMMM512B16_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfpclassps_kr_xmm_i() {
		testAssembler(c -> c.vfpclassps(k2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPS_KR_K1_XMMM128B32_IMM8, ICRegisters.k2, ICRegisters.xmm3, -5), Register.K1));
	}

	@Test
	void vfpclassps_kr_ymm_i() {
		testAssembler(c -> c.vfpclassps(k2.k1(), ymm3, -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPS_KR_K1_YMMM256B32_IMM8, ICRegisters.k2, ICRegisters.ymm3, -5), Register.K1));
	}

	@Test
	void vfpclassps_kr_zmm_i() {
		testAssembler(c -> c.vfpclassps(k2.k1(), zmm3, -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPS_KR_K1_ZMMM512B32_IMM8, ICRegisters.k2, ICRegisters.zmm3, -5), Register.K1));
	}

	@Test
	void vfpclassps_kr_m_i() {
		{ /* if (src1.isBroadcast()) */
			testAssembler(c -> c.vfpclassps(k2.k1(), dword_bcst(0x0L).base(rdx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPS_KR_K1_ZMMM512B32_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, true, ICRegister.NONE), -5), Register.K1), TestInstrFlags.PREFER_EVEX | TestInstrFlags.BROADCAST);
		} /* else */ { /* if (src1.size == MemoryOperandSize.ZWORD) */
			testAssembler(c -> c.vfpclassps(k2.k1(), zmmword_ptr(0x0L).base(rdx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPS_KR_K1_ZMMM512B32_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
		} /* else */ { /* if (src1.size == MemoryOperandSize.YWORD) */
			testAssembler(c -> c.vfpclassps(k2.k1(), ymmword_ptr(0x0L).base(rdx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPS_KR_K1_YMMM256B32_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
		} /* else */ { /* if (src1.size == MemoryOperandSize.XWORD) */
			testAssembler(c -> c.vfpclassps(k2.k1(), xmmword_ptr(0x0L).base(rdx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPS_KR_K1_XMMM128B32_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
		}
		{
			assertInvalid(() -> {
				testAssembler(c -> c.vfpclassps(k2.k1(), byte_ptr(0x0L).base(rdx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPS_KR_K1_XMMM128B32_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rdx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
			});
		}
	}

	@Test
	void vfpclasspsx_kr_m_i() {
		testAssembler(c -> c.vfpclasspsx(k2.k1(), xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPS_KR_K1_XMMM128B32_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfpclasspsy_kr_m_i() {
		testAssembler(c -> c.vfpclasspsy(k2.k1(), ymmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPS_KR_K1_YMMM256B32_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfpclasspsz_kr_m_i() {
		testAssembler(c -> c.vfpclasspsz(k2.k1(), zmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSPS_KR_K1_ZMMM512B32_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfpclasssd_kr_xmm_i() {
		testAssembler(c -> c.vfpclasssd(k2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VFPCLASSSD_KR_K1_XMMM64_IMM8, ICRegisters.k2, ICRegisters.xmm3, -5), Register.K1));
	}

	@Test
	void vfpclasssd_kr_m_i() {
		testAssembler(c -> c.vfpclasssd(k2.k1(), xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSSD_KR_K1_XMMM64_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfpclasssh_kr_xmm_i() {
		testAssembler(c -> c.vfpclasssh(k2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VFPCLASSSH_KR_K1_XMMM16_IMM8, ICRegisters.k2, ICRegisters.xmm3, -5), Register.K1));
	}

	@Test
	void vfpclasssh_kr_m_i() {
		testAssembler(c -> c.vfpclasssh(k2.k1(), xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSSH_KR_K1_XMMM16_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfpclassss_kr_xmm_i() {
		testAssembler(c -> c.vfpclassss(k2.k1(), xmm3, -5), applyK(Instruction.create(Code.EVEX_VFPCLASSSS_KR_K1_XMMM32_IMM8, ICRegisters.k2, ICRegisters.xmm3, -5), Register.K1));
	}

	@Test
	void vfpclassss_kr_m_i() {
		testAssembler(c -> c.vfpclassss(k2.k1(), xmmword_ptr(0x0L).base(rcx), -5), applyK(Instruction.create(Code.EVEX_VFPCLASSSS_KR_K1_XMMM32_IMM8, ICRegisters.k2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE), -5), Register.K1));
	}

	@Test
	void vfrczpd_xmm_xmm() {
		testAssembler(c -> c.vfrczpd(xmm2, xmm3), Instruction.create(Code.XOP_VFRCZPD_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vfrczpd_ymm_ymm() {
		testAssembler(c -> c.vfrczpd(ymm2, ymm3), Instruction.create(Code.XOP_VFRCZPD_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3));
	}

	@Test
	void vfrczpd_xmm_m() {
		testAssembler(c -> c.vfrczpd(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.XOP_VFRCZPD_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfrczpd_ymm_m() {
		testAssembler(c -> c.vfrczpd(ymm2, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.XOP_VFRCZPD_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfrczps_xmm_xmm() {
		testAssembler(c -> c.vfrczps(xmm2, xmm3), Instruction.create(Code.XOP_VFRCZPS_XMM_XMMM128, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vfrczps_ymm_ymm() {
		testAssembler(c -> c.vfrczps(ymm2, ymm3), Instruction.create(Code.XOP_VFRCZPS_YMM_YMMM256, ICRegisters.ymm2, ICRegisters.ymm3));
	}

	@Test
	void vfrczps_xmm_m() {
		testAssembler(c -> c.vfrczps(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.XOP_VFRCZPS_XMM_XMMM128, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfrczps_ymm_m() {
		testAssembler(c -> c.vfrczps(ymm2, ymmword_ptr(0x0L).base(rcx)), Instruction.create(Code.XOP_VFRCZPS_YMM_YMMM256, ICRegisters.ymm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfrczsd_xmm_xmm() {
		testAssembler(c -> c.vfrczsd(xmm2, xmm3), Instruction.create(Code.XOP_VFRCZSD_XMM_XMMM64, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vfrczsd_xmm_m() {
		testAssembler(c -> c.vfrczsd(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.XOP_VFRCZSD_XMM_XMMM64, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

	@Test
	void vfrczss_xmm_xmm() {
		testAssembler(c -> c.vfrczss(xmm2, xmm3), Instruction.create(Code.XOP_VFRCZSS_XMM_XMMM32, ICRegisters.xmm2, ICRegisters.xmm3));
	}

	@Test
	void vfrczss_xmm_m() {
		testAssembler(c -> c.vfrczss(xmm2, xmmword_ptr(0x0L).base(rcx)), Instruction.create(Code.XOP_VFRCZSS_XMM_XMMM32, ICRegisters.xmm2, new MemoryOperand(ICRegisters.rcx, ICRegister.NONE, 1, 0x0L, 0, false, ICRegister.NONE)));
	}

}
