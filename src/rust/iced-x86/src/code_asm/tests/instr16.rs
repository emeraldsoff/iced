// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

#![allow(clippy::unreadable_literal)]

use crate::code_asm::tests::{add_op_mask, assign_label, create_and_emit_label, test_instr, test_invalid_instr, TestInstrFlags, FIRST_LABEL_ID};
use crate::code_asm::*;
use crate::{Code, DecoderOptions, Instruction, MemoryOperand, Register, RepPrefixKind};

#[test]
#[rustfmt::skip]
fn aaa() {
	// Aaa
	test_instr(16, |a| a.aaa().unwrap(),
		Instruction::with(Code::Aaa),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aad_i() {
	// Aad_imm8
	test_instr(16, |a| a.aad(-5i32).unwrap(),
		Instruction::with1(Code::Aad_imm8, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Aad_imm8
	test_instr(16, |a| a.aad(-5).unwrap(),
		Instruction::with1(Code::Aad_imm8, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aad_u() {
	// Aad_imm8
	test_instr(16, |a| a.aad(0x7Fu32).unwrap(),
		Instruction::with1(Code::Aad_imm8, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aadd_m_r32() {
	// Aadd_m32_r32
	test_instr(16, |a| a.aadd(ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Aadd_m32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aam_i() {
	// Aam_imm8
	test_instr(16, |a| a.aam(-5i32).unwrap(),
		Instruction::with1(Code::Aam_imm8, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Aam_imm8
	test_instr(16, |a| a.aam(-5).unwrap(),
		Instruction::with1(Code::Aam_imm8, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aam_u() {
	// Aam_imm8
	test_instr(16, |a| a.aam(0x7Fu32).unwrap(),
		Instruction::with1(Code::Aam_imm8, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aand_m_r32() {
	// Aand_m32_r32
	test_instr(16, |a| a.aand(ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Aand_m32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aas() {
	// Aas
	test_instr(16, |a| a.aas().unwrap(),
		Instruction::with(Code::Aas),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn adc_r8_r8() {
	// Adc_rm8_r8
	test_instr(16, |a| a.adc(dl, bl).unwrap(),
		Instruction::with2(Code::Adc_rm8_r8, Register::DL, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn adc_m_r8() {
	// Adc_rm8_r8
	test_instr(16, |a| a.adc(byte_ptr(si), bl).unwrap(),
		Instruction::with2(Code::Adc_rm8_r8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn adc_r16_r16() {
	// Adc_rm16_r16
	test_instr(16, |a| a.adc(dx, bx).unwrap(),
		Instruction::with2(Code::Adc_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn adc_m_r16() {
	// Adc_rm16_r16
	test_instr(16, |a| a.adc(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Adc_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn adc_r32_r32() {
	// Adc_rm32_r32
	test_instr(16, |a| a.adc(edx, ebx).unwrap(),
		Instruction::with2(Code::Adc_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn adc_m_r32() {
	// Adc_rm32_r32
	test_instr(16, |a| a.adc(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Adc_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn adc_r8_m() {
	// Adc_r8_rm8
	test_instr(16, |a| a.adc(dl, byte_ptr(si)).unwrap(),
		Instruction::with2(Code::Adc_r8_rm8, Register::DL, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn adc_r16_m() {
	// Adc_r16_rm16
	test_instr(16, |a| a.adc(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Adc_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn adc_r32_m() {
	// Adc_r32_rm32
	test_instr(16, |a| a.adc(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Adc_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn adc_r8_i() {
	/* if op0.register() == Register::AL */ {
		// Adc_AL_imm8
		test_instr(16, |a| a.adc(al, -5i32).unwrap(),
			Instruction::with2(Code::Adc_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Adc_rm8_imm8
		test_instr(16, |a| a.adc(dl, -5i32).unwrap(),
			Instruction::with2(Code::Adc_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AL */ {
		// Adc_AL_imm8
		test_instr(16, |a| a.adc(al, -5).unwrap(),
			Instruction::with2(Code::Adc_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Adc_rm8_imm8
		test_instr(16, |a| a.adc(dl, -5).unwrap(),
			Instruction::with2(Code::Adc_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn adc_r16_i() {
	/* if op0.register() == Register::AX */ {
		// Adc_AX_imm16
		test_instr(16, |a| a.adc(ax, 0x40B7i32).unwrap(),
			Instruction::with2(Code::Adc_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Adc_rm16_imm8
		test_instr(16, |a| a.adc(dx, -0x80i32).unwrap(),
			Instruction::with2(Code::Adc_rm16_imm8, Register::DX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Adc_rm16_imm8
		test_instr(16, |a| a.adc(dx, 0x7Fi32).unwrap(),
			Instruction::with2(Code::Adc_rm16_imm8, Register::DX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Adc_rm16_imm16
		test_instr(16, |a| a.adc(dx, 0x40B7i32).unwrap(),
			Instruction::with2(Code::Adc_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AX */ {
		// Adc_AX_imm16
		test_instr(16, |a| a.adc(ax, 0x40B7).unwrap(),
			Instruction::with2(Code::Adc_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Adc_rm16_imm8
		test_instr(16, |a| a.adc(dx, -0x80).unwrap(),
			Instruction::with2(Code::Adc_rm16_imm8, Register::DX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Adc_rm16_imm8
		test_instr(16, |a| a.adc(dx, 0x7F).unwrap(),
			Instruction::with2(Code::Adc_rm16_imm8, Register::DX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Adc_rm16_imm16
		test_instr(16, |a| a.adc(dx, 0x40B7).unwrap(),
			Instruction::with2(Code::Adc_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn adc_r32_i() {
	/* if op0.register() == Register::EAX */ {
		// Adc_EAX_imm32
		test_instr(16, |a| a.adc(eax, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Adc_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Adc_rm32_imm8
		test_instr(16, |a| a.adc(edx, -0x80i32).unwrap(),
			Instruction::with2(Code::Adc_rm32_imm8, Register::EDX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Adc_rm32_imm8
		test_instr(16, |a| a.adc(edx, 0x7Fi32).unwrap(),
			Instruction::with2(Code::Adc_rm32_imm8, Register::EDX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Adc_rm32_imm32
		test_instr(16, |a| a.adc(edx, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Adc_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::EAX */ {
		// Adc_EAX_imm32
		test_instr(16, |a| a.adc(eax, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Adc_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Adc_rm32_imm8
		test_instr(16, |a| a.adc(edx, -0x80).unwrap(),
			Instruction::with2(Code::Adc_rm32_imm8, Register::EDX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Adc_rm32_imm8
		test_instr(16, |a| a.adc(edx, 0x7F).unwrap(),
			Instruction::with2(Code::Adc_rm32_imm8, Register::EDX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Adc_rm32_imm32
		test_instr(16, |a| a.adc(edx, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Adc_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn adc_m_i() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Skipping Adc_rm64_imm8 - Not supported by current bitness
			// Skipping Adc_rm64_imm8 - Not supported by current bitness
		} /* else */ {
			// Skipping Adc_rm64_imm32 - Not supported by current bitness
		}
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Adc_rm32_imm8
			test_instr(16, |a| a.adc(dword_ptr(di), -0x80i32).unwrap(),
				Instruction::with2(Code::Adc_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Adc_rm32_imm8
			test_instr(16, |a| a.adc(dword_ptr(di), 0x7Fi32).unwrap(),
				Instruction::with2(Code::Adc_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Adc_rm32_imm32
			test_instr(16, |a| a.adc(dword_ptr(di), 0x7FFFFFFFi32).unwrap(),
				Instruction::with2(Code::Adc_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Adc_rm16_imm8
			test_instr(16, |a| a.adc(word_ptr(di), -0x80i32).unwrap(),
				Instruction::with2(Code::Adc_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Adc_rm16_imm8
			test_instr(16, |a| a.adc(word_ptr(di), 0x7Fi32).unwrap(),
				Instruction::with2(Code::Adc_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Adc_rm16_imm16
			test_instr(16, |a| a.adc(word_ptr(di), 0x40B7i32).unwrap(),
				Instruction::with2(Code::Adc_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Adc_rm8_imm8
		test_instr(16, |a| a.adc(byte_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::Adc_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Adc_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.adc(zmmword_ptr(di), -5i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op0.size() == MemoryOperandSize::Qword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Skipping Adc_rm64_imm8 - Not supported by current bitness
			// Skipping Adc_rm64_imm8 - Not supported by current bitness
		} /* else */ {
			// Skipping Adc_rm64_imm32 - Not supported by current bitness
		}
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Adc_rm32_imm8
			test_instr(16, |a| a.adc(dword_ptr(di), -0x80).unwrap(),
				Instruction::with2(Code::Adc_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Adc_rm32_imm8
			test_instr(16, |a| a.adc(dword_ptr(di), 0x7F).unwrap(),
				Instruction::with2(Code::Adc_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Adc_rm32_imm32
			test_instr(16, |a| a.adc(dword_ptr(di), 0x7FFFFFFF).unwrap(),
				Instruction::with2(Code::Adc_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Adc_rm16_imm8
			test_instr(16, |a| a.adc(word_ptr(di), -0x80).unwrap(),
				Instruction::with2(Code::Adc_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Adc_rm16_imm8
			test_instr(16, |a| a.adc(word_ptr(di), 0x7F).unwrap(),
				Instruction::with2(Code::Adc_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Adc_rm16_imm16
			test_instr(16, |a| a.adc(word_ptr(di), 0x40B7).unwrap(),
				Instruction::with2(Code::Adc_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Adc_rm8_imm8
		test_instr(16, |a| a.adc(byte_ptr(di), -5).unwrap(),
			Instruction::with2(Code::Adc_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Adc_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.adc(zmmword_ptr(di), -5).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn adc_r8_u() {
	/* if op0.register() == Register::AL */ {
		// Adc_AL_imm8
		test_instr(16, |a| a.adc(al, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Adc_AL_imm8, Register::AL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Adc_rm8_imm8
		test_instr(16, |a| a.adc(dl, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Adc_rm8_imm8, Register::DL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn adc_r16_u() {
	/* if op0.register() == Register::AX */ {
		// Adc_AX_imm16
		test_instr(16, |a| a.adc(ax, 0x40B7u32).unwrap(),
			Instruction::with2(Code::Adc_AX_imm16, Register::AX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 <= i8::MAX as u32 || (0xFF80 <= op1 && op1 <= 0xFFFF) */ {
		// Adc_rm16_imm8
		test_instr(16, |a| a.adc(dx, 0xFF80u32).unwrap(),
			Instruction::with2(Code::Adc_rm16_imm8, Register::DX, 0xFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Adc_rm16_imm8
		test_instr(16, |a| a.adc(dx, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Adc_rm16_imm8, Register::DX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Adc_rm16_imm16
		test_instr(16, |a| a.adc(dx, 0x40B7u32).unwrap(),
			Instruction::with2(Code::Adc_rm16_imm16, Register::DX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn adc_r32_u() {
	/* if op0.register() == Register::EAX */ {
		// Adc_EAX_imm32
		test_instr(16, |a| a.adc(eax, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Adc_EAX_imm32, Register::EAX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 <= i8::MAX as u32 || 0xFFFF_FF80 <= op1 */ {
		// Adc_rm32_imm8
		test_instr(16, |a| a.adc(edx, 0xFFFFFF80u32).unwrap(),
			Instruction::with2(Code::Adc_rm32_imm8, Register::EDX, 0xFFFFFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Adc_rm32_imm8
		test_instr(16, |a| a.adc(edx, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Adc_rm32_imm8, Register::EDX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Adc_rm32_imm32
		test_instr(16, |a| a.adc(edx, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Adc_rm32_imm32, Register::EDX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn adc_m_u() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 <= i8::MAX as u32 || 0xFFFF_FF80 <= op1 */ {
			// Adc_rm32_imm8
			test_instr(16, |a| a.adc(dword_ptr(di), 0xFFFFFF80u32).unwrap(),
				Instruction::with2(Code::Adc_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFFFFFF80u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Adc_rm32_imm8
			test_instr(16, |a| a.adc(dword_ptr(di), 0x7Fu32).unwrap(),
				Instruction::with2(Code::Adc_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Adc_rm32_imm32
			test_instr(16, |a| a.adc(dword_ptr(di), 0x7FFFFFFFu32).unwrap(),
				Instruction::with2(Code::Adc_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 <= i8::MAX as u32 || (0xFF80 <= op1 && op1 <= 0xFFFF) */ {
			// Adc_rm16_imm8
			test_instr(16, |a| a.adc(word_ptr(di), 0xFF80u32).unwrap(),
				Instruction::with2(Code::Adc_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFF80u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Adc_rm16_imm8
			test_instr(16, |a| a.adc(word_ptr(di), 0x7Fu32).unwrap(),
				Instruction::with2(Code::Adc_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Adc_rm16_imm16
			test_instr(16, |a| a.adc(word_ptr(di), 0x40B7u32).unwrap(),
				Instruction::with2(Code::Adc_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Adc_rm8_imm8
		test_instr(16, |a| a.adc(byte_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::Adc_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Adc_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.adc(zmmword_ptr(di), 0x7Fu32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn adcx_r32_r32() {
	// Adcx_r32_rm32
	test_instr(16, |a| a.adcx(edx, ebx).unwrap(),
		Instruction::with2(Code::Adcx_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn adcx_r32_m() {
	// Adcx_r32_rm32
	test_instr(16, |a| a.adcx(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Adcx_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn add_r8_r8() {
	// Add_rm8_r8
	test_instr(16, |a| a.add(dl, bl).unwrap(),
		Instruction::with2(Code::Add_rm8_r8, Register::DL, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn add_m_r8() {
	// Add_rm8_r8
	test_instr(16, |a| a.add(byte_ptr(si), bl).unwrap(),
		Instruction::with2(Code::Add_rm8_r8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn add_r16_r16() {
	// Add_rm16_r16
	test_instr(16, |a| a.add(dx, bx).unwrap(),
		Instruction::with2(Code::Add_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn add_m_r16() {
	// Add_rm16_r16
	test_instr(16, |a| a.add(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Add_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn add_r32_r32() {
	// Add_rm32_r32
	test_instr(16, |a| a.add(edx, ebx).unwrap(),
		Instruction::with2(Code::Add_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn add_m_r32() {
	// Add_rm32_r32
	test_instr(16, |a| a.add(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Add_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn add_r8_m() {
	// Add_r8_rm8
	test_instr(16, |a| a.add(dl, byte_ptr(si)).unwrap(),
		Instruction::with2(Code::Add_r8_rm8, Register::DL, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn add_r16_m() {
	// Add_r16_rm16
	test_instr(16, |a| a.add(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Add_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn add_r32_m() {
	// Add_r32_rm32
	test_instr(16, |a| a.add(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Add_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn add_r8_i() {
	/* if op0.register() == Register::AL */ {
		// Add_AL_imm8
		test_instr(16, |a| a.add(al, -5i32).unwrap(),
			Instruction::with2(Code::Add_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Add_rm8_imm8
		test_instr(16, |a| a.add(dl, -5i32).unwrap(),
			Instruction::with2(Code::Add_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AL */ {
		// Add_AL_imm8
		test_instr(16, |a| a.add(al, -5).unwrap(),
			Instruction::with2(Code::Add_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Add_rm8_imm8
		test_instr(16, |a| a.add(dl, -5).unwrap(),
			Instruction::with2(Code::Add_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn add_r16_i() {
	/* if op0.register() == Register::AX */ {
		// Add_AX_imm16
		test_instr(16, |a| a.add(ax, 0x40B7i32).unwrap(),
			Instruction::with2(Code::Add_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Add_rm16_imm8
		test_instr(16, |a| a.add(dx, -0x80i32).unwrap(),
			Instruction::with2(Code::Add_rm16_imm8, Register::DX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Add_rm16_imm8
		test_instr(16, |a| a.add(dx, 0x7Fi32).unwrap(),
			Instruction::with2(Code::Add_rm16_imm8, Register::DX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Add_rm16_imm16
		test_instr(16, |a| a.add(dx, 0x40B7i32).unwrap(),
			Instruction::with2(Code::Add_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AX */ {
		// Add_AX_imm16
		test_instr(16, |a| a.add(ax, 0x40B7).unwrap(),
			Instruction::with2(Code::Add_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Add_rm16_imm8
		test_instr(16, |a| a.add(dx, -0x80).unwrap(),
			Instruction::with2(Code::Add_rm16_imm8, Register::DX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Add_rm16_imm8
		test_instr(16, |a| a.add(dx, 0x7F).unwrap(),
			Instruction::with2(Code::Add_rm16_imm8, Register::DX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Add_rm16_imm16
		test_instr(16, |a| a.add(dx, 0x40B7).unwrap(),
			Instruction::with2(Code::Add_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn add_r32_i() {
	/* if op0.register() == Register::EAX */ {
		// Add_EAX_imm32
		test_instr(16, |a| a.add(eax, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Add_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Add_rm32_imm8
		test_instr(16, |a| a.add(edx, -0x80i32).unwrap(),
			Instruction::with2(Code::Add_rm32_imm8, Register::EDX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Add_rm32_imm8
		test_instr(16, |a| a.add(edx, 0x7Fi32).unwrap(),
			Instruction::with2(Code::Add_rm32_imm8, Register::EDX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Add_rm32_imm32
		test_instr(16, |a| a.add(edx, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Add_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::EAX */ {
		// Add_EAX_imm32
		test_instr(16, |a| a.add(eax, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Add_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Add_rm32_imm8
		test_instr(16, |a| a.add(edx, -0x80).unwrap(),
			Instruction::with2(Code::Add_rm32_imm8, Register::EDX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Add_rm32_imm8
		test_instr(16, |a| a.add(edx, 0x7F).unwrap(),
			Instruction::with2(Code::Add_rm32_imm8, Register::EDX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Add_rm32_imm32
		test_instr(16, |a| a.add(edx, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Add_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn add_m_i() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Skipping Add_rm64_imm8 - Not supported by current bitness
			// Skipping Add_rm64_imm8 - Not supported by current bitness
		} /* else */ {
			// Skipping Add_rm64_imm32 - Not supported by current bitness
		}
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Add_rm32_imm8
			test_instr(16, |a| a.add(dword_ptr(di), -0x80i32).unwrap(),
				Instruction::with2(Code::Add_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Add_rm32_imm8
			test_instr(16, |a| a.add(dword_ptr(di), 0x7Fi32).unwrap(),
				Instruction::with2(Code::Add_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Add_rm32_imm32
			test_instr(16, |a| a.add(dword_ptr(di), 0x7FFFFFFFi32).unwrap(),
				Instruction::with2(Code::Add_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Add_rm16_imm8
			test_instr(16, |a| a.add(word_ptr(di), -0x80i32).unwrap(),
				Instruction::with2(Code::Add_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Add_rm16_imm8
			test_instr(16, |a| a.add(word_ptr(di), 0x7Fi32).unwrap(),
				Instruction::with2(Code::Add_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Add_rm16_imm16
			test_instr(16, |a| a.add(word_ptr(di), 0x40B7i32).unwrap(),
				Instruction::with2(Code::Add_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Add_rm8_imm8
		test_instr(16, |a| a.add(byte_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::Add_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Add_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.add(zmmword_ptr(di), -5i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op0.size() == MemoryOperandSize::Qword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Skipping Add_rm64_imm8 - Not supported by current bitness
			// Skipping Add_rm64_imm8 - Not supported by current bitness
		} /* else */ {
			// Skipping Add_rm64_imm32 - Not supported by current bitness
		}
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Add_rm32_imm8
			test_instr(16, |a| a.add(dword_ptr(di), -0x80).unwrap(),
				Instruction::with2(Code::Add_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Add_rm32_imm8
			test_instr(16, |a| a.add(dword_ptr(di), 0x7F).unwrap(),
				Instruction::with2(Code::Add_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Add_rm32_imm32
			test_instr(16, |a| a.add(dword_ptr(di), 0x7FFFFFFF).unwrap(),
				Instruction::with2(Code::Add_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Add_rm16_imm8
			test_instr(16, |a| a.add(word_ptr(di), -0x80).unwrap(),
				Instruction::with2(Code::Add_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Add_rm16_imm8
			test_instr(16, |a| a.add(word_ptr(di), 0x7F).unwrap(),
				Instruction::with2(Code::Add_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Add_rm16_imm16
			test_instr(16, |a| a.add(word_ptr(di), 0x40B7).unwrap(),
				Instruction::with2(Code::Add_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Add_rm8_imm8
		test_instr(16, |a| a.add(byte_ptr(di), -5).unwrap(),
			Instruction::with2(Code::Add_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Add_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.add(zmmword_ptr(di), -5).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn add_r8_u() {
	/* if op0.register() == Register::AL */ {
		// Add_AL_imm8
		test_instr(16, |a| a.add(al, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Add_AL_imm8, Register::AL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Add_rm8_imm8
		test_instr(16, |a| a.add(dl, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Add_rm8_imm8, Register::DL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn add_r16_u() {
	/* if op0.register() == Register::AX */ {
		// Add_AX_imm16
		test_instr(16, |a| a.add(ax, 0x40B7u32).unwrap(),
			Instruction::with2(Code::Add_AX_imm16, Register::AX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 <= i8::MAX as u32 || (0xFF80 <= op1 && op1 <= 0xFFFF) */ {
		// Add_rm16_imm8
		test_instr(16, |a| a.add(dx, 0xFF80u32).unwrap(),
			Instruction::with2(Code::Add_rm16_imm8, Register::DX, 0xFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Add_rm16_imm8
		test_instr(16, |a| a.add(dx, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Add_rm16_imm8, Register::DX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Add_rm16_imm16
		test_instr(16, |a| a.add(dx, 0x40B7u32).unwrap(),
			Instruction::with2(Code::Add_rm16_imm16, Register::DX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn add_r32_u() {
	/* if op0.register() == Register::EAX */ {
		// Add_EAX_imm32
		test_instr(16, |a| a.add(eax, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Add_EAX_imm32, Register::EAX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 <= i8::MAX as u32 || 0xFFFF_FF80 <= op1 */ {
		// Add_rm32_imm8
		test_instr(16, |a| a.add(edx, 0xFFFFFF80u32).unwrap(),
			Instruction::with2(Code::Add_rm32_imm8, Register::EDX, 0xFFFFFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Add_rm32_imm8
		test_instr(16, |a| a.add(edx, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Add_rm32_imm8, Register::EDX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Add_rm32_imm32
		test_instr(16, |a| a.add(edx, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Add_rm32_imm32, Register::EDX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn add_m_u() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 <= i8::MAX as u32 || 0xFFFF_FF80 <= op1 */ {
			// Add_rm32_imm8
			test_instr(16, |a| a.add(dword_ptr(di), 0xFFFFFF80u32).unwrap(),
				Instruction::with2(Code::Add_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFFFFFF80u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Add_rm32_imm8
			test_instr(16, |a| a.add(dword_ptr(di), 0x7Fu32).unwrap(),
				Instruction::with2(Code::Add_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Add_rm32_imm32
			test_instr(16, |a| a.add(dword_ptr(di), 0x7FFFFFFFu32).unwrap(),
				Instruction::with2(Code::Add_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 <= i8::MAX as u32 || (0xFF80 <= op1 && op1 <= 0xFFFF) */ {
			// Add_rm16_imm8
			test_instr(16, |a| a.add(word_ptr(di), 0xFF80u32).unwrap(),
				Instruction::with2(Code::Add_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFF80u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Add_rm16_imm8
			test_instr(16, |a| a.add(word_ptr(di), 0x7Fu32).unwrap(),
				Instruction::with2(Code::Add_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Add_rm16_imm16
			test_instr(16, |a| a.add(word_ptr(di), 0x40B7u32).unwrap(),
				Instruction::with2(Code::Add_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Add_rm8_imm8
		test_instr(16, |a| a.add(byte_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::Add_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Add_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.add(zmmword_ptr(di), 0x7Fu32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn addpd_xmm_xmm() {
	// Addpd_xmm_xmmm128
	test_instr(16, |a| a.addpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Addpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn addpd_xmm_m() {
	// Addpd_xmm_xmmm128
	test_instr(16, |a| a.addpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Addpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn addps_xmm_xmm() {
	// Addps_xmm_xmmm128
	test_instr(16, |a| a.addps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Addps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn addps_xmm_m() {
	// Addps_xmm_xmmm128
	test_instr(16, |a| a.addps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Addps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn addsd_xmm_xmm() {
	// Addsd_xmm_xmmm64
	test_instr(16, |a| a.addsd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Addsd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn addsd_xmm_m() {
	// Addsd_xmm_xmmm64
	test_instr(16, |a| a.addsd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Addsd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn addss_xmm_xmm() {
	// Addss_xmm_xmmm32
	test_instr(16, |a| a.addss(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Addss_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn addss_xmm_m() {
	// Addss_xmm_xmmm32
	test_instr(16, |a| a.addss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Addss_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn addsubpd_xmm_xmm() {
	// Addsubpd_xmm_xmmm128
	test_instr(16, |a| a.addsubpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Addsubpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn addsubpd_xmm_m() {
	// Addsubpd_xmm_xmmm128
	test_instr(16, |a| a.addsubpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Addsubpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn addsubps_xmm_xmm() {
	// Addsubps_xmm_xmmm128
	test_instr(16, |a| a.addsubps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Addsubps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn addsubps_xmm_m() {
	// Addsubps_xmm_xmmm128
	test_instr(16, |a| a.addsubps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Addsubps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn adox_r32_r32() {
	// Adox_r32_rm32
	test_instr(16, |a| a.adox(edx, ebx).unwrap(),
		Instruction::with2(Code::Adox_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn adox_r32_m() {
	// Adox_r32_rm32
	test_instr(16, |a| a.adox(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Adox_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesdec_xmm_xmm() {
	// Aesdec_xmm_xmmm128
	test_instr(16, |a| a.aesdec(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Aesdec_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesdec_xmm_m() {
	// Aesdec_xmm_xmmm128
	test_instr(16, |a| a.aesdec(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Aesdec_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesdec128kl_xmm_m() {
	// Aesdec128kl_xmm_m384
	test_instr(16, |a| a.aesdec128kl(xmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::Aesdec128kl_xmm_m384, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesdec256kl_xmm_m() {
	// Aesdec256kl_xmm_m512
	test_instr(16, |a| a.aesdec256kl(xmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::Aesdec256kl_xmm_m512, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesdeclast_xmm_xmm() {
	// Aesdeclast_xmm_xmmm128
	test_instr(16, |a| a.aesdeclast(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Aesdeclast_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesdeclast_xmm_m() {
	// Aesdeclast_xmm_xmmm128
	test_instr(16, |a| a.aesdeclast(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Aesdeclast_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesdecwide128kl_m() {
	// Aesdecwide128kl_m384
	test_instr(16, |a| a.aesdecwide128kl(ptr(si)).unwrap(),
		Instruction::with1(Code::Aesdecwide128kl_m384, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesdecwide256kl_m() {
	// Aesdecwide256kl_m512
	test_instr(16, |a| a.aesdecwide256kl(ptr(si)).unwrap(),
		Instruction::with1(Code::Aesdecwide256kl_m512, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesenc_xmm_xmm() {
	// Aesenc_xmm_xmmm128
	test_instr(16, |a| a.aesenc(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Aesenc_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesenc_xmm_m() {
	// Aesenc_xmm_xmmm128
	test_instr(16, |a| a.aesenc(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Aesenc_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesenc128kl_xmm_m() {
	// Aesenc128kl_xmm_m384
	test_instr(16, |a| a.aesenc128kl(xmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::Aesenc128kl_xmm_m384, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesenc256kl_xmm_m() {
	// Aesenc256kl_xmm_m512
	test_instr(16, |a| a.aesenc256kl(xmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::Aesenc256kl_xmm_m512, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesenclast_xmm_xmm() {
	// Aesenclast_xmm_xmmm128
	test_instr(16, |a| a.aesenclast(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Aesenclast_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesenclast_xmm_m() {
	// Aesenclast_xmm_xmmm128
	test_instr(16, |a| a.aesenclast(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Aesenclast_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesencwide128kl_m() {
	// Aesencwide128kl_m384
	test_instr(16, |a| a.aesencwide128kl(ptr(si)).unwrap(),
		Instruction::with1(Code::Aesencwide128kl_m384, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesencwide256kl_m() {
	// Aesencwide256kl_m512
	test_instr(16, |a| a.aesencwide256kl(ptr(si)).unwrap(),
		Instruction::with1(Code::Aesencwide256kl_m512, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesimc_xmm_xmm() {
	// Aesimc_xmm_xmmm128
	test_instr(16, |a| a.aesimc(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Aesimc_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aesimc_xmm_m() {
	// Aesimc_xmm_xmmm128
	test_instr(16, |a| a.aesimc(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Aesimc_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aeskeygenassist_xmm_xmm_i() {
	// Aeskeygenassist_xmm_xmmm128_imm8
	test_instr(16, |a| a.aeskeygenassist(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Aeskeygenassist_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Aeskeygenassist_xmm_xmmm128_imm8
	test_instr(16, |a| a.aeskeygenassist(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Aeskeygenassist_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aeskeygenassist_xmm_m_i() {
	// Aeskeygenassist_xmm_xmmm128_imm8
	test_instr(16, |a| a.aeskeygenassist(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Aeskeygenassist_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Aeskeygenassist_xmm_xmmm128_imm8
	test_instr(16, |a| a.aeskeygenassist(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Aeskeygenassist_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aeskeygenassist_xmm_xmm_u() {
	// Aeskeygenassist_xmm_xmmm128_imm8
	test_instr(16, |a| a.aeskeygenassist(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Aeskeygenassist_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aeskeygenassist_xmm_m_u() {
	// Aeskeygenassist_xmm_xmmm128_imm8
	test_instr(16, |a| a.aeskeygenassist(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Aeskeygenassist_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn altinst() {
	// Altinst
	test_instr(16, |a| a.altinst().unwrap(),
		Instruction::with(Code::Altinst),
		TestInstrFlags::NONE, DecoderOptions::ALTINST);
}

#[test]
#[rustfmt::skip]
fn and_r8_r8() {
	// And_rm8_r8
	test_instr(16, |a| a.and(dl, bl).unwrap(),
		Instruction::with2(Code::And_rm8_r8, Register::DL, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn and_m_r8() {
	// And_rm8_r8
	test_instr(16, |a| a.and(byte_ptr(si), bl).unwrap(),
		Instruction::with2(Code::And_rm8_r8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn and_r16_r16() {
	// And_rm16_r16
	test_instr(16, |a| a.and(dx, bx).unwrap(),
		Instruction::with2(Code::And_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn and_m_r16() {
	// And_rm16_r16
	test_instr(16, |a| a.and(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::And_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn and_r32_r32() {
	// And_rm32_r32
	test_instr(16, |a| a.and(edx, ebx).unwrap(),
		Instruction::with2(Code::And_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn and_m_r32() {
	// And_rm32_r32
	test_instr(16, |a| a.and(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::And_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn and_r8_m() {
	// And_r8_rm8
	test_instr(16, |a| a.and(dl, byte_ptr(si)).unwrap(),
		Instruction::with2(Code::And_r8_rm8, Register::DL, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn and_r16_m() {
	// And_r16_rm16
	test_instr(16, |a| a.and(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::And_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn and_r32_m() {
	// And_r32_rm32
	test_instr(16, |a| a.and(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::And_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn and_r8_i() {
	/* if op0.register() == Register::AL */ {
		// And_AL_imm8
		test_instr(16, |a| a.and(al, -5i32).unwrap(),
			Instruction::with2(Code::And_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// And_rm8_imm8
		test_instr(16, |a| a.and(dl, -5i32).unwrap(),
			Instruction::with2(Code::And_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AL */ {
		// And_AL_imm8
		test_instr(16, |a| a.and(al, -5).unwrap(),
			Instruction::with2(Code::And_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// And_rm8_imm8
		test_instr(16, |a| a.and(dl, -5).unwrap(),
			Instruction::with2(Code::And_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn and_r16_i() {
	/* if op0.register() == Register::AX */ {
		// And_AX_imm16
		test_instr(16, |a| a.and(ax, 0x40B7i32).unwrap(),
			Instruction::with2(Code::And_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// And_rm16_imm8
		test_instr(16, |a| a.and(dx, -0x80i32).unwrap(),
			Instruction::with2(Code::And_rm16_imm8, Register::DX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// And_rm16_imm8
		test_instr(16, |a| a.and(dx, 0x7Fi32).unwrap(),
			Instruction::with2(Code::And_rm16_imm8, Register::DX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// And_rm16_imm16
		test_instr(16, |a| a.and(dx, 0x40B7i32).unwrap(),
			Instruction::with2(Code::And_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AX */ {
		// And_AX_imm16
		test_instr(16, |a| a.and(ax, 0x40B7).unwrap(),
			Instruction::with2(Code::And_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// And_rm16_imm8
		test_instr(16, |a| a.and(dx, -0x80).unwrap(),
			Instruction::with2(Code::And_rm16_imm8, Register::DX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// And_rm16_imm8
		test_instr(16, |a| a.and(dx, 0x7F).unwrap(),
			Instruction::with2(Code::And_rm16_imm8, Register::DX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// And_rm16_imm16
		test_instr(16, |a| a.and(dx, 0x40B7).unwrap(),
			Instruction::with2(Code::And_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn and_r32_i() {
	/* if op0.register() == Register::EAX */ {
		// And_EAX_imm32
		test_instr(16, |a| a.and(eax, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::And_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// And_rm32_imm8
		test_instr(16, |a| a.and(edx, -0x80i32).unwrap(),
			Instruction::with2(Code::And_rm32_imm8, Register::EDX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// And_rm32_imm8
		test_instr(16, |a| a.and(edx, 0x7Fi32).unwrap(),
			Instruction::with2(Code::And_rm32_imm8, Register::EDX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// And_rm32_imm32
		test_instr(16, |a| a.and(edx, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::And_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::EAX */ {
		// And_EAX_imm32
		test_instr(16, |a| a.and(eax, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::And_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// And_rm32_imm8
		test_instr(16, |a| a.and(edx, -0x80).unwrap(),
			Instruction::with2(Code::And_rm32_imm8, Register::EDX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// And_rm32_imm8
		test_instr(16, |a| a.and(edx, 0x7F).unwrap(),
			Instruction::with2(Code::And_rm32_imm8, Register::EDX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// And_rm32_imm32
		test_instr(16, |a| a.and(edx, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::And_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn and_m_i() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Skipping And_rm64_imm8 - Not supported by current bitness
			// Skipping And_rm64_imm8 - Not supported by current bitness
		} /* else */ {
			// Skipping And_rm64_imm32 - Not supported by current bitness
		}
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// And_rm32_imm8
			test_instr(16, |a| a.and(dword_ptr(di), -0x80i32).unwrap(),
				Instruction::with2(Code::And_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// And_rm32_imm8
			test_instr(16, |a| a.and(dword_ptr(di), 0x7Fi32).unwrap(),
				Instruction::with2(Code::And_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// And_rm32_imm32
			test_instr(16, |a| a.and(dword_ptr(di), 0x7FFFFFFFi32).unwrap(),
				Instruction::with2(Code::And_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// And_rm16_imm8
			test_instr(16, |a| a.and(word_ptr(di), -0x80i32).unwrap(),
				Instruction::with2(Code::And_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// And_rm16_imm8
			test_instr(16, |a| a.and(word_ptr(di), 0x7Fi32).unwrap(),
				Instruction::with2(Code::And_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// And_rm16_imm16
			test_instr(16, |a| a.and(word_ptr(di), 0x40B7i32).unwrap(),
				Instruction::with2(Code::And_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// And_rm8_imm8
		test_instr(16, |a| a.and(byte_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::And_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// And_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.and(zmmword_ptr(di), -5i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op0.size() == MemoryOperandSize::Qword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Skipping And_rm64_imm8 - Not supported by current bitness
			// Skipping And_rm64_imm8 - Not supported by current bitness
		} /* else */ {
			// Skipping And_rm64_imm32 - Not supported by current bitness
		}
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// And_rm32_imm8
			test_instr(16, |a| a.and(dword_ptr(di), -0x80).unwrap(),
				Instruction::with2(Code::And_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// And_rm32_imm8
			test_instr(16, |a| a.and(dword_ptr(di), 0x7F).unwrap(),
				Instruction::with2(Code::And_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// And_rm32_imm32
			test_instr(16, |a| a.and(dword_ptr(di), 0x7FFFFFFF).unwrap(),
				Instruction::with2(Code::And_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// And_rm16_imm8
			test_instr(16, |a| a.and(word_ptr(di), -0x80).unwrap(),
				Instruction::with2(Code::And_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// And_rm16_imm8
			test_instr(16, |a| a.and(word_ptr(di), 0x7F).unwrap(),
				Instruction::with2(Code::And_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// And_rm16_imm16
			test_instr(16, |a| a.and(word_ptr(di), 0x40B7).unwrap(),
				Instruction::with2(Code::And_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// And_rm8_imm8
		test_instr(16, |a| a.and(byte_ptr(di), -5).unwrap(),
			Instruction::with2(Code::And_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// And_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.and(zmmword_ptr(di), -5).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn and_r8_u() {
	/* if op0.register() == Register::AL */ {
		// And_AL_imm8
		test_instr(16, |a| a.and(al, 0x7Fu32).unwrap(),
			Instruction::with2(Code::And_AL_imm8, Register::AL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// And_rm8_imm8
		test_instr(16, |a| a.and(dl, 0x7Fu32).unwrap(),
			Instruction::with2(Code::And_rm8_imm8, Register::DL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn and_r16_u() {
	/* if op0.register() == Register::AX */ {
		// And_AX_imm16
		test_instr(16, |a| a.and(ax, 0x40B7u32).unwrap(),
			Instruction::with2(Code::And_AX_imm16, Register::AX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 <= i8::MAX as u32 || (0xFF80 <= op1 && op1 <= 0xFFFF) */ {
		// And_rm16_imm8
		test_instr(16, |a| a.and(dx, 0xFF80u32).unwrap(),
			Instruction::with2(Code::And_rm16_imm8, Register::DX, 0xFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// And_rm16_imm8
		test_instr(16, |a| a.and(dx, 0x7Fu32).unwrap(),
			Instruction::with2(Code::And_rm16_imm8, Register::DX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// And_rm16_imm16
		test_instr(16, |a| a.and(dx, 0x40B7u32).unwrap(),
			Instruction::with2(Code::And_rm16_imm16, Register::DX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn and_r32_u() {
	/* if op0.register() == Register::EAX */ {
		// And_EAX_imm32
		test_instr(16, |a| a.and(eax, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::And_EAX_imm32, Register::EAX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 <= i8::MAX as u32 || 0xFFFF_FF80 <= op1 */ {
		// And_rm32_imm8
		test_instr(16, |a| a.and(edx, 0xFFFFFF80u32).unwrap(),
			Instruction::with2(Code::And_rm32_imm8, Register::EDX, 0xFFFFFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// And_rm32_imm8
		test_instr(16, |a| a.and(edx, 0x7Fu32).unwrap(),
			Instruction::with2(Code::And_rm32_imm8, Register::EDX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// And_rm32_imm32
		test_instr(16, |a| a.and(edx, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::And_rm32_imm32, Register::EDX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn and_m_u() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 <= i8::MAX as u32 || 0xFFFF_FF80 <= op1 */ {
			// And_rm32_imm8
			test_instr(16, |a| a.and(dword_ptr(di), 0xFFFFFF80u32).unwrap(),
				Instruction::with2(Code::And_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFFFFFF80u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// And_rm32_imm8
			test_instr(16, |a| a.and(dword_ptr(di), 0x7Fu32).unwrap(),
				Instruction::with2(Code::And_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// And_rm32_imm32
			test_instr(16, |a| a.and(dword_ptr(di), 0x7FFFFFFFu32).unwrap(),
				Instruction::with2(Code::And_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 <= i8::MAX as u32 || (0xFF80 <= op1 && op1 <= 0xFFFF) */ {
			// And_rm16_imm8
			test_instr(16, |a| a.and(word_ptr(di), 0xFF80u32).unwrap(),
				Instruction::with2(Code::And_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFF80u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// And_rm16_imm8
			test_instr(16, |a| a.and(word_ptr(di), 0x7Fu32).unwrap(),
				Instruction::with2(Code::And_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// And_rm16_imm16
			test_instr(16, |a| a.and(word_ptr(di), 0x40B7u32).unwrap(),
				Instruction::with2(Code::And_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// And_rm8_imm8
		test_instr(16, |a| a.and(byte_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::And_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// And_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.and(zmmword_ptr(di), 0x7Fu32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn andn_r32_r32_r32() {
	// VEX_Andn_r32_r32_rm32
	test_instr(16, |a| a.andn(edx, ebx, esp).unwrap(),
		Instruction::with3(Code::VEX_Andn_r32_r32_rm32, Register::EDX, Register::EBX, Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn andn_r32_r32_m() {
	// VEX_Andn_r32_r32_rm32
	test_instr(16, |a| a.andn(edx, ebx, dword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Andn_r32_r32_rm32, Register::EDX, Register::EBX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn andnpd_xmm_xmm() {
	// Andnpd_xmm_xmmm128
	test_instr(16, |a| a.andnpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Andnpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn andnpd_xmm_m() {
	// Andnpd_xmm_xmmm128
	test_instr(16, |a| a.andnpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Andnpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn andnps_xmm_xmm() {
	// Andnps_xmm_xmmm128
	test_instr(16, |a| a.andnps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Andnps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn andnps_xmm_m() {
	// Andnps_xmm_xmmm128
	test_instr(16, |a| a.andnps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Andnps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn andpd_xmm_xmm() {
	// Andpd_xmm_xmmm128
	test_instr(16, |a| a.andpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Andpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn andpd_xmm_m() {
	// Andpd_xmm_xmmm128
	test_instr(16, |a| a.andpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Andpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn andps_xmm_xmm() {
	// Andps_xmm_xmmm128
	test_instr(16, |a| a.andps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Andps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn andps_xmm_m() {
	// Andps_xmm_xmmm128
	test_instr(16, |a| a.andps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Andps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn aor_m_r32() {
	// Aor_m32_r32
	test_instr(16, |a| a.aor(ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Aor_m32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn arpl_r16_r16() {
	// Arpl_rm16_r16
	test_instr(16, |a| a.arpl(dx, bx).unwrap(),
		Instruction::with2(Code::Arpl_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn arpl_m_r16() {
	// Arpl_rm16_r16
	test_instr(16, |a| a.arpl(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Arpl_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn arpl_r32_r32() {
	// Arpl_r32m16_r32
	test_instr(16, |a| a.arpl(edx, ebx).unwrap(),
		Instruction::with2(Code::Arpl_r32m16_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn arpl_m_r32() {
	// Arpl_r32m16_r32
	test_instr(16, |a| a.arpl(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Arpl_r32m16_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn axor_m_r32() {
	// Axor_m32_r32
	test_instr(16, |a| a.axor(ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Axor_m32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bb0_reset() {
	// Bb0_reset
	test_instr(16, |a| a.bb0_reset().unwrap(),
		Instruction::with(Code::Bb0_reset),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn bb1_reset() {
	// Bb1_reset
	test_instr(16, |a| a.bb1_reset().unwrap(),
		Instruction::with(Code::Bb1_reset),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn bextr_r32_r32_r32() {
	// VEX_Bextr_r32_rm32_r32
	test_instr(16, |a| a.bextr(edx, ebx, esp).unwrap(),
		Instruction::with3(Code::VEX_Bextr_r32_rm32_r32, Register::EDX, Register::EBX, Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bextr_r32_m_r32() {
	// VEX_Bextr_r32_rm32_r32
	test_instr(16, |a| a.bextr(edx, dword_ptr(si), esp).unwrap(),
		Instruction::with3(Code::VEX_Bextr_r32_rm32_r32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bextr_r32_r32_i() {
	// XOP_Bextr_r32_rm32_imm32
	test_instr(16, |a| a.bextr(edx, ebx, 0x7FFFFFFFi32).unwrap(),
		Instruction::with3(Code::XOP_Bextr_r32_rm32_imm32, Register::EDX, Register::EBX, 0x7FFFFFFFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Bextr_r32_rm32_imm32
	test_instr(16, |a| a.bextr(edx, ebx, 0x7FFFFFFF).unwrap(),
		Instruction::with3(Code::XOP_Bextr_r32_rm32_imm32, Register::EDX, Register::EBX, 0x7FFFFFFFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bextr_r32_m_i() {
	// XOP_Bextr_r32_rm32_imm32
	test_instr(16, |a| a.bextr(edx, dword_ptr(si), 0x7FFFFFFFi32).unwrap(),
		Instruction::with3(Code::XOP_Bextr_r32_rm32_imm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Bextr_r32_rm32_imm32
	test_instr(16, |a| a.bextr(edx, dword_ptr(si), 0x7FFFFFFF).unwrap(),
		Instruction::with3(Code::XOP_Bextr_r32_rm32_imm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bextr_r32_r32_u() {
	// XOP_Bextr_r32_rm32_imm32
	test_instr(16, |a| a.bextr(edx, ebx, 0x7FFFFFFFu32).unwrap(),
		Instruction::with3(Code::XOP_Bextr_r32_rm32_imm32, Register::EDX, Register::EBX, 0x7FFFFFFFu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bextr_r32_m_u() {
	// XOP_Bextr_r32_rm32_imm32
	test_instr(16, |a| a.bextr(edx, dword_ptr(si), 0x7FFFFFFFu32).unwrap(),
		Instruction::with3(Code::XOP_Bextr_r32_rm32_imm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blcfill_r32_r32() {
	// XOP_Blcfill_r32_rm32
	test_instr(16, |a| a.blcfill(edx, ebx).unwrap(),
		Instruction::with2(Code::XOP_Blcfill_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blcfill_r32_m() {
	// XOP_Blcfill_r32_rm32
	test_instr(16, |a| a.blcfill(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Blcfill_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blci_r32_r32() {
	// XOP_Blci_r32_rm32
	test_instr(16, |a| a.blci(edx, ebx).unwrap(),
		Instruction::with2(Code::XOP_Blci_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blci_r32_m() {
	// XOP_Blci_r32_rm32
	test_instr(16, |a| a.blci(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Blci_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blcic_r32_r32() {
	// XOP_Blcic_r32_rm32
	test_instr(16, |a| a.blcic(edx, ebx).unwrap(),
		Instruction::with2(Code::XOP_Blcic_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blcic_r32_m() {
	// XOP_Blcic_r32_rm32
	test_instr(16, |a| a.blcic(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Blcic_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blcmsk_r32_r32() {
	// XOP_Blcmsk_r32_rm32
	test_instr(16, |a| a.blcmsk(edx, ebx).unwrap(),
		Instruction::with2(Code::XOP_Blcmsk_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blcmsk_r32_m() {
	// XOP_Blcmsk_r32_rm32
	test_instr(16, |a| a.blcmsk(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Blcmsk_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blcs_r32_r32() {
	// XOP_Blcs_r32_rm32
	test_instr(16, |a| a.blcs(edx, ebx).unwrap(),
		Instruction::with2(Code::XOP_Blcs_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blcs_r32_m() {
	// XOP_Blcs_r32_rm32
	test_instr(16, |a| a.blcs(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Blcs_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blendpd_xmm_xmm_i() {
	// Blendpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.blendpd(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Blendpd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Blendpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.blendpd(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Blendpd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blendpd_xmm_m_i() {
	// Blendpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.blendpd(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Blendpd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Blendpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.blendpd(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Blendpd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blendpd_xmm_xmm_u() {
	// Blendpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.blendpd(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Blendpd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blendpd_xmm_m_u() {
	// Blendpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.blendpd(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Blendpd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blendps_xmm_xmm_i() {
	// Blendps_xmm_xmmm128_imm8
	test_instr(16, |a| a.blendps(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Blendps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Blendps_xmm_xmmm128_imm8
	test_instr(16, |a| a.blendps(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Blendps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blendps_xmm_m_i() {
	// Blendps_xmm_xmmm128_imm8
	test_instr(16, |a| a.blendps(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Blendps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Blendps_xmm_xmmm128_imm8
	test_instr(16, |a| a.blendps(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Blendps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blendps_xmm_xmm_u() {
	// Blendps_xmm_xmmm128_imm8
	test_instr(16, |a| a.blendps(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Blendps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blendps_xmm_m_u() {
	// Blendps_xmm_xmmm128_imm8
	test_instr(16, |a| a.blendps(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Blendps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blendvpd_xmm_xmm() {
	// Blendvpd_xmm_xmmm128
	test_instr(16, |a| a.blendvpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Blendvpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blendvpd_xmm_m() {
	// Blendvpd_xmm_xmmm128
	test_instr(16, |a| a.blendvpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Blendvpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blendvps_xmm_xmm() {
	// Blendvps_xmm_xmmm128
	test_instr(16, |a| a.blendvps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Blendvps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blendvps_xmm_m() {
	// Blendvps_xmm_xmmm128
	test_instr(16, |a| a.blendvps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Blendvps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blsfill_r32_r32() {
	// XOP_Blsfill_r32_rm32
	test_instr(16, |a| a.blsfill(edx, ebx).unwrap(),
		Instruction::with2(Code::XOP_Blsfill_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blsfill_r32_m() {
	// XOP_Blsfill_r32_rm32
	test_instr(16, |a| a.blsfill(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Blsfill_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blsi_r32_r32() {
	// VEX_Blsi_r32_rm32
	test_instr(16, |a| a.blsi(edx, ebx).unwrap(),
		Instruction::with2(Code::VEX_Blsi_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blsi_r32_m() {
	// VEX_Blsi_r32_rm32
	test_instr(16, |a| a.blsi(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Blsi_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blsic_r32_r32() {
	// XOP_Blsic_r32_rm32
	test_instr(16, |a| a.blsic(edx, ebx).unwrap(),
		Instruction::with2(Code::XOP_Blsic_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blsic_r32_m() {
	// XOP_Blsic_r32_rm32
	test_instr(16, |a| a.blsic(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Blsic_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blsmsk_r32_r32() {
	// VEX_Blsmsk_r32_rm32
	test_instr(16, |a| a.blsmsk(edx, ebx).unwrap(),
		Instruction::with2(Code::VEX_Blsmsk_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blsmsk_r32_m() {
	// VEX_Blsmsk_r32_rm32
	test_instr(16, |a| a.blsmsk(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Blsmsk_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blsr_r32_r32() {
	// VEX_Blsr_r32_rm32
	test_instr(16, |a| a.blsr(edx, ebx).unwrap(),
		Instruction::with2(Code::VEX_Blsr_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn blsr_r32_m() {
	// VEX_Blsr_r32_rm32
	test_instr(16, |a| a.blsr(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Blsr_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bndcl_bnd_r32() {
	// Bndcl_bnd_rm32
	test_instr(16, |a| a.bndcl(bnd2, ebx).unwrap(),
		Instruction::with2(Code::Bndcl_bnd_rm32, Register::BND2, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::MPX);
}

#[test]
#[rustfmt::skip]
fn bndcl_bnd_m() {
	/* if op1.size() == MemoryOperandSize::Qword */ {
		// Skipping Bndcl_bnd_rm64 - Not supported by current bitness
	} /* else if op1.size() == MemoryOperandSize::Dword */ {
		// Bndcl_bnd_rm32
		test_instr(16, |a| a.bndcl(bnd2, dword_ptr(edx)).unwrap(),
			Instruction::with2(Code::Bndcl_bnd_rm32, Register::BND2, MemoryOperand::new(Register::EDX, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::MPX);
	} /* else */ {
		// Bndcl_bnd_rm32
		test_invalid_instr(16, |a| assert!(a.bndcl(bnd2, zmmword_ptr(edx)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn bndcn_bnd_r32() {
	// Bndcn_bnd_rm32
	test_instr(16, |a| a.bndcn(bnd2, ebx).unwrap(),
		Instruction::with2(Code::Bndcn_bnd_rm32, Register::BND2, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::MPX);
}

#[test]
#[rustfmt::skip]
fn bndcn_bnd_m() {
	/* if op1.size() == MemoryOperandSize::Qword */ {
		// Skipping Bndcn_bnd_rm64 - Not supported by current bitness
	} /* else if op1.size() == MemoryOperandSize::Dword */ {
		// Bndcn_bnd_rm32
		test_instr(16, |a| a.bndcn(bnd2, dword_ptr(edx)).unwrap(),
			Instruction::with2(Code::Bndcn_bnd_rm32, Register::BND2, MemoryOperand::new(Register::EDX, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::MPX);
	} /* else */ {
		// Bndcn_bnd_rm32
		test_invalid_instr(16, |a| assert!(a.bndcn(bnd2, zmmword_ptr(edx)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn bndcu_bnd_r32() {
	// Bndcu_bnd_rm32
	test_instr(16, |a| a.bndcu(bnd2, ebx).unwrap(),
		Instruction::with2(Code::Bndcu_bnd_rm32, Register::BND2, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::MPX);
}

#[test]
#[rustfmt::skip]
fn bndcu_bnd_m() {
	/* if op1.size() == MemoryOperandSize::Qword */ {
		// Skipping Bndcu_bnd_rm64 - Not supported by current bitness
	} /* else if op1.size() == MemoryOperandSize::Dword */ {
		// Bndcu_bnd_rm32
		test_instr(16, |a| a.bndcu(bnd2, dword_ptr(edx)).unwrap(),
			Instruction::with2(Code::Bndcu_bnd_rm32, Register::BND2, MemoryOperand::new(Register::EDX, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::MPX);
	} /* else */ {
		// Bndcu_bnd_rm32
		test_invalid_instr(16, |a| assert!(a.bndcu(bnd2, zmmword_ptr(edx)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn bndldx_bnd_m() {
	// Bndldx_bnd_mib
	test_instr(16, |a| a.bndldx(bnd2, ptr(ecx)).unwrap(),
		Instruction::with2(Code::Bndldx_bnd_mib, Register::BND2, MemoryOperand::new(Register::ECX, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::MPX);
}

#[test]
#[rustfmt::skip]
fn bndmk_bnd_m() {
	/* if op1.size() == MemoryOperandSize::Qword */ {
		// Skipping Bndmk_bnd_m64 - Not supported by current bitness
	} /* else if op1.size() == MemoryOperandSize::Dword */ {
		// Bndmk_bnd_m32
		test_instr(16, |a| a.bndmk(bnd2, dword_ptr(edx)).unwrap(),
			Instruction::with2(Code::Bndmk_bnd_m32, Register::BND2, MemoryOperand::new(Register::EDX, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::MPX);
	} /* else */ {
		// Bndmk_bnd_m32
		test_invalid_instr(16, |a| assert!(a.bndmk(bnd2, zmmword_ptr(edx)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn bndmov_bnd_bnd() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else */ {
		// Bndmov_bnd_bndm64
		test_instr(16, |a| a.bndmov(bnd2, bnd3).unwrap(),
			Instruction::with2(Code::Bndmov_bnd_bndm64, Register::BND2, Register::BND3).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::MPX);
	}
}

#[test]
#[rustfmt::skip]
fn bndmov_m_bnd() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else */ {
		// Bndmov_bndm64_bnd
		test_instr(16, |a| a.bndmov(ptr(ecx), bnd3).unwrap(),
			Instruction::with2(Code::Bndmov_bndm64_bnd, MemoryOperand::new(Register::ECX, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BND3).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::MPX);
	}
}

#[test]
#[rustfmt::skip]
fn bndmov_bnd_m() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else */ {
		// Bndmov_bnd_bndm64
		test_instr(16, |a| a.bndmov(bnd2, ptr(ecx)).unwrap(),
			Instruction::with2(Code::Bndmov_bnd_bndm64, Register::BND2, MemoryOperand::new(Register::ECX, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::MPX);
	}
}

#[test]
#[rustfmt::skip]
fn bndstx_m_bnd() {
	// Bndstx_mib_bnd
	test_instr(16, |a| a.bndstx(ptr(ecx), bnd3).unwrap(),
		Instruction::with2(Code::Bndstx_mib_bnd, MemoryOperand::new(Register::ECX, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BND3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::MPX);
}

#[test]
#[rustfmt::skip]
fn bound_r16_m() {
	// Bound_r16_m1616
	test_instr(16, |a| a.bound(dx, ptr(si)).unwrap(),
		Instruction::with2(Code::Bound_r16_m1616, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bound_r32_m() {
	// Bound_r32_m3232
	test_instr(16, |a| a.bound(edx, ptr(si)).unwrap(),
		Instruction::with2(Code::Bound_r32_m3232, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bsf_r16_r16() {
	// Bsf_r16_rm16
	test_instr(16, |a| a.bsf(dx, bx).unwrap(),
		Instruction::with2(Code::Bsf_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bsf_r32_r32() {
	// Bsf_r32_rm32
	test_instr(16, |a| a.bsf(edx, ebx).unwrap(),
		Instruction::with2(Code::Bsf_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bsf_r16_m() {
	// Bsf_r16_rm16
	test_instr(16, |a| a.bsf(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Bsf_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bsf_r32_m() {
	// Bsf_r32_rm32
	test_instr(16, |a| a.bsf(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Bsf_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bsr_r16_r16() {
	// Bsr_r16_rm16
	test_instr(16, |a| a.bsr(dx, bx).unwrap(),
		Instruction::with2(Code::Bsr_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bsr_r32_r32() {
	// Bsr_r32_rm32
	test_instr(16, |a| a.bsr(edx, ebx).unwrap(),
		Instruction::with2(Code::Bsr_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bsr_r16_m() {
	// Bsr_r16_rm16
	test_instr(16, |a| a.bsr(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Bsr_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bsr_r32_m() {
	// Bsr_r32_rm32
	test_instr(16, |a| a.bsr(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Bsr_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bswap_r16() {
	// Bswap_r16
	test_instr(16, |a| a.bswap(dx).unwrap(),
		Instruction::with1(Code::Bswap_r16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bswap_r32() {
	// Bswap_r32
	test_instr(16, |a| a.bswap(edx).unwrap(),
		Instruction::with1(Code::Bswap_r32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bt_r16_r16() {
	// Bt_rm16_r16
	test_instr(16, |a| a.bt(dx, bx).unwrap(),
		Instruction::with2(Code::Bt_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bt_m_r16() {
	// Bt_rm16_r16
	test_instr(16, |a| a.bt(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Bt_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bt_r32_r32() {
	// Bt_rm32_r32
	test_instr(16, |a| a.bt(edx, ebx).unwrap(),
		Instruction::with2(Code::Bt_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bt_m_r32() {
	// Bt_rm32_r32
	test_instr(16, |a| a.bt(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Bt_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bt_r16_i() {
	// Bt_rm16_imm8
	test_instr(16, |a| a.bt(dx, -5i32).unwrap(),
		Instruction::with2(Code::Bt_rm16_imm8, Register::DX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Bt_rm16_imm8
	test_instr(16, |a| a.bt(dx, -5).unwrap(),
		Instruction::with2(Code::Bt_rm16_imm8, Register::DX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bt_r32_i() {
	// Bt_rm32_imm8
	test_instr(16, |a| a.bt(edx, -5i32).unwrap(),
		Instruction::with2(Code::Bt_rm32_imm8, Register::EDX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Bt_rm32_imm8
	test_instr(16, |a| a.bt(edx, -5).unwrap(),
		Instruction::with2(Code::Bt_rm32_imm8, Register::EDX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bt_m_i() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Bt_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Bt_rm32_imm8
		test_instr(16, |a| a.bt(dword_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::Bt_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Bt_rm16_imm8
		test_instr(16, |a| a.bt(word_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::Bt_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Bt_rm16_imm8
		test_invalid_instr(16, |a| assert!(a.bt(zmmword_ptr(di), -5i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Bt_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Bt_rm32_imm8
		test_instr(16, |a| a.bt(dword_ptr(di), -5).unwrap(),
			Instruction::with2(Code::Bt_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Bt_rm16_imm8
		test_instr(16, |a| a.bt(word_ptr(di), -5).unwrap(),
			Instruction::with2(Code::Bt_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Bt_rm16_imm8
		test_invalid_instr(16, |a| assert!(a.bt(zmmword_ptr(di), -5).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn bt_r16_u() {
	// Bt_rm16_imm8
	test_instr(16, |a| a.bt(dx, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Bt_rm16_imm8, Register::DX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bt_r32_u() {
	// Bt_rm32_imm8
	test_instr(16, |a| a.bt(edx, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Bt_rm32_imm8, Register::EDX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bt_m_u() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Bt_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Bt_rm32_imm8
		test_instr(16, |a| a.bt(dword_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::Bt_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Bt_rm16_imm8
		test_instr(16, |a| a.bt(word_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::Bt_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Bt_rm16_imm8
		test_invalid_instr(16, |a| assert!(a.bt(zmmword_ptr(di), 0x7Fu32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn btc_r16_r16() {
	// Btc_rm16_r16
	test_instr(16, |a| a.btc(dx, bx).unwrap(),
		Instruction::with2(Code::Btc_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn btc_m_r16() {
	// Btc_rm16_r16
	test_instr(16, |a| a.btc(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Btc_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn btc_r32_r32() {
	// Btc_rm32_r32
	test_instr(16, |a| a.btc(edx, ebx).unwrap(),
		Instruction::with2(Code::Btc_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn btc_m_r32() {
	// Btc_rm32_r32
	test_instr(16, |a| a.btc(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Btc_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn btc_r16_i() {
	// Btc_rm16_imm8
	test_instr(16, |a| a.btc(dx, -5i32).unwrap(),
		Instruction::with2(Code::Btc_rm16_imm8, Register::DX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Btc_rm16_imm8
	test_instr(16, |a| a.btc(dx, -5).unwrap(),
		Instruction::with2(Code::Btc_rm16_imm8, Register::DX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn btc_r32_i() {
	// Btc_rm32_imm8
	test_instr(16, |a| a.btc(edx, -5i32).unwrap(),
		Instruction::with2(Code::Btc_rm32_imm8, Register::EDX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Btc_rm32_imm8
	test_instr(16, |a| a.btc(edx, -5).unwrap(),
		Instruction::with2(Code::Btc_rm32_imm8, Register::EDX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn btc_m_i() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Btc_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Btc_rm32_imm8
		test_instr(16, |a| a.btc(dword_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::Btc_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Btc_rm16_imm8
		test_instr(16, |a| a.btc(word_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::Btc_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Btc_rm16_imm8
		test_invalid_instr(16, |a| assert!(a.btc(zmmword_ptr(di), -5i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Btc_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Btc_rm32_imm8
		test_instr(16, |a| a.btc(dword_ptr(di), -5).unwrap(),
			Instruction::with2(Code::Btc_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Btc_rm16_imm8
		test_instr(16, |a| a.btc(word_ptr(di), -5).unwrap(),
			Instruction::with2(Code::Btc_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Btc_rm16_imm8
		test_invalid_instr(16, |a| assert!(a.btc(zmmword_ptr(di), -5).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn btc_r16_u() {
	// Btc_rm16_imm8
	test_instr(16, |a| a.btc(dx, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Btc_rm16_imm8, Register::DX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn btc_r32_u() {
	// Btc_rm32_imm8
	test_instr(16, |a| a.btc(edx, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Btc_rm32_imm8, Register::EDX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn btc_m_u() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Btc_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Btc_rm32_imm8
		test_instr(16, |a| a.btc(dword_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::Btc_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Btc_rm16_imm8
		test_instr(16, |a| a.btc(word_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::Btc_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Btc_rm16_imm8
		test_invalid_instr(16, |a| assert!(a.btc(zmmword_ptr(di), 0x7Fu32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn btr_r16_r16() {
	// Btr_rm16_r16
	test_instr(16, |a| a.btr(dx, bx).unwrap(),
		Instruction::with2(Code::Btr_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn btr_m_r16() {
	// Btr_rm16_r16
	test_instr(16, |a| a.btr(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Btr_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn btr_r32_r32() {
	// Btr_rm32_r32
	test_instr(16, |a| a.btr(edx, ebx).unwrap(),
		Instruction::with2(Code::Btr_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn btr_m_r32() {
	// Btr_rm32_r32
	test_instr(16, |a| a.btr(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Btr_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn btr_r16_i() {
	// Btr_rm16_imm8
	test_instr(16, |a| a.btr(dx, -5i32).unwrap(),
		Instruction::with2(Code::Btr_rm16_imm8, Register::DX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Btr_rm16_imm8
	test_instr(16, |a| a.btr(dx, -5).unwrap(),
		Instruction::with2(Code::Btr_rm16_imm8, Register::DX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn btr_r32_i() {
	// Btr_rm32_imm8
	test_instr(16, |a| a.btr(edx, -5i32).unwrap(),
		Instruction::with2(Code::Btr_rm32_imm8, Register::EDX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Btr_rm32_imm8
	test_instr(16, |a| a.btr(edx, -5).unwrap(),
		Instruction::with2(Code::Btr_rm32_imm8, Register::EDX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn btr_m_i() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Btr_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Btr_rm32_imm8
		test_instr(16, |a| a.btr(dword_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::Btr_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Btr_rm16_imm8
		test_instr(16, |a| a.btr(word_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::Btr_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Btr_rm16_imm8
		test_invalid_instr(16, |a| assert!(a.btr(zmmword_ptr(di), -5i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Btr_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Btr_rm32_imm8
		test_instr(16, |a| a.btr(dword_ptr(di), -5).unwrap(),
			Instruction::with2(Code::Btr_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Btr_rm16_imm8
		test_instr(16, |a| a.btr(word_ptr(di), -5).unwrap(),
			Instruction::with2(Code::Btr_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Btr_rm16_imm8
		test_invalid_instr(16, |a| assert!(a.btr(zmmword_ptr(di), -5).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn btr_r16_u() {
	// Btr_rm16_imm8
	test_instr(16, |a| a.btr(dx, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Btr_rm16_imm8, Register::DX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn btr_r32_u() {
	// Btr_rm32_imm8
	test_instr(16, |a| a.btr(edx, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Btr_rm32_imm8, Register::EDX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn btr_m_u() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Btr_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Btr_rm32_imm8
		test_instr(16, |a| a.btr(dword_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::Btr_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Btr_rm16_imm8
		test_instr(16, |a| a.btr(word_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::Btr_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Btr_rm16_imm8
		test_invalid_instr(16, |a| assert!(a.btr(zmmword_ptr(di), 0x7Fu32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn bts_r16_r16() {
	// Bts_rm16_r16
	test_instr(16, |a| a.bts(dx, bx).unwrap(),
		Instruction::with2(Code::Bts_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bts_m_r16() {
	// Bts_rm16_r16
	test_instr(16, |a| a.bts(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Bts_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bts_r32_r32() {
	// Bts_rm32_r32
	test_instr(16, |a| a.bts(edx, ebx).unwrap(),
		Instruction::with2(Code::Bts_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bts_m_r32() {
	// Bts_rm32_r32
	test_instr(16, |a| a.bts(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Bts_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bts_r16_i() {
	// Bts_rm16_imm8
	test_instr(16, |a| a.bts(dx, -5i32).unwrap(),
		Instruction::with2(Code::Bts_rm16_imm8, Register::DX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Bts_rm16_imm8
	test_instr(16, |a| a.bts(dx, -5).unwrap(),
		Instruction::with2(Code::Bts_rm16_imm8, Register::DX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bts_r32_i() {
	// Bts_rm32_imm8
	test_instr(16, |a| a.bts(edx, -5i32).unwrap(),
		Instruction::with2(Code::Bts_rm32_imm8, Register::EDX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Bts_rm32_imm8
	test_instr(16, |a| a.bts(edx, -5).unwrap(),
		Instruction::with2(Code::Bts_rm32_imm8, Register::EDX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bts_m_i() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Bts_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Bts_rm32_imm8
		test_instr(16, |a| a.bts(dword_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::Bts_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Bts_rm16_imm8
		test_instr(16, |a| a.bts(word_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::Bts_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Bts_rm16_imm8
		test_invalid_instr(16, |a| assert!(a.bts(zmmword_ptr(di), -5i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Bts_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Bts_rm32_imm8
		test_instr(16, |a| a.bts(dword_ptr(di), -5).unwrap(),
			Instruction::with2(Code::Bts_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Bts_rm16_imm8
		test_instr(16, |a| a.bts(word_ptr(di), -5).unwrap(),
			Instruction::with2(Code::Bts_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Bts_rm16_imm8
		test_invalid_instr(16, |a| assert!(a.bts(zmmword_ptr(di), -5).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn bts_r16_u() {
	// Bts_rm16_imm8
	test_instr(16, |a| a.bts(dx, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Bts_rm16_imm8, Register::DX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bts_r32_u() {
	// Bts_rm32_imm8
	test_instr(16, |a| a.bts(edx, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Bts_rm32_imm8, Register::EDX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bts_m_u() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Bts_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Bts_rm32_imm8
		test_instr(16, |a| a.bts(dword_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::Bts_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Bts_rm16_imm8
		test_instr(16, |a| a.bts(word_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::Bts_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Bts_rm16_imm8
		test_invalid_instr(16, |a| assert!(a.bts(zmmword_ptr(di), 0x7Fu32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn bzhi_r32_r32_r32() {
	// VEX_Bzhi_r32_rm32_r32
	test_instr(16, |a| a.bzhi(edx, ebx, esp).unwrap(),
		Instruction::with3(Code::VEX_Bzhi_r32_rm32_r32, Register::EDX, Register::EBX, Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn bzhi_r32_m_r32() {
	// VEX_Bzhi_r32_rm32_r32
	test_instr(16, |a| a.bzhi(edx, dword_ptr(si), esp).unwrap(),
		Instruction::with3(Code::VEX_Bzhi_r32_rm32_r32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn call_r16() {
	// Call_rm16
	test_instr(16, |a| a.call(dx).unwrap(),
		Instruction::with1(Code::Call_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn call_r32() {
	// Call_rm32
	test_instr(16, |a| a.call(edx).unwrap(),
		Instruction::with1(Code::Call_rm32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn call_m() {
	/* if op0.size() == MemoryOperandSize::Tbyte */ {
		// Skipping Call_m1664 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Call_rm64 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Fword */ {
		// Call_m1632
		test_instr(16, |a| a.call(fword_ptr(di)).unwrap(),
			Instruction::with1(Code::Call_m1632, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Call_m1616
			test_instr(16, |a| a.call(dword_ptr(di)).unwrap(),
				Instruction::with1(Code::Call_m1616, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Call_rm16
		test_instr(16, |a| a.call(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Call_rm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Call_rm16
		test_invalid_instr(16, |a| assert!(a.call(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn call_l() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Call_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.call(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Call_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn call_lu64() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Call_rel16
		test_instr(16, |a| a.call(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Call_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn cbw() {
	// Cbw
	test_instr(16, |a| a.cbw().unwrap(),
		Instruction::with(Code::Cbw),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ccs_encrypt() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Ccs_encrypt_16
		test_instr(16, |a| a.ccs_encrypt().unwrap(),
			Instruction::with(Code::Ccs_encrypt_16),
			TestInstrFlags::REMOVE_REP_REPNE_PREFIXES, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn ccs_hash() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Ccs_hash_16
		test_instr(16, |a| a.ccs_hash().unwrap(),
			Instruction::with(Code::Ccs_hash_16),
			TestInstrFlags::REMOVE_REP_REPNE_PREFIXES, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn cdq() {
	// Cdq
	test_instr(16, |a| a.cdq().unwrap(),
		Instruction::with(Code::Cdq),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cl1invmb() {
	// Cl1invmb
	test_instr(16, |a| a.cl1invmb().unwrap(),
		Instruction::with(Code::Cl1invmb),
		TestInstrFlags::NONE, DecoderOptions::CL1INVMB);
}

#[test]
#[rustfmt::skip]
fn clac() {
	// Clac
	test_instr(16, |a| a.clac().unwrap(),
		Instruction::with(Code::Clac),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn clc() {
	// Clc
	test_instr(16, |a| a.clc().unwrap(),
		Instruction::with(Code::Clc),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cld() {
	// Cld
	test_instr(16, |a| a.cld().unwrap(),
		Instruction::with(Code::Cld),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cldemote_m() {
	// Cldemote_m8
	test_instr(16, |a| a.cldemote(ptr(si)).unwrap(),
		Instruction::with1(Code::Cldemote_m8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn clflush_m() {
	// Clflush_m8
	test_instr(16, |a| a.clflush(ptr(si)).unwrap(),
		Instruction::with1(Code::Clflush_m8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn clflushopt_m() {
	// Clflushopt_m8
	test_instr(16, |a| a.clflushopt(ptr(si)).unwrap(),
		Instruction::with1(Code::Clflushopt_m8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn clgi() {
	// Clgi
	test_instr(16, |a| a.clgi().unwrap(),
		Instruction::with(Code::Clgi),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cli() {
	// Cli
	test_instr(16, |a| a.cli().unwrap(),
		Instruction::with(Code::Cli),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn clrssbsy_m() {
	// Clrssbsy_m64
	test_instr(16, |a| a.clrssbsy(ptr(si)).unwrap(),
		Instruction::with1(Code::Clrssbsy_m64, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn clts() {
	// Clts
	test_instr(16, |a| a.clts().unwrap(),
		Instruction::with(Code::Clts),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn clwb_m() {
	// Clwb_m8
	test_instr(16, |a| a.clwb(ptr(si)).unwrap(),
		Instruction::with1(Code::Clwb_m8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn clzero() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Clzerow
		test_instr(16, |a| a.clzero().unwrap(),
			Instruction::with(Code::Clzerow),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn cmc() {
	// Cmc
	test_instr(16, |a| a.cmc().unwrap(),
		Instruction::with(Code::Cmc),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmova_r16_r16() {
	// Cmova_r16_rm16
	test_instr(16, |a| a.cmova(dx, bx).unwrap(),
		Instruction::with2(Code::Cmova_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmova_r32_r32() {
	// Cmova_r32_rm32
	test_instr(16, |a| a.cmova(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmova_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmova_r16_m() {
	// Cmova_r16_rm16
	test_instr(16, |a| a.cmova(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmova_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmova_r32_m() {
	// Cmova_r32_rm32
	test_instr(16, |a| a.cmova(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmova_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovae_r16_r16() {
	// Cmovae_r16_rm16
	test_instr(16, |a| a.cmovae(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovae_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovae_r32_r32() {
	// Cmovae_r32_rm32
	test_instr(16, |a| a.cmovae(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovae_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovae_r16_m() {
	// Cmovae_r16_rm16
	test_instr(16, |a| a.cmovae(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovae_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovae_r32_m() {
	// Cmovae_r32_rm32
	test_instr(16, |a| a.cmovae(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovae_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovb_r16_r16() {
	// Cmovb_r16_rm16
	test_instr(16, |a| a.cmovb(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovb_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovb_r32_r32() {
	// Cmovb_r32_rm32
	test_instr(16, |a| a.cmovb(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovb_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovb_r16_m() {
	// Cmovb_r16_rm16
	test_instr(16, |a| a.cmovb(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovb_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovb_r32_m() {
	// Cmovb_r32_rm32
	test_instr(16, |a| a.cmovb(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovb_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovbe_r16_r16() {
	// Cmovbe_r16_rm16
	test_instr(16, |a| a.cmovbe(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovbe_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovbe_r32_r32() {
	// Cmovbe_r32_rm32
	test_instr(16, |a| a.cmovbe(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovbe_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovbe_r16_m() {
	// Cmovbe_r16_rm16
	test_instr(16, |a| a.cmovbe(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovbe_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovbe_r32_m() {
	// Cmovbe_r32_rm32
	test_instr(16, |a| a.cmovbe(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovbe_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovc_r16_r16() {
	// Cmovb_r16_rm16
	test_instr(16, |a| a.cmovc(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovb_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovc_r32_r32() {
	// Cmovb_r32_rm32
	test_instr(16, |a| a.cmovc(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovb_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovc_r16_m() {
	// Cmovb_r16_rm16
	test_instr(16, |a| a.cmovc(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovb_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovc_r32_m() {
	// Cmovb_r32_rm32
	test_instr(16, |a| a.cmovc(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovb_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmove_r16_r16() {
	// Cmove_r16_rm16
	test_instr(16, |a| a.cmove(dx, bx).unwrap(),
		Instruction::with2(Code::Cmove_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmove_r32_r32() {
	// Cmove_r32_rm32
	test_instr(16, |a| a.cmove(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmove_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmove_r16_m() {
	// Cmove_r16_rm16
	test_instr(16, |a| a.cmove(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmove_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmove_r32_m() {
	// Cmove_r32_rm32
	test_instr(16, |a| a.cmove(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmove_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovg_r16_r16() {
	// Cmovg_r16_rm16
	test_instr(16, |a| a.cmovg(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovg_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovg_r32_r32() {
	// Cmovg_r32_rm32
	test_instr(16, |a| a.cmovg(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovg_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovg_r16_m() {
	// Cmovg_r16_rm16
	test_instr(16, |a| a.cmovg(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovg_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovg_r32_m() {
	// Cmovg_r32_rm32
	test_instr(16, |a| a.cmovg(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovg_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovge_r16_r16() {
	// Cmovge_r16_rm16
	test_instr(16, |a| a.cmovge(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovge_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovge_r32_r32() {
	// Cmovge_r32_rm32
	test_instr(16, |a| a.cmovge(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovge_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovge_r16_m() {
	// Cmovge_r16_rm16
	test_instr(16, |a| a.cmovge(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovge_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovge_r32_m() {
	// Cmovge_r32_rm32
	test_instr(16, |a| a.cmovge(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovge_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovl_r16_r16() {
	// Cmovl_r16_rm16
	test_instr(16, |a| a.cmovl(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovl_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovl_r32_r32() {
	// Cmovl_r32_rm32
	test_instr(16, |a| a.cmovl(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovl_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovl_r16_m() {
	// Cmovl_r16_rm16
	test_instr(16, |a| a.cmovl(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovl_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovl_r32_m() {
	// Cmovl_r32_rm32
	test_instr(16, |a| a.cmovl(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovl_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovle_r16_r16() {
	// Cmovle_r16_rm16
	test_instr(16, |a| a.cmovle(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovle_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovle_r32_r32() {
	// Cmovle_r32_rm32
	test_instr(16, |a| a.cmovle(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovle_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovle_r16_m() {
	// Cmovle_r16_rm16
	test_instr(16, |a| a.cmovle(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovle_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovle_r32_m() {
	// Cmovle_r32_rm32
	test_instr(16, |a| a.cmovle(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovle_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovna_r16_r16() {
	// Cmovbe_r16_rm16
	test_instr(16, |a| a.cmovna(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovbe_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovna_r32_r32() {
	// Cmovbe_r32_rm32
	test_instr(16, |a| a.cmovna(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovbe_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovna_r16_m() {
	// Cmovbe_r16_rm16
	test_instr(16, |a| a.cmovna(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovbe_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovna_r32_m() {
	// Cmovbe_r32_rm32
	test_instr(16, |a| a.cmovna(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovbe_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnae_r16_r16() {
	// Cmovb_r16_rm16
	test_instr(16, |a| a.cmovnae(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovb_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnae_r32_r32() {
	// Cmovb_r32_rm32
	test_instr(16, |a| a.cmovnae(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovb_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnae_r16_m() {
	// Cmovb_r16_rm16
	test_instr(16, |a| a.cmovnae(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovb_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnae_r32_m() {
	// Cmovb_r32_rm32
	test_instr(16, |a| a.cmovnae(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovb_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnb_r16_r16() {
	// Cmovae_r16_rm16
	test_instr(16, |a| a.cmovnb(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovae_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnb_r32_r32() {
	// Cmovae_r32_rm32
	test_instr(16, |a| a.cmovnb(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovae_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnb_r16_m() {
	// Cmovae_r16_rm16
	test_instr(16, |a| a.cmovnb(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovae_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnb_r32_m() {
	// Cmovae_r32_rm32
	test_instr(16, |a| a.cmovnb(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovae_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnbe_r16_r16() {
	// Cmova_r16_rm16
	test_instr(16, |a| a.cmovnbe(dx, bx).unwrap(),
		Instruction::with2(Code::Cmova_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnbe_r32_r32() {
	// Cmova_r32_rm32
	test_instr(16, |a| a.cmovnbe(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmova_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnbe_r16_m() {
	// Cmova_r16_rm16
	test_instr(16, |a| a.cmovnbe(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmova_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnbe_r32_m() {
	// Cmova_r32_rm32
	test_instr(16, |a| a.cmovnbe(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmova_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnc_r16_r16() {
	// Cmovae_r16_rm16
	test_instr(16, |a| a.cmovnc(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovae_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnc_r32_r32() {
	// Cmovae_r32_rm32
	test_instr(16, |a| a.cmovnc(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovae_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnc_r16_m() {
	// Cmovae_r16_rm16
	test_instr(16, |a| a.cmovnc(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovae_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnc_r32_m() {
	// Cmovae_r32_rm32
	test_instr(16, |a| a.cmovnc(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovae_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovne_r16_r16() {
	// Cmovne_r16_rm16
	test_instr(16, |a| a.cmovne(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovne_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovne_r32_r32() {
	// Cmovne_r32_rm32
	test_instr(16, |a| a.cmovne(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovne_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovne_r16_m() {
	// Cmovne_r16_rm16
	test_instr(16, |a| a.cmovne(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovne_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovne_r32_m() {
	// Cmovne_r32_rm32
	test_instr(16, |a| a.cmovne(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovne_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovng_r16_r16() {
	// Cmovle_r16_rm16
	test_instr(16, |a| a.cmovng(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovle_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovng_r32_r32() {
	// Cmovle_r32_rm32
	test_instr(16, |a| a.cmovng(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovle_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovng_r16_m() {
	// Cmovle_r16_rm16
	test_instr(16, |a| a.cmovng(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovle_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovng_r32_m() {
	// Cmovle_r32_rm32
	test_instr(16, |a| a.cmovng(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovle_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnge_r16_r16() {
	// Cmovl_r16_rm16
	test_instr(16, |a| a.cmovnge(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovl_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnge_r32_r32() {
	// Cmovl_r32_rm32
	test_instr(16, |a| a.cmovnge(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovl_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnge_r16_m() {
	// Cmovl_r16_rm16
	test_instr(16, |a| a.cmovnge(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovl_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnge_r32_m() {
	// Cmovl_r32_rm32
	test_instr(16, |a| a.cmovnge(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovl_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnl_r16_r16() {
	// Cmovge_r16_rm16
	test_instr(16, |a| a.cmovnl(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovge_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnl_r32_r32() {
	// Cmovge_r32_rm32
	test_instr(16, |a| a.cmovnl(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovge_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnl_r16_m() {
	// Cmovge_r16_rm16
	test_instr(16, |a| a.cmovnl(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovge_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnl_r32_m() {
	// Cmovge_r32_rm32
	test_instr(16, |a| a.cmovnl(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovge_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnle_r16_r16() {
	// Cmovg_r16_rm16
	test_instr(16, |a| a.cmovnle(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovg_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnle_r32_r32() {
	// Cmovg_r32_rm32
	test_instr(16, |a| a.cmovnle(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovg_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnle_r16_m() {
	// Cmovg_r16_rm16
	test_instr(16, |a| a.cmovnle(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovg_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnle_r32_m() {
	// Cmovg_r32_rm32
	test_instr(16, |a| a.cmovnle(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovg_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovno_r16_r16() {
	// Cmovno_r16_rm16
	test_instr(16, |a| a.cmovno(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovno_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovno_r32_r32() {
	// Cmovno_r32_rm32
	test_instr(16, |a| a.cmovno(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovno_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovno_r16_m() {
	// Cmovno_r16_rm16
	test_instr(16, |a| a.cmovno(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovno_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovno_r32_m() {
	// Cmovno_r32_rm32
	test_instr(16, |a| a.cmovno(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovno_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnp_r16_r16() {
	// Cmovnp_r16_rm16
	test_instr(16, |a| a.cmovnp(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovnp_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnp_r32_r32() {
	// Cmovnp_r32_rm32
	test_instr(16, |a| a.cmovnp(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovnp_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnp_r16_m() {
	// Cmovnp_r16_rm16
	test_instr(16, |a| a.cmovnp(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovnp_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnp_r32_m() {
	// Cmovnp_r32_rm32
	test_instr(16, |a| a.cmovnp(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovnp_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovns_r16_r16() {
	// Cmovns_r16_rm16
	test_instr(16, |a| a.cmovns(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovns_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovns_r32_r32() {
	// Cmovns_r32_rm32
	test_instr(16, |a| a.cmovns(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovns_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovns_r16_m() {
	// Cmovns_r16_rm16
	test_instr(16, |a| a.cmovns(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovns_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovns_r32_m() {
	// Cmovns_r32_rm32
	test_instr(16, |a| a.cmovns(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovns_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnz_r16_r16() {
	// Cmovne_r16_rm16
	test_instr(16, |a| a.cmovnz(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovne_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnz_r32_r32() {
	// Cmovne_r32_rm32
	test_instr(16, |a| a.cmovnz(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovne_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnz_r16_m() {
	// Cmovne_r16_rm16
	test_instr(16, |a| a.cmovnz(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovne_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovnz_r32_m() {
	// Cmovne_r32_rm32
	test_instr(16, |a| a.cmovnz(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovne_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovo_r16_r16() {
	// Cmovo_r16_rm16
	test_instr(16, |a| a.cmovo(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovo_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovo_r32_r32() {
	// Cmovo_r32_rm32
	test_instr(16, |a| a.cmovo(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovo_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovo_r16_m() {
	// Cmovo_r16_rm16
	test_instr(16, |a| a.cmovo(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovo_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovo_r32_m() {
	// Cmovo_r32_rm32
	test_instr(16, |a| a.cmovo(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovo_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovp_r16_r16() {
	// Cmovp_r16_rm16
	test_instr(16, |a| a.cmovp(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovp_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovp_r32_r32() {
	// Cmovp_r32_rm32
	test_instr(16, |a| a.cmovp(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovp_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovp_r16_m() {
	// Cmovp_r16_rm16
	test_instr(16, |a| a.cmovp(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovp_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovp_r32_m() {
	// Cmovp_r32_rm32
	test_instr(16, |a| a.cmovp(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovp_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovpe_r16_r16() {
	// Cmovp_r16_rm16
	test_instr(16, |a| a.cmovpe(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovp_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovpe_r32_r32() {
	// Cmovp_r32_rm32
	test_instr(16, |a| a.cmovpe(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovp_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovpe_r16_m() {
	// Cmovp_r16_rm16
	test_instr(16, |a| a.cmovpe(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovp_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovpe_r32_m() {
	// Cmovp_r32_rm32
	test_instr(16, |a| a.cmovpe(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovp_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovpo_r16_r16() {
	// Cmovnp_r16_rm16
	test_instr(16, |a| a.cmovpo(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovnp_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovpo_r32_r32() {
	// Cmovnp_r32_rm32
	test_instr(16, |a| a.cmovpo(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovnp_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovpo_r16_m() {
	// Cmovnp_r16_rm16
	test_instr(16, |a| a.cmovpo(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovnp_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovpo_r32_m() {
	// Cmovnp_r32_rm32
	test_instr(16, |a| a.cmovpo(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovnp_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovs_r16_r16() {
	// Cmovs_r16_rm16
	test_instr(16, |a| a.cmovs(dx, bx).unwrap(),
		Instruction::with2(Code::Cmovs_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovs_r32_r32() {
	// Cmovs_r32_rm32
	test_instr(16, |a| a.cmovs(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmovs_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovs_r16_m() {
	// Cmovs_r16_rm16
	test_instr(16, |a| a.cmovs(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovs_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovs_r32_m() {
	// Cmovs_r32_rm32
	test_instr(16, |a| a.cmovs(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmovs_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovz_r16_r16() {
	// Cmove_r16_rm16
	test_instr(16, |a| a.cmovz(dx, bx).unwrap(),
		Instruction::with2(Code::Cmove_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovz_r32_r32() {
	// Cmove_r32_rm32
	test_instr(16, |a| a.cmovz(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmove_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovz_r16_m() {
	// Cmove_r16_rm16
	test_instr(16, |a| a.cmovz(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmove_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmovz_r32_m() {
	// Cmove_r32_rm32
	test_instr(16, |a| a.cmovz(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmove_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmp_r8_r8() {
	// Cmp_rm8_r8
	test_instr(16, |a| a.cmp(dl, bl).unwrap(),
		Instruction::with2(Code::Cmp_rm8_r8, Register::DL, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmp_m_r8() {
	// Cmp_rm8_r8
	test_instr(16, |a| a.cmp(byte_ptr(si), bl).unwrap(),
		Instruction::with2(Code::Cmp_rm8_r8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmp_r16_r16() {
	// Cmp_rm16_r16
	test_instr(16, |a| a.cmp(dx, bx).unwrap(),
		Instruction::with2(Code::Cmp_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmp_m_r16() {
	// Cmp_rm16_r16
	test_instr(16, |a| a.cmp(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Cmp_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmp_r32_r32() {
	// Cmp_rm32_r32
	test_instr(16, |a| a.cmp(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmp_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmp_m_r32() {
	// Cmp_rm32_r32
	test_instr(16, |a| a.cmp(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Cmp_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmp_r8_m() {
	// Cmp_r8_rm8
	test_instr(16, |a| a.cmp(dl, byte_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmp_r8_rm8, Register::DL, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmp_r16_m() {
	// Cmp_r16_rm16
	test_instr(16, |a| a.cmp(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmp_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmp_r32_m() {
	// Cmp_r32_rm32
	test_instr(16, |a| a.cmp(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cmp_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmp_r8_i() {
	/* if op0.register() == Register::AL */ {
		// Cmp_AL_imm8
		test_instr(16, |a| a.cmp(al, -5i32).unwrap(),
			Instruction::with2(Code::Cmp_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Cmp_rm8_imm8
		test_instr(16, |a| a.cmp(dl, -5i32).unwrap(),
			Instruction::with2(Code::Cmp_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AL */ {
		// Cmp_AL_imm8
		test_instr(16, |a| a.cmp(al, -5).unwrap(),
			Instruction::with2(Code::Cmp_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Cmp_rm8_imm8
		test_instr(16, |a| a.cmp(dl, -5).unwrap(),
			Instruction::with2(Code::Cmp_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn cmp_r16_i() {
	/* if op0.register() == Register::AX */ {
		// Cmp_AX_imm16
		test_instr(16, |a| a.cmp(ax, 0x40B7i32).unwrap(),
			Instruction::with2(Code::Cmp_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Cmp_rm16_imm8
		test_instr(16, |a| a.cmp(dx, -0x80i32).unwrap(),
			Instruction::with2(Code::Cmp_rm16_imm8, Register::DX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Cmp_rm16_imm8
		test_instr(16, |a| a.cmp(dx, 0x7Fi32).unwrap(),
			Instruction::with2(Code::Cmp_rm16_imm8, Register::DX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Cmp_rm16_imm16
		test_instr(16, |a| a.cmp(dx, 0x40B7i32).unwrap(),
			Instruction::with2(Code::Cmp_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AX */ {
		// Cmp_AX_imm16
		test_instr(16, |a| a.cmp(ax, 0x40B7).unwrap(),
			Instruction::with2(Code::Cmp_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Cmp_rm16_imm8
		test_instr(16, |a| a.cmp(dx, -0x80).unwrap(),
			Instruction::with2(Code::Cmp_rm16_imm8, Register::DX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Cmp_rm16_imm8
		test_instr(16, |a| a.cmp(dx, 0x7F).unwrap(),
			Instruction::with2(Code::Cmp_rm16_imm8, Register::DX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Cmp_rm16_imm16
		test_instr(16, |a| a.cmp(dx, 0x40B7).unwrap(),
			Instruction::with2(Code::Cmp_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn cmp_r32_i() {
	/* if op0.register() == Register::EAX */ {
		// Cmp_EAX_imm32
		test_instr(16, |a| a.cmp(eax, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Cmp_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Cmp_rm32_imm8
		test_instr(16, |a| a.cmp(edx, -0x80i32).unwrap(),
			Instruction::with2(Code::Cmp_rm32_imm8, Register::EDX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Cmp_rm32_imm8
		test_instr(16, |a| a.cmp(edx, 0x7Fi32).unwrap(),
			Instruction::with2(Code::Cmp_rm32_imm8, Register::EDX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Cmp_rm32_imm32
		test_instr(16, |a| a.cmp(edx, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Cmp_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::EAX */ {
		// Cmp_EAX_imm32
		test_instr(16, |a| a.cmp(eax, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Cmp_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Cmp_rm32_imm8
		test_instr(16, |a| a.cmp(edx, -0x80).unwrap(),
			Instruction::with2(Code::Cmp_rm32_imm8, Register::EDX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Cmp_rm32_imm8
		test_instr(16, |a| a.cmp(edx, 0x7F).unwrap(),
			Instruction::with2(Code::Cmp_rm32_imm8, Register::EDX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Cmp_rm32_imm32
		test_instr(16, |a| a.cmp(edx, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Cmp_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn cmp_m_i() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Skipping Cmp_rm64_imm8 - Not supported by current bitness
			// Skipping Cmp_rm64_imm8 - Not supported by current bitness
		} /* else */ {
			// Skipping Cmp_rm64_imm32 - Not supported by current bitness
		}
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Cmp_rm32_imm8
			test_instr(16, |a| a.cmp(dword_ptr(di), -0x80i32).unwrap(),
				Instruction::with2(Code::Cmp_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Cmp_rm32_imm8
			test_instr(16, |a| a.cmp(dword_ptr(di), 0x7Fi32).unwrap(),
				Instruction::with2(Code::Cmp_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Cmp_rm32_imm32
			test_instr(16, |a| a.cmp(dword_ptr(di), 0x7FFFFFFFi32).unwrap(),
				Instruction::with2(Code::Cmp_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Cmp_rm16_imm8
			test_instr(16, |a| a.cmp(word_ptr(di), -0x80i32).unwrap(),
				Instruction::with2(Code::Cmp_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Cmp_rm16_imm8
			test_instr(16, |a| a.cmp(word_ptr(di), 0x7Fi32).unwrap(),
				Instruction::with2(Code::Cmp_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Cmp_rm16_imm16
			test_instr(16, |a| a.cmp(word_ptr(di), 0x40B7i32).unwrap(),
				Instruction::with2(Code::Cmp_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Cmp_rm8_imm8
		test_instr(16, |a| a.cmp(byte_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::Cmp_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Cmp_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.cmp(zmmword_ptr(di), -5i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op0.size() == MemoryOperandSize::Qword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Skipping Cmp_rm64_imm8 - Not supported by current bitness
			// Skipping Cmp_rm64_imm8 - Not supported by current bitness
		} /* else */ {
			// Skipping Cmp_rm64_imm32 - Not supported by current bitness
		}
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Cmp_rm32_imm8
			test_instr(16, |a| a.cmp(dword_ptr(di), -0x80).unwrap(),
				Instruction::with2(Code::Cmp_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Cmp_rm32_imm8
			test_instr(16, |a| a.cmp(dword_ptr(di), 0x7F).unwrap(),
				Instruction::with2(Code::Cmp_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Cmp_rm32_imm32
			test_instr(16, |a| a.cmp(dword_ptr(di), 0x7FFFFFFF).unwrap(),
				Instruction::with2(Code::Cmp_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Cmp_rm16_imm8
			test_instr(16, |a| a.cmp(word_ptr(di), -0x80).unwrap(),
				Instruction::with2(Code::Cmp_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Cmp_rm16_imm8
			test_instr(16, |a| a.cmp(word_ptr(di), 0x7F).unwrap(),
				Instruction::with2(Code::Cmp_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Cmp_rm16_imm16
			test_instr(16, |a| a.cmp(word_ptr(di), 0x40B7).unwrap(),
				Instruction::with2(Code::Cmp_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Cmp_rm8_imm8
		test_instr(16, |a| a.cmp(byte_ptr(di), -5).unwrap(),
			Instruction::with2(Code::Cmp_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Cmp_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.cmp(zmmword_ptr(di), -5).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn cmp_r8_u() {
	/* if op0.register() == Register::AL */ {
		// Cmp_AL_imm8
		test_instr(16, |a| a.cmp(al, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Cmp_AL_imm8, Register::AL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Cmp_rm8_imm8
		test_instr(16, |a| a.cmp(dl, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Cmp_rm8_imm8, Register::DL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn cmp_r16_u() {
	/* if op0.register() == Register::AX */ {
		// Cmp_AX_imm16
		test_instr(16, |a| a.cmp(ax, 0x40B7u32).unwrap(),
			Instruction::with2(Code::Cmp_AX_imm16, Register::AX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 <= i8::MAX as u32 || (0xFF80 <= op1 && op1 <= 0xFFFF) */ {
		// Cmp_rm16_imm8
		test_instr(16, |a| a.cmp(dx, 0xFF80u32).unwrap(),
			Instruction::with2(Code::Cmp_rm16_imm8, Register::DX, 0xFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Cmp_rm16_imm8
		test_instr(16, |a| a.cmp(dx, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Cmp_rm16_imm8, Register::DX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Cmp_rm16_imm16
		test_instr(16, |a| a.cmp(dx, 0x40B7u32).unwrap(),
			Instruction::with2(Code::Cmp_rm16_imm16, Register::DX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn cmp_r32_u() {
	/* if op0.register() == Register::EAX */ {
		// Cmp_EAX_imm32
		test_instr(16, |a| a.cmp(eax, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Cmp_EAX_imm32, Register::EAX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 <= i8::MAX as u32 || 0xFFFF_FF80 <= op1 */ {
		// Cmp_rm32_imm8
		test_instr(16, |a| a.cmp(edx, 0xFFFFFF80u32).unwrap(),
			Instruction::with2(Code::Cmp_rm32_imm8, Register::EDX, 0xFFFFFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Cmp_rm32_imm8
		test_instr(16, |a| a.cmp(edx, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Cmp_rm32_imm8, Register::EDX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Cmp_rm32_imm32
		test_instr(16, |a| a.cmp(edx, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Cmp_rm32_imm32, Register::EDX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn cmp_m_u() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 <= i8::MAX as u32 || 0xFFFF_FF80 <= op1 */ {
			// Cmp_rm32_imm8
			test_instr(16, |a| a.cmp(dword_ptr(di), 0xFFFFFF80u32).unwrap(),
				Instruction::with2(Code::Cmp_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFFFFFF80u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Cmp_rm32_imm8
			test_instr(16, |a| a.cmp(dword_ptr(di), 0x7Fu32).unwrap(),
				Instruction::with2(Code::Cmp_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Cmp_rm32_imm32
			test_instr(16, |a| a.cmp(dword_ptr(di), 0x7FFFFFFFu32).unwrap(),
				Instruction::with2(Code::Cmp_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 <= i8::MAX as u32 || (0xFF80 <= op1 && op1 <= 0xFFFF) */ {
			// Cmp_rm16_imm8
			test_instr(16, |a| a.cmp(word_ptr(di), 0xFF80u32).unwrap(),
				Instruction::with2(Code::Cmp_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFF80u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Cmp_rm16_imm8
			test_instr(16, |a| a.cmp(word_ptr(di), 0x7Fu32).unwrap(),
				Instruction::with2(Code::Cmp_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Cmp_rm16_imm16
			test_instr(16, |a| a.cmp(word_ptr(di), 0x40B7u32).unwrap(),
				Instruction::with2(Code::Cmp_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Cmp_rm8_imm8
		test_instr(16, |a| a.cmp(byte_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::Cmp_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Cmp_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.cmp(zmmword_ptr(di), 0x7Fu32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn cmpeqpd_xmm_xmm() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpeqpd(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpeqpd_xmm_m() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpeqpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpeqps_xmm_xmm() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpeqps(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpeqps_xmm_m() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpeqps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpeqsd_xmm_xmm() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpeqsd(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpeqsd_xmm_m() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpeqsd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpeqss_xmm_xmm() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpeqss(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpeqss_xmm_m() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpeqss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmplepd_xmm_xmm() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmplepd(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmplepd_xmm_m() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmplepd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpleps_xmm_xmm() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpleps(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpleps_xmm_m() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpleps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmplesd_xmm_xmm() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmplesd(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmplesd_xmm_m() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmplesd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpless_xmm_xmm() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpless(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpless_xmm_m() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpless(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpltpd_xmm_xmm() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpltpd(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpltpd_xmm_m() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpltpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpltps_xmm_xmm() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpltps(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpltps_xmm_m() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpltps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpltsd_xmm_xmm() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpltsd(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpltsd_xmm_m() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpltsd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpltss_xmm_xmm() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpltss(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpltss_xmm_m() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpltss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpneqpd_xmm_xmm() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpneqpd(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpneqpd_xmm_m() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpneqpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpneqps_xmm_xmm() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpneqps(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpneqps_xmm_m() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpneqps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpneqsd_xmm_xmm() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpneqsd(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpneqsd_xmm_m() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpneqsd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpneqss_xmm_xmm() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpneqss(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpneqss_xmm_m() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpneqss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpnlepd_xmm_xmm() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpnlepd(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpnlepd_xmm_m() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpnlepd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpnleps_xmm_xmm() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpnleps(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpnleps_xmm_m() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpnleps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpnlesd_xmm_xmm() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpnlesd(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpnlesd_xmm_m() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpnlesd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpnless_xmm_xmm() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpnless(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpnless_xmm_m() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpnless(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpnltpd_xmm_xmm() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpnltpd(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpnltpd_xmm_m() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpnltpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpnltps_xmm_xmm() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpnltps(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpnltps_xmm_m() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpnltps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpnltsd_xmm_xmm() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpnltsd(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpnltsd_xmm_m() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpnltsd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpnltss_xmm_xmm() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpnltss(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpnltss_xmm_m() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpnltss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpordpd_xmm_xmm() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpordpd(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpordpd_xmm_m() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpordpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpordps_xmm_xmm() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpordps(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpordps_xmm_m() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpordps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpordsd_xmm_xmm() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpordsd(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpordsd_xmm_m() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpordsd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpordss_xmm_xmm() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpordss(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpordss_xmm_m() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpordss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmppd_xmm_xmm_i() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmppd(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmppd(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmppd_xmm_m_i() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmppd(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmppd(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmppd_xmm_xmm_u() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmppd(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmppd_xmm_m_u() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmppd(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpps_xmm_xmm_i() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpps(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpps(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpps_xmm_m_i() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpps(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpps(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpps_xmm_xmm_u() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpps(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpps_xmm_m_u() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpps(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpsb() {
	// Cmpsb_m8_m8
	test_instr(16, |a| a.cmpsb().unwrap(),
		Instruction::with_cmpsb(16, Register::None, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpsd() {
	// Cmpsd_m32_m32
	test_instr(16, |a| a.cmpsd().unwrap(),
		Instruction::with_cmpsd(16, Register::None, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpsd_xmm_xmm_i() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpsd_3(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpsd_3(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpsd_xmm_m_i() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpsd_3(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpsd_3(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpsd_xmm_xmm_u() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpsd_3(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpsd_xmm_m_u() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpsd_3(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpss_xmm_xmm_i() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpss(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpss(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpss_xmm_m_i() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpss(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpss(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpss_xmm_xmm_u() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpss(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpss_xmm_m_u() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpss(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpsw() {
	// Cmpsw_m16_m16
	test_instr(16, |a| a.cmpsw().unwrap(),
		Instruction::with_cmpsw(16, Register::None, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpunordpd_xmm_xmm() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpunordpd(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpunordpd_xmm_m() {
	// Cmppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpunordpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmppd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpunordps_xmm_xmm() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpunordps(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpunordps_xmm_m() {
	// Cmpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.cmpunordps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpunordsd_xmm_xmm() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpunordsd(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpunordsd_xmm_m() {
	// Cmpsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.cmpunordsd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpsd_xmm_xmmm64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpunordss_xmm_xmm() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpunordss(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpunordss_xmm_m() {
	// Cmpss_xmm_xmmm32_imm8
	test_instr(16, |a| a.cmpunordss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Cmpss_xmm_xmmm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpxchg_r8_r8() {
	// Cmpxchg_rm8_r8
	test_instr(16, |a| a.cmpxchg(dl, bl).unwrap(),
		Instruction::with2(Code::Cmpxchg_rm8_r8, Register::DL, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpxchg_m_r8() {
	// Cmpxchg_rm8_r8
	test_instr(16, |a| a.cmpxchg(byte_ptr(si), bl).unwrap(),
		Instruction::with2(Code::Cmpxchg_rm8_r8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpxchg_r16_r16() {
	// Cmpxchg_rm16_r16
	test_instr(16, |a| a.cmpxchg(dx, bx).unwrap(),
		Instruction::with2(Code::Cmpxchg_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpxchg_m_r16() {
	// Cmpxchg_rm16_r16
	test_instr(16, |a| a.cmpxchg(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Cmpxchg_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpxchg_r32_r32() {
	// Cmpxchg_rm32_r32
	test_instr(16, |a| a.cmpxchg(edx, ebx).unwrap(),
		Instruction::with2(Code::Cmpxchg_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpxchg_m_r32() {
	// Cmpxchg_rm32_r32
	test_instr(16, |a| a.cmpxchg(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Cmpxchg_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cmpxchg8b_m() {
	// Cmpxchg8b_m64
	test_instr(16, |a| a.cmpxchg8b(ptr(si)).unwrap(),
		Instruction::with1(Code::Cmpxchg8b_m64, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn comisd_xmm_xmm() {
	// Comisd_xmm_xmmm64
	test_instr(16, |a| a.comisd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Comisd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn comisd_xmm_m() {
	// Comisd_xmm_xmmm64
	test_instr(16, |a| a.comisd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Comisd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn comiss_xmm_xmm() {
	// Comiss_xmm_xmmm32
	test_instr(16, |a| a.comiss(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Comiss_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn comiss_xmm_m() {
	// Comiss_xmm_xmmm32
	test_instr(16, |a| a.comiss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Comiss_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cpu_read() {
	// Cpu_read
	test_instr(16, |a| a.cpu_read().unwrap(),
		Instruction::with(Code::Cpu_read),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn cpu_write() {
	// Cpu_write
	test_instr(16, |a| a.cpu_write().unwrap(),
		Instruction::with(Code::Cpu_write),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn cpuid() {
	// Cpuid
	test_instr(16, |a| a.cpuid().unwrap(),
		Instruction::with(Code::Cpuid),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn crc32_r32_r8() {
	// Crc32_r32_rm8
	test_instr(16, |a| a.crc32(edx, bl).unwrap(),
		Instruction::with2(Code::Crc32_r32_rm8, Register::EDX, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn crc32_r32_r16() {
	// Crc32_r32_rm16
	test_instr(16, |a| a.crc32(edx, bx).unwrap(),
		Instruction::with2(Code::Crc32_r32_rm16, Register::EDX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn crc32_r32_r32() {
	// Crc32_r32_rm32
	test_instr(16, |a| a.crc32(edx, ebx).unwrap(),
		Instruction::with2(Code::Crc32_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn crc32_r32_m() {
	/* if op1.size() == MemoryOperandSize::Dword */ {
		// Crc32_r32_rm32
		test_instr(16, |a| a.crc32(edx, dword_ptr(di)).unwrap(),
			Instruction::with2(Code::Crc32_r32_rm32, Register::EDX, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Word */ {
		// Crc32_r32_rm16
		test_instr(16, |a| a.crc32(edx, word_ptr(di)).unwrap(),
			Instruction::with2(Code::Crc32_r32_rm16, Register::EDX, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Byte */ {
		// Crc32_r32_rm8
		test_instr(16, |a| a.crc32(edx, byte_ptr(di)).unwrap(),
			Instruction::with2(Code::Crc32_r32_rm8, Register::EDX, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Crc32_r32_rm8
		test_invalid_instr(16, |a| assert!(a.crc32(edx, zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn cvtdq2pd_xmm_xmm() {
	// Cvtdq2pd_xmm_xmmm64
	test_instr(16, |a| a.cvtdq2pd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Cvtdq2pd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtdq2pd_xmm_m() {
	// Cvtdq2pd_xmm_xmmm64
	test_instr(16, |a| a.cvtdq2pd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvtdq2pd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtdq2ps_xmm_xmm() {
	// Cvtdq2ps_xmm_xmmm128
	test_instr(16, |a| a.cvtdq2ps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Cvtdq2ps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtdq2ps_xmm_m() {
	// Cvtdq2ps_xmm_xmmm128
	test_instr(16, |a| a.cvtdq2ps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvtdq2ps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtpd2dq_xmm_xmm() {
	// Cvtpd2dq_xmm_xmmm128
	test_instr(16, |a| a.cvtpd2dq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Cvtpd2dq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtpd2dq_xmm_m() {
	// Cvtpd2dq_xmm_xmmm128
	test_instr(16, |a| a.cvtpd2dq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvtpd2dq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtpd2pi_mm_xmm() {
	// Cvtpd2pi_mm_xmmm128
	test_instr(16, |a| a.cvtpd2pi(mm2, xmm3).unwrap(),
		Instruction::with2(Code::Cvtpd2pi_mm_xmmm128, Register::MM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtpd2pi_mm_m() {
	// Cvtpd2pi_mm_xmmm128
	test_instr(16, |a| a.cvtpd2pi(mm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvtpd2pi_mm_xmmm128, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtpd2ps_xmm_xmm() {
	// Cvtpd2ps_xmm_xmmm128
	test_instr(16, |a| a.cvtpd2ps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Cvtpd2ps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtpd2ps_xmm_m() {
	// Cvtpd2ps_xmm_xmmm128
	test_instr(16, |a| a.cvtpd2ps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvtpd2ps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtpi2pd_xmm_mm() {
	// Cvtpi2pd_xmm_mmm64
	test_instr(16, |a| a.cvtpi2pd(xmm2, mm3).unwrap(),
		Instruction::with2(Code::Cvtpi2pd_xmm_mmm64, Register::XMM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtpi2pd_xmm_m() {
	// Cvtpi2pd_xmm_mmm64
	test_instr(16, |a| a.cvtpi2pd(xmm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvtpi2pd_xmm_mmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtpi2ps_xmm_mm() {
	// Cvtpi2ps_xmm_mmm64
	test_instr(16, |a| a.cvtpi2ps(xmm2, mm3).unwrap(),
		Instruction::with2(Code::Cvtpi2ps_xmm_mmm64, Register::XMM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtpi2ps_xmm_m() {
	// Cvtpi2ps_xmm_mmm64
	test_instr(16, |a| a.cvtpi2ps(xmm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvtpi2ps_xmm_mmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtps2dq_xmm_xmm() {
	// Cvtps2dq_xmm_xmmm128
	test_instr(16, |a| a.cvtps2dq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Cvtps2dq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtps2dq_xmm_m() {
	// Cvtps2dq_xmm_xmmm128
	test_instr(16, |a| a.cvtps2dq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvtps2dq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtps2pd_xmm_xmm() {
	// Cvtps2pd_xmm_xmmm64
	test_instr(16, |a| a.cvtps2pd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Cvtps2pd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtps2pd_xmm_m() {
	// Cvtps2pd_xmm_xmmm64
	test_instr(16, |a| a.cvtps2pd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvtps2pd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtps2pi_mm_xmm() {
	// Cvtps2pi_mm_xmmm64
	test_instr(16, |a| a.cvtps2pi(mm2, xmm3).unwrap(),
		Instruction::with2(Code::Cvtps2pi_mm_xmmm64, Register::MM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtps2pi_mm_m() {
	// Cvtps2pi_mm_xmmm64
	test_instr(16, |a| a.cvtps2pi(mm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvtps2pi_mm_xmmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtsd2si_r32_xmm() {
	// Cvtsd2si_r32_xmmm64
	test_instr(16, |a| a.cvtsd2si(edx, xmm3).unwrap(),
		Instruction::with2(Code::Cvtsd2si_r32_xmmm64, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtsd2si_r32_m() {
	// Cvtsd2si_r32_xmmm64
	test_instr(16, |a| a.cvtsd2si(edx, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvtsd2si_r32_xmmm64, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtsd2ss_xmm_xmm() {
	// Cvtsd2ss_xmm_xmmm64
	test_instr(16, |a| a.cvtsd2ss(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Cvtsd2ss_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtsd2ss_xmm_m() {
	// Cvtsd2ss_xmm_xmmm64
	test_instr(16, |a| a.cvtsd2ss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvtsd2ss_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtsi2sd_xmm_r32() {
	// Cvtsi2sd_xmm_rm32
	test_instr(16, |a| a.cvtsi2sd(xmm2, ebx).unwrap(),
		Instruction::with2(Code::Cvtsi2sd_xmm_rm32, Register::XMM2, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtsi2sd_xmm_m() {
	/* if op1.size() == MemoryOperandSize::Qword */ {
		// Skipping Cvtsi2sd_xmm_rm64 - Not supported by current bitness
	} /* else if op1.size() == MemoryOperandSize::Dword */ {
		// Cvtsi2sd_xmm_rm32
		test_instr(16, |a| a.cvtsi2sd(xmm2, dword_ptr(di)).unwrap(),
			Instruction::with2(Code::Cvtsi2sd_xmm_rm32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Cvtsi2sd_xmm_rm32
		test_invalid_instr(16, |a| assert!(a.cvtsi2sd(xmm2, zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn cvtsi2ss_xmm_r32() {
	// Cvtsi2ss_xmm_rm32
	test_instr(16, |a| a.cvtsi2ss(xmm2, ebx).unwrap(),
		Instruction::with2(Code::Cvtsi2ss_xmm_rm32, Register::XMM2, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtsi2ss_xmm_m() {
	/* if op1.size() == MemoryOperandSize::Qword */ {
		// Skipping Cvtsi2ss_xmm_rm64 - Not supported by current bitness
	} /* else if op1.size() == MemoryOperandSize::Dword */ {
		// Cvtsi2ss_xmm_rm32
		test_instr(16, |a| a.cvtsi2ss(xmm2, dword_ptr(di)).unwrap(),
			Instruction::with2(Code::Cvtsi2ss_xmm_rm32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Cvtsi2ss_xmm_rm32
		test_invalid_instr(16, |a| assert!(a.cvtsi2ss(xmm2, zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn cvtss2sd_xmm_xmm() {
	// Cvtss2sd_xmm_xmmm32
	test_instr(16, |a| a.cvtss2sd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Cvtss2sd_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtss2sd_xmm_m() {
	// Cvtss2sd_xmm_xmmm32
	test_instr(16, |a| a.cvtss2sd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvtss2sd_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtss2si_r32_xmm() {
	// Cvtss2si_r32_xmmm32
	test_instr(16, |a| a.cvtss2si(edx, xmm3).unwrap(),
		Instruction::with2(Code::Cvtss2si_r32_xmmm32, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvtss2si_r32_m() {
	// Cvtss2si_r32_xmmm32
	test_instr(16, |a| a.cvtss2si(edx, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvtss2si_r32_xmmm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvttpd2dq_xmm_xmm() {
	// Cvttpd2dq_xmm_xmmm128
	test_instr(16, |a| a.cvttpd2dq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Cvttpd2dq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvttpd2dq_xmm_m() {
	// Cvttpd2dq_xmm_xmmm128
	test_instr(16, |a| a.cvttpd2dq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvttpd2dq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvttpd2pi_mm_xmm() {
	// Cvttpd2pi_mm_xmmm128
	test_instr(16, |a| a.cvttpd2pi(mm2, xmm3).unwrap(),
		Instruction::with2(Code::Cvttpd2pi_mm_xmmm128, Register::MM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvttpd2pi_mm_m() {
	// Cvttpd2pi_mm_xmmm128
	test_instr(16, |a| a.cvttpd2pi(mm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvttpd2pi_mm_xmmm128, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvttps2dq_xmm_xmm() {
	// Cvttps2dq_xmm_xmmm128
	test_instr(16, |a| a.cvttps2dq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Cvttps2dq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvttps2dq_xmm_m() {
	// Cvttps2dq_xmm_xmmm128
	test_instr(16, |a| a.cvttps2dq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvttps2dq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvttps2pi_mm_xmm() {
	// Cvttps2pi_mm_xmmm64
	test_instr(16, |a| a.cvttps2pi(mm2, xmm3).unwrap(),
		Instruction::with2(Code::Cvttps2pi_mm_xmmm64, Register::MM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvttps2pi_mm_m() {
	// Cvttps2pi_mm_xmmm64
	test_instr(16, |a| a.cvttps2pi(mm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvttps2pi_mm_xmmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvttsd2si_r32_xmm() {
	// Cvttsd2si_r32_xmmm64
	test_instr(16, |a| a.cvttsd2si(edx, xmm3).unwrap(),
		Instruction::with2(Code::Cvttsd2si_r32_xmmm64, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvttsd2si_r32_m() {
	// Cvttsd2si_r32_xmmm64
	test_instr(16, |a| a.cvttsd2si(edx, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvttsd2si_r32_xmmm64, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvttss2si_r32_xmm() {
	// Cvttss2si_r32_xmmm32
	test_instr(16, |a| a.cvttss2si(edx, xmm3).unwrap(),
		Instruction::with2(Code::Cvttss2si_r32_xmmm32, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cvttss2si_r32_m() {
	// Cvttss2si_r32_xmmm32
	test_instr(16, |a| a.cvttss2si(edx, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Cvttss2si_r32_xmmm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cwd() {
	// Cwd
	test_instr(16, |a| a.cwd().unwrap(),
		Instruction::with(Code::Cwd),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn cwde() {
	// Cwde
	test_instr(16, |a| a.cwde().unwrap(),
		Instruction::with(Code::Cwde),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn daa() {
	// Daa
	test_instr(16, |a| a.daa().unwrap(),
		Instruction::with(Code::Daa),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn das() {
	// Das
	test_instr(16, |a| a.das().unwrap(),
		Instruction::with(Code::Das),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn dec_r8() {
	// Dec_rm8
	test_instr(16, |a| a.dec(dl).unwrap(),
		Instruction::with1(Code::Dec_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn dec_r16() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else */ {
		// Dec_r16
		test_instr(16, |a| a.dec(dx).unwrap(),
			Instruction::with1(Code::Dec_r16, Register::DX).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn dec_r32() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else */ {
		// Dec_r32
		test_instr(16, |a| a.dec(edx).unwrap(),
			Instruction::with1(Code::Dec_r32, Register::EDX).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn dec_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Dec_rm64 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Dec_rm32
		test_instr(16, |a| a.dec(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Dec_rm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Dec_rm16
		test_instr(16, |a| a.dec(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Dec_rm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Dec_rm8
		test_instr(16, |a| a.dec(byte_ptr(di)).unwrap(),
			Instruction::with1(Code::Dec_rm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Dec_rm8
		test_invalid_instr(16, |a| assert!(a.dec(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn div_r8() {
	// Div_rm8
	test_instr(16, |a| a.div(dl).unwrap(),
		Instruction::with1(Code::Div_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn div_r16() {
	// Div_rm16
	test_instr(16, |a| a.div(dx).unwrap(),
		Instruction::with1(Code::Div_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn div_r32() {
	// Div_rm32
	test_instr(16, |a| a.div(edx).unwrap(),
		Instruction::with1(Code::Div_rm32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn div_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Div_rm64 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Div_rm32
		test_instr(16, |a| a.div(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Div_rm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Div_rm16
		test_instr(16, |a| a.div(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Div_rm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Div_rm8
		test_instr(16, |a| a.div(byte_ptr(di)).unwrap(),
			Instruction::with1(Code::Div_rm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Div_rm8
		test_invalid_instr(16, |a| assert!(a.div(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn divpd_xmm_xmm() {
	// Divpd_xmm_xmmm128
	test_instr(16, |a| a.divpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Divpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn divpd_xmm_m() {
	// Divpd_xmm_xmmm128
	test_instr(16, |a| a.divpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Divpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn divps_xmm_xmm() {
	// Divps_xmm_xmmm128
	test_instr(16, |a| a.divps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Divps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn divps_xmm_m() {
	// Divps_xmm_xmmm128
	test_instr(16, |a| a.divps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Divps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn divsd_xmm_xmm() {
	// Divsd_xmm_xmmm64
	test_instr(16, |a| a.divsd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Divsd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn divsd_xmm_m() {
	// Divsd_xmm_xmmm64
	test_instr(16, |a| a.divsd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Divsd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn divss_xmm_xmm() {
	// Divss_xmm_xmmm32
	test_instr(16, |a| a.divss(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Divss_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn divss_xmm_m() {
	// Divss_xmm_xmmm32
	test_instr(16, |a| a.divss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Divss_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn dmint() {
	// Dmint
	test_instr(16, |a| a.dmint().unwrap(),
		Instruction::with(Code::Dmint),
		TestInstrFlags::NONE, DecoderOptions::CYRIX_DMI);
}

#[test]
#[rustfmt::skip]
fn dppd_xmm_xmm_i() {
	// Dppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.dppd(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Dppd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Dppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.dppd(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Dppd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn dppd_xmm_m_i() {
	// Dppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.dppd(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Dppd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Dppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.dppd(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Dppd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn dppd_xmm_xmm_u() {
	// Dppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.dppd(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Dppd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn dppd_xmm_m_u() {
	// Dppd_xmm_xmmm128_imm8
	test_instr(16, |a| a.dppd(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Dppd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn dpps_xmm_xmm_i() {
	// Dpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.dpps(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Dpps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Dpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.dpps(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Dpps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn dpps_xmm_m_i() {
	// Dpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.dpps(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Dpps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Dpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.dpps(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Dpps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn dpps_xmm_xmm_u() {
	// Dpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.dpps(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Dpps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn dpps_xmm_m_u() {
	// Dpps_xmm_xmmm128_imm8
	test_instr(16, |a| a.dpps(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Dpps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn emms() {
	// Emms
	test_instr(16, |a| a.emms().unwrap(),
		Instruction::with(Code::Emms),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn encls() {
	// Encls
	test_instr(16, |a| a.encls().unwrap(),
		Instruction::with(Code::Encls),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn enclu() {
	// Enclu
	test_instr(16, |a| a.enclu().unwrap(),
		Instruction::with(Code::Enclu),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn enclv() {
	// Enclv
	test_instr(16, |a| a.enclv().unwrap(),
		Instruction::with(Code::Enclv),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn encodekey128_r32_r32() {
	// Encodekey128_r32_r32
	test_instr(16, |a| a.encodekey128(edx, ebx).unwrap(),
		Instruction::with2(Code::Encodekey128_r32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn encodekey256_r32_r32() {
	// Encodekey256_r32_r32
	test_instr(16, |a| a.encodekey256(edx, ebx).unwrap(),
		Instruction::with2(Code::Encodekey256_r32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn endbr32() {
	// Endbr32
	test_instr(16, |a| a.endbr32().unwrap(),
		Instruction::with(Code::Endbr32),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn endbr64() {
	// Endbr64
	test_instr(16, |a| a.endbr64().unwrap(),
		Instruction::with(Code::Endbr64),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn enqcmd_r16_m() {
	// Enqcmd_r16_m512
	test_instr(16, |a| a.enqcmd(dx, ptr(si)).unwrap(),
		Instruction::with2(Code::Enqcmd_r16_m512, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn enqcmd_r32_m() {
	// Enqcmd_r32_m512
	test_instr(16, |a| a.enqcmd(edx, ptr(ecx)).unwrap(),
		Instruction::with2(Code::Enqcmd_r32_m512, Register::EDX, MemoryOperand::new(Register::ECX, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn enqcmds_r16_m() {
	// Enqcmds_r16_m512
	test_instr(16, |a| a.enqcmds(dx, ptr(si)).unwrap(),
		Instruction::with2(Code::Enqcmds_r16_m512, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn enqcmds_r32_m() {
	// Enqcmds_r32_m512
	test_instr(16, |a| a.enqcmds(edx, ptr(ecx)).unwrap(),
		Instruction::with2(Code::Enqcmds_r32_m512, Register::EDX, MemoryOperand::new(Register::ECX, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn enter_i_i() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Enterw_imm16_imm8
		test_instr(16, |a| a.enter(0x40B7i32, -5i32).unwrap(),
			Instruction::with2(Code::Enterw_imm16_imm8, 0x40B7i32, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Enterw_imm16_imm8
		test_instr(16, |a| a.enter(0x40B7, -5).unwrap(),
			Instruction::with2(Code::Enterw_imm16_imm8, 0x40B7i32, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn enter_u_u() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Enterw_imm16_imm8
		test_instr(16, |a| a.enter(0x40B7u32, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Enterw_imm16_imm8, 0x40B7u32, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn extractps_r32_xmm_i() {
	// Extractps_rm32_xmm_imm8
	test_instr(16, |a| a.extractps(edx, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Extractps_rm32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Extractps_rm32_xmm_imm8
	test_instr(16, |a| a.extractps(edx, xmm3, -5).unwrap(),
		Instruction::with3(Code::Extractps_rm32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn extractps_m_xmm_i() {
	// Extractps_rm32_xmm_imm8
	test_instr(16, |a| a.extractps(dword_ptr(si), xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Extractps_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Extractps_rm32_xmm_imm8
	test_instr(16, |a| a.extractps(dword_ptr(si), xmm3, -5).unwrap(),
		Instruction::with3(Code::Extractps_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn extractps_r32_xmm_u() {
	// Extractps_rm32_xmm_imm8
	test_instr(16, |a| a.extractps(edx, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Extractps_rm32_xmm_imm8, Register::EDX, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn extractps_m_xmm_u() {
	// Extractps_rm32_xmm_imm8
	test_instr(16, |a| a.extractps(dword_ptr(si), xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Extractps_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn extrq_xmm_xmm() {
	// Extrq_xmm_xmm
	test_instr(16, |a| a.extrq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Extrq_xmm_xmm, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn extrq_xmm_i_i() {
	// Extrq_xmm_imm8_imm8
	test_instr(16, |a| a.extrq_3(xmm2, -5i32, -5i32).unwrap(),
		Instruction::with3(Code::Extrq_xmm_imm8_imm8, Register::XMM2, -5i32, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Extrq_xmm_imm8_imm8
	test_instr(16, |a| a.extrq_3(xmm2, -5, -5).unwrap(),
		Instruction::with3(Code::Extrq_xmm_imm8_imm8, Register::XMM2, -5i32, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn extrq_xmm_u_u() {
	// Extrq_xmm_imm8_imm8
	test_instr(16, |a| a.extrq_3(xmm2, 0x7Fu32, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Extrq_xmm_imm8_imm8, Register::XMM2, 0x7Fu32, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn f2xm1() {
	// F2xm1
	test_instr(16, |a| a.f2xm1().unwrap(),
		Instruction::with(Code::F2xm1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fabs() {
	// Fabs
	test_instr(16, |a| a.fabs().unwrap(),
		Instruction::with(Code::Fabs),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fadd_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Fadd_m64fp
		test_instr(16, |a| a.fadd(qword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fadd_m64fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Fadd_m32fp
		test_instr(16, |a| a.fadd(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fadd_m32fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fadd_m32fp
		test_invalid_instr(16, |a| assert!(a.fadd(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fadd_st_st() {
	/* if op0.register() == Register::ST0 */ {
		// Fadd_st0_sti
		test_instr(16, |a| a.fadd_2(st0, st1).unwrap(),
			Instruction::with2(Code::Fadd_st0_sti, Register::ST0, Register::ST1).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fadd_sti_st0
		test_instr(16, |a| a.fadd_2(st1, st0).unwrap(),
			Instruction::with2(Code::Fadd_sti_st0, Register::ST1, Register::ST0).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn faddp_st_st() {
	// Faddp_sti_st0
	test_instr(16, |a| a.faddp(st1, st0).unwrap(),
		Instruction::with2(Code::Faddp_sti_st0, Register::ST1, Register::ST0).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fbld_m() {
	// Fbld_m80bcd
	test_instr(16, |a| a.fbld(ptr(si)).unwrap(),
		Instruction::with1(Code::Fbld_m80bcd, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fbstp_m() {
	// Fbstp_m80bcd
	test_instr(16, |a| a.fbstp(ptr(si)).unwrap(),
		Instruction::with1(Code::Fbstp_m80bcd, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fchs() {
	// Fchs
	test_instr(16, |a| a.fchs().unwrap(),
		Instruction::with(Code::Fchs),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fclex() {
	// Fclex
	test_instr(16, |a| a.fclex().unwrap(),
		Instruction::with(Code::Fclex),
		TestInstrFlags::FWAIT, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fcmovb_st_st() {
	// Fcmovb_st0_sti
	test_instr(16, |a| a.fcmovb(st0, st1).unwrap(),
		Instruction::with2(Code::Fcmovb_st0_sti, Register::ST0, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fcmovbe_st_st() {
	// Fcmovbe_st0_sti
	test_instr(16, |a| a.fcmovbe(st0, st1).unwrap(),
		Instruction::with2(Code::Fcmovbe_st0_sti, Register::ST0, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fcmove_st_st() {
	// Fcmove_st0_sti
	test_instr(16, |a| a.fcmove(st0, st1).unwrap(),
		Instruction::with2(Code::Fcmove_st0_sti, Register::ST0, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fcmovnb_st_st() {
	// Fcmovnb_st0_sti
	test_instr(16, |a| a.fcmovnb(st0, st1).unwrap(),
		Instruction::with2(Code::Fcmovnb_st0_sti, Register::ST0, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fcmovnbe_st_st() {
	// Fcmovnbe_st0_sti
	test_instr(16, |a| a.fcmovnbe(st0, st1).unwrap(),
		Instruction::with2(Code::Fcmovnbe_st0_sti, Register::ST0, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fcmovne_st_st() {
	// Fcmovne_st0_sti
	test_instr(16, |a| a.fcmovne(st0, st1).unwrap(),
		Instruction::with2(Code::Fcmovne_st0_sti, Register::ST0, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fcmovnu_st_st() {
	// Fcmovnu_st0_sti
	test_instr(16, |a| a.fcmovnu(st0, st1).unwrap(),
		Instruction::with2(Code::Fcmovnu_st0_sti, Register::ST0, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fcmovu_st_st() {
	// Fcmovu_st0_sti
	test_instr(16, |a| a.fcmovu(st0, st1).unwrap(),
		Instruction::with2(Code::Fcmovu_st0_sti, Register::ST0, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fcom_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Fcom_m64fp
		test_instr(16, |a| a.fcom(qword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fcom_m64fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Fcom_m32fp
		test_instr(16, |a| a.fcom(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fcom_m32fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fcom_m32fp
		test_invalid_instr(16, |a| assert!(a.fcom(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fcom_st_st() {
	// Fcom_st0_sti
	test_instr(16, |a| a.fcom_2(st0, st1).unwrap(),
		Instruction::with2(Code::Fcom_st0_sti, Register::ST0, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fcomi_st_st() {
	// Fcomi_st0_sti
	test_instr(16, |a| a.fcomi(st0, st1).unwrap(),
		Instruction::with2(Code::Fcomi_st0_sti, Register::ST0, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fcomip_st_st() {
	// Fcomip_st0_sti
	test_instr(16, |a| a.fcomip(st0, st1).unwrap(),
		Instruction::with2(Code::Fcomip_st0_sti, Register::ST0, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fcomp_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Fcomp_m64fp
		test_instr(16, |a| a.fcomp(qword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fcomp_m64fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Fcomp_m32fp
		test_instr(16, |a| a.fcomp(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fcomp_m32fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fcomp_m32fp
		test_invalid_instr(16, |a| assert!(a.fcomp(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fcomp_st_st() {
	// Fcomp_st0_sti
	test_instr(16, |a| a.fcomp_2(st0, st1).unwrap(),
		Instruction::with2(Code::Fcomp_st0_sti, Register::ST0, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fcompp() {
	// Fcompp
	test_instr(16, |a| a.fcompp().unwrap(),
		Instruction::with(Code::Fcompp),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fcos() {
	// Fcos
	test_instr(16, |a| a.fcos().unwrap(),
		Instruction::with(Code::Fcos),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fdecstp() {
	// Fdecstp
	test_instr(16, |a| a.fdecstp().unwrap(),
		Instruction::with(Code::Fdecstp),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fdisi() {
	// Fdisi
	test_instr(16, |a| a.fdisi().unwrap(),
		Instruction::with(Code::Fdisi),
		TestInstrFlags::FWAIT, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fdiv_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Fdiv_m64fp
		test_instr(16, |a| a.fdiv(qword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fdiv_m64fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Fdiv_m32fp
		test_instr(16, |a| a.fdiv(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fdiv_m32fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fdiv_m32fp
		test_invalid_instr(16, |a| assert!(a.fdiv(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fdiv_st_st() {
	/* if op0.register() == Register::ST0 */ {
		// Fdiv_st0_sti
		test_instr(16, |a| a.fdiv_2(st0, st1).unwrap(),
			Instruction::with2(Code::Fdiv_st0_sti, Register::ST0, Register::ST1).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fdiv_sti_st0
		test_instr(16, |a| a.fdiv_2(st1, st0).unwrap(),
			Instruction::with2(Code::Fdiv_sti_st0, Register::ST1, Register::ST0).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fdivp_st_st() {
	// Fdivp_sti_st0
	test_instr(16, |a| a.fdivp(st1, st0).unwrap(),
		Instruction::with2(Code::Fdivp_sti_st0, Register::ST1, Register::ST0).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fdivr_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Fdivr_m64fp
		test_instr(16, |a| a.fdivr(qword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fdivr_m64fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Fdivr_m32fp
		test_instr(16, |a| a.fdivr(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fdivr_m32fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fdivr_m32fp
		test_invalid_instr(16, |a| assert!(a.fdivr(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fdivr_st_st() {
	/* if op0.register() == Register::ST0 */ {
		// Fdivr_st0_sti
		test_instr(16, |a| a.fdivr_2(st0, st1).unwrap(),
			Instruction::with2(Code::Fdivr_st0_sti, Register::ST0, Register::ST1).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fdivr_sti_st0
		test_instr(16, |a| a.fdivr_2(st1, st0).unwrap(),
			Instruction::with2(Code::Fdivr_sti_st0, Register::ST1, Register::ST0).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fdivrp_st_st() {
	// Fdivrp_sti_st0
	test_instr(16, |a| a.fdivrp(st1, st0).unwrap(),
		Instruction::with2(Code::Fdivrp_sti_st0, Register::ST1, Register::ST0).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn femms() {
	// Femms
	test_instr(16, |a| a.femms().unwrap(),
		Instruction::with(Code::Femms),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn feni() {
	// Feni
	test_instr(16, |a| a.feni().unwrap(),
		Instruction::with(Code::Feni),
		TestInstrFlags::FWAIT, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ffree_st() {
	// Ffree_sti
	test_instr(16, |a| a.ffree(st1).unwrap(),
		Instruction::with1(Code::Ffree_sti, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ffreep_st() {
	// Ffreep_sti
	test_instr(16, |a| a.ffreep(st1).unwrap(),
		Instruction::with1(Code::Ffreep_sti, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fiadd_m() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		// Fiadd_m32int
		test_instr(16, |a| a.fiadd(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fiadd_m32int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Fiadd_m16int
		test_instr(16, |a| a.fiadd(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Fiadd_m16int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fiadd_m16int
		test_invalid_instr(16, |a| assert!(a.fiadd(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn ficom_m() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		// Ficom_m32int
		test_instr(16, |a| a.ficom(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Ficom_m32int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Ficom_m16int
		test_instr(16, |a| a.ficom(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Ficom_m16int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Ficom_m16int
		test_invalid_instr(16, |a| assert!(a.ficom(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn ficomp_m() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		// Ficomp_m32int
		test_instr(16, |a| a.ficomp(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Ficomp_m32int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Ficomp_m16int
		test_instr(16, |a| a.ficomp(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Ficomp_m16int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Ficomp_m16int
		test_invalid_instr(16, |a| assert!(a.ficomp(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fidiv_m() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		// Fidiv_m32int
		test_instr(16, |a| a.fidiv(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fidiv_m32int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Fidiv_m16int
		test_instr(16, |a| a.fidiv(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Fidiv_m16int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fidiv_m16int
		test_invalid_instr(16, |a| assert!(a.fidiv(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fidivr_m() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		// Fidivr_m32int
		test_instr(16, |a| a.fidivr(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fidivr_m32int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Fidivr_m16int
		test_instr(16, |a| a.fidivr(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Fidivr_m16int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fidivr_m16int
		test_invalid_instr(16, |a| assert!(a.fidivr(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fild_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Fild_m64int
		test_instr(16, |a| a.fild(qword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fild_m64int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Fild_m32int
		test_instr(16, |a| a.fild(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fild_m32int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Fild_m16int
		test_instr(16, |a| a.fild(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Fild_m16int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fild_m16int
		test_invalid_instr(16, |a| assert!(a.fild(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fimul_m() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		// Fimul_m32int
		test_instr(16, |a| a.fimul(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fimul_m32int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Fimul_m16int
		test_instr(16, |a| a.fimul(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Fimul_m16int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fimul_m16int
		test_invalid_instr(16, |a| assert!(a.fimul(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fincstp() {
	// Fincstp
	test_instr(16, |a| a.fincstp().unwrap(),
		Instruction::with(Code::Fincstp),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn finit() {
	// Finit
	test_instr(16, |a| a.finit().unwrap(),
		Instruction::with(Code::Finit),
		TestInstrFlags::FWAIT, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fist_m() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		// Fist_m32int
		test_instr(16, |a| a.fist(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fist_m32int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Fist_m16int
		test_instr(16, |a| a.fist(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Fist_m16int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fist_m16int
		test_invalid_instr(16, |a| assert!(a.fist(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fistp_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Fistp_m64int
		test_instr(16, |a| a.fistp(qword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fistp_m64int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Fistp_m32int
		test_instr(16, |a| a.fistp(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fistp_m32int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Fistp_m16int
		test_instr(16, |a| a.fistp(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Fistp_m16int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fistp_m16int
		test_invalid_instr(16, |a| assert!(a.fistp(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fisttp_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Fisttp_m64int
		test_instr(16, |a| a.fisttp(qword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fisttp_m64int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Fisttp_m32int
		test_instr(16, |a| a.fisttp(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fisttp_m32int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Fisttp_m16int
		test_instr(16, |a| a.fisttp(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Fisttp_m16int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fisttp_m16int
		test_invalid_instr(16, |a| assert!(a.fisttp(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fisub_m() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		// Fisub_m32int
		test_instr(16, |a| a.fisub(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fisub_m32int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Fisub_m16int
		test_instr(16, |a| a.fisub(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Fisub_m16int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fisub_m16int
		test_invalid_instr(16, |a| assert!(a.fisub(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fisubr_m() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		// Fisubr_m32int
		test_instr(16, |a| a.fisubr(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fisubr_m32int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Fisubr_m16int
		test_instr(16, |a| a.fisubr(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Fisubr_m16int, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fisubr_m16int
		test_invalid_instr(16, |a| assert!(a.fisubr(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fld_st() {
	// Fld_sti
	test_instr(16, |a| a.fld(st1).unwrap(),
		Instruction::with1(Code::Fld_sti, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fld_m() {
	/* if op0.size() == MemoryOperandSize::Tbyte */ {
		// Fld_m80fp
		test_instr(16, |a| a.fld(tword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fld_m80fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Fld_m64fp
		test_instr(16, |a| a.fld(qword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fld_m64fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Fld_m32fp
		test_instr(16, |a| a.fld(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fld_m32fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fld_m32fp
		test_invalid_instr(16, |a| assert!(a.fld(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fld1() {
	// Fld1
	test_instr(16, |a| a.fld1().unwrap(),
		Instruction::with(Code::Fld1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fldcw_m() {
	// Fldcw_m2byte
	test_instr(16, |a| a.fldcw(ptr(si)).unwrap(),
		Instruction::with1(Code::Fldcw_m2byte, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fldenv_m() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Fldenv_m14byte
		test_instr(16, |a| a.fldenv(ptr(si)).unwrap(),
			Instruction::with1(Code::Fldenv_m14byte, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fldl2e() {
	// Fldl2e
	test_instr(16, |a| a.fldl2e().unwrap(),
		Instruction::with(Code::Fldl2e),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fldl2t() {
	// Fldl2t
	test_instr(16, |a| a.fldl2t().unwrap(),
		Instruction::with(Code::Fldl2t),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fldlg2() {
	// Fldlg2
	test_instr(16, |a| a.fldlg2().unwrap(),
		Instruction::with(Code::Fldlg2),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fldln2() {
	// Fldln2
	test_instr(16, |a| a.fldln2().unwrap(),
		Instruction::with(Code::Fldln2),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fldpi() {
	// Fldpi
	test_instr(16, |a| a.fldpi().unwrap(),
		Instruction::with(Code::Fldpi),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fldz() {
	// Fldz
	test_instr(16, |a| a.fldz().unwrap(),
		Instruction::with(Code::Fldz),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fmul_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Fmul_m64fp
		test_instr(16, |a| a.fmul(qword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fmul_m64fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Fmul_m32fp
		test_instr(16, |a| a.fmul(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fmul_m32fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fmul_m32fp
		test_invalid_instr(16, |a| assert!(a.fmul(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fmul_st_st() {
	/* if op0.register() == Register::ST0 */ {
		// Fmul_st0_sti
		test_instr(16, |a| a.fmul_2(st0, st1).unwrap(),
			Instruction::with2(Code::Fmul_st0_sti, Register::ST0, Register::ST1).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fmul_sti_st0
		test_instr(16, |a| a.fmul_2(st1, st0).unwrap(),
			Instruction::with2(Code::Fmul_sti_st0, Register::ST1, Register::ST0).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fmulp_st_st() {
	// Fmulp_sti_st0
	test_instr(16, |a| a.fmulp(st1, st0).unwrap(),
		Instruction::with2(Code::Fmulp_sti_st0, Register::ST1, Register::ST0).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fnclex() {
	// Fnclex
	test_instr(16, |a| a.fnclex().unwrap(),
		Instruction::with(Code::Fnclex),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fndisi() {
	// Fndisi
	test_instr(16, |a| a.fndisi().unwrap(),
		Instruction::with(Code::Fndisi),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fneni() {
	// Fneni
	test_instr(16, |a| a.fneni().unwrap(),
		Instruction::with(Code::Fneni),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fninit() {
	// Fninit
	test_instr(16, |a| a.fninit().unwrap(),
		Instruction::with(Code::Fninit),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fnop() {
	// Fnop
	test_instr(16, |a| a.fnop().unwrap(),
		Instruction::with(Code::Fnop),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fnsave_m() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Fnsave_m94byte
		test_instr(16, |a| a.fnsave(ptr(si)).unwrap(),
			Instruction::with1(Code::Fnsave_m94byte, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fnsetpm() {
	// Fnsetpm
	test_instr(16, |a| a.fnsetpm().unwrap(),
		Instruction::with(Code::Fnsetpm),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fnstcw_m() {
	// Fnstcw_m2byte
	test_instr(16, |a| a.fnstcw(ptr(si)).unwrap(),
		Instruction::with1(Code::Fnstcw_m2byte, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fnstdw_r16() {
	// Fnstdw_AX
	test_instr(16, |a| a.fnstdw(ax).unwrap(),
		Instruction::with1(Code::Fnstdw_AX, Register::AX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::OLD_FPU);
}

#[test]
#[rustfmt::skip]
fn fnstenv_m() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Fnstenv_m14byte
		test_instr(16, |a| a.fnstenv(ptr(si)).unwrap(),
			Instruction::with1(Code::Fnstenv_m14byte, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fnstsg_r16() {
	// Fnstsg_AX
	test_instr(16, |a| a.fnstsg(ax).unwrap(),
		Instruction::with1(Code::Fnstsg_AX, Register::AX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::OLD_FPU);
}

#[test]
#[rustfmt::skip]
fn fnstsw_r16() {
	// Fnstsw_AX
	test_instr(16, |a| a.fnstsw(ax).unwrap(),
		Instruction::with1(Code::Fnstsw_AX, Register::AX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fnstsw_m() {
	// Fnstsw_m2byte
	test_instr(16, |a| a.fnstsw(ptr(si)).unwrap(),
		Instruction::with1(Code::Fnstsw_m2byte, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fpatan() {
	// Fpatan
	test_instr(16, |a| a.fpatan().unwrap(),
		Instruction::with(Code::Fpatan),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fprem() {
	// Fprem
	test_instr(16, |a| a.fprem().unwrap(),
		Instruction::with(Code::Fprem),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fprem1() {
	// Fprem1
	test_instr(16, |a| a.fprem1().unwrap(),
		Instruction::with(Code::Fprem1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fptan() {
	// Fptan
	test_instr(16, |a| a.fptan().unwrap(),
		Instruction::with(Code::Fptan),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn frndint() {
	// Frndint
	test_instr(16, |a| a.frndint().unwrap(),
		Instruction::with(Code::Frndint),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn frstor_m() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Frstor_m94byte
		test_instr(16, |a| a.frstor(ptr(si)).unwrap(),
			Instruction::with1(Code::Frstor_m94byte, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn frstpm() {
	// Frstpm
	test_instr(16, |a| a.frstpm().unwrap(),
		Instruction::with(Code::Frstpm),
		TestInstrFlags::NONE, DecoderOptions::OLD_FPU);
}

#[test]
#[rustfmt::skip]
fn fsave_m() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Fsave_m94byte
		test_instr(16, |a| a.fsave(ptr(si)).unwrap(),
			Instruction::with1(Code::Fsave_m94byte, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::FWAIT, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fscale() {
	// Fscale
	test_instr(16, |a| a.fscale().unwrap(),
		Instruction::with(Code::Fscale),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fsetpm() {
	// Fsetpm
	test_instr(16, |a| a.fsetpm().unwrap(),
		Instruction::with(Code::Fsetpm),
		TestInstrFlags::FWAIT, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fsin() {
	// Fsin
	test_instr(16, |a| a.fsin().unwrap(),
		Instruction::with(Code::Fsin),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fsincos() {
	// Fsincos
	test_instr(16, |a| a.fsincos().unwrap(),
		Instruction::with(Code::Fsincos),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fsqrt() {
	// Fsqrt
	test_instr(16, |a| a.fsqrt().unwrap(),
		Instruction::with(Code::Fsqrt),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fst_st() {
	// Fst_sti
	test_instr(16, |a| a.fst(st1).unwrap(),
		Instruction::with1(Code::Fst_sti, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fst_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Fst_m64fp
		test_instr(16, |a| a.fst(qword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fst_m64fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Fst_m32fp
		test_instr(16, |a| a.fst(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fst_m32fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fst_m32fp
		test_invalid_instr(16, |a| assert!(a.fst(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fstcw_m() {
	// Fstcw_m2byte
	test_instr(16, |a| a.fstcw(ptr(si)).unwrap(),
		Instruction::with1(Code::Fstcw_m2byte, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::FWAIT, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fstdw_r16() {
	// Fstdw_AX
	test_instr(16, |a| a.fstdw(ax).unwrap(),
		Instruction::with1(Code::Fstdw_AX, Register::AX).unwrap(),
		TestInstrFlags::FWAIT, DecoderOptions::OLD_FPU);
}

#[test]
#[rustfmt::skip]
fn fstenv_m() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Fstenv_m14byte
		test_instr(16, |a| a.fstenv(ptr(si)).unwrap(),
			Instruction::with1(Code::Fstenv_m14byte, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::FWAIT, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fstp_st() {
	// Fstp_sti
	test_instr(16, |a| a.fstp(st1).unwrap(),
		Instruction::with1(Code::Fstp_sti, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fstp_m() {
	/* if op0.size() == MemoryOperandSize::Tbyte */ {
		// Fstp_m80fp
		test_instr(16, |a| a.fstp(tword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fstp_m80fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Fstp_m64fp
		test_instr(16, |a| a.fstp(qword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fstp_m64fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Fstp_m32fp
		test_instr(16, |a| a.fstp(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fstp_m32fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fstp_m32fp
		test_invalid_instr(16, |a| assert!(a.fstp(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fstpnce_st() {
	// Fstpnce_sti
	test_instr(16, |a| a.fstpnce(st1).unwrap(),
		Instruction::with1(Code::Fstpnce_sti, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fstsg_r16() {
	// Fstsg_AX
	test_instr(16, |a| a.fstsg(ax).unwrap(),
		Instruction::with1(Code::Fstsg_AX, Register::AX).unwrap(),
		TestInstrFlags::FWAIT, DecoderOptions::OLD_FPU);
}

#[test]
#[rustfmt::skip]
fn fstsw_r16() {
	// Fstsw_AX
	test_instr(16, |a| a.fstsw(ax).unwrap(),
		Instruction::with1(Code::Fstsw_AX, Register::AX).unwrap(),
		TestInstrFlags::FWAIT, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fstsw_m() {
	// Fstsw_m2byte
	test_instr(16, |a| a.fstsw(ptr(si)).unwrap(),
		Instruction::with1(Code::Fstsw_m2byte, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::FWAIT, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fsub_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Fsub_m64fp
		test_instr(16, |a| a.fsub(qword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fsub_m64fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Fsub_m32fp
		test_instr(16, |a| a.fsub(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fsub_m32fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fsub_m32fp
		test_invalid_instr(16, |a| assert!(a.fsub(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fsub_st_st() {
	/* if op0.register() == Register::ST0 */ {
		// Fsub_st0_sti
		test_instr(16, |a| a.fsub_2(st0, st1).unwrap(),
			Instruction::with2(Code::Fsub_st0_sti, Register::ST0, Register::ST1).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fsub_sti_st0
		test_instr(16, |a| a.fsub_2(st1, st0).unwrap(),
			Instruction::with2(Code::Fsub_sti_st0, Register::ST1, Register::ST0).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fsubp_st_st() {
	// Fsubp_sti_st0
	test_instr(16, |a| a.fsubp(st1, st0).unwrap(),
		Instruction::with2(Code::Fsubp_sti_st0, Register::ST1, Register::ST0).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fsubr_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Fsubr_m64fp
		test_instr(16, |a| a.fsubr(qword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fsubr_m64fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Fsubr_m32fp
		test_instr(16, |a| a.fsubr(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Fsubr_m32fp, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fsubr_m32fp
		test_invalid_instr(16, |a| assert!(a.fsubr(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fsubr_st_st() {
	/* if op0.register() == Register::ST0 */ {
		// Fsubr_st0_sti
		test_instr(16, |a| a.fsubr_2(st0, st1).unwrap(),
			Instruction::with2(Code::Fsubr_st0_sti, Register::ST0, Register::ST1).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Fsubr_sti_st0
		test_instr(16, |a| a.fsubr_2(st1, st0).unwrap(),
			Instruction::with2(Code::Fsubr_sti_st0, Register::ST1, Register::ST0).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn fsubrp_st_st() {
	// Fsubrp_sti_st0
	test_instr(16, |a| a.fsubrp(st1, st0).unwrap(),
		Instruction::with2(Code::Fsubrp_sti_st0, Register::ST1, Register::ST0).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ftst() {
	// Ftst
	test_instr(16, |a| a.ftst().unwrap(),
		Instruction::with(Code::Ftst),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fucom_st_st() {
	// Fucom_st0_sti
	test_instr(16, |a| a.fucom(st0, st1).unwrap(),
		Instruction::with2(Code::Fucom_st0_sti, Register::ST0, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fucomi_st_st() {
	// Fucomi_st0_sti
	test_instr(16, |a| a.fucomi(st0, st1).unwrap(),
		Instruction::with2(Code::Fucomi_st0_sti, Register::ST0, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fucomip_st_st() {
	// Fucomip_st0_sti
	test_instr(16, |a| a.fucomip(st0, st1).unwrap(),
		Instruction::with2(Code::Fucomip_st0_sti, Register::ST0, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fucomp_st_st() {
	// Fucomp_st0_sti
	test_instr(16, |a| a.fucomp(st0, st1).unwrap(),
		Instruction::with2(Code::Fucomp_st0_sti, Register::ST0, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fucompp() {
	// Fucompp
	test_instr(16, |a| a.fucompp().unwrap(),
		Instruction::with(Code::Fucompp),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fxam() {
	// Fxam
	test_instr(16, |a| a.fxam().unwrap(),
		Instruction::with(Code::Fxam),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fxch_st_st() {
	// Fxch_st0_sti
	test_instr(16, |a| a.fxch(st0, st1).unwrap(),
		Instruction::with2(Code::Fxch_st0_sti, Register::ST0, Register::ST1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fxrstor_m() {
	// Fxrstor_m512byte
	test_instr(16, |a| a.fxrstor(ptr(si)).unwrap(),
		Instruction::with1(Code::Fxrstor_m512byte, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fxsave_m() {
	// Fxsave_m512byte
	test_instr(16, |a| a.fxsave(ptr(si)).unwrap(),
		Instruction::with1(Code::Fxsave_m512byte, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fxtract() {
	// Fxtract
	test_instr(16, |a| a.fxtract().unwrap(),
		Instruction::with(Code::Fxtract),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fyl2x() {
	// Fyl2x
	test_instr(16, |a| a.fyl2x().unwrap(),
		Instruction::with(Code::Fyl2x),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn fyl2xp1() {
	// Fyl2xp1
	test_instr(16, |a| a.fyl2xp1().unwrap(),
		Instruction::with(Code::Fyl2xp1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn getsec() {
	// Getsecd
	test_instr(16, |a| a.getsec().unwrap(),
		Instruction::with(Code::Getsecd),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn gf2p8affineinvqb_xmm_xmm_i() {
	// Gf2p8affineinvqb_xmm_xmmm128_imm8
	test_instr(16, |a| a.gf2p8affineinvqb(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Gf2p8affineinvqb_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Gf2p8affineinvqb_xmm_xmmm128_imm8
	test_instr(16, |a| a.gf2p8affineinvqb(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Gf2p8affineinvqb_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn gf2p8affineinvqb_xmm_m_i() {
	// Gf2p8affineinvqb_xmm_xmmm128_imm8
	test_instr(16, |a| a.gf2p8affineinvqb(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Gf2p8affineinvqb_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Gf2p8affineinvqb_xmm_xmmm128_imm8
	test_instr(16, |a| a.gf2p8affineinvqb(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Gf2p8affineinvqb_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn gf2p8affineinvqb_xmm_xmm_u() {
	// Gf2p8affineinvqb_xmm_xmmm128_imm8
	test_instr(16, |a| a.gf2p8affineinvqb(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Gf2p8affineinvqb_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn gf2p8affineinvqb_xmm_m_u() {
	// Gf2p8affineinvqb_xmm_xmmm128_imm8
	test_instr(16, |a| a.gf2p8affineinvqb(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Gf2p8affineinvqb_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn gf2p8affineqb_xmm_xmm_i() {
	// Gf2p8affineqb_xmm_xmmm128_imm8
	test_instr(16, |a| a.gf2p8affineqb(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Gf2p8affineqb_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Gf2p8affineqb_xmm_xmmm128_imm8
	test_instr(16, |a| a.gf2p8affineqb(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Gf2p8affineqb_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn gf2p8affineqb_xmm_m_i() {
	// Gf2p8affineqb_xmm_xmmm128_imm8
	test_instr(16, |a| a.gf2p8affineqb(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Gf2p8affineqb_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Gf2p8affineqb_xmm_xmmm128_imm8
	test_instr(16, |a| a.gf2p8affineqb(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Gf2p8affineqb_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn gf2p8affineqb_xmm_xmm_u() {
	// Gf2p8affineqb_xmm_xmmm128_imm8
	test_instr(16, |a| a.gf2p8affineqb(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Gf2p8affineqb_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn gf2p8affineqb_xmm_m_u() {
	// Gf2p8affineqb_xmm_xmmm128_imm8
	test_instr(16, |a| a.gf2p8affineqb(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Gf2p8affineqb_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn gf2p8mulb_xmm_xmm() {
	// Gf2p8mulb_xmm_xmmm128
	test_instr(16, |a| a.gf2p8mulb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Gf2p8mulb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn gf2p8mulb_xmm_m() {
	// Gf2p8mulb_xmm_xmmm128
	test_instr(16, |a| a.gf2p8mulb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Gf2p8mulb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn haddpd_xmm_xmm() {
	// Haddpd_xmm_xmmm128
	test_instr(16, |a| a.haddpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Haddpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn haddpd_xmm_m() {
	// Haddpd_xmm_xmmm128
	test_instr(16, |a| a.haddpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Haddpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn haddps_xmm_xmm() {
	// Haddps_xmm_xmmm128
	test_instr(16, |a| a.haddps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Haddps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn haddps_xmm_m() {
	// Haddps_xmm_xmmm128
	test_instr(16, |a| a.haddps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Haddps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn hlt() {
	// Hlt
	test_instr(16, |a| a.hlt().unwrap(),
		Instruction::with(Code::Hlt),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn hreset_i() {
	// Hreset_imm8
	test_instr(16, |a| a.hreset(-5i32).unwrap(),
		Instruction::with1(Code::Hreset_imm8, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Hreset_imm8
	test_instr(16, |a| a.hreset(-5).unwrap(),
		Instruction::with1(Code::Hreset_imm8, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn hreset_u() {
	// Hreset_imm8
	test_instr(16, |a| a.hreset(0x7Fu32).unwrap(),
		Instruction::with1(Code::Hreset_imm8, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn hsubpd_xmm_xmm() {
	// Hsubpd_xmm_xmmm128
	test_instr(16, |a| a.hsubpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Hsubpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn hsubpd_xmm_m() {
	// Hsubpd_xmm_xmmm128
	test_instr(16, |a| a.hsubpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Hsubpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn hsubps_xmm_xmm() {
	// Hsubps_xmm_xmmm128
	test_instr(16, |a| a.hsubps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Hsubps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn hsubps_xmm_m() {
	// Hsubps_xmm_xmmm128
	test_instr(16, |a| a.hsubps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Hsubps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ibts_r16_r16() {
	// Ibts_rm16_r16
	test_instr(16, |a| a.ibts(dx, bx).unwrap(),
		Instruction::with2(Code::Ibts_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::XBTS);
}

#[test]
#[rustfmt::skip]
fn ibts_m_r16() {
	// Ibts_rm16_r16
	test_instr(16, |a| a.ibts(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Ibts_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::XBTS);
}

#[test]
#[rustfmt::skip]
fn ibts_r32_r32() {
	// Ibts_rm32_r32
	test_instr(16, |a| a.ibts(edx, ebx).unwrap(),
		Instruction::with2(Code::Ibts_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::XBTS);
}

#[test]
#[rustfmt::skip]
fn ibts_m_r32() {
	// Ibts_rm32_r32
	test_instr(16, |a| a.ibts(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Ibts_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::XBTS);
}

#[test]
#[rustfmt::skip]
fn idiv_r8() {
	// Idiv_rm8
	test_instr(16, |a| a.idiv(dl).unwrap(),
		Instruction::with1(Code::Idiv_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn idiv_r16() {
	// Idiv_rm16
	test_instr(16, |a| a.idiv(dx).unwrap(),
		Instruction::with1(Code::Idiv_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn idiv_r32() {
	// Idiv_rm32
	test_instr(16, |a| a.idiv(edx).unwrap(),
		Instruction::with1(Code::Idiv_rm32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn idiv_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Idiv_rm64 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Idiv_rm32
		test_instr(16, |a| a.idiv(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Idiv_rm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Idiv_rm16
		test_instr(16, |a| a.idiv(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Idiv_rm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Idiv_rm8
		test_instr(16, |a| a.idiv(byte_ptr(di)).unwrap(),
			Instruction::with1(Code::Idiv_rm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Idiv_rm8
		test_invalid_instr(16, |a| assert!(a.idiv(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn imul_r8() {
	// Imul_rm8
	test_instr(16, |a| a.imul(dl).unwrap(),
		Instruction::with1(Code::Imul_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn imul_r16() {
	// Imul_rm16
	test_instr(16, |a| a.imul(dx).unwrap(),
		Instruction::with1(Code::Imul_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn imul_r32() {
	// Imul_rm32
	test_instr(16, |a| a.imul(edx).unwrap(),
		Instruction::with1(Code::Imul_rm32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn imul_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Imul_rm64 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Imul_rm32
		test_instr(16, |a| a.imul(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Imul_rm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Imul_rm16
		test_instr(16, |a| a.imul(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Imul_rm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Imul_rm8
		test_instr(16, |a| a.imul(byte_ptr(di)).unwrap(),
			Instruction::with1(Code::Imul_rm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Imul_rm8
		test_invalid_instr(16, |a| assert!(a.imul(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn imul_r16_r16() {
	// Imul_r16_rm16
	test_instr(16, |a| a.imul_2(dx, bx).unwrap(),
		Instruction::with2(Code::Imul_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn imul_r32_r32() {
	// Imul_r32_rm32
	test_instr(16, |a| a.imul_2(edx, ebx).unwrap(),
		Instruction::with2(Code::Imul_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn imul_r16_m() {
	// Imul_r16_rm16
	test_instr(16, |a| a.imul_2(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Imul_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn imul_r32_m() {
	// Imul_r32_rm32
	test_instr(16, |a| a.imul_2(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Imul_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn imul_r16_r16_i() {
	/* if op2 >= i8::MIN as i32 && op2 <= i8::MAX as i32 */ {
		// Imul_r16_rm16_imm8
		test_instr(16, |a| a.imul_3(dx, bx, -0x80i32).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm8, Register::DX, Register::BX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Imul_r16_rm16_imm8
		test_instr(16, |a| a.imul_3(dx, bx, 0x7Fi32).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm8, Register::DX, Register::BX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Imul_r16_rm16_imm16
		test_instr(16, |a| a.imul_3(dx, bx, 0x40B7i32).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm16, Register::DX, Register::BX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op2 >= i8::MIN as i32 && op2 <= i8::MAX as i32 */ {
		// Imul_r16_rm16_imm8
		test_instr(16, |a| a.imul_3(dx, bx, -0x80).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm8, Register::DX, Register::BX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Imul_r16_rm16_imm8
		test_instr(16, |a| a.imul_3(dx, bx, 0x7F).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm8, Register::DX, Register::BX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Imul_r16_rm16_imm16
		test_instr(16, |a| a.imul_3(dx, bx, 0x40B7).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm16, Register::DX, Register::BX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn imul_r32_r32_i() {
	/* if op2 >= i8::MIN as i32 && op2 <= i8::MAX as i32 */ {
		// Imul_r32_rm32_imm8
		test_instr(16, |a| a.imul_3(edx, ebx, -0x80i32).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm8, Register::EDX, Register::EBX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Imul_r32_rm32_imm8
		test_instr(16, |a| a.imul_3(edx, ebx, 0x7Fi32).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm8, Register::EDX, Register::EBX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Imul_r32_rm32_imm32
		test_instr(16, |a| a.imul_3(edx, ebx, 0x7FFFFFFFi32).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm32, Register::EDX, Register::EBX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op2 >= i8::MIN as i32 && op2 <= i8::MAX as i32 */ {
		// Imul_r32_rm32_imm8
		test_instr(16, |a| a.imul_3(edx, ebx, -0x80).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm8, Register::EDX, Register::EBX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Imul_r32_rm32_imm8
		test_instr(16, |a| a.imul_3(edx, ebx, 0x7F).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm8, Register::EDX, Register::EBX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Imul_r32_rm32_imm32
		test_instr(16, |a| a.imul_3(edx, ebx, 0x7FFFFFFF).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm32, Register::EDX, Register::EBX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn imul_r16_m_i() {
	/* if op2 >= i8::MIN as i32 && op2 <= i8::MAX as i32 */ {
		// Imul_r16_rm16_imm8
		test_instr(16, |a| a.imul_3(dx, word_ptr(si), -0x80i32).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm8, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Imul_r16_rm16_imm8
		test_instr(16, |a| a.imul_3(dx, word_ptr(si), 0x7Fi32).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm8, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Imul_r16_rm16_imm16
		test_instr(16, |a| a.imul_3(dx, word_ptr(si), 0x40B7i32).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op2 >= i8::MIN as i32 && op2 <= i8::MAX as i32 */ {
		// Imul_r16_rm16_imm8
		test_instr(16, |a| a.imul_3(dx, word_ptr(si), -0x80).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm8, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Imul_r16_rm16_imm8
		test_instr(16, |a| a.imul_3(dx, word_ptr(si), 0x7F).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm8, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Imul_r16_rm16_imm16
		test_instr(16, |a| a.imul_3(dx, word_ptr(si), 0x40B7).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn imul_r32_m_i() {
	/* if op2 >= i8::MIN as i32 && op2 <= i8::MAX as i32 */ {
		// Imul_r32_rm32_imm8
		test_instr(16, |a| a.imul_3(edx, dword_ptr(si), -0x80i32).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm8, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Imul_r32_rm32_imm8
		test_instr(16, |a| a.imul_3(edx, dword_ptr(si), 0x7Fi32).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm8, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Imul_r32_rm32_imm32
		test_instr(16, |a| a.imul_3(edx, dword_ptr(si), 0x7FFFFFFFi32).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op2 >= i8::MIN as i32 && op2 <= i8::MAX as i32 */ {
		// Imul_r32_rm32_imm8
		test_instr(16, |a| a.imul_3(edx, dword_ptr(si), -0x80).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm8, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Imul_r32_rm32_imm8
		test_instr(16, |a| a.imul_3(edx, dword_ptr(si), 0x7F).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm8, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Imul_r32_rm32_imm32
		test_instr(16, |a| a.imul_3(edx, dword_ptr(si), 0x7FFFFFFF).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn imul_r16_r16_u() {
	/* if op2 <= i8::MAX as u32 || (0xFF80 <= op2 && op2 <= 0xFFFF) */ {
		// Imul_r16_rm16_imm8
		test_instr(16, |a| a.imul_3(dx, bx, 0xFF80u32).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm8, Register::DX, Register::BX, 0xFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Imul_r16_rm16_imm8
		test_instr(16, |a| a.imul_3(dx, bx, 0x7Fu32).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm8, Register::DX, Register::BX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Imul_r16_rm16_imm16
		test_instr(16, |a| a.imul_3(dx, bx, 0x40B7u32).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm16, Register::DX, Register::BX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn imul_r32_r32_u() {
	/* if op2 <= i8::MAX as u32 || 0xFFFF_FF80 <= op2 */ {
		// Imul_r32_rm32_imm8
		test_instr(16, |a| a.imul_3(edx, ebx, 0xFFFFFF80u32).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm8, Register::EDX, Register::EBX, 0xFFFFFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Imul_r32_rm32_imm8
		test_instr(16, |a| a.imul_3(edx, ebx, 0x7Fu32).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm8, Register::EDX, Register::EBX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Imul_r32_rm32_imm32
		test_instr(16, |a| a.imul_3(edx, ebx, 0x7FFFFFFFu32).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm32, Register::EDX, Register::EBX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn imul_r16_m_u() {
	/* if op2 <= i8::MAX as u32 || (0xFF80 <= op2 && op2 <= 0xFFFF) */ {
		// Imul_r16_rm16_imm8
		test_instr(16, |a| a.imul_3(dx, word_ptr(si), 0xFF80u32).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm8, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Imul_r16_rm16_imm8
		test_instr(16, |a| a.imul_3(dx, word_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm8, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Imul_r16_rm16_imm16
		test_instr(16, |a| a.imul_3(dx, word_ptr(si), 0x40B7u32).unwrap(),
			Instruction::with3(Code::Imul_r16_rm16_imm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn imul_r32_m_u() {
	/* if op2 <= i8::MAX as u32 || 0xFFFF_FF80 <= op2 */ {
		// Imul_r32_rm32_imm8
		test_instr(16, |a| a.imul_3(edx, dword_ptr(si), 0xFFFFFF80u32).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm8, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFFFFFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Imul_r32_rm32_imm8
		test_instr(16, |a| a.imul_3(edx, dword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm8, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Imul_r32_rm32_imm32
		test_instr(16, |a| a.imul_3(edx, dword_ptr(si), 0x7FFFFFFFu32).unwrap(),
			Instruction::with3(Code::Imul_r32_rm32_imm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn in_r8_r16() {
	// In_AL_DX
	test_instr(16, |a| a.in_(al, dx).unwrap(),
		Instruction::with2(Code::In_AL_DX, Register::AL, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn in_r16_r16() {
	// In_AX_DX
	test_instr(16, |a| a.in_(ax, dx).unwrap(),
		Instruction::with2(Code::In_AX_DX, Register::AX, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn in_r32_r16() {
	// In_EAX_DX
	test_instr(16, |a| a.in_(eax, dx).unwrap(),
		Instruction::with2(Code::In_EAX_DX, Register::EAX, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn in_r8_i() {
	// In_AL_imm8
	test_instr(16, |a| a.in_(al, -5i32).unwrap(),
		Instruction::with2(Code::In_AL_imm8, Register::AL, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// In_AL_imm8
	test_instr(16, |a| a.in_(al, -5).unwrap(),
		Instruction::with2(Code::In_AL_imm8, Register::AL, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn in_r16_i() {
	// In_AX_imm8
	test_instr(16, |a| a.in_(ax, -5i32).unwrap(),
		Instruction::with2(Code::In_AX_imm8, Register::AX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// In_AX_imm8
	test_instr(16, |a| a.in_(ax, -5).unwrap(),
		Instruction::with2(Code::In_AX_imm8, Register::AX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn in_r32_i() {
	// In_EAX_imm8
	test_instr(16, |a| a.in_(eax, -5i32).unwrap(),
		Instruction::with2(Code::In_EAX_imm8, Register::EAX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// In_EAX_imm8
	test_instr(16, |a| a.in_(eax, -5).unwrap(),
		Instruction::with2(Code::In_EAX_imm8, Register::EAX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn in_r8_u() {
	// In_AL_imm8
	test_instr(16, |a| a.in_(al, 0x7Fu32).unwrap(),
		Instruction::with2(Code::In_AL_imm8, Register::AL, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn in_r16_u() {
	// In_AX_imm8
	test_instr(16, |a| a.in_(ax, 0x7Fu32).unwrap(),
		Instruction::with2(Code::In_AX_imm8, Register::AX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn in_r32_u() {
	// In_EAX_imm8
	test_instr(16, |a| a.in_(eax, 0x7Fu32).unwrap(),
		Instruction::with2(Code::In_EAX_imm8, Register::EAX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn inc_r8() {
	// Inc_rm8
	test_instr(16, |a| a.inc(dl).unwrap(),
		Instruction::with1(Code::Inc_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn inc_r16() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else */ {
		// Inc_r16
		test_instr(16, |a| a.inc(dx).unwrap(),
			Instruction::with1(Code::Inc_r16, Register::DX).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn inc_r32() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else */ {
		// Inc_r32
		test_instr(16, |a| a.inc(edx).unwrap(),
			Instruction::with1(Code::Inc_r32, Register::EDX).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn inc_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Inc_rm64 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Inc_rm32
		test_instr(16, |a| a.inc(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Inc_rm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Inc_rm16
		test_instr(16, |a| a.inc(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Inc_rm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Inc_rm8
		test_instr(16, |a| a.inc(byte_ptr(di)).unwrap(),
			Instruction::with1(Code::Inc_rm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Inc_rm8
		test_invalid_instr(16, |a| assert!(a.inc(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn incsspd_r32() {
	// Incsspd_r32
	test_instr(16, |a| a.incsspd(edx).unwrap(),
		Instruction::with1(Code::Incsspd_r32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn insb() {
	// Insb_m8_DX
	test_instr(16, |a| a.insb().unwrap(),
		Instruction::with_insb(16, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn insd() {
	// Insd_m32_DX
	test_instr(16, |a| a.insd().unwrap(),
		Instruction::with_insd(16, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn insertps_xmm_xmm_i() {
	// Insertps_xmm_xmmm32_imm8
	test_instr(16, |a| a.insertps(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Insertps_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Insertps_xmm_xmmm32_imm8
	test_instr(16, |a| a.insertps(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Insertps_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn insertps_xmm_m_i() {
	// Insertps_xmm_xmmm32_imm8
	test_instr(16, |a| a.insertps(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Insertps_xmm_xmmm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Insertps_xmm_xmmm32_imm8
	test_instr(16, |a| a.insertps(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Insertps_xmm_xmmm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn insertps_xmm_xmm_u() {
	// Insertps_xmm_xmmm32_imm8
	test_instr(16, |a| a.insertps(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Insertps_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn insertps_xmm_m_u() {
	// Insertps_xmm_xmmm32_imm8
	test_instr(16, |a| a.insertps(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Insertps_xmm_xmmm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn insertq_xmm_xmm() {
	// Insertq_xmm_xmm
	test_instr(16, |a| a.insertq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Insertq_xmm_xmm, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn insertq_xmm_xmm_i_i() {
	// Insertq_xmm_xmm_imm8_imm8
	test_instr(16, |a| a.insertq_4(xmm2, xmm3, -5i32, -5i32).unwrap(),
		Instruction::with4(Code::Insertq_xmm_xmm_imm8_imm8, Register::XMM2, Register::XMM3, -5i32, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Insertq_xmm_xmm_imm8_imm8
	test_instr(16, |a| a.insertq_4(xmm2, xmm3, -5, -5).unwrap(),
		Instruction::with4(Code::Insertq_xmm_xmm_imm8_imm8, Register::XMM2, Register::XMM3, -5i32, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn insertq_xmm_xmm_u_u() {
	// Insertq_xmm_xmm_imm8_imm8
	test_instr(16, |a| a.insertq_4(xmm2, xmm3, 0x7Fu32, 0x7Fu32).unwrap(),
		Instruction::with4(Code::Insertq_xmm_xmm_imm8_imm8, Register::XMM2, Register::XMM3, 0x7Fu32, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn insw() {
	// Insw_m16_DX
	test_instr(16, |a| a.insw().unwrap(),
		Instruction::with_insw(16, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn int_i() {
	// Int_imm8
	test_instr(16, |a| a.int(-5i32).unwrap(),
		Instruction::with1(Code::Int_imm8, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Int_imm8
	test_instr(16, |a| a.int(-5).unwrap(),
		Instruction::with1(Code::Int_imm8, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn int_u() {
	// Int_imm8
	test_instr(16, |a| a.int(0x7Fu32).unwrap(),
		Instruction::with1(Code::Int_imm8, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn int1() {
	// Int1
	test_instr(16, |a| a.int1().unwrap(),
		Instruction::with(Code::Int1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn int3() {
	// Int3
	test_instr(16, |a| a.int3().unwrap(),
		Instruction::with(Code::Int3),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn into() {
	// Into
	test_instr(16, |a| a.into().unwrap(),
		Instruction::with(Code::Into),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn invd() {
	// Invd
	test_instr(16, |a| a.invd().unwrap(),
		Instruction::with(Code::Invd),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn invept_r32_m() {
	// Invept_r32_m128
	test_instr(16, |a| a.invept(edx, ptr(si)).unwrap(),
		Instruction::with2(Code::Invept_r32_m128, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn invlpg_m() {
	// Invlpg_m
	test_instr(16, |a| a.invlpg(ptr(si)).unwrap(),
		Instruction::with1(Code::Invlpg_m, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn invlpga() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Invlpgaw
		test_instr(16, |a| a.invlpga().unwrap(),
			Instruction::with(Code::Invlpgaw),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn invlpgb() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Invlpgbw
		test_instr(16, |a| a.invlpgb().unwrap(),
			Instruction::with(Code::Invlpgbw),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn invpcid_r32_m() {
	// Invpcid_r32_m128
	test_instr(16, |a| a.invpcid(edx, ptr(si)).unwrap(),
		Instruction::with2(Code::Invpcid_r32_m128, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn invvpid_r32_m() {
	// Invvpid_r32_m128
	test_instr(16, |a| a.invvpid(edx, ptr(si)).unwrap(),
		Instruction::with2(Code::Invvpid_r32_m128, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn iret() {
	// Iretw
	test_instr(16, |a| a.iret().unwrap(),
		Instruction::with(Code::Iretw),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn iretd() {
	// Iretd
	test_instr(16, |a| a.iretd().unwrap(),
		Instruction::with(Code::Iretd),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ja_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Ja_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.ja(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Ja_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Ja_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.ja(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Ja_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn ja_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Ja_rel8_16
			test_instr(16, |a| a.ja(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Ja_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Ja_rel16
		test_instr(16, |a| a.ja(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Ja_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jae_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jae_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jae(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jae_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jae_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jae(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jae_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jae_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jae_rel8_16
			test_instr(16, |a| a.jae(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jae_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jae_rel16
		test_instr(16, |a| a.jae(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jae_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jb_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jb_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jb(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jb_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jb_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jb(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jb_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jb_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jb_rel8_16
			test_instr(16, |a| a.jb(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jb_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jb_rel16
		test_instr(16, |a| a.jb(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jb_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jbe_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jbe_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jbe(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jbe_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jbe_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jbe(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jbe_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jbe_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jbe_rel8_16
			test_instr(16, |a| a.jbe(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jbe_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jbe_rel16
		test_instr(16, |a| a.jbe(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jbe_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jc_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jb_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jc(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jb_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jb_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jc(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jb_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jc_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jb_rel8_16
			test_instr(16, |a| a.jc(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jb_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jb_rel16
		test_instr(16, |a| a.jc(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jb_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jcxz_l() {
	// Jcxz_rel8_16
	test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jcxz(lbl).unwrap() },
		assign_label(Instruction::with_branch(Code::Jcxz_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
		TestInstrFlags::BRANCH, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn jcxz_lu64() {
	// Jcxz_rel8_16
	test_instr(16, |a| a.jcxz(0x31D0u64).unwrap(),
		Instruction::with_branch(Code::Jcxz_rel8_16, 0x31D0u64).unwrap(),
		TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn je_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Je_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.je(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Je_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Je_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.je(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Je_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn je_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Je_rel8_16
			test_instr(16, |a| a.je(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Je_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Je_rel16
		test_instr(16, |a| a.je(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Je_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jecxz_l() {
	// Jecxz_rel8_32
	test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jecxz(lbl).unwrap() },
		assign_label(Instruction::with_branch(Code::Jecxz_rel8_32, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
		TestInstrFlags::BRANCH, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn jg_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jg_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jg(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jg_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jg_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jg(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jg_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jg_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jg_rel8_16
			test_instr(16, |a| a.jg(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jg_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jg_rel16
		test_instr(16, |a| a.jg(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jg_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jge_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jge_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jge(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jge_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jge_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jge(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jge_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jge_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jge_rel8_16
			test_instr(16, |a| a.jge(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jge_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jge_rel16
		test_instr(16, |a| a.jge(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jge_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jl_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jl_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jl(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jl_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jl_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jl(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jl_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jl_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jl_rel8_16
			test_instr(16, |a| a.jl(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jl_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jl_rel16
		test_instr(16, |a| a.jl(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jl_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jle_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jle_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jle(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jle_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jle_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jle(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jle_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jle_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jle_rel8_16
			test_instr(16, |a| a.jle(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jle_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jle_rel16
		test_instr(16, |a| a.jle(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jle_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jmp_r16() {
	// Jmp_rm16
	test_instr(16, |a| a.jmp(dx).unwrap(),
		Instruction::with1(Code::Jmp_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn jmp_r32() {
	// Jmp_rm32
	test_instr(16, |a| a.jmp(edx).unwrap(),
		Instruction::with1(Code::Jmp_rm32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn jmp_m() {
	/* if op0.size() == MemoryOperandSize::Tbyte */ {
		// Skipping Jmp_m1664 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Jmp_rm64 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Fword */ {
		// Jmp_m1632
		test_instr(16, |a| a.jmp(fword_ptr(di)).unwrap(),
			Instruction::with1(Code::Jmp_m1632, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jmp_m1616
			test_instr(16, |a| a.jmp(dword_ptr(di)).unwrap(),
				Instruction::with1(Code::Jmp_m1616, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Jmp_rm16
		test_instr(16, |a| a.jmp(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Jmp_rm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Jmp_rm16
		test_invalid_instr(16, |a| assert!(a.jmp(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jmp_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jmp_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jmp(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jmp_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jmp_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jmp(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jmp_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jmp_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jmp_rel8_16
			test_instr(16, |a| a.jmp(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jmp_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jmp_rel16
		test_instr(16, |a| a.jmp(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jmp_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jmpe_r16() {
	// Jmpe_rm16
	test_instr(16, |a| a.jmpe(dx).unwrap(),
		Instruction::with1(Code::Jmpe_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::JMPE);
}

#[test]
#[rustfmt::skip]
fn jmpe_r32() {
	// Jmpe_rm32
	test_instr(16, |a| a.jmpe(edx).unwrap(),
		Instruction::with1(Code::Jmpe_rm32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::JMPE);
}

#[test]
#[rustfmt::skip]
fn jmpe_m() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jmpe_rm16
		test_instr(16, |a| a.jmpe(word_ptr(si)).unwrap(),
			Instruction::with1(Code::Jmpe_rm16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::JMPE);
	}
}

#[test]
#[rustfmt::skip]
fn jmpe_l() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jmpe_disp16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jmpe(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jmpe_disp16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::BRANCH, DecoderOptions::JMPE);
	}
}

#[test]
#[rustfmt::skip]
fn jmpe_lu64() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jmpe_disp16
		test_instr(16, |a| a.jmpe(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jmpe_disp16, 0x31D0u64).unwrap(),
			TestInstrFlags::BRANCH_U64, DecoderOptions::JMPE);
	}
}

#[test]
#[rustfmt::skip]
fn jna_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jbe_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jna(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jbe_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jbe_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jna(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jbe_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jna_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jbe_rel8_16
			test_instr(16, |a| a.jna(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jbe_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jbe_rel16
		test_instr(16, |a| a.jna(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jbe_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnae_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jb_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnae(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jb_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jb_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnae(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jb_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnae_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jb_rel8_16
			test_instr(16, |a| a.jnae(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jb_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jb_rel16
		test_instr(16, |a| a.jnae(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jb_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnb_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jae_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnb(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jae_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jae_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnb(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jae_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnb_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jae_rel8_16
			test_instr(16, |a| a.jnb(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jae_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jae_rel16
		test_instr(16, |a| a.jnb(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jae_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnbe_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Ja_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnbe(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Ja_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Ja_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnbe(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Ja_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnbe_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Ja_rel8_16
			test_instr(16, |a| a.jnbe(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Ja_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Ja_rel16
		test_instr(16, |a| a.jnbe(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Ja_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnc_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jae_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnc(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jae_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jae_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnc(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jae_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnc_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jae_rel8_16
			test_instr(16, |a| a.jnc(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jae_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jae_rel16
		test_instr(16, |a| a.jnc(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jae_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jne_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jne_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jne(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jne_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jne_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jne(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jne_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jne_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jne_rel8_16
			test_instr(16, |a| a.jne(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jne_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jne_rel16
		test_instr(16, |a| a.jne(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jne_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jng_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jle_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jng(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jle_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jle_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jng(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jle_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jng_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jle_rel8_16
			test_instr(16, |a| a.jng(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jle_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jle_rel16
		test_instr(16, |a| a.jng(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jle_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnge_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jl_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnge(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jl_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jl_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnge(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jl_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnge_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jl_rel8_16
			test_instr(16, |a| a.jnge(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jl_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jl_rel16
		test_instr(16, |a| a.jnge(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jl_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnl_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jge_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnl(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jge_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jge_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnl(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jge_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnl_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jge_rel8_16
			test_instr(16, |a| a.jnl(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jge_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jge_rel16
		test_instr(16, |a| a.jnl(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jge_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnle_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jg_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnle(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jg_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jg_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnle(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jg_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnle_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jg_rel8_16
			test_instr(16, |a| a.jnle(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jg_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jg_rel16
		test_instr(16, |a| a.jnle(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jg_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jno_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jno_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jno(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jno_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jno_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jno(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jno_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jno_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jno_rel8_16
			test_instr(16, |a| a.jno(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jno_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jno_rel16
		test_instr(16, |a| a.jno(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jno_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnp_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jnp_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnp(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jnp_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jnp_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnp(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jnp_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnp_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jnp_rel8_16
			test_instr(16, |a| a.jnp(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jnp_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jnp_rel16
		test_instr(16, |a| a.jnp(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jnp_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jns_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jns_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jns(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jns_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jns_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jns(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jns_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jns_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jns_rel8_16
			test_instr(16, |a| a.jns(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jns_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jns_rel16
		test_instr(16, |a| a.jns(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jns_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnz_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jne_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnz(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jne_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jne_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jnz(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jne_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jnz_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jne_rel8_16
			test_instr(16, |a| a.jnz(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jne_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jne_rel16
		test_instr(16, |a| a.jnz(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jne_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jo_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jo_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jo(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jo_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jo_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jo(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jo_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jo_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jo_rel8_16
			test_instr(16, |a| a.jo(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jo_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jo_rel16
		test_instr(16, |a| a.jo(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jo_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jp_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jp_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jp(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jp_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jp_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jp(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jp_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jp_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jp_rel8_16
			test_instr(16, |a| a.jp(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jp_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jp_rel16
		test_instr(16, |a| a.jp(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jp_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jpe_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jp_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jpe(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jp_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jp_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jpe(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jp_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jpe_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jp_rel8_16
			test_instr(16, |a| a.jpe(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jp_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jp_rel16
		test_instr(16, |a| a.jpe(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jp_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jpo_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jnp_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jpo(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Jnp_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jnp_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jpo(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Jnp_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jpo_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Jnp_rel8_16
			test_instr(16, |a| a.jpo(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Jnp_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Jnp_rel16
		test_instr(16, |a| a.jpo(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Jnp_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn js_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Js_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.js(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Js_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Js_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.js(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Js_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn js_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Js_rel8_16
			test_instr(16, |a| a.js(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Js_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Js_rel16
		test_instr(16, |a| a.js(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Js_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jz_l() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Je_rel8_16
			test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jz(lbl).unwrap() },
				assign_label(Instruction::with_branch(Code::Je_rel8_16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Je_rel16
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.jz(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Je_rel16, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn jz_lu64() {
	/* if self.prefer_short_branch() */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Je_rel8_16
			test_instr(16, |a| a.jz(0x31D0u64).unwrap(),
				Instruction::with_branch(Code::Je_rel8_16, 0x31D0u64).unwrap(),
				TestInstrFlags::PREFER_SHORT_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
		}
	} /* else if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Je_rel16
		test_instr(16, |a| a.jz(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Je_rel16, 0x31D0u64).unwrap(),
			TestInstrFlags::PREFER_NEAR_BRANCH | TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn kaddb_kr_kr_kr() {
	// VEX_Kaddb_kr_kr_kr
	test_instr(16, |a| a.kaddb(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kaddb_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kaddd_kr_kr_kr() {
	// VEX_Kaddd_kr_kr_kr
	test_instr(16, |a| a.kaddd(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kaddd_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kaddq_kr_kr_kr() {
	// VEX_Kaddq_kr_kr_kr
	test_instr(16, |a| a.kaddq(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kaddq_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kaddw_kr_kr_kr() {
	// VEX_Kaddw_kr_kr_kr
	test_instr(16, |a| a.kaddw(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kaddw_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kandb_kr_kr_kr() {
	// VEX_Kandb_kr_kr_kr
	test_instr(16, |a| a.kandb(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kandb_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kandd_kr_kr_kr() {
	// VEX_Kandd_kr_kr_kr
	test_instr(16, |a| a.kandd(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kandd_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kandnb_kr_kr_kr() {
	// VEX_Kandnb_kr_kr_kr
	test_instr(16, |a| a.kandnb(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kandnb_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kandnd_kr_kr_kr() {
	// VEX_Kandnd_kr_kr_kr
	test_instr(16, |a| a.kandnd(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kandnd_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kandnq_kr_kr_kr() {
	// VEX_Kandnq_kr_kr_kr
	test_instr(16, |a| a.kandnq(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kandnq_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kandnw_kr_kr_kr() {
	// VEX_Kandnw_kr_kr_kr
	test_instr(16, |a| a.kandnw(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kandnw_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kandq_kr_kr_kr() {
	// VEX_Kandq_kr_kr_kr
	test_instr(16, |a| a.kandq(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kandq_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kandw_kr_kr_kr() {
	// VEX_Kandw_kr_kr_kr
	test_instr(16, |a| a.kandw(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kandw_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovb_kr_r32() {
	// VEX_Kmovb_kr_r32
	test_instr(16, |a| a.kmovb(k2, ebx).unwrap(),
		Instruction::with2(Code::VEX_Kmovb_kr_r32, Register::K2, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovb_r32_kr() {
	// VEX_Kmovb_r32_kr
	test_instr(16, |a| a.kmovb(edx, k3).unwrap(),
		Instruction::with2(Code::VEX_Kmovb_r32_kr, Register::EDX, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovb_kr_kr() {
	// VEX_Kmovb_kr_km8
	test_instr(16, |a| a.kmovb(k2, k3).unwrap(),
		Instruction::with2(Code::VEX_Kmovb_kr_km8, Register::K2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovb_m_kr() {
	// VEX_Kmovb_m8_kr
	test_instr(16, |a| a.kmovb(ptr(si), k3).unwrap(),
		Instruction::with2(Code::VEX_Kmovb_m8_kr, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovb_kr_m() {
	// VEX_Kmovb_kr_km8
	test_instr(16, |a| a.kmovb(k2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Kmovb_kr_km8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovd_kr_r32() {
	// VEX_Kmovd_kr_r32
	test_instr(16, |a| a.kmovd(k2, ebx).unwrap(),
		Instruction::with2(Code::VEX_Kmovd_kr_r32, Register::K2, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovd_r32_kr() {
	// VEX_Kmovd_r32_kr
	test_instr(16, |a| a.kmovd(edx, k3).unwrap(),
		Instruction::with2(Code::VEX_Kmovd_r32_kr, Register::EDX, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovd_kr_kr() {
	// VEX_Kmovd_kr_km32
	test_instr(16, |a| a.kmovd(k2, k3).unwrap(),
		Instruction::with2(Code::VEX_Kmovd_kr_km32, Register::K2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovd_m_kr() {
	// VEX_Kmovd_m32_kr
	test_instr(16, |a| a.kmovd(ptr(si), k3).unwrap(),
		Instruction::with2(Code::VEX_Kmovd_m32_kr, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovd_kr_m() {
	// VEX_Kmovd_kr_km32
	test_instr(16, |a| a.kmovd(k2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Kmovd_kr_km32, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovq_kr_kr() {
	// VEX_Kmovq_kr_km64
	test_instr(16, |a| a.kmovq(k2, k3).unwrap(),
		Instruction::with2(Code::VEX_Kmovq_kr_km64, Register::K2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovq_m_kr() {
	// VEX_Kmovq_m64_kr
	test_instr(16, |a| a.kmovq(ptr(si), k3).unwrap(),
		Instruction::with2(Code::VEX_Kmovq_m64_kr, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovq_kr_m() {
	// VEX_Kmovq_kr_km64
	test_instr(16, |a| a.kmovq(k2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Kmovq_kr_km64, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovw_kr_r32() {
	// VEX_Kmovw_kr_r32
	test_instr(16, |a| a.kmovw(k2, ebx).unwrap(),
		Instruction::with2(Code::VEX_Kmovw_kr_r32, Register::K2, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovw_r32_kr() {
	// VEX_Kmovw_r32_kr
	test_instr(16, |a| a.kmovw(edx, k3).unwrap(),
		Instruction::with2(Code::VEX_Kmovw_r32_kr, Register::EDX, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovw_kr_kr() {
	// VEX_Kmovw_kr_km16
	test_instr(16, |a| a.kmovw(k2, k3).unwrap(),
		Instruction::with2(Code::VEX_Kmovw_kr_km16, Register::K2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovw_m_kr() {
	// VEX_Kmovw_m16_kr
	test_instr(16, |a| a.kmovw(ptr(si), k3).unwrap(),
		Instruction::with2(Code::VEX_Kmovw_m16_kr, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kmovw_kr_m() {
	// VEX_Kmovw_kr_km16
	test_instr(16, |a| a.kmovw(k2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Kmovw_kr_km16, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn knotb_kr_kr() {
	// VEX_Knotb_kr_kr
	test_instr(16, |a| a.knotb(k2, k3).unwrap(),
		Instruction::with2(Code::VEX_Knotb_kr_kr, Register::K2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn knotd_kr_kr() {
	// VEX_Knotd_kr_kr
	test_instr(16, |a| a.knotd(k2, k3).unwrap(),
		Instruction::with2(Code::VEX_Knotd_kr_kr, Register::K2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn knotq_kr_kr() {
	// VEX_Knotq_kr_kr
	test_instr(16, |a| a.knotq(k2, k3).unwrap(),
		Instruction::with2(Code::VEX_Knotq_kr_kr, Register::K2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn knotw_kr_kr() {
	// VEX_Knotw_kr_kr
	test_instr(16, |a| a.knotw(k2, k3).unwrap(),
		Instruction::with2(Code::VEX_Knotw_kr_kr, Register::K2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn korb_kr_kr_kr() {
	// VEX_Korb_kr_kr_kr
	test_instr(16, |a| a.korb(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Korb_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kord_kr_kr_kr() {
	// VEX_Kord_kr_kr_kr
	test_instr(16, |a| a.kord(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kord_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn korq_kr_kr_kr() {
	// VEX_Korq_kr_kr_kr
	test_instr(16, |a| a.korq(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Korq_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kortestb_kr_kr() {
	// VEX_Kortestb_kr_kr
	test_instr(16, |a| a.kortestb(k2, k3).unwrap(),
		Instruction::with2(Code::VEX_Kortestb_kr_kr, Register::K2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kortestd_kr_kr() {
	// VEX_Kortestd_kr_kr
	test_instr(16, |a| a.kortestd(k2, k3).unwrap(),
		Instruction::with2(Code::VEX_Kortestd_kr_kr, Register::K2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kortestq_kr_kr() {
	// VEX_Kortestq_kr_kr
	test_instr(16, |a| a.kortestq(k2, k3).unwrap(),
		Instruction::with2(Code::VEX_Kortestq_kr_kr, Register::K2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kortestw_kr_kr() {
	// VEX_Kortestw_kr_kr
	test_instr(16, |a| a.kortestw(k2, k3).unwrap(),
		Instruction::with2(Code::VEX_Kortestw_kr_kr, Register::K2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn korw_kr_kr_kr() {
	// VEX_Korw_kr_kr_kr
	test_instr(16, |a| a.korw(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Korw_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kshiftlb_kr_kr_i() {
	// VEX_Kshiftlb_kr_kr_imm8
	test_instr(16, |a| a.kshiftlb(k2, k3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Kshiftlb_kr_kr_imm8, Register::K2, Register::K3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Kshiftlb_kr_kr_imm8
	test_instr(16, |a| a.kshiftlb(k2, k3, -5).unwrap(),
		Instruction::with3(Code::VEX_Kshiftlb_kr_kr_imm8, Register::K2, Register::K3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kshiftlb_kr_kr_u() {
	// VEX_Kshiftlb_kr_kr_imm8
	test_instr(16, |a| a.kshiftlb(k2, k3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Kshiftlb_kr_kr_imm8, Register::K2, Register::K3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kshiftld_kr_kr_i() {
	// VEX_Kshiftld_kr_kr_imm8
	test_instr(16, |a| a.kshiftld(k2, k3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Kshiftld_kr_kr_imm8, Register::K2, Register::K3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Kshiftld_kr_kr_imm8
	test_instr(16, |a| a.kshiftld(k2, k3, -5).unwrap(),
		Instruction::with3(Code::VEX_Kshiftld_kr_kr_imm8, Register::K2, Register::K3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kshiftld_kr_kr_u() {
	// VEX_Kshiftld_kr_kr_imm8
	test_instr(16, |a| a.kshiftld(k2, k3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Kshiftld_kr_kr_imm8, Register::K2, Register::K3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kshiftlq_kr_kr_i() {
	// VEX_Kshiftlq_kr_kr_imm8
	test_instr(16, |a| a.kshiftlq(k2, k3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Kshiftlq_kr_kr_imm8, Register::K2, Register::K3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Kshiftlq_kr_kr_imm8
	test_instr(16, |a| a.kshiftlq(k2, k3, -5).unwrap(),
		Instruction::with3(Code::VEX_Kshiftlq_kr_kr_imm8, Register::K2, Register::K3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kshiftlq_kr_kr_u() {
	// VEX_Kshiftlq_kr_kr_imm8
	test_instr(16, |a| a.kshiftlq(k2, k3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Kshiftlq_kr_kr_imm8, Register::K2, Register::K3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kshiftlw_kr_kr_i() {
	// VEX_Kshiftlw_kr_kr_imm8
	test_instr(16, |a| a.kshiftlw(k2, k3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Kshiftlw_kr_kr_imm8, Register::K2, Register::K3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Kshiftlw_kr_kr_imm8
	test_instr(16, |a| a.kshiftlw(k2, k3, -5).unwrap(),
		Instruction::with3(Code::VEX_Kshiftlw_kr_kr_imm8, Register::K2, Register::K3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kshiftlw_kr_kr_u() {
	// VEX_Kshiftlw_kr_kr_imm8
	test_instr(16, |a| a.kshiftlw(k2, k3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Kshiftlw_kr_kr_imm8, Register::K2, Register::K3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kshiftrb_kr_kr_i() {
	// VEX_Kshiftrb_kr_kr_imm8
	test_instr(16, |a| a.kshiftrb(k2, k3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Kshiftrb_kr_kr_imm8, Register::K2, Register::K3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Kshiftrb_kr_kr_imm8
	test_instr(16, |a| a.kshiftrb(k2, k3, -5).unwrap(),
		Instruction::with3(Code::VEX_Kshiftrb_kr_kr_imm8, Register::K2, Register::K3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kshiftrb_kr_kr_u() {
	// VEX_Kshiftrb_kr_kr_imm8
	test_instr(16, |a| a.kshiftrb(k2, k3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Kshiftrb_kr_kr_imm8, Register::K2, Register::K3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kshiftrd_kr_kr_i() {
	// VEX_Kshiftrd_kr_kr_imm8
	test_instr(16, |a| a.kshiftrd(k2, k3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Kshiftrd_kr_kr_imm8, Register::K2, Register::K3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Kshiftrd_kr_kr_imm8
	test_instr(16, |a| a.kshiftrd(k2, k3, -5).unwrap(),
		Instruction::with3(Code::VEX_Kshiftrd_kr_kr_imm8, Register::K2, Register::K3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kshiftrd_kr_kr_u() {
	// VEX_Kshiftrd_kr_kr_imm8
	test_instr(16, |a| a.kshiftrd(k2, k3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Kshiftrd_kr_kr_imm8, Register::K2, Register::K3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kshiftrq_kr_kr_i() {
	// VEX_Kshiftrq_kr_kr_imm8
	test_instr(16, |a| a.kshiftrq(k2, k3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Kshiftrq_kr_kr_imm8, Register::K2, Register::K3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Kshiftrq_kr_kr_imm8
	test_instr(16, |a| a.kshiftrq(k2, k3, -5).unwrap(),
		Instruction::with3(Code::VEX_Kshiftrq_kr_kr_imm8, Register::K2, Register::K3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kshiftrq_kr_kr_u() {
	// VEX_Kshiftrq_kr_kr_imm8
	test_instr(16, |a| a.kshiftrq(k2, k3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Kshiftrq_kr_kr_imm8, Register::K2, Register::K3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kshiftrw_kr_kr_i() {
	// VEX_Kshiftrw_kr_kr_imm8
	test_instr(16, |a| a.kshiftrw(k2, k3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Kshiftrw_kr_kr_imm8, Register::K2, Register::K3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Kshiftrw_kr_kr_imm8
	test_instr(16, |a| a.kshiftrw(k2, k3, -5).unwrap(),
		Instruction::with3(Code::VEX_Kshiftrw_kr_kr_imm8, Register::K2, Register::K3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kshiftrw_kr_kr_u() {
	// VEX_Kshiftrw_kr_kr_imm8
	test_instr(16, |a| a.kshiftrw(k2, k3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Kshiftrw_kr_kr_imm8, Register::K2, Register::K3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ktestb_kr_kr() {
	// VEX_Ktestb_kr_kr
	test_instr(16, |a| a.ktestb(k2, k3).unwrap(),
		Instruction::with2(Code::VEX_Ktestb_kr_kr, Register::K2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ktestd_kr_kr() {
	// VEX_Ktestd_kr_kr
	test_instr(16, |a| a.ktestd(k2, k3).unwrap(),
		Instruction::with2(Code::VEX_Ktestd_kr_kr, Register::K2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ktestq_kr_kr() {
	// VEX_Ktestq_kr_kr
	test_instr(16, |a| a.ktestq(k2, k3).unwrap(),
		Instruction::with2(Code::VEX_Ktestq_kr_kr, Register::K2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ktestw_kr_kr() {
	// VEX_Ktestw_kr_kr
	test_instr(16, |a| a.ktestw(k2, k3).unwrap(),
		Instruction::with2(Code::VEX_Ktestw_kr_kr, Register::K2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kunpckbw_kr_kr_kr() {
	// VEX_Kunpckbw_kr_kr_kr
	test_instr(16, |a| a.kunpckbw(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kunpckbw_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kunpckdq_kr_kr_kr() {
	// VEX_Kunpckdq_kr_kr_kr
	test_instr(16, |a| a.kunpckdq(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kunpckdq_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kunpckwd_kr_kr_kr() {
	// VEX_Kunpckwd_kr_kr_kr
	test_instr(16, |a| a.kunpckwd(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kunpckwd_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kxnorb_kr_kr_kr() {
	// VEX_Kxnorb_kr_kr_kr
	test_instr(16, |a| a.kxnorb(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kxnorb_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kxnord_kr_kr_kr() {
	// VEX_Kxnord_kr_kr_kr
	test_instr(16, |a| a.kxnord(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kxnord_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kxnorq_kr_kr_kr() {
	// VEX_Kxnorq_kr_kr_kr
	test_instr(16, |a| a.kxnorq(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kxnorq_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kxnorw_kr_kr_kr() {
	// VEX_Kxnorw_kr_kr_kr
	test_instr(16, |a| a.kxnorw(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kxnorw_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kxorb_kr_kr_kr() {
	// VEX_Kxorb_kr_kr_kr
	test_instr(16, |a| a.kxorb(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kxorb_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kxord_kr_kr_kr() {
	// VEX_Kxord_kr_kr_kr
	test_instr(16, |a| a.kxord(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kxord_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kxorq_kr_kr_kr() {
	// VEX_Kxorq_kr_kr_kr
	test_instr(16, |a| a.kxorq(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kxorq_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn kxorw_kr_kr_kr() {
	// VEX_Kxorw_kr_kr_kr
	test_instr(16, |a| a.kxorw(k2, k3, k4).unwrap(),
		Instruction::with3(Code::VEX_Kxorw_kr_kr_kr, Register::K2, Register::K3, Register::K4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lahf() {
	// Lahf
	test_instr(16, |a| a.lahf().unwrap(),
		Instruction::with(Code::Lahf),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lar_r16_r16() {
	// Lar_r16_rm16
	test_instr(16, |a| a.lar(dx, bx).unwrap(),
		Instruction::with2(Code::Lar_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lar_r32_r32() {
	// Lar_r32_r32m16
	test_instr(16, |a| a.lar(edx, ebx).unwrap(),
		Instruction::with2(Code::Lar_r32_r32m16, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lar_r16_m() {
	// Lar_r16_rm16
	test_instr(16, |a| a.lar(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Lar_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lar_r32_m() {
	// Lar_r32_r32m16
	test_instr(16, |a| a.lar(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Lar_r32_r32m16, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lddqu_xmm_m() {
	// Lddqu_xmm_m128
	test_instr(16, |a| a.lddqu(xmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::Lddqu_xmm_m128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ldmxcsr_m() {
	// Ldmxcsr_m32
	test_instr(16, |a| a.ldmxcsr(ptr(si)).unwrap(),
		Instruction::with1(Code::Ldmxcsr_m32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lds_r16_m() {
	// Lds_r16_m1616
	test_instr(16, |a| a.lds(dx, ptr(si)).unwrap(),
		Instruction::with2(Code::Lds_r16_m1616, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lds_r32_m() {
	// Lds_r32_m1632
	test_instr(16, |a| a.lds(edx, ptr(si)).unwrap(),
		Instruction::with2(Code::Lds_r32_m1632, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lea_r16_m() {
	// Lea_r16_m
	test_instr(16, |a| a.lea(dx, ptr(si)).unwrap(),
		Instruction::with2(Code::Lea_r16_m, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lea_r32_m() {
	// Lea_r32_m
	test_instr(16, |a| a.lea(edx, ptr(si)).unwrap(),
		Instruction::with2(Code::Lea_r32_m, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn leave() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Leavew
		test_instr(16, |a| a.leave().unwrap(),
			Instruction::with(Code::Leavew),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn les_r16_m() {
	// Les_r16_m1616
	test_instr(16, |a| a.les(dx, ptr(si)).unwrap(),
		Instruction::with2(Code::Les_r16_m1616, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn les_r32_m() {
	// Les_r32_m1632
	test_instr(16, |a| a.les(edx, ptr(si)).unwrap(),
		Instruction::with2(Code::Les_r32_m1632, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lfence() {
	// Lfence
	test_instr(16, |a| a.lfence().unwrap(),
		Instruction::with(Code::Lfence),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lfs_r16_m() {
	// Lfs_r16_m1616
	test_instr(16, |a| a.lfs(dx, ptr(si)).unwrap(),
		Instruction::with2(Code::Lfs_r16_m1616, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lfs_r32_m() {
	// Lfs_r32_m1632
	test_instr(16, |a| a.lfs(edx, ptr(si)).unwrap(),
		Instruction::with2(Code::Lfs_r32_m1632, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lgdt_m() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Lgdt_m1632_16
		test_instr(16, |a| a.lgdt(ptr(si)).unwrap(),
			Instruction::with1(Code::Lgdt_m1632_16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn lgs_r16_m() {
	// Lgs_r16_m1616
	test_instr(16, |a| a.lgs(dx, ptr(si)).unwrap(),
		Instruction::with2(Code::Lgs_r16_m1616, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lgs_r32_m() {
	// Lgs_r32_m1632
	test_instr(16, |a| a.lgs(edx, ptr(si)).unwrap(),
		Instruction::with2(Code::Lgs_r32_m1632, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lidt_m() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Lidt_m1632_16
		test_instr(16, |a| a.lidt(ptr(si)).unwrap(),
			Instruction::with1(Code::Lidt_m1632_16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn lldt_r16() {
	// Lldt_rm16
	test_instr(16, |a| a.lldt(dx).unwrap(),
		Instruction::with1(Code::Lldt_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lldt_r32() {
	// Lldt_r32m16
	test_instr(16, |a| a.lldt(edx).unwrap(),
		Instruction::with1(Code::Lldt_r32m16, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lldt_m() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Lldt_rm16
		test_instr(16, |a| a.lldt(word_ptr(si)).unwrap(),
			Instruction::with1(Code::Lldt_rm16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn llwpcb_r32() {
	// XOP_Llwpcb_r32
	test_instr(16, |a| a.llwpcb(edx).unwrap(),
		Instruction::with1(Code::XOP_Llwpcb_r32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lmsw_r16() {
	// Lmsw_rm16
	test_instr(16, |a| a.lmsw(dx).unwrap(),
		Instruction::with1(Code::Lmsw_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lmsw_r32() {
	// Lmsw_r32m16
	test_instr(16, |a| a.lmsw(edx).unwrap(),
		Instruction::with1(Code::Lmsw_r32m16, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lmsw_m() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Lmsw_rm16
		test_instr(16, |a| a.lmsw(word_ptr(si)).unwrap(),
			Instruction::with1(Code::Lmsw_rm16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn loadall() {
	// Loadall386
	test_instr(16, |a| a.loadall().unwrap(),
		Instruction::with(Code::Loadall386),
		TestInstrFlags::NONE, DecoderOptions::LOADALL386);
}

#[test]
#[rustfmt::skip]
fn loadiwkey_xmm_xmm() {
	// Loadiwkey_xmm_xmm
	test_instr(16, |a| a.loadiwkey(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Loadiwkey_xmm_xmm, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lodsb() {
	// Lodsb_AL_m8
	test_instr(16, |a| a.lodsb().unwrap(),
		Instruction::with_lodsb(16, Register::None, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lodsd() {
	// Lodsd_EAX_m32
	test_instr(16, |a| a.lodsd().unwrap(),
		Instruction::with_lodsd(16, Register::None, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lodsw() {
	// Lodsw_AX_m16
	test_instr(16, |a| a.lodsw().unwrap(),
		Instruction::with_lodsw(16, Register::None, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn loop_l() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Loop_rel8_16_CX
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.loop_(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Loop_rel8_16_CX, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn loop_lu64() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Loop_rel8_16_CX
		test_instr(16, |a| a.loop_(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Loop_rel8_16_CX, 0x31D0u64).unwrap(),
			TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn loope_l() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Loope_rel8_16_CX
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.loope(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Loope_rel8_16_CX, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn loope_lu64() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Loope_rel8_16_CX
		test_instr(16, |a| a.loope(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Loope_rel8_16_CX, 0x31D0u64).unwrap(),
			TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn loopne_l() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Loopne_rel8_16_CX
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.loopne(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Loopne_rel8_16_CX, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn loopne_lu64() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Loopne_rel8_16_CX
		test_instr(16, |a| a.loopne(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Loopne_rel8_16_CX, 0x31D0u64).unwrap(),
			TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn loopnz_l() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Loopne_rel8_16_CX
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.loopnz(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Loopne_rel8_16_CX, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn loopnz_lu64() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Loopne_rel8_16_CX
		test_instr(16, |a| a.loopnz(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Loopne_rel8_16_CX, 0x31D0u64).unwrap(),
			TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn loopz_l() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Loope_rel8_16_CX
		test_instr(16, |a| { let lbl = create_and_emit_label(a); a.loopz(lbl).unwrap() },
			assign_label(Instruction::with_branch(Code::Loope_rel8_16_CX, FIRST_LABEL_ID).unwrap(), FIRST_LABEL_ID),
			TestInstrFlags::BRANCH, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn loopz_lu64() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Loope_rel8_16_CX
		test_instr(16, |a| a.loopz(0x31D0u64).unwrap(),
			Instruction::with_branch(Code::Loope_rel8_16_CX, 0x31D0u64).unwrap(),
			TestInstrFlags::BRANCH_U64, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn lsl_r16_r16() {
	// Lsl_r16_rm16
	test_instr(16, |a| a.lsl(dx, bx).unwrap(),
		Instruction::with2(Code::Lsl_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lsl_r32_r32() {
	// Lsl_r32_r32m16
	test_instr(16, |a| a.lsl(edx, ebx).unwrap(),
		Instruction::with2(Code::Lsl_r32_r32m16, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lsl_r16_m() {
	// Lsl_r16_rm16
	test_instr(16, |a| a.lsl(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Lsl_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lsl_r32_m() {
	// Lsl_r32_r32m16
	test_instr(16, |a| a.lsl(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Lsl_r32_r32m16, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lss_r16_m() {
	// Lss_r16_m1616
	test_instr(16, |a| a.lss(dx, ptr(si)).unwrap(),
		Instruction::with2(Code::Lss_r16_m1616, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lss_r32_m() {
	// Lss_r32_m1632
	test_instr(16, |a| a.lss(edx, ptr(si)).unwrap(),
		Instruction::with2(Code::Lss_r32_m1632, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ltr_r16() {
	// Ltr_rm16
	test_instr(16, |a| a.ltr(dx).unwrap(),
		Instruction::with1(Code::Ltr_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ltr_r32() {
	// Ltr_r32m16
	test_instr(16, |a| a.ltr(edx).unwrap(),
		Instruction::with1(Code::Ltr_r32m16, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ltr_m() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Ltr_rm16
		test_instr(16, |a| a.ltr(word_ptr(si)).unwrap(),
			Instruction::with1(Code::Ltr_rm16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn lwpins_r32_r32_i() {
	// XOP_Lwpins_r32_rm32_imm32
	test_instr(16, |a| a.lwpins(edx, ebx, 0x7FFFFFFFi32).unwrap(),
		Instruction::with3(Code::XOP_Lwpins_r32_rm32_imm32, Register::EDX, Register::EBX, 0x7FFFFFFFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Lwpins_r32_rm32_imm32
	test_instr(16, |a| a.lwpins(edx, ebx, 0x7FFFFFFF).unwrap(),
		Instruction::with3(Code::XOP_Lwpins_r32_rm32_imm32, Register::EDX, Register::EBX, 0x7FFFFFFFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lwpins_r32_m_i() {
	// XOP_Lwpins_r32_rm32_imm32
	test_instr(16, |a| a.lwpins(edx, dword_ptr(si), 0x7FFFFFFFi32).unwrap(),
		Instruction::with3(Code::XOP_Lwpins_r32_rm32_imm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Lwpins_r32_rm32_imm32
	test_instr(16, |a| a.lwpins(edx, dword_ptr(si), 0x7FFFFFFF).unwrap(),
		Instruction::with3(Code::XOP_Lwpins_r32_rm32_imm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lwpins_r32_r32_u() {
	// XOP_Lwpins_r32_rm32_imm32
	test_instr(16, |a| a.lwpins(edx, ebx, 0x7FFFFFFFu32).unwrap(),
		Instruction::with3(Code::XOP_Lwpins_r32_rm32_imm32, Register::EDX, Register::EBX, 0x7FFFFFFFu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lwpins_r32_m_u() {
	// XOP_Lwpins_r32_rm32_imm32
	test_instr(16, |a| a.lwpins(edx, dword_ptr(si), 0x7FFFFFFFu32).unwrap(),
		Instruction::with3(Code::XOP_Lwpins_r32_rm32_imm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lwpval_r32_r32_i() {
	// XOP_Lwpval_r32_rm32_imm32
	test_instr(16, |a| a.lwpval(edx, ebx, 0x7FFFFFFFi32).unwrap(),
		Instruction::with3(Code::XOP_Lwpval_r32_rm32_imm32, Register::EDX, Register::EBX, 0x7FFFFFFFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Lwpval_r32_rm32_imm32
	test_instr(16, |a| a.lwpval(edx, ebx, 0x7FFFFFFF).unwrap(),
		Instruction::with3(Code::XOP_Lwpval_r32_rm32_imm32, Register::EDX, Register::EBX, 0x7FFFFFFFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lwpval_r32_m_i() {
	// XOP_Lwpval_r32_rm32_imm32
	test_instr(16, |a| a.lwpval(edx, dword_ptr(si), 0x7FFFFFFFi32).unwrap(),
		Instruction::with3(Code::XOP_Lwpval_r32_rm32_imm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Lwpval_r32_rm32_imm32
	test_instr(16, |a| a.lwpval(edx, dword_ptr(si), 0x7FFFFFFF).unwrap(),
		Instruction::with3(Code::XOP_Lwpval_r32_rm32_imm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lwpval_r32_r32_u() {
	// XOP_Lwpval_r32_rm32_imm32
	test_instr(16, |a| a.lwpval(edx, ebx, 0x7FFFFFFFu32).unwrap(),
		Instruction::with3(Code::XOP_Lwpval_r32_rm32_imm32, Register::EDX, Register::EBX, 0x7FFFFFFFu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lwpval_r32_m_u() {
	// XOP_Lwpval_r32_rm32_imm32
	test_instr(16, |a| a.lwpval(edx, dword_ptr(si), 0x7FFFFFFFu32).unwrap(),
		Instruction::with3(Code::XOP_Lwpval_r32_rm32_imm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lzcnt_r16_r16() {
	// Lzcnt_r16_rm16
	test_instr(16, |a| a.lzcnt(dx, bx).unwrap(),
		Instruction::with2(Code::Lzcnt_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lzcnt_r32_r32() {
	// Lzcnt_r32_rm32
	test_instr(16, |a| a.lzcnt(edx, ebx).unwrap(),
		Instruction::with2(Code::Lzcnt_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lzcnt_r16_m() {
	// Lzcnt_r16_rm16
	test_instr(16, |a| a.lzcnt(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Lzcnt_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn lzcnt_r32_m() {
	// Lzcnt_r32_rm32
	test_instr(16, |a| a.lzcnt(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Lzcnt_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn maskmovdqu_xmm_xmm() {
	// Maskmovdqu_rDI_xmm_xmm
	test_instr(16, |a| a.maskmovdqu(xmm2, xmm3).unwrap(),
		Instruction::with_maskmovdqu(16, Register::XMM2, Register::XMM3, Register::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn maskmovq_mm_mm() {
	// Maskmovq_rDI_mm_mm
	test_instr(16, |a| a.maskmovq(mm2, mm3).unwrap(),
		Instruction::with_maskmovq(16, Register::MM2, Register::MM3, Register::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn maxpd_xmm_xmm() {
	// Maxpd_xmm_xmmm128
	test_instr(16, |a| a.maxpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Maxpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn maxpd_xmm_m() {
	// Maxpd_xmm_xmmm128
	test_instr(16, |a| a.maxpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Maxpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn maxps_xmm_xmm() {
	// Maxps_xmm_xmmm128
	test_instr(16, |a| a.maxps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Maxps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn maxps_xmm_m() {
	// Maxps_xmm_xmmm128
	test_instr(16, |a| a.maxps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Maxps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn maxsd_xmm_xmm() {
	// Maxsd_xmm_xmmm64
	test_instr(16, |a| a.maxsd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Maxsd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn maxsd_xmm_m() {
	// Maxsd_xmm_xmmm64
	test_instr(16, |a| a.maxsd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Maxsd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn maxss_xmm_xmm() {
	// Maxss_xmm_xmmm32
	test_instr(16, |a| a.maxss(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Maxss_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn maxss_xmm_m() {
	// Maxss_xmm_xmmm32
	test_instr(16, |a| a.maxss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Maxss_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mcommit() {
	// Mcommit
	test_instr(16, |a| a.mcommit().unwrap(),
		Instruction::with(Code::Mcommit),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mfence() {
	// Mfence
	test_instr(16, |a| a.mfence().unwrap(),
		Instruction::with(Code::Mfence),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn minpd_xmm_xmm() {
	// Minpd_xmm_xmmm128
	test_instr(16, |a| a.minpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Minpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn minpd_xmm_m() {
	// Minpd_xmm_xmmm128
	test_instr(16, |a| a.minpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Minpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn minps_xmm_xmm() {
	// Minps_xmm_xmmm128
	test_instr(16, |a| a.minps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Minps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn minps_xmm_m() {
	// Minps_xmm_xmmm128
	test_instr(16, |a| a.minps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Minps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn minsd_xmm_xmm() {
	// Minsd_xmm_xmmm64
	test_instr(16, |a| a.minsd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Minsd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn minsd_xmm_m() {
	// Minsd_xmm_xmmm64
	test_instr(16, |a| a.minsd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Minsd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn minss_xmm_xmm() {
	// Minss_xmm_xmmm32
	test_instr(16, |a| a.minss(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Minss_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn minss_xmm_m() {
	// Minss_xmm_xmmm32
	test_instr(16, |a| a.minss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Minss_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn monitor() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Monitorw
		test_instr(16, |a| a.monitor().unwrap(),
			Instruction::with(Code::Monitorw),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn monitorx() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Monitorxw
		test_instr(16, |a| a.monitorx().unwrap(),
			Instruction::with(Code::Monitorxw),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn montmul() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Montmul_16
		test_instr(16, |a| a.montmul().unwrap(),
			Instruction::with(Code::Montmul_16),
			TestInstrFlags::REMOVE_REP_REPNE_PREFIXES, DecoderOptions::NO_INVALID_CHECK);
	}
}

#[test]
#[rustfmt::skip]
fn mov_r8_r8() {
	// Mov_rm8_r8
	test_instr(16, |a| a.mov(dl, bl).unwrap(),
		Instruction::with2(Code::Mov_rm8_r8, Register::DL, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mov_m_r8() {
	/* if op1.register() == Register::AL && self.bitness() == 64 && op0.is_displacement_only() */ {
		// skip `if op1.register() == Register::AL && self.bitness() == 64 && op0.is_displacement_only()` since it's not supported by the current test bitness
	} /* else if op1.register() == Register::AL && self.bitness() < 64 && op0.is_displacement_only() */ {
		// Mov_moffs8_AL
		test_instr(16, |a| a.mov(ptr(0x1234u64), al).unwrap(),
			Instruction::with2(Code::Mov_moffs8_AL, MemoryOperand::with_displ(0x1234u64, 2), Register::AL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Mov_rm8_r8
		test_instr(16, |a| a.mov(ptr(di), bl).unwrap(),
			Instruction::with2(Code::Mov_rm8_r8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn mov_r16_r16() {
	// Mov_rm16_r16
	test_instr(16, |a| a.mov(dx, bx).unwrap(),
		Instruction::with2(Code::Mov_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mov_seg_r16() {
	// Mov_Sreg_rm16
	test_instr(16, |a| a.mov(ds, bx).unwrap(),
		Instruction::with2(Code::Mov_Sreg_rm16, Register::DS, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mov_m_r16() {
	/* if op1.register() == Register::AX && self.bitness() == 64 && op0.is_displacement_only() */ {
		// skip `if op1.register() == Register::AX && self.bitness() == 64 && op0.is_displacement_only()` since it's not supported by the current test bitness
	} /* else if op1.register() == Register::AX && self.bitness() < 64 && op0.is_displacement_only() */ {
		// Mov_moffs16_AX
		test_instr(16, |a| a.mov(ptr(0x1234u64), ax).unwrap(),
			Instruction::with2(Code::Mov_moffs16_AX, MemoryOperand::with_displ(0x1234u64, 2), Register::AX).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Mov_rm16_r16
		test_instr(16, |a| a.mov(ptr(di), bx).unwrap(),
			Instruction::with2(Code::Mov_rm16_r16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn mov_r32_r32() {
	// Mov_rm32_r32
	test_instr(16, |a| a.mov(edx, ebx).unwrap(),
		Instruction::with2(Code::Mov_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mov_seg_r32() {
	// Mov_Sreg_r32m16
	test_instr(16, |a| a.mov(ds, ebx).unwrap(),
		Instruction::with2(Code::Mov_Sreg_r32m16, Register::DS, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mov_cr_r32() {
	// Mov_cr_r32
	test_instr(16, |a| a.mov(cr2, ebx).unwrap(),
		Instruction::with2(Code::Mov_cr_r32, Register::CR2, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mov_dr_r32() {
	// Mov_dr_r32
	test_instr(16, |a| a.mov(dr1, ebx).unwrap(),
		Instruction::with2(Code::Mov_dr_r32, Register::DR1, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mov_tr_r32() {
	// Mov_tr_r32
	test_instr(16, |a| a.mov(tr1, ebx).unwrap(),
		Instruction::with2(Code::Mov_tr_r32, Register::TR1, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::MOV_TR);
}

#[test]
#[rustfmt::skip]
fn mov_m_r32() {
	/* if op1.register() == Register::EAX && self.bitness() == 64 && op0.is_displacement_only() */ {
		// skip `if op1.register() == Register::EAX && self.bitness() == 64 && op0.is_displacement_only()` since it's not supported by the current test bitness
	} /* else if op1.register() == Register::EAX && self.bitness() < 64 && op0.is_displacement_only() */ {
		// Mov_moffs32_EAX
		test_instr(16, |a| a.mov(ptr(0x1234u64), eax).unwrap(),
			Instruction::with2(Code::Mov_moffs32_EAX, MemoryOperand::with_displ(0x1234u64, 2), Register::EAX).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Mov_rm32_r32
		test_instr(16, |a| a.mov(ptr(di), ebx).unwrap(),
			Instruction::with2(Code::Mov_rm32_r32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn mov_r16_seg() {
	// Mov_rm16_Sreg
	test_instr(16, |a| a.mov(dx, ds).unwrap(),
		Instruction::with2(Code::Mov_rm16_Sreg, Register::DX, Register::DS).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mov_r32_seg() {
	// Mov_r32m16_Sreg
	test_instr(16, |a| a.mov(edx, ds).unwrap(),
		Instruction::with2(Code::Mov_r32m16_Sreg, Register::EDX, Register::DS).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mov_m_seg() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Mov_rm16_Sreg
		test_instr(16, |a| a.mov(word_ptr(si), ds).unwrap(),
			Instruction::with2(Code::Mov_rm16_Sreg, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::DS).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn mov_r32_cr() {
	// Mov_r32_cr
	test_instr(16, |a| a.mov(edx, cr2).unwrap(),
		Instruction::with2(Code::Mov_r32_cr, Register::EDX, Register::CR2).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mov_r32_dr() {
	// Mov_r32_dr
	test_instr(16, |a| a.mov(edx, dr1).unwrap(),
		Instruction::with2(Code::Mov_r32_dr, Register::EDX, Register::DR1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mov_r32_tr() {
	// Mov_r32_tr
	test_instr(16, |a| a.mov(edx, tr1).unwrap(),
		Instruction::with2(Code::Mov_r32_tr, Register::EDX, Register::TR1).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::MOV_TR);
}

#[test]
#[rustfmt::skip]
fn mov_r8_m() {
	/* if op0.register() == Register::AL && self.bitness() == 64 && op1.is_displacement_only() */ {
		// skip `if op0.register() == Register::AL && self.bitness() == 64 && op1.is_displacement_only()` since it's not supported by the current test bitness
	} /* else if op0.register() == Register::AL && self.bitness() < 64 && op1.is_displacement_only() */ {
		// Mov_AL_moffs8
		test_instr(16, |a| a.mov(al, ptr(0x1234u64)).unwrap(),
			Instruction::with2(Code::Mov_AL_moffs8, Register::AL, MemoryOperand::with_displ(0x1234u64, 2)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Mov_r8_rm8
		test_instr(16, |a| a.mov(dl, ptr(si)).unwrap(),
			Instruction::with2(Code::Mov_r8_rm8, Register::DL, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn mov_r16_m() {
	/* if op0.register() == Register::AX && self.bitness() == 64 && op1.is_displacement_only() */ {
		// skip `if op0.register() == Register::AX && self.bitness() == 64 && op1.is_displacement_only()` since it's not supported by the current test bitness
	} /* else if op0.register() == Register::AX && self.bitness() < 64 && op1.is_displacement_only() */ {
		// Mov_AX_moffs16
		test_instr(16, |a| a.mov(ax, ptr(0x1234u64)).unwrap(),
			Instruction::with2(Code::Mov_AX_moffs16, Register::AX, MemoryOperand::with_displ(0x1234u64, 2)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Mov_r16_rm16
		test_instr(16, |a| a.mov(dx, ptr(si)).unwrap(),
			Instruction::with2(Code::Mov_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn mov_r32_m() {
	/* if op0.register() == Register::EAX && self.bitness() == 64 && op1.is_displacement_only() */ {
		// skip `if op0.register() == Register::EAX && self.bitness() == 64 && op1.is_displacement_only()` since it's not supported by the current test bitness
	} /* else if op0.register() == Register::EAX && self.bitness() < 64 && op1.is_displacement_only() */ {
		// Mov_EAX_moffs32
		test_instr(16, |a| a.mov(eax, ptr(0x1234u64)).unwrap(),
			Instruction::with2(Code::Mov_EAX_moffs32, Register::EAX, MemoryOperand::with_displ(0x1234u64, 2)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Mov_r32_rm32
		test_instr(16, |a| a.mov(edx, ptr(si)).unwrap(),
			Instruction::with2(Code::Mov_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn mov_seg_m() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Mov_Sreg_rm16
		test_instr(16, |a| a.mov(ds, word_ptr(si)).unwrap(),
			Instruction::with2(Code::Mov_Sreg_rm16, Register::DS, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn mov_r8_i() {
	// Mov_r8_imm8
	test_instr(16, |a| a.mov(dl, -5i32).unwrap(),
		Instruction::with2(Code::Mov_r8_imm8, Register::DL, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Mov_r8_imm8
	test_instr(16, |a| a.mov(dl, -5).unwrap(),
		Instruction::with2(Code::Mov_r8_imm8, Register::DL, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mov_r16_i() {
	// Mov_r16_imm16
	test_instr(16, |a| a.mov(dx, 0x40B7i32).unwrap(),
		Instruction::with2(Code::Mov_r16_imm16, Register::DX, 0x40B7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Mov_r16_imm16
	test_instr(16, |a| a.mov(dx, 0x40B7).unwrap(),
		Instruction::with2(Code::Mov_r16_imm16, Register::DX, 0x40B7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mov_r32_i() {
	// Mov_r32_imm32
	test_instr(16, |a| a.mov(edx, 0x7FFFFFFFi32).unwrap(),
		Instruction::with2(Code::Mov_r32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Mov_r32_imm32
	test_instr(16, |a| a.mov(edx, 0x7FFFFFFF).unwrap(),
		Instruction::with2(Code::Mov_r32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mov_m_i() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Mov_rm64_imm32 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Mov_rm32_imm32
		test_instr(16, |a| a.mov(dword_ptr(di), 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Mov_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Mov_rm16_imm16
		test_instr(16, |a| a.mov(word_ptr(di), 0x40B7i32).unwrap(),
			Instruction::with2(Code::Mov_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Mov_rm8_imm8
		test_instr(16, |a| a.mov(byte_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::Mov_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Mov_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.mov(zmmword_ptr(di), -5i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Mov_rm64_imm32 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Mov_rm32_imm32
		test_instr(16, |a| a.mov(dword_ptr(di), 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Mov_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Mov_rm16_imm16
		test_instr(16, |a| a.mov(word_ptr(di), 0x40B7).unwrap(),
			Instruction::with2(Code::Mov_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Mov_rm8_imm8
		test_instr(16, |a| a.mov(byte_ptr(di), -5).unwrap(),
			Instruction::with2(Code::Mov_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Mov_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.mov(zmmword_ptr(di), -5).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn mov_r8_u() {
	// Mov_r8_imm8
	test_instr(16, |a| a.mov(dl, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Mov_r8_imm8, Register::DL, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mov_r16_u() {
	// Mov_r16_imm16
	test_instr(16, |a| a.mov(dx, 0x40B7u32).unwrap(),
		Instruction::with2(Code::Mov_r16_imm16, Register::DX, 0x40B7u32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mov_r32_u() {
	// Mov_r32_imm32
	test_instr(16, |a| a.mov(edx, 0x7FFFFFFFu32).unwrap(),
		Instruction::with2(Code::Mov_r32_imm32, Register::EDX, 0x7FFFFFFFu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mov_m_u() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		// Mov_rm32_imm32
		test_instr(16, |a| a.mov(dword_ptr(di), 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Mov_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Mov_rm16_imm16
		test_instr(16, |a| a.mov(word_ptr(di), 0x40B7u32).unwrap(),
			Instruction::with2(Code::Mov_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Mov_rm8_imm8
		test_instr(16, |a| a.mov(byte_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::Mov_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Mov_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.mov(zmmword_ptr(di), 0x7Fu32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn movapd_xmm_xmm() {
	// Movapd_xmm_xmmm128
	test_instr(16, |a| a.movapd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Movapd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movapd_m_xmm() {
	// Movapd_xmmm128_xmm
	test_instr(16, |a| a.movapd(xmmword_ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movapd_xmmm128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movapd_xmm_m() {
	// Movapd_xmm_xmmm128
	test_instr(16, |a| a.movapd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Movapd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movaps_xmm_xmm() {
	// Movaps_xmm_xmmm128
	test_instr(16, |a| a.movaps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Movaps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movaps_m_xmm() {
	// Movaps_xmmm128_xmm
	test_instr(16, |a| a.movaps(xmmword_ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movaps_xmmm128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movaps_xmm_m() {
	// Movaps_xmm_xmmm128
	test_instr(16, |a| a.movaps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Movaps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movbe_m_r16() {
	// Movbe_m16_r16
	test_instr(16, |a| a.movbe(ptr(si), bx).unwrap(),
		Instruction::with2(Code::Movbe_m16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movbe_m_r32() {
	// Movbe_m32_r32
	test_instr(16, |a| a.movbe(ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Movbe_m32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movbe_r16_m() {
	// Movbe_r16_m16
	test_instr(16, |a| a.movbe(dx, ptr(si)).unwrap(),
		Instruction::with2(Code::Movbe_r16_m16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movbe_r32_m() {
	// Movbe_r32_m32
	test_instr(16, |a| a.movbe(edx, ptr(si)).unwrap(),
		Instruction::with2(Code::Movbe_r32_m32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movd_mm_r32() {
	// Movd_mm_rm32
	test_instr(16, |a| a.movd(mm2, ebx).unwrap(),
		Instruction::with2(Code::Movd_mm_rm32, Register::MM2, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movd_xmm_r32() {
	// Movd_xmm_rm32
	test_instr(16, |a| a.movd(xmm2, ebx).unwrap(),
		Instruction::with2(Code::Movd_xmm_rm32, Register::XMM2, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movd_r32_mm() {
	// Movd_rm32_mm
	test_instr(16, |a| a.movd(edx, mm3).unwrap(),
		Instruction::with2(Code::Movd_rm32_mm, Register::EDX, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movd_m_mm() {
	// Movd_rm32_mm
	test_instr(16, |a| a.movd(dword_ptr(si), mm3).unwrap(),
		Instruction::with2(Code::Movd_rm32_mm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movd_r32_xmm() {
	// Movd_rm32_xmm
	test_instr(16, |a| a.movd(edx, xmm3).unwrap(),
		Instruction::with2(Code::Movd_rm32_xmm, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movd_m_xmm() {
	// Movd_rm32_xmm
	test_instr(16, |a| a.movd(dword_ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movd_rm32_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movd_mm_m() {
	// Movd_mm_rm32
	test_instr(16, |a| a.movd(mm2, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Movd_mm_rm32, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movd_xmm_m() {
	// Movd_xmm_rm32
	test_instr(16, |a| a.movd(xmm2, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Movd_xmm_rm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movddup_xmm_xmm() {
	// Movddup_xmm_xmmm64
	test_instr(16, |a| a.movddup(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Movddup_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movddup_xmm_m() {
	// Movddup_xmm_xmmm64
	test_instr(16, |a| a.movddup(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Movddup_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movdir64b_r16_m() {
	// Movdir64b_r16_m512
	test_instr(16, |a| a.movdir64b(dx, ptr(si)).unwrap(),
		Instruction::with2(Code::Movdir64b_r16_m512, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movdir64b_r32_m() {
	// Movdir64b_r32_m512
	test_instr(16, |a| a.movdir64b(edx, ptr(ecx)).unwrap(),
		Instruction::with2(Code::Movdir64b_r32_m512, Register::EDX, MemoryOperand::new(Register::ECX, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movdiri_m_r32() {
	// Movdiri_m32_r32
	test_instr(16, |a| a.movdiri(ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Movdiri_m32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movdq2q_mm_xmm() {
	// Movdq2q_mm_xmm
	test_instr(16, |a| a.movdq2q(mm2, xmm3).unwrap(),
		Instruction::with2(Code::Movdq2q_mm_xmm, Register::MM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movdqa_xmm_xmm() {
	// Movdqa_xmm_xmmm128
	test_instr(16, |a| a.movdqa(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Movdqa_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movdqa_m_xmm() {
	// Movdqa_xmmm128_xmm
	test_instr(16, |a| a.movdqa(xmmword_ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movdqa_xmmm128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movdqa_xmm_m() {
	// Movdqa_xmm_xmmm128
	test_instr(16, |a| a.movdqa(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Movdqa_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movdqu_xmm_xmm() {
	// Movdqu_xmm_xmmm128
	test_instr(16, |a| a.movdqu(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Movdqu_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movdqu_m_xmm() {
	// Movdqu_xmmm128_xmm
	test_instr(16, |a| a.movdqu(xmmword_ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movdqu_xmmm128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movdqu_xmm_m() {
	// Movdqu_xmm_xmmm128
	test_instr(16, |a| a.movdqu(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Movdqu_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movhlps_xmm_xmm() {
	// Movhlps_xmm_xmm
	test_instr(16, |a| a.movhlps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Movhlps_xmm_xmm, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movhpd_m_xmm() {
	// Movhpd_m64_xmm
	test_instr(16, |a| a.movhpd(ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movhpd_m64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movhpd_xmm_m() {
	// Movhpd_xmm_m64
	test_instr(16, |a| a.movhpd(xmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::Movhpd_xmm_m64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movhps_m_xmm() {
	// Movhps_m64_xmm
	test_instr(16, |a| a.movhps(ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movhps_m64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movhps_xmm_m() {
	// Movhps_xmm_m64
	test_instr(16, |a| a.movhps(xmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::Movhps_xmm_m64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movlhps_xmm_xmm() {
	// Movlhps_xmm_xmm
	test_instr(16, |a| a.movlhps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Movlhps_xmm_xmm, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movlpd_m_xmm() {
	// Movlpd_m64_xmm
	test_instr(16, |a| a.movlpd(ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movlpd_m64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movlpd_xmm_m() {
	// Movlpd_xmm_m64
	test_instr(16, |a| a.movlpd(xmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::Movlpd_xmm_m64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movlps_m_xmm() {
	// Movlps_m64_xmm
	test_instr(16, |a| a.movlps(ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movlps_m64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movlps_xmm_m() {
	// Movlps_xmm_m64
	test_instr(16, |a| a.movlps(xmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::Movlps_xmm_m64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movmskpd_r32_xmm() {
	// Movmskpd_r32_xmm
	test_instr(16, |a| a.movmskpd(edx, xmm3).unwrap(),
		Instruction::with2(Code::Movmskpd_r32_xmm, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movmskps_r32_xmm() {
	// Movmskps_r32_xmm
	test_instr(16, |a| a.movmskps(edx, xmm3).unwrap(),
		Instruction::with2(Code::Movmskps_r32_xmm, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movntdq_m_xmm() {
	// Movntdq_m128_xmm
	test_instr(16, |a| a.movntdq(ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movntdq_m128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movntdqa_xmm_m() {
	// Movntdqa_xmm_m128
	test_instr(16, |a| a.movntdqa(xmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::Movntdqa_xmm_m128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movnti_m_r32() {
	// Movnti_m32_r32
	test_instr(16, |a| a.movnti(ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Movnti_m32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movntpd_m_xmm() {
	// Movntpd_m128_xmm
	test_instr(16, |a| a.movntpd(ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movntpd_m128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movntps_m_xmm() {
	// Movntps_m128_xmm
	test_instr(16, |a| a.movntps(ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movntps_m128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movntq_m_mm() {
	// Movntq_m64_mm
	test_instr(16, |a| a.movntq(ptr(si), mm3).unwrap(),
		Instruction::with2(Code::Movntq_m64_mm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movntsd_m_xmm() {
	// Movntsd_m64_xmm
	test_instr(16, |a| a.movntsd(ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movntsd_m64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movntss_m_xmm() {
	// Movntss_m32_xmm
	test_instr(16, |a| a.movntss(ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movntss_m32_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movq_mm_mm() {
	// Movq_mm_mmm64
	test_instr(16, |a| a.movq(mm2, mm3).unwrap(),
		Instruction::with2(Code::Movq_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movq_m_mm() {
	// Movq_mmm64_mm
	test_instr(16, |a| a.movq(qword_ptr(si), mm3).unwrap(),
		Instruction::with2(Code::Movq_mmm64_mm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movq_xmm_xmm() {
	// Movq_xmm_xmmm64
	test_instr(16, |a| a.movq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Movq_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movq_m_xmm() {
	// Movq_xmmm64_xmm
	test_instr(16, |a| a.movq(xmmword_ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movq_xmmm64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movq_mm_m() {
	// Movq_mm_mmm64
	test_instr(16, |a| a.movq(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Movq_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movq_xmm_m() {
	// Movq_xmm_xmmm64
	test_instr(16, |a| a.movq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Movq_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movq2dq_xmm_mm() {
	// Movq2dq_xmm_mm
	test_instr(16, |a| a.movq2dq(xmm2, mm3).unwrap(),
		Instruction::with2(Code::Movq2dq_xmm_mm, Register::XMM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movsb() {
	// Movsb_m8_m8
	test_instr(16, |a| a.movsb().unwrap(),
		Instruction::with_movsb(16, Register::None, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movsd() {
	// Movsd_m32_m32
	test_instr(16, |a| a.movsd().unwrap(),
		Instruction::with_movsd(16, Register::None, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movsd_xmm_xmm() {
	// Movsd_xmm_xmmm64
	test_instr(16, |a| a.movsd_2(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Movsd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movsd_m_xmm() {
	// Movsd_xmmm64_xmm
	test_instr(16, |a| a.movsd_2(xmmword_ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movsd_xmmm64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movsd_xmm_m() {
	// Movsd_xmm_xmmm64
	test_instr(16, |a| a.movsd_2(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Movsd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movshdup_xmm_xmm() {
	// Movshdup_xmm_xmmm128
	test_instr(16, |a| a.movshdup(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Movshdup_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movshdup_xmm_m() {
	// Movshdup_xmm_xmmm128
	test_instr(16, |a| a.movshdup(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Movshdup_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movsldup_xmm_xmm() {
	// Movsldup_xmm_xmmm128
	test_instr(16, |a| a.movsldup(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Movsldup_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movsldup_xmm_m() {
	// Movsldup_xmm_xmmm128
	test_instr(16, |a| a.movsldup(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Movsldup_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movss_xmm_xmm() {
	// Movss_xmm_xmmm32
	test_instr(16, |a| a.movss(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Movss_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movss_m_xmm() {
	// Movss_xmmm32_xmm
	test_instr(16, |a| a.movss(xmmword_ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movss_xmmm32_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movss_xmm_m() {
	// Movss_xmm_xmmm32
	test_instr(16, |a| a.movss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Movss_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movsw() {
	// Movsw_m16_m16
	test_instr(16, |a| a.movsw().unwrap(),
		Instruction::with_movsw(16, Register::None, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movsx_r16_r8() {
	// Movsx_r16_rm8
	test_instr(16, |a| a.movsx(dx, bl).unwrap(),
		Instruction::with2(Code::Movsx_r16_rm8, Register::DX, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movsx_r32_r8() {
	// Movsx_r32_rm8
	test_instr(16, |a| a.movsx(edx, bl).unwrap(),
		Instruction::with2(Code::Movsx_r32_rm8, Register::EDX, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movsx_r16_r16() {
	// Movsx_r16_rm16
	test_instr(16, |a| a.movsx(dx, bx).unwrap(),
		Instruction::with2(Code::Movsx_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movsx_r32_r16() {
	// Movsx_r32_rm16
	test_instr(16, |a| a.movsx(edx, bx).unwrap(),
		Instruction::with2(Code::Movsx_r32_rm16, Register::EDX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movsx_r16_m() {
	/* if op1.size() == MemoryOperandSize::Word */ {
		// Movsx_r16_rm16
		test_instr(16, |a| a.movsx(dx, word_ptr(di)).unwrap(),
			Instruction::with2(Code::Movsx_r16_rm16, Register::DX, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Byte */ {
		// Movsx_r16_rm8
		test_instr(16, |a| a.movsx(dx, byte_ptr(di)).unwrap(),
			Instruction::with2(Code::Movsx_r16_rm8, Register::DX, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Movsx_r16_rm8
		test_invalid_instr(16, |a| assert!(a.movsx(dx, zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn movsx_r32_m() {
	/* if op1.size() == MemoryOperandSize::Word */ {
		// Movsx_r32_rm16
		test_instr(16, |a| a.movsx(edx, word_ptr(di)).unwrap(),
			Instruction::with2(Code::Movsx_r32_rm16, Register::EDX, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Byte */ {
		// Movsx_r32_rm8
		test_instr(16, |a| a.movsx(edx, byte_ptr(di)).unwrap(),
			Instruction::with2(Code::Movsx_r32_rm8, Register::EDX, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Movsx_r32_rm8
		test_invalid_instr(16, |a| assert!(a.movsx(edx, zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn movupd_xmm_xmm() {
	// Movupd_xmm_xmmm128
	test_instr(16, |a| a.movupd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Movupd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movupd_m_xmm() {
	// Movupd_xmmm128_xmm
	test_instr(16, |a| a.movupd(xmmword_ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movupd_xmmm128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movupd_xmm_m() {
	// Movupd_xmm_xmmm128
	test_instr(16, |a| a.movupd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Movupd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movups_xmm_xmm() {
	// Movups_xmm_xmmm128
	test_instr(16, |a| a.movups(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Movups_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movups_m_xmm() {
	// Movups_xmmm128_xmm
	test_instr(16, |a| a.movups(xmmword_ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::Movups_xmmm128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movups_xmm_m() {
	// Movups_xmm_xmmm128
	test_instr(16, |a| a.movups(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Movups_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movzx_r16_r8() {
	// Movzx_r16_rm8
	test_instr(16, |a| a.movzx(dx, bl).unwrap(),
		Instruction::with2(Code::Movzx_r16_rm8, Register::DX, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movzx_r32_r8() {
	// Movzx_r32_rm8
	test_instr(16, |a| a.movzx(edx, bl).unwrap(),
		Instruction::with2(Code::Movzx_r32_rm8, Register::EDX, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movzx_r16_r16() {
	// Movzx_r16_rm16
	test_instr(16, |a| a.movzx(dx, bx).unwrap(),
		Instruction::with2(Code::Movzx_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movzx_r32_r16() {
	// Movzx_r32_rm16
	test_instr(16, |a| a.movzx(edx, bx).unwrap(),
		Instruction::with2(Code::Movzx_r32_rm16, Register::EDX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn movzx_r16_m() {
	/* if op1.size() == MemoryOperandSize::Word */ {
		// Movzx_r16_rm16
		test_instr(16, |a| a.movzx(dx, word_ptr(di)).unwrap(),
			Instruction::with2(Code::Movzx_r16_rm16, Register::DX, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Byte */ {
		// Movzx_r16_rm8
		test_instr(16, |a| a.movzx(dx, byte_ptr(di)).unwrap(),
			Instruction::with2(Code::Movzx_r16_rm8, Register::DX, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Movzx_r16_rm8
		test_invalid_instr(16, |a| assert!(a.movzx(dx, zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn movzx_r32_m() {
	/* if op1.size() == MemoryOperandSize::Word */ {
		// Movzx_r32_rm16
		test_instr(16, |a| a.movzx(edx, word_ptr(di)).unwrap(),
			Instruction::with2(Code::Movzx_r32_rm16, Register::EDX, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Byte */ {
		// Movzx_r32_rm8
		test_instr(16, |a| a.movzx(edx, byte_ptr(di)).unwrap(),
			Instruction::with2(Code::Movzx_r32_rm8, Register::EDX, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Movzx_r32_rm8
		test_invalid_instr(16, |a| assert!(a.movzx(edx, zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn mpsadbw_xmm_xmm_i() {
	// Mpsadbw_xmm_xmmm128_imm8
	test_instr(16, |a| a.mpsadbw(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Mpsadbw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Mpsadbw_xmm_xmmm128_imm8
	test_instr(16, |a| a.mpsadbw(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Mpsadbw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mpsadbw_xmm_m_i() {
	// Mpsadbw_xmm_xmmm128_imm8
	test_instr(16, |a| a.mpsadbw(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Mpsadbw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Mpsadbw_xmm_xmmm128_imm8
	test_instr(16, |a| a.mpsadbw(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Mpsadbw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mpsadbw_xmm_xmm_u() {
	// Mpsadbw_xmm_xmmm128_imm8
	test_instr(16, |a| a.mpsadbw(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Mpsadbw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mpsadbw_xmm_m_u() {
	// Mpsadbw_xmm_xmmm128_imm8
	test_instr(16, |a| a.mpsadbw(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Mpsadbw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mul_r8() {
	// Mul_rm8
	test_instr(16, |a| a.mul(dl).unwrap(),
		Instruction::with1(Code::Mul_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mul_r16() {
	// Mul_rm16
	test_instr(16, |a| a.mul(dx).unwrap(),
		Instruction::with1(Code::Mul_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mul_r32() {
	// Mul_rm32
	test_instr(16, |a| a.mul(edx).unwrap(),
		Instruction::with1(Code::Mul_rm32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mul_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Mul_rm64 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Mul_rm32
		test_instr(16, |a| a.mul(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Mul_rm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Mul_rm16
		test_instr(16, |a| a.mul(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Mul_rm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Mul_rm8
		test_instr(16, |a| a.mul(byte_ptr(di)).unwrap(),
			Instruction::with1(Code::Mul_rm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Mul_rm8
		test_invalid_instr(16, |a| assert!(a.mul(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn mulpd_xmm_xmm() {
	// Mulpd_xmm_xmmm128
	test_instr(16, |a| a.mulpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Mulpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mulpd_xmm_m() {
	// Mulpd_xmm_xmmm128
	test_instr(16, |a| a.mulpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Mulpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mulps_xmm_xmm() {
	// Mulps_xmm_xmmm128
	test_instr(16, |a| a.mulps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Mulps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mulps_xmm_m() {
	// Mulps_xmm_xmmm128
	test_instr(16, |a| a.mulps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Mulps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mulsd_xmm_xmm() {
	// Mulsd_xmm_xmmm64
	test_instr(16, |a| a.mulsd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Mulsd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mulsd_xmm_m() {
	// Mulsd_xmm_xmmm64
	test_instr(16, |a| a.mulsd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Mulsd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mulss_xmm_xmm() {
	// Mulss_xmm_xmmm32
	test_instr(16, |a| a.mulss(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Mulss_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mulss_xmm_m() {
	// Mulss_xmm_xmmm32
	test_instr(16, |a| a.mulss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Mulss_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mulx_r32_r32_r32() {
	// VEX_Mulx_r32_r32_rm32
	test_instr(16, |a| a.mulx(edx, ebx, esp).unwrap(),
		Instruction::with3(Code::VEX_Mulx_r32_r32_rm32, Register::EDX, Register::EBX, Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mulx_r32_r32_m() {
	// VEX_Mulx_r32_r32_rm32
	test_instr(16, |a| a.mulx(edx, ebx, dword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Mulx_r32_r32_rm32, Register::EDX, Register::EBX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mwait() {
	// Mwait
	test_instr(16, |a| a.mwait().unwrap(),
		Instruction::with(Code::Mwait),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn mwaitx() {
	// Mwaitx
	test_instr(16, |a| a.mwaitx().unwrap(),
		Instruction::with(Code::Mwaitx),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn neg_r8() {
	// Neg_rm8
	test_instr(16, |a| a.neg(dl).unwrap(),
		Instruction::with1(Code::Neg_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn neg_r16() {
	// Neg_rm16
	test_instr(16, |a| a.neg(dx).unwrap(),
		Instruction::with1(Code::Neg_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn neg_r32() {
	// Neg_rm32
	test_instr(16, |a| a.neg(edx).unwrap(),
		Instruction::with1(Code::Neg_rm32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn neg_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Neg_rm64 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Neg_rm32
		test_instr(16, |a| a.neg(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Neg_rm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Neg_rm16
		test_instr(16, |a| a.neg(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Neg_rm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Neg_rm8
		test_instr(16, |a| a.neg(byte_ptr(di)).unwrap(),
			Instruction::with1(Code::Neg_rm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Neg_rm8
		test_invalid_instr(16, |a| assert!(a.neg(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn nop() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Nopw
		test_instr(16, |a| a.nop().unwrap(),
			Instruction::with(Code::Nopw),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn nop_r16() {
	// Nop_rm16
	test_instr(16, |a| a.nop_1(dx).unwrap(),
		Instruction::with1(Code::Nop_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn nop_r32() {
	// Nop_rm32
	test_instr(16, |a| a.nop_1(edx).unwrap(),
		Instruction::with1(Code::Nop_rm32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn nop_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Nop_rm64 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Nop_rm32
		test_instr(16, |a| a.nop_1(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Nop_rm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Nop_rm16
		test_instr(16, |a| a.nop_1(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Nop_rm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Nop_rm16
		test_invalid_instr(16, |a| assert!(a.nop_1(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn not_r8() {
	// Not_rm8
	test_instr(16, |a| a.not(dl).unwrap(),
		Instruction::with1(Code::Not_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn not_r16() {
	// Not_rm16
	test_instr(16, |a| a.not(dx).unwrap(),
		Instruction::with1(Code::Not_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn not_r32() {
	// Not_rm32
	test_instr(16, |a| a.not(edx).unwrap(),
		Instruction::with1(Code::Not_rm32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn not_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Not_rm64 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Not_rm32
		test_instr(16, |a| a.not(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Not_rm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Not_rm16
		test_instr(16, |a| a.not(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Not_rm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Not_rm8
		test_instr(16, |a| a.not(byte_ptr(di)).unwrap(),
			Instruction::with1(Code::Not_rm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Not_rm8
		test_invalid_instr(16, |a| assert!(a.not(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn or_r8_r8() {
	// Or_rm8_r8
	test_instr(16, |a| a.or(dl, bl).unwrap(),
		Instruction::with2(Code::Or_rm8_r8, Register::DL, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn or_m_r8() {
	// Or_rm8_r8
	test_instr(16, |a| a.or(byte_ptr(si), bl).unwrap(),
		Instruction::with2(Code::Or_rm8_r8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn or_r16_r16() {
	// Or_rm16_r16
	test_instr(16, |a| a.or(dx, bx).unwrap(),
		Instruction::with2(Code::Or_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn or_m_r16() {
	// Or_rm16_r16
	test_instr(16, |a| a.or(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Or_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn or_r32_r32() {
	// Or_rm32_r32
	test_instr(16, |a| a.or(edx, ebx).unwrap(),
		Instruction::with2(Code::Or_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn or_m_r32() {
	// Or_rm32_r32
	test_instr(16, |a| a.or(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Or_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn or_r8_m() {
	// Or_r8_rm8
	test_instr(16, |a| a.or(dl, byte_ptr(si)).unwrap(),
		Instruction::with2(Code::Or_r8_rm8, Register::DL, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn or_r16_m() {
	// Or_r16_rm16
	test_instr(16, |a| a.or(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Or_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn or_r32_m() {
	// Or_r32_rm32
	test_instr(16, |a| a.or(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Or_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn or_r8_i() {
	/* if op0.register() == Register::AL */ {
		// Or_AL_imm8
		test_instr(16, |a| a.or(al, -5i32).unwrap(),
			Instruction::with2(Code::Or_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Or_rm8_imm8
		test_instr(16, |a| a.or(dl, -5i32).unwrap(),
			Instruction::with2(Code::Or_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AL */ {
		// Or_AL_imm8
		test_instr(16, |a| a.or(al, -5).unwrap(),
			Instruction::with2(Code::Or_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Or_rm8_imm8
		test_instr(16, |a| a.or(dl, -5).unwrap(),
			Instruction::with2(Code::Or_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn or_r16_i() {
	/* if op0.register() == Register::AX */ {
		// Or_AX_imm16
		test_instr(16, |a| a.or(ax, 0x40B7i32).unwrap(),
			Instruction::with2(Code::Or_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Or_rm16_imm8
		test_instr(16, |a| a.or(dx, -0x80i32).unwrap(),
			Instruction::with2(Code::Or_rm16_imm8, Register::DX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Or_rm16_imm8
		test_instr(16, |a| a.or(dx, 0x7Fi32).unwrap(),
			Instruction::with2(Code::Or_rm16_imm8, Register::DX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Or_rm16_imm16
		test_instr(16, |a| a.or(dx, 0x40B7i32).unwrap(),
			Instruction::with2(Code::Or_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AX */ {
		// Or_AX_imm16
		test_instr(16, |a| a.or(ax, 0x40B7).unwrap(),
			Instruction::with2(Code::Or_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Or_rm16_imm8
		test_instr(16, |a| a.or(dx, -0x80).unwrap(),
			Instruction::with2(Code::Or_rm16_imm8, Register::DX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Or_rm16_imm8
		test_instr(16, |a| a.or(dx, 0x7F).unwrap(),
			Instruction::with2(Code::Or_rm16_imm8, Register::DX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Or_rm16_imm16
		test_instr(16, |a| a.or(dx, 0x40B7).unwrap(),
			Instruction::with2(Code::Or_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn or_r32_i() {
	/* if op0.register() == Register::EAX */ {
		// Or_EAX_imm32
		test_instr(16, |a| a.or(eax, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Or_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Or_rm32_imm8
		test_instr(16, |a| a.or(edx, -0x80i32).unwrap(),
			Instruction::with2(Code::Or_rm32_imm8, Register::EDX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Or_rm32_imm8
		test_instr(16, |a| a.or(edx, 0x7Fi32).unwrap(),
			Instruction::with2(Code::Or_rm32_imm8, Register::EDX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Or_rm32_imm32
		test_instr(16, |a| a.or(edx, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Or_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::EAX */ {
		// Or_EAX_imm32
		test_instr(16, |a| a.or(eax, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Or_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Or_rm32_imm8
		test_instr(16, |a| a.or(edx, -0x80).unwrap(),
			Instruction::with2(Code::Or_rm32_imm8, Register::EDX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Or_rm32_imm8
		test_instr(16, |a| a.or(edx, 0x7F).unwrap(),
			Instruction::with2(Code::Or_rm32_imm8, Register::EDX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Or_rm32_imm32
		test_instr(16, |a| a.or(edx, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Or_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn or_m_i() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Skipping Or_rm64_imm8 - Not supported by current bitness
			// Skipping Or_rm64_imm8 - Not supported by current bitness
		} /* else */ {
			// Skipping Or_rm64_imm32 - Not supported by current bitness
		}
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Or_rm32_imm8
			test_instr(16, |a| a.or(dword_ptr(di), -0x80i32).unwrap(),
				Instruction::with2(Code::Or_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Or_rm32_imm8
			test_instr(16, |a| a.or(dword_ptr(di), 0x7Fi32).unwrap(),
				Instruction::with2(Code::Or_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Or_rm32_imm32
			test_instr(16, |a| a.or(dword_ptr(di), 0x7FFFFFFFi32).unwrap(),
				Instruction::with2(Code::Or_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Or_rm16_imm8
			test_instr(16, |a| a.or(word_ptr(di), -0x80i32).unwrap(),
				Instruction::with2(Code::Or_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Or_rm16_imm8
			test_instr(16, |a| a.or(word_ptr(di), 0x7Fi32).unwrap(),
				Instruction::with2(Code::Or_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Or_rm16_imm16
			test_instr(16, |a| a.or(word_ptr(di), 0x40B7i32).unwrap(),
				Instruction::with2(Code::Or_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Or_rm8_imm8
		test_instr(16, |a| a.or(byte_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::Or_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Or_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.or(zmmword_ptr(di), -5i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op0.size() == MemoryOperandSize::Qword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Skipping Or_rm64_imm8 - Not supported by current bitness
			// Skipping Or_rm64_imm8 - Not supported by current bitness
		} /* else */ {
			// Skipping Or_rm64_imm32 - Not supported by current bitness
		}
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Or_rm32_imm8
			test_instr(16, |a| a.or(dword_ptr(di), -0x80).unwrap(),
				Instruction::with2(Code::Or_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Or_rm32_imm8
			test_instr(16, |a| a.or(dword_ptr(di), 0x7F).unwrap(),
				Instruction::with2(Code::Or_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Or_rm32_imm32
			test_instr(16, |a| a.or(dword_ptr(di), 0x7FFFFFFF).unwrap(),
				Instruction::with2(Code::Or_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Or_rm16_imm8
			test_instr(16, |a| a.or(word_ptr(di), -0x80).unwrap(),
				Instruction::with2(Code::Or_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Or_rm16_imm8
			test_instr(16, |a| a.or(word_ptr(di), 0x7F).unwrap(),
				Instruction::with2(Code::Or_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Or_rm16_imm16
			test_instr(16, |a| a.or(word_ptr(di), 0x40B7).unwrap(),
				Instruction::with2(Code::Or_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Or_rm8_imm8
		test_instr(16, |a| a.or(byte_ptr(di), -5).unwrap(),
			Instruction::with2(Code::Or_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Or_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.or(zmmword_ptr(di), -5).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn or_r8_u() {
	/* if op0.register() == Register::AL */ {
		// Or_AL_imm8
		test_instr(16, |a| a.or(al, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Or_AL_imm8, Register::AL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Or_rm8_imm8
		test_instr(16, |a| a.or(dl, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Or_rm8_imm8, Register::DL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn or_r16_u() {
	/* if op0.register() == Register::AX */ {
		// Or_AX_imm16
		test_instr(16, |a| a.or(ax, 0x40B7u32).unwrap(),
			Instruction::with2(Code::Or_AX_imm16, Register::AX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 <= i8::MAX as u32 || (0xFF80 <= op1 && op1 <= 0xFFFF) */ {
		// Or_rm16_imm8
		test_instr(16, |a| a.or(dx, 0xFF80u32).unwrap(),
			Instruction::with2(Code::Or_rm16_imm8, Register::DX, 0xFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Or_rm16_imm8
		test_instr(16, |a| a.or(dx, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Or_rm16_imm8, Register::DX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Or_rm16_imm16
		test_instr(16, |a| a.or(dx, 0x40B7u32).unwrap(),
			Instruction::with2(Code::Or_rm16_imm16, Register::DX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn or_r32_u() {
	/* if op0.register() == Register::EAX */ {
		// Or_EAX_imm32
		test_instr(16, |a| a.or(eax, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Or_EAX_imm32, Register::EAX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 <= i8::MAX as u32 || 0xFFFF_FF80 <= op1 */ {
		// Or_rm32_imm8
		test_instr(16, |a| a.or(edx, 0xFFFFFF80u32).unwrap(),
			Instruction::with2(Code::Or_rm32_imm8, Register::EDX, 0xFFFFFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Or_rm32_imm8
		test_instr(16, |a| a.or(edx, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Or_rm32_imm8, Register::EDX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Or_rm32_imm32
		test_instr(16, |a| a.or(edx, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Or_rm32_imm32, Register::EDX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn or_m_u() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 <= i8::MAX as u32 || 0xFFFF_FF80 <= op1 */ {
			// Or_rm32_imm8
			test_instr(16, |a| a.or(dword_ptr(di), 0xFFFFFF80u32).unwrap(),
				Instruction::with2(Code::Or_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFFFFFF80u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Or_rm32_imm8
			test_instr(16, |a| a.or(dword_ptr(di), 0x7Fu32).unwrap(),
				Instruction::with2(Code::Or_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Or_rm32_imm32
			test_instr(16, |a| a.or(dword_ptr(di), 0x7FFFFFFFu32).unwrap(),
				Instruction::with2(Code::Or_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 <= i8::MAX as u32 || (0xFF80 <= op1 && op1 <= 0xFFFF) */ {
			// Or_rm16_imm8
			test_instr(16, |a| a.or(word_ptr(di), 0xFF80u32).unwrap(),
				Instruction::with2(Code::Or_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFF80u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Or_rm16_imm8
			test_instr(16, |a| a.or(word_ptr(di), 0x7Fu32).unwrap(),
				Instruction::with2(Code::Or_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Or_rm16_imm16
			test_instr(16, |a| a.or(word_ptr(di), 0x40B7u32).unwrap(),
				Instruction::with2(Code::Or_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Or_rm8_imm8
		test_instr(16, |a| a.or(byte_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::Or_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Or_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.or(zmmword_ptr(di), 0x7Fu32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn orpd_xmm_xmm() {
	// Orpd_xmm_xmmm128
	test_instr(16, |a| a.orpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Orpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn orpd_xmm_m() {
	// Orpd_xmm_xmmm128
	test_instr(16, |a| a.orpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Orpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn orps_xmm_xmm() {
	// Orps_xmm_xmmm128
	test_instr(16, |a| a.orps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Orps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn orps_xmm_m() {
	// Orps_xmm_xmmm128
	test_instr(16, |a| a.orps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Orps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn out_r16_r8() {
	// Out_DX_AL
	test_instr(16, |a| a.out(dx, al).unwrap(),
		Instruction::with2(Code::Out_DX_AL, Register::DX, Register::AL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn out_i_r8() {
	// Out_imm8_AL
	test_instr(16, |a| a.out(-5i32, al).unwrap(),
		Instruction::with2(Code::Out_imm8_AL, -5i32, Register::AL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Out_imm8_AL
	test_instr(16, |a| a.out(-5, al).unwrap(),
		Instruction::with2(Code::Out_imm8_AL, -5i32, Register::AL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn out_u_r8() {
	// Out_imm8_AL
	test_instr(16, |a| a.out(0x7Fu32, al).unwrap(),
		Instruction::with2(Code::Out_imm8_AL, 0x7Fu32, Register::AL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn out_r16_r16() {
	// Out_DX_AX
	test_instr(16, |a| a.out(dx, ax).unwrap(),
		Instruction::with2(Code::Out_DX_AX, Register::DX, Register::AX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn out_i_r16() {
	// Out_imm8_AX
	test_instr(16, |a| a.out(-5i32, ax).unwrap(),
		Instruction::with2(Code::Out_imm8_AX, -5i32, Register::AX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Out_imm8_AX
	test_instr(16, |a| a.out(-5, ax).unwrap(),
		Instruction::with2(Code::Out_imm8_AX, -5i32, Register::AX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn out_u_r16() {
	// Out_imm8_AX
	test_instr(16, |a| a.out(0x7Fu32, ax).unwrap(),
		Instruction::with2(Code::Out_imm8_AX, 0x7Fu32, Register::AX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn out_r16_r32() {
	// Out_DX_EAX
	test_instr(16, |a| a.out(dx, eax).unwrap(),
		Instruction::with2(Code::Out_DX_EAX, Register::DX, Register::EAX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn out_i_r32() {
	// Out_imm8_EAX
	test_instr(16, |a| a.out(-5i32, eax).unwrap(),
		Instruction::with2(Code::Out_imm8_EAX, -5i32, Register::EAX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Out_imm8_EAX
	test_instr(16, |a| a.out(-5, eax).unwrap(),
		Instruction::with2(Code::Out_imm8_EAX, -5i32, Register::EAX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn out_u_r32() {
	// Out_imm8_EAX
	test_instr(16, |a| a.out(0x7Fu32, eax).unwrap(),
		Instruction::with2(Code::Out_imm8_EAX, 0x7Fu32, Register::EAX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn outsb() {
	// Outsb_DX_m8
	test_instr(16, |a| a.outsb().unwrap(),
		Instruction::with_outsb(16, Register::None, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn outsd() {
	// Outsd_DX_m32
	test_instr(16, |a| a.outsd().unwrap(),
		Instruction::with_outsd(16, Register::None, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn outsw() {
	// Outsw_DX_m16
	test_instr(16, |a| a.outsw().unwrap(),
		Instruction::with_outsw(16, Register::None, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pabsb_mm_mm() {
	// Pabsb_mm_mmm64
	test_instr(16, |a| a.pabsb(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pabsb_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pabsb_xmm_xmm() {
	// Pabsb_xmm_xmmm128
	test_instr(16, |a| a.pabsb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pabsb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pabsb_mm_m() {
	// Pabsb_mm_mmm64
	test_instr(16, |a| a.pabsb(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pabsb_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pabsb_xmm_m() {
	// Pabsb_xmm_xmmm128
	test_instr(16, |a| a.pabsb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pabsb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pabsd_mm_mm() {
	// Pabsd_mm_mmm64
	test_instr(16, |a| a.pabsd(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pabsd_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pabsd_xmm_xmm() {
	// Pabsd_xmm_xmmm128
	test_instr(16, |a| a.pabsd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pabsd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pabsd_mm_m() {
	// Pabsd_mm_mmm64
	test_instr(16, |a| a.pabsd(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pabsd_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pabsd_xmm_m() {
	// Pabsd_xmm_xmmm128
	test_instr(16, |a| a.pabsd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pabsd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pabsw_mm_mm() {
	// Pabsw_mm_mmm64
	test_instr(16, |a| a.pabsw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pabsw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pabsw_xmm_xmm() {
	// Pabsw_xmm_xmmm128
	test_instr(16, |a| a.pabsw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pabsw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pabsw_mm_m() {
	// Pabsw_mm_mmm64
	test_instr(16, |a| a.pabsw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pabsw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pabsw_xmm_m() {
	// Pabsw_xmm_xmmm128
	test_instr(16, |a| a.pabsw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pabsw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn packssdw_mm_mm() {
	// Packssdw_mm_mmm64
	test_instr(16, |a| a.packssdw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Packssdw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn packssdw_xmm_xmm() {
	// Packssdw_xmm_xmmm128
	test_instr(16, |a| a.packssdw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Packssdw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn packssdw_mm_m() {
	// Packssdw_mm_mmm64
	test_instr(16, |a| a.packssdw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Packssdw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn packssdw_xmm_m() {
	// Packssdw_xmm_xmmm128
	test_instr(16, |a| a.packssdw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Packssdw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn packsswb_mm_mm() {
	// Packsswb_mm_mmm64
	test_instr(16, |a| a.packsswb(mm2, mm3).unwrap(),
		Instruction::with2(Code::Packsswb_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn packsswb_xmm_xmm() {
	// Packsswb_xmm_xmmm128
	test_instr(16, |a| a.packsswb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Packsswb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn packsswb_mm_m() {
	// Packsswb_mm_mmm64
	test_instr(16, |a| a.packsswb(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Packsswb_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn packsswb_xmm_m() {
	// Packsswb_xmm_xmmm128
	test_instr(16, |a| a.packsswb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Packsswb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn packusdw_xmm_xmm() {
	// Packusdw_xmm_xmmm128
	test_instr(16, |a| a.packusdw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Packusdw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn packusdw_xmm_m() {
	// Packusdw_xmm_xmmm128
	test_instr(16, |a| a.packusdw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Packusdw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn packuswb_mm_mm() {
	// Packuswb_mm_mmm64
	test_instr(16, |a| a.packuswb(mm2, mm3).unwrap(),
		Instruction::with2(Code::Packuswb_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn packuswb_xmm_xmm() {
	// Packuswb_xmm_xmmm128
	test_instr(16, |a| a.packuswb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Packuswb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn packuswb_mm_m() {
	// Packuswb_mm_mmm64
	test_instr(16, |a| a.packuswb(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Packuswb_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn packuswb_xmm_m() {
	// Packuswb_xmm_xmmm128
	test_instr(16, |a| a.packuswb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Packuswb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddb_mm_mm() {
	// Paddb_mm_mmm64
	test_instr(16, |a| a.paddb(mm2, mm3).unwrap(),
		Instruction::with2(Code::Paddb_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddb_xmm_xmm() {
	// Paddb_xmm_xmmm128
	test_instr(16, |a| a.paddb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Paddb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddb_mm_m() {
	// Paddb_mm_mmm64
	test_instr(16, |a| a.paddb(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paddb_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddb_xmm_m() {
	// Paddb_xmm_xmmm128
	test_instr(16, |a| a.paddb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paddb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddd_mm_mm() {
	// Paddd_mm_mmm64
	test_instr(16, |a| a.paddd(mm2, mm3).unwrap(),
		Instruction::with2(Code::Paddd_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddd_xmm_xmm() {
	// Paddd_xmm_xmmm128
	test_instr(16, |a| a.paddd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Paddd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddd_mm_m() {
	// Paddd_mm_mmm64
	test_instr(16, |a| a.paddd(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paddd_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddd_xmm_m() {
	// Paddd_xmm_xmmm128
	test_instr(16, |a| a.paddd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paddd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddq_mm_mm() {
	// Paddq_mm_mmm64
	test_instr(16, |a| a.paddq(mm2, mm3).unwrap(),
		Instruction::with2(Code::Paddq_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddq_xmm_xmm() {
	// Paddq_xmm_xmmm128
	test_instr(16, |a| a.paddq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Paddq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddq_mm_m() {
	// Paddq_mm_mmm64
	test_instr(16, |a| a.paddq(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paddq_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddq_xmm_m() {
	// Paddq_xmm_xmmm128
	test_instr(16, |a| a.paddq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paddq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddsb_mm_mm() {
	// Paddsb_mm_mmm64
	test_instr(16, |a| a.paddsb(mm2, mm3).unwrap(),
		Instruction::with2(Code::Paddsb_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddsb_xmm_xmm() {
	// Paddsb_xmm_xmmm128
	test_instr(16, |a| a.paddsb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Paddsb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddsb_mm_m() {
	// Paddsb_mm_mmm64
	test_instr(16, |a| a.paddsb(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paddsb_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddsb_xmm_m() {
	// Paddsb_xmm_xmmm128
	test_instr(16, |a| a.paddsb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paddsb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddsiw_mm_mm() {
	// Paddsiw_mm_mmm64
	test_instr(16, |a| a.paddsiw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Paddsiw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn paddsiw_mm_m() {
	// Paddsiw_mm_mmm64
	test_instr(16, |a| a.paddsiw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paddsiw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn paddsw_mm_mm() {
	// Paddsw_mm_mmm64
	test_instr(16, |a| a.paddsw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Paddsw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddsw_xmm_xmm() {
	// Paddsw_xmm_xmmm128
	test_instr(16, |a| a.paddsw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Paddsw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddsw_mm_m() {
	// Paddsw_mm_mmm64
	test_instr(16, |a| a.paddsw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paddsw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddsw_xmm_m() {
	// Paddsw_xmm_xmmm128
	test_instr(16, |a| a.paddsw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paddsw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddusb_mm_mm() {
	// Paddusb_mm_mmm64
	test_instr(16, |a| a.paddusb(mm2, mm3).unwrap(),
		Instruction::with2(Code::Paddusb_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddusb_xmm_xmm() {
	// Paddusb_xmm_xmmm128
	test_instr(16, |a| a.paddusb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Paddusb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddusb_mm_m() {
	// Paddusb_mm_mmm64
	test_instr(16, |a| a.paddusb(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paddusb_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddusb_xmm_m() {
	// Paddusb_xmm_xmmm128
	test_instr(16, |a| a.paddusb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paddusb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddusw_mm_mm() {
	// Paddusw_mm_mmm64
	test_instr(16, |a| a.paddusw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Paddusw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddusw_xmm_xmm() {
	// Paddusw_xmm_xmmm128
	test_instr(16, |a| a.paddusw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Paddusw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddusw_mm_m() {
	// Paddusw_mm_mmm64
	test_instr(16, |a| a.paddusw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paddusw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddusw_xmm_m() {
	// Paddusw_xmm_xmmm128
	test_instr(16, |a| a.paddusw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paddusw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddw_mm_mm() {
	// Paddw_mm_mmm64
	test_instr(16, |a| a.paddw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Paddw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddw_xmm_xmm() {
	// Paddw_xmm_xmmm128
	test_instr(16, |a| a.paddw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Paddw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddw_mm_m() {
	// Paddw_mm_mmm64
	test_instr(16, |a| a.paddw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paddw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paddw_xmm_m() {
	// Paddw_xmm_xmmm128
	test_instr(16, |a| a.paddw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paddw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn palignr_mm_mm_i() {
	// Palignr_mm_mmm64_imm8
	test_instr(16, |a| a.palignr(mm2, mm3, -5i32).unwrap(),
		Instruction::with3(Code::Palignr_mm_mmm64_imm8, Register::MM2, Register::MM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Palignr_mm_mmm64_imm8
	test_instr(16, |a| a.palignr(mm2, mm3, -5).unwrap(),
		Instruction::with3(Code::Palignr_mm_mmm64_imm8, Register::MM2, Register::MM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn palignr_xmm_xmm_i() {
	// Palignr_xmm_xmmm128_imm8
	test_instr(16, |a| a.palignr(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Palignr_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Palignr_xmm_xmmm128_imm8
	test_instr(16, |a| a.palignr(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Palignr_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn palignr_mm_m_i() {
	// Palignr_mm_mmm64_imm8
	test_instr(16, |a| a.palignr(mm2, qword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Palignr_mm_mmm64_imm8, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Palignr_mm_mmm64_imm8
	test_instr(16, |a| a.palignr(mm2, qword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Palignr_mm_mmm64_imm8, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn palignr_xmm_m_i() {
	// Palignr_xmm_xmmm128_imm8
	test_instr(16, |a| a.palignr(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Palignr_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Palignr_xmm_xmmm128_imm8
	test_instr(16, |a| a.palignr(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Palignr_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn palignr_mm_mm_u() {
	// Palignr_mm_mmm64_imm8
	test_instr(16, |a| a.palignr(mm2, mm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Palignr_mm_mmm64_imm8, Register::MM2, Register::MM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn palignr_xmm_xmm_u() {
	// Palignr_xmm_xmmm128_imm8
	test_instr(16, |a| a.palignr(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Palignr_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn palignr_mm_m_u() {
	// Palignr_mm_mmm64_imm8
	test_instr(16, |a| a.palignr(mm2, qword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Palignr_mm_mmm64_imm8, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn palignr_xmm_m_u() {
	// Palignr_xmm_xmmm128_imm8
	test_instr(16, |a| a.palignr(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Palignr_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pand_mm_mm() {
	// Pand_mm_mmm64
	test_instr(16, |a| a.pand(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pand_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pand_xmm_xmm() {
	// Pand_xmm_xmmm128
	test_instr(16, |a| a.pand(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pand_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pand_mm_m() {
	// Pand_mm_mmm64
	test_instr(16, |a| a.pand(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pand_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pand_xmm_m() {
	// Pand_xmm_xmmm128
	test_instr(16, |a| a.pand(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pand_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pandn_mm_mm() {
	// Pandn_mm_mmm64
	test_instr(16, |a| a.pandn(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pandn_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pandn_xmm_xmm() {
	// Pandn_xmm_xmmm128
	test_instr(16, |a| a.pandn(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pandn_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pandn_mm_m() {
	// Pandn_mm_mmm64
	test_instr(16, |a| a.pandn(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pandn_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pandn_xmm_m() {
	// Pandn_xmm_xmmm128
	test_instr(16, |a| a.pandn(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pandn_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pause() {
	// Pause
	test_instr(16, |a| a.pause().unwrap(),
		Instruction::with(Code::Pause),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn paveb_mm_mm() {
	// Paveb_mm_mmm64
	test_instr(16, |a| a.paveb(mm2, mm3).unwrap(),
		Instruction::with2(Code::Paveb_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn paveb_mm_m() {
	// Paveb_mm_mmm64
	test_instr(16, |a| a.paveb(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Paveb_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn pavgb_mm_mm() {
	// Pavgb_mm_mmm64
	test_instr(16, |a| a.pavgb(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pavgb_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pavgb_xmm_xmm() {
	// Pavgb_xmm_xmmm128
	test_instr(16, |a| a.pavgb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pavgb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pavgb_mm_m() {
	// Pavgb_mm_mmm64
	test_instr(16, |a| a.pavgb(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pavgb_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pavgb_xmm_m() {
	// Pavgb_xmm_xmmm128
	test_instr(16, |a| a.pavgb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pavgb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pavgusb_mm_mm() {
	// D3NOW_Pavgusb_mm_mmm64
	test_instr(16, |a| a.pavgusb(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pavgusb_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pavgusb_mm_m() {
	// D3NOW_Pavgusb_mm_mmm64
	test_instr(16, |a| a.pavgusb(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pavgusb_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pavgw_mm_mm() {
	// Pavgw_mm_mmm64
	test_instr(16, |a| a.pavgw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pavgw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pavgw_xmm_xmm() {
	// Pavgw_xmm_xmmm128
	test_instr(16, |a| a.pavgw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pavgw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pavgw_mm_m() {
	// Pavgw_mm_mmm64
	test_instr(16, |a| a.pavgw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pavgw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pavgw_xmm_m() {
	// Pavgw_xmm_xmmm128
	test_instr(16, |a| a.pavgw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pavgw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pblendvb_xmm_xmm() {
	// Pblendvb_xmm_xmmm128
	test_instr(16, |a| a.pblendvb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pblendvb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pblendvb_xmm_m() {
	// Pblendvb_xmm_xmmm128
	test_instr(16, |a| a.pblendvb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pblendvb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pblendw_xmm_xmm_i() {
	// Pblendw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pblendw(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Pblendw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pblendw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pblendw(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Pblendw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pblendw_xmm_m_i() {
	// Pblendw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pblendw(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Pblendw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pblendw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pblendw(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Pblendw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pblendw_xmm_xmm_u() {
	// Pblendw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pblendw(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pblendw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pblendw_xmm_m_u() {
	// Pblendw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pblendw(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pblendw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pclmulhqhqdq_xmm_xmm() {
	// Pclmulqdq_xmm_xmmm128_imm8
	test_instr(16, |a| a.pclmulhqhqdq(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Pclmulqdq_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pclmulhqhqdq_xmm_m() {
	// Pclmulqdq_xmm_xmmm128_imm8
	test_instr(16, |a| a.pclmulhqhqdq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Pclmulqdq_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pclmulhqlqdq_xmm_xmm() {
	// Pclmulqdq_xmm_xmmm128_imm8
	test_instr(16, |a| a.pclmulhqlqdq(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Pclmulqdq_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pclmulhqlqdq_xmm_m() {
	// Pclmulqdq_xmm_xmmm128_imm8
	test_instr(16, |a| a.pclmulhqlqdq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Pclmulqdq_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pclmullqhqdq_xmm_xmm() {
	// Pclmulqdq_xmm_xmmm128_imm8
	test_instr(16, |a| a.pclmullqhqdq(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Pclmulqdq_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pclmullqhqdq_xmm_m() {
	// Pclmulqdq_xmm_xmmm128_imm8
	test_instr(16, |a| a.pclmullqhqdq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Pclmulqdq_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pclmullqlqdq_xmm_xmm() {
	// Pclmulqdq_xmm_xmmm128_imm8
	test_instr(16, |a| a.pclmullqlqdq(xmm2, xmm3).unwrap(),
		Instruction::with3(Code::Pclmulqdq_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pclmullqlqdq_xmm_m() {
	// Pclmulqdq_xmm_xmmm128_imm8
	test_instr(16, |a| a.pclmullqlqdq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::Pclmulqdq_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pclmulqdq_xmm_xmm_i() {
	// Pclmulqdq_xmm_xmmm128_imm8
	test_instr(16, |a| a.pclmulqdq(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Pclmulqdq_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pclmulqdq_xmm_xmmm128_imm8
	test_instr(16, |a| a.pclmulqdq(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Pclmulqdq_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pclmulqdq_xmm_m_i() {
	// Pclmulqdq_xmm_xmmm128_imm8
	test_instr(16, |a| a.pclmulqdq(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Pclmulqdq_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pclmulqdq_xmm_xmmm128_imm8
	test_instr(16, |a| a.pclmulqdq(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Pclmulqdq_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pclmulqdq_xmm_xmm_u() {
	// Pclmulqdq_xmm_xmmm128_imm8
	test_instr(16, |a| a.pclmulqdq(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pclmulqdq_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pclmulqdq_xmm_m_u() {
	// Pclmulqdq_xmm_xmmm128_imm8
	test_instr(16, |a| a.pclmulqdq(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pclmulqdq_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpeqb_mm_mm() {
	// Pcmpeqb_mm_mmm64
	test_instr(16, |a| a.pcmpeqb(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pcmpeqb_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpeqb_xmm_xmm() {
	// Pcmpeqb_xmm_xmmm128
	test_instr(16, |a| a.pcmpeqb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pcmpeqb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpeqb_mm_m() {
	// Pcmpeqb_mm_mmm64
	test_instr(16, |a| a.pcmpeqb(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pcmpeqb_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpeqb_xmm_m() {
	// Pcmpeqb_xmm_xmmm128
	test_instr(16, |a| a.pcmpeqb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pcmpeqb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpeqd_mm_mm() {
	// Pcmpeqd_mm_mmm64
	test_instr(16, |a| a.pcmpeqd(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pcmpeqd_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpeqd_xmm_xmm() {
	// Pcmpeqd_xmm_xmmm128
	test_instr(16, |a| a.pcmpeqd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pcmpeqd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpeqd_mm_m() {
	// Pcmpeqd_mm_mmm64
	test_instr(16, |a| a.pcmpeqd(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pcmpeqd_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpeqd_xmm_m() {
	// Pcmpeqd_xmm_xmmm128
	test_instr(16, |a| a.pcmpeqd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pcmpeqd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpeqq_xmm_xmm() {
	// Pcmpeqq_xmm_xmmm128
	test_instr(16, |a| a.pcmpeqq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pcmpeqq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpeqq_xmm_m() {
	// Pcmpeqq_xmm_xmmm128
	test_instr(16, |a| a.pcmpeqq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pcmpeqq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpeqw_mm_mm() {
	// Pcmpeqw_mm_mmm64
	test_instr(16, |a| a.pcmpeqw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pcmpeqw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpeqw_xmm_xmm() {
	// Pcmpeqw_xmm_xmmm128
	test_instr(16, |a| a.pcmpeqw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pcmpeqw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpeqw_mm_m() {
	// Pcmpeqw_mm_mmm64
	test_instr(16, |a| a.pcmpeqw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pcmpeqw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpeqw_xmm_m() {
	// Pcmpeqw_xmm_xmmm128
	test_instr(16, |a| a.pcmpeqw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pcmpeqw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpestri_xmm_xmm_i() {
	// Pcmpestri_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpestri(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Pcmpestri_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pcmpestri_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpestri(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Pcmpestri_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpestri_xmm_m_i() {
	// Pcmpestri_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpestri(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Pcmpestri_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pcmpestri_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpestri(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Pcmpestri_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpestri_xmm_xmm_u() {
	// Pcmpestri_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpestri(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pcmpestri_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpestri_xmm_m_u() {
	// Pcmpestri_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpestri(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pcmpestri_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpestrm_xmm_xmm_i() {
	// Pcmpestrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpestrm(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Pcmpestrm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pcmpestrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpestrm(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Pcmpestrm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpestrm_xmm_m_i() {
	// Pcmpestrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpestrm(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Pcmpestrm_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pcmpestrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpestrm(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Pcmpestrm_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpestrm_xmm_xmm_u() {
	// Pcmpestrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpestrm(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pcmpestrm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpestrm_xmm_m_u() {
	// Pcmpestrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpestrm(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pcmpestrm_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpgtb_mm_mm() {
	// Pcmpgtb_mm_mmm64
	test_instr(16, |a| a.pcmpgtb(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pcmpgtb_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpgtb_xmm_xmm() {
	// Pcmpgtb_xmm_xmmm128
	test_instr(16, |a| a.pcmpgtb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pcmpgtb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpgtb_mm_m() {
	// Pcmpgtb_mm_mmm64
	test_instr(16, |a| a.pcmpgtb(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pcmpgtb_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpgtb_xmm_m() {
	// Pcmpgtb_xmm_xmmm128
	test_instr(16, |a| a.pcmpgtb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pcmpgtb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpgtd_mm_mm() {
	// Pcmpgtd_mm_mmm64
	test_instr(16, |a| a.pcmpgtd(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pcmpgtd_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpgtd_xmm_xmm() {
	// Pcmpgtd_xmm_xmmm128
	test_instr(16, |a| a.pcmpgtd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pcmpgtd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpgtd_mm_m() {
	// Pcmpgtd_mm_mmm64
	test_instr(16, |a| a.pcmpgtd(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pcmpgtd_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpgtd_xmm_m() {
	// Pcmpgtd_xmm_xmmm128
	test_instr(16, |a| a.pcmpgtd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pcmpgtd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpgtq_xmm_xmm() {
	// Pcmpgtq_xmm_xmmm128
	test_instr(16, |a| a.pcmpgtq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pcmpgtq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpgtq_xmm_m() {
	// Pcmpgtq_xmm_xmmm128
	test_instr(16, |a| a.pcmpgtq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pcmpgtq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpgtw_mm_mm() {
	// Pcmpgtw_mm_mmm64
	test_instr(16, |a| a.pcmpgtw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pcmpgtw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpgtw_xmm_xmm() {
	// Pcmpgtw_xmm_xmmm128
	test_instr(16, |a| a.pcmpgtw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pcmpgtw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpgtw_mm_m() {
	// Pcmpgtw_mm_mmm64
	test_instr(16, |a| a.pcmpgtw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pcmpgtw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpgtw_xmm_m() {
	// Pcmpgtw_xmm_xmmm128
	test_instr(16, |a| a.pcmpgtw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pcmpgtw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpistri_xmm_xmm_i() {
	// Pcmpistri_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpistri(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Pcmpistri_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pcmpistri_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpistri(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Pcmpistri_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpistri_xmm_m_i() {
	// Pcmpistri_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpistri(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Pcmpistri_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pcmpistri_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpistri(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Pcmpistri_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpistri_xmm_xmm_u() {
	// Pcmpistri_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpistri(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pcmpistri_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpistri_xmm_m_u() {
	// Pcmpistri_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpistri(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pcmpistri_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpistrm_xmm_xmm_i() {
	// Pcmpistrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpistrm(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Pcmpistrm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pcmpistrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpistrm(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Pcmpistrm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpistrm_xmm_m_i() {
	// Pcmpistrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpistrm(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Pcmpistrm_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pcmpistrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpistrm(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Pcmpistrm_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpistrm_xmm_xmm_u() {
	// Pcmpistrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpistrm(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pcmpistrm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcmpistrm_xmm_m_u() {
	// Pcmpistrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.pcmpistrm(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pcmpistrm_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pcommit() {
	// Pcommit
	test_instr(16, |a| a.pcommit().unwrap(),
		Instruction::with(Code::Pcommit),
		TestInstrFlags::NONE, DecoderOptions::PCOMMIT);
}

#[test]
#[rustfmt::skip]
fn pconfig() {
	// Pconfig
	test_instr(16, |a| a.pconfig().unwrap(),
		Instruction::with(Code::Pconfig),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pdep_r32_r32_r32() {
	// VEX_Pdep_r32_r32_rm32
	test_instr(16, |a| a.pdep(edx, ebx, esp).unwrap(),
		Instruction::with3(Code::VEX_Pdep_r32_r32_rm32, Register::EDX, Register::EBX, Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pdep_r32_r32_m() {
	// VEX_Pdep_r32_r32_rm32
	test_instr(16, |a| a.pdep(edx, ebx, dword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Pdep_r32_r32_rm32, Register::EDX, Register::EBX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pdistib_mm_m() {
	// Pdistib_mm_m64
	test_instr(16, |a| a.pdistib(mm2, ptr(si)).unwrap(),
		Instruction::with2(Code::Pdistib_mm_m64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn pext_r32_r32_r32() {
	// VEX_Pext_r32_r32_rm32
	test_instr(16, |a| a.pext(edx, ebx, esp).unwrap(),
		Instruction::with3(Code::VEX_Pext_r32_r32_rm32, Register::EDX, Register::EBX, Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pext_r32_r32_m() {
	// VEX_Pext_r32_r32_rm32
	test_instr(16, |a| a.pext(edx, ebx, dword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Pext_r32_r32_rm32, Register::EDX, Register::EBX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pextrb_r32_xmm_i() {
	// Pextrb_r32m8_xmm_imm8
	test_instr(16, |a| a.pextrb(edx, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Pextrb_r32m8_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pextrb_r32m8_xmm_imm8
	test_instr(16, |a| a.pextrb(edx, xmm3, -5).unwrap(),
		Instruction::with3(Code::Pextrb_r32m8_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pextrb_m_xmm_i() {
	// Pextrb_r32m8_xmm_imm8
	test_instr(16, |a| a.pextrb(dword_ptr(si), xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Pextrb_r32m8_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pextrb_r32m8_xmm_imm8
	test_instr(16, |a| a.pextrb(dword_ptr(si), xmm3, -5).unwrap(),
		Instruction::with3(Code::Pextrb_r32m8_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pextrb_r32_xmm_u() {
	// Pextrb_r32m8_xmm_imm8
	test_instr(16, |a| a.pextrb(edx, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pextrb_r32m8_xmm_imm8, Register::EDX, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pextrb_m_xmm_u() {
	// Pextrb_r32m8_xmm_imm8
	test_instr(16, |a| a.pextrb(dword_ptr(si), xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pextrb_r32m8_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pextrd_r32_xmm_i() {
	// Pextrd_rm32_xmm_imm8
	test_instr(16, |a| a.pextrd(edx, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Pextrd_rm32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pextrd_rm32_xmm_imm8
	test_instr(16, |a| a.pextrd(edx, xmm3, -5).unwrap(),
		Instruction::with3(Code::Pextrd_rm32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pextrd_m_xmm_i() {
	// Pextrd_rm32_xmm_imm8
	test_instr(16, |a| a.pextrd(dword_ptr(si), xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Pextrd_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pextrd_rm32_xmm_imm8
	test_instr(16, |a| a.pextrd(dword_ptr(si), xmm3, -5).unwrap(),
		Instruction::with3(Code::Pextrd_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pextrd_r32_xmm_u() {
	// Pextrd_rm32_xmm_imm8
	test_instr(16, |a| a.pextrd(edx, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pextrd_rm32_xmm_imm8, Register::EDX, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pextrd_m_xmm_u() {
	// Pextrd_rm32_xmm_imm8
	test_instr(16, |a| a.pextrd(dword_ptr(si), xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pextrd_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pextrw_r32_mm_i() {
	// Pextrw_r32_mm_imm8
	test_instr(16, |a| a.pextrw(edx, mm3, -5i32).unwrap(),
		Instruction::with3(Code::Pextrw_r32_mm_imm8, Register::EDX, Register::MM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pextrw_r32_mm_imm8
	test_instr(16, |a| a.pextrw(edx, mm3, -5).unwrap(),
		Instruction::with3(Code::Pextrw_r32_mm_imm8, Register::EDX, Register::MM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pextrw_r32_xmm_i() {
	// Pextrw_r32_xmm_imm8
	test_instr(16, |a| a.pextrw(edx, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Pextrw_r32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pextrw_r32_xmm_imm8
	test_instr(16, |a| a.pextrw(edx, xmm3, -5).unwrap(),
		Instruction::with3(Code::Pextrw_r32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pextrw_m_xmm_i() {
	// Pextrw_r32m16_xmm_imm8
	test_instr(16, |a| a.pextrw(dword_ptr(si), xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Pextrw_r32m16_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pextrw_r32m16_xmm_imm8
	test_instr(16, |a| a.pextrw(dword_ptr(si), xmm3, -5).unwrap(),
		Instruction::with3(Code::Pextrw_r32m16_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pextrw_r32_mm_u() {
	// Pextrw_r32_mm_imm8
	test_instr(16, |a| a.pextrw(edx, mm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pextrw_r32_mm_imm8, Register::EDX, Register::MM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pextrw_r32_xmm_u() {
	// Pextrw_r32_xmm_imm8
	test_instr(16, |a| a.pextrw(edx, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pextrw_r32_xmm_imm8, Register::EDX, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pextrw_m_xmm_u() {
	// Pextrw_r32m16_xmm_imm8
	test_instr(16, |a| a.pextrw(dword_ptr(si), xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pextrw_r32m16_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pf2id_mm_mm() {
	// D3NOW_Pf2id_mm_mmm64
	test_instr(16, |a| a.pf2id(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pf2id_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pf2id_mm_m() {
	// D3NOW_Pf2id_mm_mmm64
	test_instr(16, |a| a.pf2id(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pf2id_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pf2iw_mm_mm() {
	// D3NOW_Pf2iw_mm_mmm64
	test_instr(16, |a| a.pf2iw(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pf2iw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pf2iw_mm_m() {
	// D3NOW_Pf2iw_mm_mmm64
	test_instr(16, |a| a.pf2iw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pf2iw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfacc_mm_mm() {
	// D3NOW_Pfacc_mm_mmm64
	test_instr(16, |a| a.pfacc(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfacc_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfacc_mm_m() {
	// D3NOW_Pfacc_mm_mmm64
	test_instr(16, |a| a.pfacc(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfacc_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfadd_mm_mm() {
	// D3NOW_Pfadd_mm_mmm64
	test_instr(16, |a| a.pfadd(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfadd_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfadd_mm_m() {
	// D3NOW_Pfadd_mm_mmm64
	test_instr(16, |a| a.pfadd(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfadd_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfcmpeq_mm_mm() {
	// D3NOW_Pfcmpeq_mm_mmm64
	test_instr(16, |a| a.pfcmpeq(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfcmpeq_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfcmpeq_mm_m() {
	// D3NOW_Pfcmpeq_mm_mmm64
	test_instr(16, |a| a.pfcmpeq(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfcmpeq_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfcmpge_mm_mm() {
	// D3NOW_Pfcmpge_mm_mmm64
	test_instr(16, |a| a.pfcmpge(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfcmpge_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfcmpge_mm_m() {
	// D3NOW_Pfcmpge_mm_mmm64
	test_instr(16, |a| a.pfcmpge(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfcmpge_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfcmpgt_mm_mm() {
	// D3NOW_Pfcmpgt_mm_mmm64
	test_instr(16, |a| a.pfcmpgt(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfcmpgt_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfcmpgt_mm_m() {
	// D3NOW_Pfcmpgt_mm_mmm64
	test_instr(16, |a| a.pfcmpgt(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfcmpgt_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfmax_mm_mm() {
	// D3NOW_Pfmax_mm_mmm64
	test_instr(16, |a| a.pfmax(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfmax_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfmax_mm_m() {
	// D3NOW_Pfmax_mm_mmm64
	test_instr(16, |a| a.pfmax(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfmax_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfmin_mm_mm() {
	// D3NOW_Pfmin_mm_mmm64
	test_instr(16, |a| a.pfmin(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfmin_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfmin_mm_m() {
	// D3NOW_Pfmin_mm_mmm64
	test_instr(16, |a| a.pfmin(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfmin_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfmul_mm_mm() {
	// D3NOW_Pfmul_mm_mmm64
	test_instr(16, |a| a.pfmul(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfmul_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfmul_mm_m() {
	// D3NOW_Pfmul_mm_mmm64
	test_instr(16, |a| a.pfmul(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfmul_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfnacc_mm_mm() {
	// D3NOW_Pfnacc_mm_mmm64
	test_instr(16, |a| a.pfnacc(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfnacc_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfnacc_mm_m() {
	// D3NOW_Pfnacc_mm_mmm64
	test_instr(16, |a| a.pfnacc(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfnacc_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfpnacc_mm_mm() {
	// D3NOW_Pfpnacc_mm_mmm64
	test_instr(16, |a| a.pfpnacc(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfpnacc_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfpnacc_mm_m() {
	// D3NOW_Pfpnacc_mm_mmm64
	test_instr(16, |a| a.pfpnacc(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfpnacc_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfrcp_mm_mm() {
	// D3NOW_Pfrcp_mm_mmm64
	test_instr(16, |a| a.pfrcp(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfrcp_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfrcp_mm_m() {
	// D3NOW_Pfrcp_mm_mmm64
	test_instr(16, |a| a.pfrcp(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfrcp_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfrcpit1_mm_mm() {
	// D3NOW_Pfrcpit1_mm_mmm64
	test_instr(16, |a| a.pfrcpit1(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfrcpit1_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfrcpit1_mm_m() {
	// D3NOW_Pfrcpit1_mm_mmm64
	test_instr(16, |a| a.pfrcpit1(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfrcpit1_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfrcpit2_mm_mm() {
	// D3NOW_Pfrcpit2_mm_mmm64
	test_instr(16, |a| a.pfrcpit2(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfrcpit2_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfrcpit2_mm_m() {
	// D3NOW_Pfrcpit2_mm_mmm64
	test_instr(16, |a| a.pfrcpit2(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfrcpit2_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfrcpv_mm_mm() {
	// D3NOW_Pfrcpv_mm_mmm64
	test_instr(16, |a| a.pfrcpv(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfrcpv_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn pfrcpv_mm_m() {
	// D3NOW_Pfrcpv_mm_mmm64
	test_instr(16, |a| a.pfrcpv(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfrcpv_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn pfrsqit1_mm_mm() {
	// D3NOW_Pfrsqit1_mm_mmm64
	test_instr(16, |a| a.pfrsqit1(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfrsqit1_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfrsqit1_mm_m() {
	// D3NOW_Pfrsqit1_mm_mmm64
	test_instr(16, |a| a.pfrsqit1(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfrsqit1_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfrsqrt_mm_mm() {
	// D3NOW_Pfrsqrt_mm_mmm64
	test_instr(16, |a| a.pfrsqrt(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfrsqrt_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfrsqrt_mm_m() {
	// D3NOW_Pfrsqrt_mm_mmm64
	test_instr(16, |a| a.pfrsqrt(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfrsqrt_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfrsqrtv_mm_mm() {
	// D3NOW_Pfrsqrtv_mm_mmm64
	test_instr(16, |a| a.pfrsqrtv(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfrsqrtv_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn pfrsqrtv_mm_m() {
	// D3NOW_Pfrsqrtv_mm_mmm64
	test_instr(16, |a| a.pfrsqrtv(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfrsqrtv_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn pfsub_mm_mm() {
	// D3NOW_Pfsub_mm_mmm64
	test_instr(16, |a| a.pfsub(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfsub_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfsub_mm_m() {
	// D3NOW_Pfsub_mm_mmm64
	test_instr(16, |a| a.pfsub(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfsub_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfsubr_mm_mm() {
	// D3NOW_Pfsubr_mm_mmm64
	test_instr(16, |a| a.pfsubr(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pfsubr_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pfsubr_mm_m() {
	// D3NOW_Pfsubr_mm_mmm64
	test_instr(16, |a| a.pfsubr(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pfsubr_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phaddd_mm_mm() {
	// Phaddd_mm_mmm64
	test_instr(16, |a| a.phaddd(mm2, mm3).unwrap(),
		Instruction::with2(Code::Phaddd_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phaddd_xmm_xmm() {
	// Phaddd_xmm_xmmm128
	test_instr(16, |a| a.phaddd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Phaddd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phaddd_mm_m() {
	// Phaddd_mm_mmm64
	test_instr(16, |a| a.phaddd(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Phaddd_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phaddd_xmm_m() {
	// Phaddd_xmm_xmmm128
	test_instr(16, |a| a.phaddd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Phaddd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phaddsw_mm_mm() {
	// Phaddsw_mm_mmm64
	test_instr(16, |a| a.phaddsw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Phaddsw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phaddsw_xmm_xmm() {
	// Phaddsw_xmm_xmmm128
	test_instr(16, |a| a.phaddsw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Phaddsw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phaddsw_mm_m() {
	// Phaddsw_mm_mmm64
	test_instr(16, |a| a.phaddsw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Phaddsw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phaddsw_xmm_m() {
	// Phaddsw_xmm_xmmm128
	test_instr(16, |a| a.phaddsw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Phaddsw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phaddw_mm_mm() {
	// Phaddw_mm_mmm64
	test_instr(16, |a| a.phaddw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Phaddw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phaddw_xmm_xmm() {
	// Phaddw_xmm_xmmm128
	test_instr(16, |a| a.phaddw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Phaddw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phaddw_mm_m() {
	// Phaddw_mm_mmm64
	test_instr(16, |a| a.phaddw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Phaddw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phaddw_xmm_m() {
	// Phaddw_xmm_xmmm128
	test_instr(16, |a| a.phaddw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Phaddw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phminposuw_xmm_xmm() {
	// Phminposuw_xmm_xmmm128
	test_instr(16, |a| a.phminposuw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Phminposuw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phminposuw_xmm_m() {
	// Phminposuw_xmm_xmmm128
	test_instr(16, |a| a.phminposuw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Phminposuw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phsubd_mm_mm() {
	// Phsubd_mm_mmm64
	test_instr(16, |a| a.phsubd(mm2, mm3).unwrap(),
		Instruction::with2(Code::Phsubd_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phsubd_xmm_xmm() {
	// Phsubd_xmm_xmmm128
	test_instr(16, |a| a.phsubd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Phsubd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phsubd_mm_m() {
	// Phsubd_mm_mmm64
	test_instr(16, |a| a.phsubd(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Phsubd_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phsubd_xmm_m() {
	// Phsubd_xmm_xmmm128
	test_instr(16, |a| a.phsubd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Phsubd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phsubsw_mm_mm() {
	// Phsubsw_mm_mmm64
	test_instr(16, |a| a.phsubsw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Phsubsw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phsubsw_xmm_xmm() {
	// Phsubsw_xmm_xmmm128
	test_instr(16, |a| a.phsubsw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Phsubsw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phsubsw_mm_m() {
	// Phsubsw_mm_mmm64
	test_instr(16, |a| a.phsubsw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Phsubsw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phsubsw_xmm_m() {
	// Phsubsw_xmm_xmmm128
	test_instr(16, |a| a.phsubsw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Phsubsw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phsubw_mm_mm() {
	// Phsubw_mm_mmm64
	test_instr(16, |a| a.phsubw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Phsubw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phsubw_xmm_xmm() {
	// Phsubw_xmm_xmmm128
	test_instr(16, |a| a.phsubw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Phsubw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phsubw_mm_m() {
	// Phsubw_mm_mmm64
	test_instr(16, |a| a.phsubw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Phsubw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn phsubw_xmm_m() {
	// Phsubw_xmm_xmmm128
	test_instr(16, |a| a.phsubw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Phsubw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pi2fd_mm_mm() {
	// D3NOW_Pi2fd_mm_mmm64
	test_instr(16, |a| a.pi2fd(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pi2fd_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pi2fd_mm_m() {
	// D3NOW_Pi2fd_mm_mmm64
	test_instr(16, |a| a.pi2fd(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pi2fd_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pi2fw_mm_mm() {
	// D3NOW_Pi2fw_mm_mmm64
	test_instr(16, |a| a.pi2fw(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pi2fw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pi2fw_mm_m() {
	// D3NOW_Pi2fw_mm_mmm64
	test_instr(16, |a| a.pi2fw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pi2fw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pinsrb_xmm_r32_i() {
	// Pinsrb_xmm_r32m8_imm8
	test_instr(16, |a| a.pinsrb(xmm2, ebx, -5i32).unwrap(),
		Instruction::with3(Code::Pinsrb_xmm_r32m8_imm8, Register::XMM2, Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pinsrb_xmm_r32m8_imm8
	test_instr(16, |a| a.pinsrb(xmm2, ebx, -5).unwrap(),
		Instruction::with3(Code::Pinsrb_xmm_r32m8_imm8, Register::XMM2, Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pinsrb_xmm_m_i() {
	// Pinsrb_xmm_r32m8_imm8
	test_instr(16, |a| a.pinsrb(xmm2, dword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Pinsrb_xmm_r32m8_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pinsrb_xmm_r32m8_imm8
	test_instr(16, |a| a.pinsrb(xmm2, dword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Pinsrb_xmm_r32m8_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pinsrb_xmm_r32_u() {
	// Pinsrb_xmm_r32m8_imm8
	test_instr(16, |a| a.pinsrb(xmm2, ebx, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pinsrb_xmm_r32m8_imm8, Register::XMM2, Register::EBX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pinsrb_xmm_m_u() {
	// Pinsrb_xmm_r32m8_imm8
	test_instr(16, |a| a.pinsrb(xmm2, dword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pinsrb_xmm_r32m8_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pinsrd_xmm_r32_i() {
	// Pinsrd_xmm_rm32_imm8
	test_instr(16, |a| a.pinsrd(xmm2, ebx, -5i32).unwrap(),
		Instruction::with3(Code::Pinsrd_xmm_rm32_imm8, Register::XMM2, Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pinsrd_xmm_rm32_imm8
	test_instr(16, |a| a.pinsrd(xmm2, ebx, -5).unwrap(),
		Instruction::with3(Code::Pinsrd_xmm_rm32_imm8, Register::XMM2, Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pinsrd_xmm_m_i() {
	// Pinsrd_xmm_rm32_imm8
	test_instr(16, |a| a.pinsrd(xmm2, dword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Pinsrd_xmm_rm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pinsrd_xmm_rm32_imm8
	test_instr(16, |a| a.pinsrd(xmm2, dword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Pinsrd_xmm_rm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pinsrd_xmm_r32_u() {
	// Pinsrd_xmm_rm32_imm8
	test_instr(16, |a| a.pinsrd(xmm2, ebx, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pinsrd_xmm_rm32_imm8, Register::XMM2, Register::EBX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pinsrd_xmm_m_u() {
	// Pinsrd_xmm_rm32_imm8
	test_instr(16, |a| a.pinsrd(xmm2, dword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pinsrd_xmm_rm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pinsrw_mm_r32_i() {
	// Pinsrw_mm_r32m16_imm8
	test_instr(16, |a| a.pinsrw(mm2, ebx, -5i32).unwrap(),
		Instruction::with3(Code::Pinsrw_mm_r32m16_imm8, Register::MM2, Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pinsrw_mm_r32m16_imm8
	test_instr(16, |a| a.pinsrw(mm2, ebx, -5).unwrap(),
		Instruction::with3(Code::Pinsrw_mm_r32m16_imm8, Register::MM2, Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pinsrw_xmm_r32_i() {
	// Pinsrw_xmm_r32m16_imm8
	test_instr(16, |a| a.pinsrw(xmm2, ebx, -5i32).unwrap(),
		Instruction::with3(Code::Pinsrw_xmm_r32m16_imm8, Register::XMM2, Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pinsrw_xmm_r32m16_imm8
	test_instr(16, |a| a.pinsrw(xmm2, ebx, -5).unwrap(),
		Instruction::with3(Code::Pinsrw_xmm_r32m16_imm8, Register::XMM2, Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pinsrw_mm_m_i() {
	// Pinsrw_mm_r32m16_imm8
	test_instr(16, |a| a.pinsrw(mm2, dword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Pinsrw_mm_r32m16_imm8, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pinsrw_mm_r32m16_imm8
	test_instr(16, |a| a.pinsrw(mm2, dword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Pinsrw_mm_r32m16_imm8, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pinsrw_xmm_m_i() {
	// Pinsrw_xmm_r32m16_imm8
	test_instr(16, |a| a.pinsrw(xmm2, dword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Pinsrw_xmm_r32m16_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pinsrw_xmm_r32m16_imm8
	test_instr(16, |a| a.pinsrw(xmm2, dword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Pinsrw_xmm_r32m16_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pinsrw_mm_r32_u() {
	// Pinsrw_mm_r32m16_imm8
	test_instr(16, |a| a.pinsrw(mm2, ebx, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pinsrw_mm_r32m16_imm8, Register::MM2, Register::EBX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pinsrw_xmm_r32_u() {
	// Pinsrw_xmm_r32m16_imm8
	test_instr(16, |a| a.pinsrw(xmm2, ebx, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pinsrw_xmm_r32m16_imm8, Register::XMM2, Register::EBX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pinsrw_mm_m_u() {
	// Pinsrw_mm_r32m16_imm8
	test_instr(16, |a| a.pinsrw(mm2, dword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pinsrw_mm_r32m16_imm8, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pinsrw_xmm_m_u() {
	// Pinsrw_xmm_r32m16_imm8
	test_instr(16, |a| a.pinsrw(xmm2, dword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pinsrw_xmm_r32m16_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmachriw_mm_m() {
	// Pmachriw_mm_m64
	test_instr(16, |a| a.pmachriw(mm2, ptr(si)).unwrap(),
		Instruction::with2(Code::Pmachriw_mm_m64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn pmaddubsw_mm_mm() {
	// Pmaddubsw_mm_mmm64
	test_instr(16, |a| a.pmaddubsw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pmaddubsw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaddubsw_xmm_xmm() {
	// Pmaddubsw_xmm_xmmm128
	test_instr(16, |a| a.pmaddubsw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmaddubsw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaddubsw_mm_m() {
	// Pmaddubsw_mm_mmm64
	test_instr(16, |a| a.pmaddubsw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmaddubsw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaddubsw_xmm_m() {
	// Pmaddubsw_xmm_xmmm128
	test_instr(16, |a| a.pmaddubsw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmaddubsw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaddwd_mm_mm() {
	// Pmaddwd_mm_mmm64
	test_instr(16, |a| a.pmaddwd(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pmaddwd_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaddwd_xmm_xmm() {
	// Pmaddwd_xmm_xmmm128
	test_instr(16, |a| a.pmaddwd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmaddwd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaddwd_mm_m() {
	// Pmaddwd_mm_mmm64
	test_instr(16, |a| a.pmaddwd(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmaddwd_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaddwd_xmm_m() {
	// Pmaddwd_xmm_xmmm128
	test_instr(16, |a| a.pmaddwd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmaddwd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmagw_mm_mm() {
	// Pmagw_mm_mmm64
	test_instr(16, |a| a.pmagw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pmagw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn pmagw_mm_m() {
	// Pmagw_mm_mmm64
	test_instr(16, |a| a.pmagw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmagw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn pmaxsb_xmm_xmm() {
	// Pmaxsb_xmm_xmmm128
	test_instr(16, |a| a.pmaxsb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmaxsb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaxsb_xmm_m() {
	// Pmaxsb_xmm_xmmm128
	test_instr(16, |a| a.pmaxsb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmaxsb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaxsd_xmm_xmm() {
	// Pmaxsd_xmm_xmmm128
	test_instr(16, |a| a.pmaxsd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmaxsd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaxsd_xmm_m() {
	// Pmaxsd_xmm_xmmm128
	test_instr(16, |a| a.pmaxsd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmaxsd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaxsw_mm_mm() {
	// Pmaxsw_mm_mmm64
	test_instr(16, |a| a.pmaxsw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pmaxsw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaxsw_xmm_xmm() {
	// Pmaxsw_xmm_xmmm128
	test_instr(16, |a| a.pmaxsw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmaxsw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaxsw_mm_m() {
	// Pmaxsw_mm_mmm64
	test_instr(16, |a| a.pmaxsw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmaxsw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaxsw_xmm_m() {
	// Pmaxsw_xmm_xmmm128
	test_instr(16, |a| a.pmaxsw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmaxsw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaxub_mm_mm() {
	// Pmaxub_mm_mmm64
	test_instr(16, |a| a.pmaxub(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pmaxub_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaxub_xmm_xmm() {
	// Pmaxub_xmm_xmmm128
	test_instr(16, |a| a.pmaxub(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmaxub_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaxub_mm_m() {
	// Pmaxub_mm_mmm64
	test_instr(16, |a| a.pmaxub(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmaxub_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaxub_xmm_m() {
	// Pmaxub_xmm_xmmm128
	test_instr(16, |a| a.pmaxub(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmaxub_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaxud_xmm_xmm() {
	// Pmaxud_xmm_xmmm128
	test_instr(16, |a| a.pmaxud(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmaxud_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaxud_xmm_m() {
	// Pmaxud_xmm_xmmm128
	test_instr(16, |a| a.pmaxud(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmaxud_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaxuw_xmm_xmm() {
	// Pmaxuw_xmm_xmmm128
	test_instr(16, |a| a.pmaxuw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmaxuw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmaxuw_xmm_m() {
	// Pmaxuw_xmm_xmmm128
	test_instr(16, |a| a.pmaxuw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmaxuw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pminsb_xmm_xmm() {
	// Pminsb_xmm_xmmm128
	test_instr(16, |a| a.pminsb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pminsb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pminsb_xmm_m() {
	// Pminsb_xmm_xmmm128
	test_instr(16, |a| a.pminsb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pminsb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pminsd_xmm_xmm() {
	// Pminsd_xmm_xmmm128
	test_instr(16, |a| a.pminsd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pminsd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pminsd_xmm_m() {
	// Pminsd_xmm_xmmm128
	test_instr(16, |a| a.pminsd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pminsd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pminsw_mm_mm() {
	// Pminsw_mm_mmm64
	test_instr(16, |a| a.pminsw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pminsw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pminsw_xmm_xmm() {
	// Pminsw_xmm_xmmm128
	test_instr(16, |a| a.pminsw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pminsw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pminsw_mm_m() {
	// Pminsw_mm_mmm64
	test_instr(16, |a| a.pminsw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pminsw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pminsw_xmm_m() {
	// Pminsw_xmm_xmmm128
	test_instr(16, |a| a.pminsw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pminsw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pminub_mm_mm() {
	// Pminub_mm_mmm64
	test_instr(16, |a| a.pminub(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pminub_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pminub_xmm_xmm() {
	// Pminub_xmm_xmmm128
	test_instr(16, |a| a.pminub(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pminub_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pminub_mm_m() {
	// Pminub_mm_mmm64
	test_instr(16, |a| a.pminub(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pminub_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pminub_xmm_m() {
	// Pminub_xmm_xmmm128
	test_instr(16, |a| a.pminub(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pminub_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pminud_xmm_xmm() {
	// Pminud_xmm_xmmm128
	test_instr(16, |a| a.pminud(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pminud_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pminud_xmm_m() {
	// Pminud_xmm_xmmm128
	test_instr(16, |a| a.pminud(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pminud_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pminuw_xmm_xmm() {
	// Pminuw_xmm_xmmm128
	test_instr(16, |a| a.pminuw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pminuw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pminuw_xmm_m() {
	// Pminuw_xmm_xmmm128
	test_instr(16, |a| a.pminuw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pminuw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovmskb_r32_mm() {
	// Pmovmskb_r32_mm
	test_instr(16, |a| a.pmovmskb(edx, mm3).unwrap(),
		Instruction::with2(Code::Pmovmskb_r32_mm, Register::EDX, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovmskb_r32_xmm() {
	// Pmovmskb_r32_xmm
	test_instr(16, |a| a.pmovmskb(edx, xmm3).unwrap(),
		Instruction::with2(Code::Pmovmskb_r32_xmm, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovsxbd_xmm_xmm() {
	// Pmovsxbd_xmm_xmmm32
	test_instr(16, |a| a.pmovsxbd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmovsxbd_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovsxbd_xmm_m() {
	// Pmovsxbd_xmm_xmmm32
	test_instr(16, |a| a.pmovsxbd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmovsxbd_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovsxbq_xmm_xmm() {
	// Pmovsxbq_xmm_xmmm16
	test_instr(16, |a| a.pmovsxbq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmovsxbq_xmm_xmmm16, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovsxbq_xmm_m() {
	// Pmovsxbq_xmm_xmmm16
	test_instr(16, |a| a.pmovsxbq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmovsxbq_xmm_xmmm16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovsxbw_xmm_xmm() {
	// Pmovsxbw_xmm_xmmm64
	test_instr(16, |a| a.pmovsxbw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmovsxbw_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovsxbw_xmm_m() {
	// Pmovsxbw_xmm_xmmm64
	test_instr(16, |a| a.pmovsxbw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmovsxbw_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovsxdq_xmm_xmm() {
	// Pmovsxdq_xmm_xmmm64
	test_instr(16, |a| a.pmovsxdq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmovsxdq_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovsxdq_xmm_m() {
	// Pmovsxdq_xmm_xmmm64
	test_instr(16, |a| a.pmovsxdq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmovsxdq_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovsxwd_xmm_xmm() {
	// Pmovsxwd_xmm_xmmm64
	test_instr(16, |a| a.pmovsxwd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmovsxwd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovsxwd_xmm_m() {
	// Pmovsxwd_xmm_xmmm64
	test_instr(16, |a| a.pmovsxwd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmovsxwd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovsxwq_xmm_xmm() {
	// Pmovsxwq_xmm_xmmm32
	test_instr(16, |a| a.pmovsxwq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmovsxwq_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovsxwq_xmm_m() {
	// Pmovsxwq_xmm_xmmm32
	test_instr(16, |a| a.pmovsxwq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmovsxwq_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovzxbd_xmm_xmm() {
	// Pmovzxbd_xmm_xmmm32
	test_instr(16, |a| a.pmovzxbd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmovzxbd_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovzxbd_xmm_m() {
	// Pmovzxbd_xmm_xmmm32
	test_instr(16, |a| a.pmovzxbd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmovzxbd_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovzxbq_xmm_xmm() {
	// Pmovzxbq_xmm_xmmm16
	test_instr(16, |a| a.pmovzxbq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmovzxbq_xmm_xmmm16, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovzxbq_xmm_m() {
	// Pmovzxbq_xmm_xmmm16
	test_instr(16, |a| a.pmovzxbq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmovzxbq_xmm_xmmm16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovzxbw_xmm_xmm() {
	// Pmovzxbw_xmm_xmmm64
	test_instr(16, |a| a.pmovzxbw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmovzxbw_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovzxbw_xmm_m() {
	// Pmovzxbw_xmm_xmmm64
	test_instr(16, |a| a.pmovzxbw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmovzxbw_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovzxdq_xmm_xmm() {
	// Pmovzxdq_xmm_xmmm64
	test_instr(16, |a| a.pmovzxdq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmovzxdq_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovzxdq_xmm_m() {
	// Pmovzxdq_xmm_xmmm64
	test_instr(16, |a| a.pmovzxdq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmovzxdq_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovzxwd_xmm_xmm() {
	// Pmovzxwd_xmm_xmmm64
	test_instr(16, |a| a.pmovzxwd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmovzxwd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovzxwd_xmm_m() {
	// Pmovzxwd_xmm_xmmm64
	test_instr(16, |a| a.pmovzxwd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmovzxwd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovzxwq_xmm_xmm() {
	// Pmovzxwq_xmm_xmmm32
	test_instr(16, |a| a.pmovzxwq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmovzxwq_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmovzxwq_xmm_m() {
	// Pmovzxwq_xmm_xmmm32
	test_instr(16, |a| a.pmovzxwq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmovzxwq_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmuldq_xmm_xmm() {
	// Pmuldq_xmm_xmmm128
	test_instr(16, |a| a.pmuldq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmuldq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmuldq_xmm_m() {
	// Pmuldq_xmm_xmmm128
	test_instr(16, |a| a.pmuldq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmuldq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmulhriw_mm_mm() {
	// Pmulhriw_mm_mmm64
	test_instr(16, |a| a.pmulhriw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pmulhriw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn pmulhriw_mm_m() {
	// Pmulhriw_mm_mmm64
	test_instr(16, |a| a.pmulhriw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmulhriw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn pmulhrsw_mm_mm() {
	// Pmulhrsw_mm_mmm64
	test_instr(16, |a| a.pmulhrsw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pmulhrsw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmulhrsw_xmm_xmm() {
	// Pmulhrsw_xmm_xmmm128
	test_instr(16, |a| a.pmulhrsw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmulhrsw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmulhrsw_mm_m() {
	// Pmulhrsw_mm_mmm64
	test_instr(16, |a| a.pmulhrsw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmulhrsw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmulhrsw_xmm_m() {
	// Pmulhrsw_xmm_xmmm128
	test_instr(16, |a| a.pmulhrsw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmulhrsw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmulhrw_mm_mm() {
	// D3NOW_Pmulhrw_mm_mmm64
	test_instr(16, |a| a.pmulhrw(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pmulhrw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmulhrw_mm_m() {
	// D3NOW_Pmulhrw_mm_mmm64
	test_instr(16, |a| a.pmulhrw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pmulhrw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmulhrw_cyrix_mm_mm() {
	// Pmulhrw_mm_mmm64
	test_instr(16, |a| a.pmulhrw_cyrix(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pmulhrw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn pmulhrw_cyrix_mm_m() {
	// Pmulhrw_mm_mmm64
	test_instr(16, |a| a.pmulhrw_cyrix(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmulhrw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn pmulhuw_mm_mm() {
	// Pmulhuw_mm_mmm64
	test_instr(16, |a| a.pmulhuw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pmulhuw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmulhuw_xmm_xmm() {
	// Pmulhuw_xmm_xmmm128
	test_instr(16, |a| a.pmulhuw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmulhuw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmulhuw_mm_m() {
	// Pmulhuw_mm_mmm64
	test_instr(16, |a| a.pmulhuw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmulhuw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmulhuw_xmm_m() {
	// Pmulhuw_xmm_xmmm128
	test_instr(16, |a| a.pmulhuw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmulhuw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmulhw_mm_mm() {
	// Pmulhw_mm_mmm64
	test_instr(16, |a| a.pmulhw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pmulhw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmulhw_xmm_xmm() {
	// Pmulhw_xmm_xmmm128
	test_instr(16, |a| a.pmulhw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmulhw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmulhw_mm_m() {
	// Pmulhw_mm_mmm64
	test_instr(16, |a| a.pmulhw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmulhw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmulhw_xmm_m() {
	// Pmulhw_xmm_xmmm128
	test_instr(16, |a| a.pmulhw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmulhw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmulld_xmm_xmm() {
	// Pmulld_xmm_xmmm128
	test_instr(16, |a| a.pmulld(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmulld_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmulld_xmm_m() {
	// Pmulld_xmm_xmmm128
	test_instr(16, |a| a.pmulld(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmulld_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmullw_mm_mm() {
	// Pmullw_mm_mmm64
	test_instr(16, |a| a.pmullw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pmullw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmullw_xmm_xmm() {
	// Pmullw_xmm_xmmm128
	test_instr(16, |a| a.pmullw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmullw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmullw_mm_m() {
	// Pmullw_mm_mmm64
	test_instr(16, |a| a.pmullw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmullw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmullw_xmm_m() {
	// Pmullw_xmm_xmmm128
	test_instr(16, |a| a.pmullw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmullw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmuludq_mm_mm() {
	// Pmuludq_mm_mmm64
	test_instr(16, |a| a.pmuludq(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pmuludq_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmuludq_xmm_xmm() {
	// Pmuludq_xmm_xmmm128
	test_instr(16, |a| a.pmuludq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pmuludq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmuludq_mm_m() {
	// Pmuludq_mm_mmm64
	test_instr(16, |a| a.pmuludq(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmuludq_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmuludq_xmm_m() {
	// Pmuludq_xmm_xmmm128
	test_instr(16, |a| a.pmuludq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pmuludq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pmvgezb_mm_m() {
	// Pmvgezb_mm_m64
	test_instr(16, |a| a.pmvgezb(mm2, ptr(si)).unwrap(),
		Instruction::with2(Code::Pmvgezb_mm_m64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn pmvlzb_mm_m() {
	// Pmvlzb_mm_m64
	test_instr(16, |a| a.pmvlzb(mm2, ptr(si)).unwrap(),
		Instruction::with2(Code::Pmvlzb_mm_m64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn pmvnzb_mm_m() {
	// Pmvnzb_mm_m64
	test_instr(16, |a| a.pmvnzb(mm2, ptr(si)).unwrap(),
		Instruction::with2(Code::Pmvnzb_mm_m64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn pmvzb_mm_m() {
	// Pmvzb_mm_m64
	test_instr(16, |a| a.pmvzb(mm2, ptr(si)).unwrap(),
		Instruction::with2(Code::Pmvzb_mm_m64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn pop_r16() {
	// Pop_r16
	test_instr(16, |a| a.pop(dx).unwrap(),
		Instruction::with1(Code::Pop_r16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pop_r32() {
	// Pop_r32
	test_instr(16, |a| a.pop(edx).unwrap(),
		Instruction::with1(Code::Pop_r32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pop_seg() {
	/* if op0.register() == Register::FS */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Popw_FS
			test_instr(16, |a| a.pop(fs).unwrap(),
				Instruction::with1(Code::Popw_FS, Register::FS).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.register() == Register::GS */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Popw_GS
			test_instr(16, |a| a.pop(gs).unwrap(),
				Instruction::with1(Code::Popw_GS, Register::GS).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.register() == Register::ES */ {
		/* if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Popw_ES
			test_instr(16, |a| a.pop(es).unwrap(),
				Instruction::with1(Code::Popw_ES, Register::ES).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.register() == Register::SS */ {
		/* if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Popw_SS
			test_instr(16, |a| a.pop(ss).unwrap(),
				Instruction::with1(Code::Popw_SS, Register::SS).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.register() == Register::DS */ {
		/* if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Popw_DS
			test_instr(16, |a| a.pop(ds).unwrap(),
				Instruction::with1(Code::Popw_DS, Register::DS).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else */ {
	}
}

#[test]
#[rustfmt::skip]
fn pop_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Pop_rm64 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Pop_rm32
		test_instr(16, |a| a.pop(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Pop_rm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Pop_rm16
		test_instr(16, |a| a.pop(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Pop_rm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Pop_rm16
		test_invalid_instr(16, |a| assert!(a.pop(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn popa() {
	// Popaw
	test_instr(16, |a| a.popa().unwrap(),
		Instruction::with(Code::Popaw),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn popad() {
	// Popad
	test_instr(16, |a| a.popad().unwrap(),
		Instruction::with(Code::Popad),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn popcnt_r16_r16() {
	// Popcnt_r16_rm16
	test_instr(16, |a| a.popcnt(dx, bx).unwrap(),
		Instruction::with2(Code::Popcnt_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn popcnt_r32_r32() {
	// Popcnt_r32_rm32
	test_instr(16, |a| a.popcnt(edx, ebx).unwrap(),
		Instruction::with2(Code::Popcnt_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn popcnt_r16_m() {
	// Popcnt_r16_rm16
	test_instr(16, |a| a.popcnt(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Popcnt_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn popcnt_r32_m() {
	// Popcnt_r32_rm32
	test_instr(16, |a| a.popcnt(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Popcnt_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn popf() {
	// Popfw
	test_instr(16, |a| a.popf().unwrap(),
		Instruction::with(Code::Popfw),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn popfd() {
	// Popfd
	test_instr(16, |a| a.popfd().unwrap(),
		Instruction::with(Code::Popfd),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn por_mm_mm() {
	// Por_mm_mmm64
	test_instr(16, |a| a.por(mm2, mm3).unwrap(),
		Instruction::with2(Code::Por_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn por_xmm_xmm() {
	// Por_xmm_xmmm128
	test_instr(16, |a| a.por(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Por_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn por_mm_m() {
	// Por_mm_mmm64
	test_instr(16, |a| a.por(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Por_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn por_xmm_m() {
	// Por_xmm_xmmm128
	test_instr(16, |a| a.por(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Por_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn prefetch_m() {
	// Prefetch_m8
	test_instr(16, |a| a.prefetch(ptr(si)).unwrap(),
		Instruction::with1(Code::Prefetch_m8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn prefetchit0_m() {
	// Prefetchit0_m8
	test_instr(16, |a| a.prefetchit0(ptr(si)).unwrap(),
		Instruction::with1(Code::Prefetchit0_m8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn prefetchit1_m() {
	// Prefetchit1_m8
	test_instr(16, |a| a.prefetchit1(ptr(si)).unwrap(),
		Instruction::with1(Code::Prefetchit1_m8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn prefetchnta_m() {
	// Prefetchnta_m8
	test_instr(16, |a| a.prefetchnta(ptr(si)).unwrap(),
		Instruction::with1(Code::Prefetchnta_m8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn prefetcht0_m() {
	// Prefetcht0_m8
	test_instr(16, |a| a.prefetcht0(ptr(si)).unwrap(),
		Instruction::with1(Code::Prefetcht0_m8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn prefetcht1_m() {
	// Prefetcht1_m8
	test_instr(16, |a| a.prefetcht1(ptr(si)).unwrap(),
		Instruction::with1(Code::Prefetcht1_m8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn prefetcht2_m() {
	// Prefetcht2_m8
	test_instr(16, |a| a.prefetcht2(ptr(si)).unwrap(),
		Instruction::with1(Code::Prefetcht2_m8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn prefetchw_m() {
	// Prefetchw_m8
	test_instr(16, |a| a.prefetchw(ptr(si)).unwrap(),
		Instruction::with1(Code::Prefetchw_m8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn prefetchwt1_m() {
	// Prefetchwt1_m8
	test_instr(16, |a| a.prefetchwt1(ptr(si)).unwrap(),
		Instruction::with1(Code::Prefetchwt1_m8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psadbw_mm_mm() {
	// Psadbw_mm_mmm64
	test_instr(16, |a| a.psadbw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psadbw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psadbw_xmm_xmm() {
	// Psadbw_xmm_xmmm128
	test_instr(16, |a| a.psadbw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psadbw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psadbw_mm_m() {
	// Psadbw_mm_mmm64
	test_instr(16, |a| a.psadbw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psadbw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psadbw_xmm_m() {
	// Psadbw_xmm_xmmm128
	test_instr(16, |a| a.psadbw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psadbw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshufb_mm_mm() {
	// Pshufb_mm_mmm64
	test_instr(16, |a| a.pshufb(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pshufb_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshufb_xmm_xmm() {
	// Pshufb_xmm_xmmm128
	test_instr(16, |a| a.pshufb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pshufb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshufb_mm_m() {
	// Pshufb_mm_mmm64
	test_instr(16, |a| a.pshufb(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pshufb_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshufb_xmm_m() {
	// Pshufb_xmm_xmmm128
	test_instr(16, |a| a.pshufb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pshufb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshufd_xmm_xmm_i() {
	// Pshufd_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshufd(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Pshufd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pshufd_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshufd(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Pshufd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshufd_xmm_m_i() {
	// Pshufd_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshufd(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Pshufd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pshufd_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshufd(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Pshufd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshufd_xmm_xmm_u() {
	// Pshufd_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshufd(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pshufd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshufd_xmm_m_u() {
	// Pshufd_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshufd(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pshufd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshufhw_xmm_xmm_i() {
	// Pshufhw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshufhw(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Pshufhw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pshufhw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshufhw(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Pshufhw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshufhw_xmm_m_i() {
	// Pshufhw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshufhw(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Pshufhw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pshufhw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshufhw(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Pshufhw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshufhw_xmm_xmm_u() {
	// Pshufhw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshufhw(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pshufhw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshufhw_xmm_m_u() {
	// Pshufhw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshufhw(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pshufhw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshuflw_xmm_xmm_i() {
	// Pshuflw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshuflw(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Pshuflw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pshuflw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshuflw(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Pshuflw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshuflw_xmm_m_i() {
	// Pshuflw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshuflw(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Pshuflw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pshuflw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshuflw(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Pshuflw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshuflw_xmm_xmm_u() {
	// Pshuflw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshuflw(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pshuflw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshuflw_xmm_m_u() {
	// Pshuflw_xmm_xmmm128_imm8
	test_instr(16, |a| a.pshuflw(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pshuflw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshufw_mm_mm_i() {
	// Pshufw_mm_mmm64_imm8
	test_instr(16, |a| a.pshufw(mm2, mm3, -5i32).unwrap(),
		Instruction::with3(Code::Pshufw_mm_mmm64_imm8, Register::MM2, Register::MM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pshufw_mm_mmm64_imm8
	test_instr(16, |a| a.pshufw(mm2, mm3, -5).unwrap(),
		Instruction::with3(Code::Pshufw_mm_mmm64_imm8, Register::MM2, Register::MM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshufw_mm_m_i() {
	// Pshufw_mm_mmm64_imm8
	test_instr(16, |a| a.pshufw(mm2, qword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Pshufw_mm_mmm64_imm8, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pshufw_mm_mmm64_imm8
	test_instr(16, |a| a.pshufw(mm2, qword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Pshufw_mm_mmm64_imm8, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshufw_mm_mm_u() {
	// Pshufw_mm_mmm64_imm8
	test_instr(16, |a| a.pshufw(mm2, mm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pshufw_mm_mmm64_imm8, Register::MM2, Register::MM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pshufw_mm_m_u() {
	// Pshufw_mm_mmm64_imm8
	test_instr(16, |a| a.pshufw(mm2, qword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Pshufw_mm_mmm64_imm8, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psignb_mm_mm() {
	// Psignb_mm_mmm64
	test_instr(16, |a| a.psignb(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psignb_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psignb_xmm_xmm() {
	// Psignb_xmm_xmmm128
	test_instr(16, |a| a.psignb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psignb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psignb_mm_m() {
	// Psignb_mm_mmm64
	test_instr(16, |a| a.psignb(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psignb_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psignb_xmm_m() {
	// Psignb_xmm_xmmm128
	test_instr(16, |a| a.psignb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psignb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psignd_mm_mm() {
	// Psignd_mm_mmm64
	test_instr(16, |a| a.psignd(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psignd_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psignd_xmm_xmm() {
	// Psignd_xmm_xmmm128
	test_instr(16, |a| a.psignd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psignd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psignd_mm_m() {
	// Psignd_mm_mmm64
	test_instr(16, |a| a.psignd(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psignd_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psignd_xmm_m() {
	// Psignd_xmm_xmmm128
	test_instr(16, |a| a.psignd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psignd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psignw_mm_mm() {
	// Psignw_mm_mmm64
	test_instr(16, |a| a.psignw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psignw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psignw_xmm_xmm() {
	// Psignw_xmm_xmmm128
	test_instr(16, |a| a.psignw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psignw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psignw_mm_m() {
	// Psignw_mm_mmm64
	test_instr(16, |a| a.psignw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psignw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psignw_xmm_m() {
	// Psignw_xmm_xmmm128
	test_instr(16, |a| a.psignw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psignw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pslld_mm_mm() {
	// Pslld_mm_mmm64
	test_instr(16, |a| a.pslld(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pslld_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pslld_xmm_xmm() {
	// Pslld_xmm_xmmm128
	test_instr(16, |a| a.pslld(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pslld_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pslld_mm_m() {
	// Pslld_mm_mmm64
	test_instr(16, |a| a.pslld(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pslld_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pslld_xmm_m() {
	// Pslld_xmm_xmmm128
	test_instr(16, |a| a.pslld(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pslld_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pslld_mm_i() {
	// Pslld_mm_imm8
	test_instr(16, |a| a.pslld(mm2, -5i32).unwrap(),
		Instruction::with2(Code::Pslld_mm_imm8, Register::MM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pslld_mm_imm8
	test_instr(16, |a| a.pslld(mm2, -5).unwrap(),
		Instruction::with2(Code::Pslld_mm_imm8, Register::MM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pslld_xmm_i() {
	// Pslld_xmm_imm8
	test_instr(16, |a| a.pslld(xmm2, -5i32).unwrap(),
		Instruction::with2(Code::Pslld_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pslld_xmm_imm8
	test_instr(16, |a| a.pslld(xmm2, -5).unwrap(),
		Instruction::with2(Code::Pslld_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pslld_mm_u() {
	// Pslld_mm_imm8
	test_instr(16, |a| a.pslld(mm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Pslld_mm_imm8, Register::MM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pslld_xmm_u() {
	// Pslld_xmm_imm8
	test_instr(16, |a| a.pslld(xmm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Pslld_xmm_imm8, Register::XMM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pslldq_xmm_i() {
	// Pslldq_xmm_imm8
	test_instr(16, |a| a.pslldq(xmm2, -5i32).unwrap(),
		Instruction::with2(Code::Pslldq_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Pslldq_xmm_imm8
	test_instr(16, |a| a.pslldq(xmm2, -5).unwrap(),
		Instruction::with2(Code::Pslldq_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pslldq_xmm_u() {
	// Pslldq_xmm_imm8
	test_instr(16, |a| a.pslldq(xmm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Pslldq_xmm_imm8, Register::XMM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psllq_mm_mm() {
	// Psllq_mm_mmm64
	test_instr(16, |a| a.psllq(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psllq_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psllq_xmm_xmm() {
	// Psllq_xmm_xmmm128
	test_instr(16, |a| a.psllq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psllq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psllq_mm_m() {
	// Psllq_mm_mmm64
	test_instr(16, |a| a.psllq(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psllq_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psllq_xmm_m() {
	// Psllq_xmm_xmmm128
	test_instr(16, |a| a.psllq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psllq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psllq_mm_i() {
	// Psllq_mm_imm8
	test_instr(16, |a| a.psllq(mm2, -5i32).unwrap(),
		Instruction::with2(Code::Psllq_mm_imm8, Register::MM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Psllq_mm_imm8
	test_instr(16, |a| a.psllq(mm2, -5).unwrap(),
		Instruction::with2(Code::Psllq_mm_imm8, Register::MM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psllq_xmm_i() {
	// Psllq_xmm_imm8
	test_instr(16, |a| a.psllq(xmm2, -5i32).unwrap(),
		Instruction::with2(Code::Psllq_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Psllq_xmm_imm8
	test_instr(16, |a| a.psllq(xmm2, -5).unwrap(),
		Instruction::with2(Code::Psllq_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psllq_mm_u() {
	// Psllq_mm_imm8
	test_instr(16, |a| a.psllq(mm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Psllq_mm_imm8, Register::MM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psllq_xmm_u() {
	// Psllq_xmm_imm8
	test_instr(16, |a| a.psllq(xmm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Psllq_xmm_imm8, Register::XMM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psllw_mm_mm() {
	// Psllw_mm_mmm64
	test_instr(16, |a| a.psllw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psllw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psllw_xmm_xmm() {
	// Psllw_xmm_xmmm128
	test_instr(16, |a| a.psllw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psllw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psllw_mm_m() {
	// Psllw_mm_mmm64
	test_instr(16, |a| a.psllw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psllw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psllw_xmm_m() {
	// Psllw_xmm_xmmm128
	test_instr(16, |a| a.psllw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psllw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psllw_mm_i() {
	// Psllw_mm_imm8
	test_instr(16, |a| a.psllw(mm2, -5i32).unwrap(),
		Instruction::with2(Code::Psllw_mm_imm8, Register::MM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Psllw_mm_imm8
	test_instr(16, |a| a.psllw(mm2, -5).unwrap(),
		Instruction::with2(Code::Psllw_mm_imm8, Register::MM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psllw_xmm_i() {
	// Psllw_xmm_imm8
	test_instr(16, |a| a.psllw(xmm2, -5i32).unwrap(),
		Instruction::with2(Code::Psllw_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Psllw_xmm_imm8
	test_instr(16, |a| a.psllw(xmm2, -5).unwrap(),
		Instruction::with2(Code::Psllw_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psllw_mm_u() {
	// Psllw_mm_imm8
	test_instr(16, |a| a.psllw(mm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Psllw_mm_imm8, Register::MM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psllw_xmm_u() {
	// Psllw_xmm_imm8
	test_instr(16, |a| a.psllw(xmm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Psllw_xmm_imm8, Register::XMM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrad_mm_mm() {
	// Psrad_mm_mmm64
	test_instr(16, |a| a.psrad(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psrad_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrad_xmm_xmm() {
	// Psrad_xmm_xmmm128
	test_instr(16, |a| a.psrad(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psrad_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrad_mm_m() {
	// Psrad_mm_mmm64
	test_instr(16, |a| a.psrad(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psrad_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrad_xmm_m() {
	// Psrad_xmm_xmmm128
	test_instr(16, |a| a.psrad(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psrad_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrad_mm_i() {
	// Psrad_mm_imm8
	test_instr(16, |a| a.psrad(mm2, -5i32).unwrap(),
		Instruction::with2(Code::Psrad_mm_imm8, Register::MM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Psrad_mm_imm8
	test_instr(16, |a| a.psrad(mm2, -5).unwrap(),
		Instruction::with2(Code::Psrad_mm_imm8, Register::MM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrad_xmm_i() {
	// Psrad_xmm_imm8
	test_instr(16, |a| a.psrad(xmm2, -5i32).unwrap(),
		Instruction::with2(Code::Psrad_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Psrad_xmm_imm8
	test_instr(16, |a| a.psrad(xmm2, -5).unwrap(),
		Instruction::with2(Code::Psrad_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrad_mm_u() {
	// Psrad_mm_imm8
	test_instr(16, |a| a.psrad(mm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Psrad_mm_imm8, Register::MM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrad_xmm_u() {
	// Psrad_xmm_imm8
	test_instr(16, |a| a.psrad(xmm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Psrad_xmm_imm8, Register::XMM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psraw_mm_mm() {
	// Psraw_mm_mmm64
	test_instr(16, |a| a.psraw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psraw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psraw_xmm_xmm() {
	// Psraw_xmm_xmmm128
	test_instr(16, |a| a.psraw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psraw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psraw_mm_m() {
	// Psraw_mm_mmm64
	test_instr(16, |a| a.psraw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psraw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psraw_xmm_m() {
	// Psraw_xmm_xmmm128
	test_instr(16, |a| a.psraw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psraw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psraw_mm_i() {
	// Psraw_mm_imm8
	test_instr(16, |a| a.psraw(mm2, -5i32).unwrap(),
		Instruction::with2(Code::Psraw_mm_imm8, Register::MM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Psraw_mm_imm8
	test_instr(16, |a| a.psraw(mm2, -5).unwrap(),
		Instruction::with2(Code::Psraw_mm_imm8, Register::MM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psraw_xmm_i() {
	// Psraw_xmm_imm8
	test_instr(16, |a| a.psraw(xmm2, -5i32).unwrap(),
		Instruction::with2(Code::Psraw_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Psraw_xmm_imm8
	test_instr(16, |a| a.psraw(xmm2, -5).unwrap(),
		Instruction::with2(Code::Psraw_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psraw_mm_u() {
	// Psraw_mm_imm8
	test_instr(16, |a| a.psraw(mm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Psraw_mm_imm8, Register::MM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psraw_xmm_u() {
	// Psraw_xmm_imm8
	test_instr(16, |a| a.psraw(xmm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Psraw_xmm_imm8, Register::XMM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrld_mm_mm() {
	// Psrld_mm_mmm64
	test_instr(16, |a| a.psrld(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psrld_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrld_xmm_xmm() {
	// Psrld_xmm_xmmm128
	test_instr(16, |a| a.psrld(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psrld_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrld_mm_m() {
	// Psrld_mm_mmm64
	test_instr(16, |a| a.psrld(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psrld_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrld_xmm_m() {
	// Psrld_xmm_xmmm128
	test_instr(16, |a| a.psrld(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psrld_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrld_mm_i() {
	// Psrld_mm_imm8
	test_instr(16, |a| a.psrld(mm2, -5i32).unwrap(),
		Instruction::with2(Code::Psrld_mm_imm8, Register::MM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Psrld_mm_imm8
	test_instr(16, |a| a.psrld(mm2, -5).unwrap(),
		Instruction::with2(Code::Psrld_mm_imm8, Register::MM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrld_xmm_i() {
	// Psrld_xmm_imm8
	test_instr(16, |a| a.psrld(xmm2, -5i32).unwrap(),
		Instruction::with2(Code::Psrld_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Psrld_xmm_imm8
	test_instr(16, |a| a.psrld(xmm2, -5).unwrap(),
		Instruction::with2(Code::Psrld_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrld_mm_u() {
	// Psrld_mm_imm8
	test_instr(16, |a| a.psrld(mm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Psrld_mm_imm8, Register::MM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrld_xmm_u() {
	// Psrld_xmm_imm8
	test_instr(16, |a| a.psrld(xmm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Psrld_xmm_imm8, Register::XMM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrldq_xmm_i() {
	// Psrldq_xmm_imm8
	test_instr(16, |a| a.psrldq(xmm2, -5i32).unwrap(),
		Instruction::with2(Code::Psrldq_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Psrldq_xmm_imm8
	test_instr(16, |a| a.psrldq(xmm2, -5).unwrap(),
		Instruction::with2(Code::Psrldq_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrldq_xmm_u() {
	// Psrldq_xmm_imm8
	test_instr(16, |a| a.psrldq(xmm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Psrldq_xmm_imm8, Register::XMM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrlq_mm_mm() {
	// Psrlq_mm_mmm64
	test_instr(16, |a| a.psrlq(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psrlq_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrlq_xmm_xmm() {
	// Psrlq_xmm_xmmm128
	test_instr(16, |a| a.psrlq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psrlq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrlq_mm_m() {
	// Psrlq_mm_mmm64
	test_instr(16, |a| a.psrlq(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psrlq_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrlq_xmm_m() {
	// Psrlq_xmm_xmmm128
	test_instr(16, |a| a.psrlq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psrlq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrlq_mm_i() {
	// Psrlq_mm_imm8
	test_instr(16, |a| a.psrlq(mm2, -5i32).unwrap(),
		Instruction::with2(Code::Psrlq_mm_imm8, Register::MM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Psrlq_mm_imm8
	test_instr(16, |a| a.psrlq(mm2, -5).unwrap(),
		Instruction::with2(Code::Psrlq_mm_imm8, Register::MM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrlq_xmm_i() {
	// Psrlq_xmm_imm8
	test_instr(16, |a| a.psrlq(xmm2, -5i32).unwrap(),
		Instruction::with2(Code::Psrlq_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Psrlq_xmm_imm8
	test_instr(16, |a| a.psrlq(xmm2, -5).unwrap(),
		Instruction::with2(Code::Psrlq_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrlq_mm_u() {
	// Psrlq_mm_imm8
	test_instr(16, |a| a.psrlq(mm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Psrlq_mm_imm8, Register::MM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrlq_xmm_u() {
	// Psrlq_xmm_imm8
	test_instr(16, |a| a.psrlq(xmm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Psrlq_xmm_imm8, Register::XMM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrlw_mm_mm() {
	// Psrlw_mm_mmm64
	test_instr(16, |a| a.psrlw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psrlw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrlw_xmm_xmm() {
	// Psrlw_xmm_xmmm128
	test_instr(16, |a| a.psrlw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psrlw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrlw_mm_m() {
	// Psrlw_mm_mmm64
	test_instr(16, |a| a.psrlw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psrlw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrlw_xmm_m() {
	// Psrlw_xmm_xmmm128
	test_instr(16, |a| a.psrlw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psrlw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrlw_mm_i() {
	// Psrlw_mm_imm8
	test_instr(16, |a| a.psrlw(mm2, -5i32).unwrap(),
		Instruction::with2(Code::Psrlw_mm_imm8, Register::MM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Psrlw_mm_imm8
	test_instr(16, |a| a.psrlw(mm2, -5).unwrap(),
		Instruction::with2(Code::Psrlw_mm_imm8, Register::MM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrlw_xmm_i() {
	// Psrlw_xmm_imm8
	test_instr(16, |a| a.psrlw(xmm2, -5i32).unwrap(),
		Instruction::with2(Code::Psrlw_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Psrlw_xmm_imm8
	test_instr(16, |a| a.psrlw(xmm2, -5).unwrap(),
		Instruction::with2(Code::Psrlw_xmm_imm8, Register::XMM2, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrlw_mm_u() {
	// Psrlw_mm_imm8
	test_instr(16, |a| a.psrlw(mm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Psrlw_mm_imm8, Register::MM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psrlw_xmm_u() {
	// Psrlw_xmm_imm8
	test_instr(16, |a| a.psrlw(xmm2, 0x7Fu32).unwrap(),
		Instruction::with2(Code::Psrlw_xmm_imm8, Register::XMM2, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubb_mm_mm() {
	// Psubb_mm_mmm64
	test_instr(16, |a| a.psubb(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psubb_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubb_xmm_xmm() {
	// Psubb_xmm_xmmm128
	test_instr(16, |a| a.psubb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psubb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubb_mm_m() {
	// Psubb_mm_mmm64
	test_instr(16, |a| a.psubb(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psubb_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubb_xmm_m() {
	// Psubb_xmm_xmmm128
	test_instr(16, |a| a.psubb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psubb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubd_mm_mm() {
	// Psubd_mm_mmm64
	test_instr(16, |a| a.psubd(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psubd_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubd_xmm_xmm() {
	// Psubd_xmm_xmmm128
	test_instr(16, |a| a.psubd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psubd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubd_mm_m() {
	// Psubd_mm_mmm64
	test_instr(16, |a| a.psubd(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psubd_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubd_xmm_m() {
	// Psubd_xmm_xmmm128
	test_instr(16, |a| a.psubd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psubd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubq_mm_mm() {
	// Psubq_mm_mmm64
	test_instr(16, |a| a.psubq(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psubq_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubq_xmm_xmm() {
	// Psubq_xmm_xmmm128
	test_instr(16, |a| a.psubq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psubq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubq_mm_m() {
	// Psubq_mm_mmm64
	test_instr(16, |a| a.psubq(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psubq_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubq_xmm_m() {
	// Psubq_xmm_xmmm128
	test_instr(16, |a| a.psubq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psubq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubsb_mm_mm() {
	// Psubsb_mm_mmm64
	test_instr(16, |a| a.psubsb(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psubsb_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubsb_xmm_xmm() {
	// Psubsb_xmm_xmmm128
	test_instr(16, |a| a.psubsb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psubsb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubsb_mm_m() {
	// Psubsb_mm_mmm64
	test_instr(16, |a| a.psubsb(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psubsb_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubsb_xmm_m() {
	// Psubsb_xmm_xmmm128
	test_instr(16, |a| a.psubsb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psubsb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubsiw_mm_mm() {
	// Psubsiw_mm_mmm64
	test_instr(16, |a| a.psubsiw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psubsiw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn psubsiw_mm_m() {
	// Psubsiw_mm_mmm64
	test_instr(16, |a| a.psubsiw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psubsiw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn psubsw_mm_mm() {
	// Psubsw_mm_mmm64
	test_instr(16, |a| a.psubsw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psubsw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubsw_xmm_xmm() {
	// Psubsw_xmm_xmmm128
	test_instr(16, |a| a.psubsw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psubsw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubsw_mm_m() {
	// Psubsw_mm_mmm64
	test_instr(16, |a| a.psubsw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psubsw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubsw_xmm_m() {
	// Psubsw_xmm_xmmm128
	test_instr(16, |a| a.psubsw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psubsw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubusb_mm_mm() {
	// Psubusb_mm_mmm64
	test_instr(16, |a| a.psubusb(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psubusb_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubusb_xmm_xmm() {
	// Psubusb_xmm_xmmm128
	test_instr(16, |a| a.psubusb(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psubusb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubusb_mm_m() {
	// Psubusb_mm_mmm64
	test_instr(16, |a| a.psubusb(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psubusb_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubusb_xmm_m() {
	// Psubusb_xmm_xmmm128
	test_instr(16, |a| a.psubusb(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psubusb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubusw_mm_mm() {
	// Psubusw_mm_mmm64
	test_instr(16, |a| a.psubusw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psubusw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubusw_xmm_xmm() {
	// Psubusw_xmm_xmmm128
	test_instr(16, |a| a.psubusw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psubusw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubusw_mm_m() {
	// Psubusw_mm_mmm64
	test_instr(16, |a| a.psubusw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psubusw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubusw_xmm_m() {
	// Psubusw_xmm_xmmm128
	test_instr(16, |a| a.psubusw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psubusw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubw_mm_mm() {
	// Psubw_mm_mmm64
	test_instr(16, |a| a.psubw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Psubw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubw_xmm_xmm() {
	// Psubw_xmm_xmmm128
	test_instr(16, |a| a.psubw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Psubw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubw_mm_m() {
	// Psubw_mm_mmm64
	test_instr(16, |a| a.psubw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psubw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn psubw_xmm_m() {
	// Psubw_xmm_xmmm128
	test_instr(16, |a| a.psubw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Psubw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pswapd_mm_mm() {
	// D3NOW_Pswapd_mm_mmm64
	test_instr(16, |a| a.pswapd(mm2, mm3).unwrap(),
		Instruction::with2(Code::D3NOW_Pswapd_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pswapd_mm_m() {
	// D3NOW_Pswapd_mm_mmm64
	test_instr(16, |a| a.pswapd(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::D3NOW_Pswapd_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ptest_xmm_xmm() {
	// Ptest_xmm_xmmm128
	test_instr(16, |a| a.ptest(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Ptest_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ptest_xmm_m() {
	// Ptest_xmm_xmmm128
	test_instr(16, |a| a.ptest(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Ptest_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ptwrite_r32() {
	// Ptwrite_rm32
	test_instr(16, |a| a.ptwrite(edx).unwrap(),
		Instruction::with1(Code::Ptwrite_rm32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ptwrite_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Ptwrite_rm64 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Ptwrite_rm32
		test_instr(16, |a| a.ptwrite(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Ptwrite_rm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Ptwrite_rm32
		test_invalid_instr(16, |a| assert!(a.ptwrite(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn punpckhbw_mm_mm() {
	// Punpckhbw_mm_mmm64
	test_instr(16, |a| a.punpckhbw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Punpckhbw_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpckhbw_xmm_xmm() {
	// Punpckhbw_xmm_xmmm128
	test_instr(16, |a| a.punpckhbw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Punpckhbw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpckhbw_mm_m() {
	// Punpckhbw_mm_mmm64
	test_instr(16, |a| a.punpckhbw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Punpckhbw_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpckhbw_xmm_m() {
	// Punpckhbw_xmm_xmmm128
	test_instr(16, |a| a.punpckhbw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Punpckhbw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpckhdq_mm_mm() {
	// Punpckhdq_mm_mmm64
	test_instr(16, |a| a.punpckhdq(mm2, mm3).unwrap(),
		Instruction::with2(Code::Punpckhdq_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpckhdq_xmm_xmm() {
	// Punpckhdq_xmm_xmmm128
	test_instr(16, |a| a.punpckhdq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Punpckhdq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpckhdq_mm_m() {
	// Punpckhdq_mm_mmm64
	test_instr(16, |a| a.punpckhdq(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Punpckhdq_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpckhdq_xmm_m() {
	// Punpckhdq_xmm_xmmm128
	test_instr(16, |a| a.punpckhdq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Punpckhdq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpckhqdq_xmm_xmm() {
	// Punpckhqdq_xmm_xmmm128
	test_instr(16, |a| a.punpckhqdq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Punpckhqdq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpckhqdq_xmm_m() {
	// Punpckhqdq_xmm_xmmm128
	test_instr(16, |a| a.punpckhqdq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Punpckhqdq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpckhwd_mm_mm() {
	// Punpckhwd_mm_mmm64
	test_instr(16, |a| a.punpckhwd(mm2, mm3).unwrap(),
		Instruction::with2(Code::Punpckhwd_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpckhwd_xmm_xmm() {
	// Punpckhwd_xmm_xmmm128
	test_instr(16, |a| a.punpckhwd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Punpckhwd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpckhwd_mm_m() {
	// Punpckhwd_mm_mmm64
	test_instr(16, |a| a.punpckhwd(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Punpckhwd_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpckhwd_xmm_m() {
	// Punpckhwd_xmm_xmmm128
	test_instr(16, |a| a.punpckhwd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Punpckhwd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpcklbw_mm_mm() {
	// Punpcklbw_mm_mmm32
	test_instr(16, |a| a.punpcklbw(mm2, mm3).unwrap(),
		Instruction::with2(Code::Punpcklbw_mm_mmm32, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpcklbw_xmm_xmm() {
	// Punpcklbw_xmm_xmmm128
	test_instr(16, |a| a.punpcklbw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Punpcklbw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpcklbw_mm_m() {
	// Punpcklbw_mm_mmm32
	test_instr(16, |a| a.punpcklbw(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Punpcklbw_mm_mmm32, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpcklbw_xmm_m() {
	// Punpcklbw_xmm_xmmm128
	test_instr(16, |a| a.punpcklbw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Punpcklbw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpckldq_mm_mm() {
	// Punpckldq_mm_mmm32
	test_instr(16, |a| a.punpckldq(mm2, mm3).unwrap(),
		Instruction::with2(Code::Punpckldq_mm_mmm32, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpckldq_xmm_xmm() {
	// Punpckldq_xmm_xmmm128
	test_instr(16, |a| a.punpckldq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Punpckldq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpckldq_mm_m() {
	// Punpckldq_mm_mmm32
	test_instr(16, |a| a.punpckldq(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Punpckldq_mm_mmm32, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpckldq_xmm_m() {
	// Punpckldq_xmm_xmmm128
	test_instr(16, |a| a.punpckldq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Punpckldq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpcklqdq_xmm_xmm() {
	// Punpcklqdq_xmm_xmmm128
	test_instr(16, |a| a.punpcklqdq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Punpcklqdq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpcklqdq_xmm_m() {
	// Punpcklqdq_xmm_xmmm128
	test_instr(16, |a| a.punpcklqdq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Punpcklqdq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpcklwd_mm_mm() {
	// Punpcklwd_mm_mmm32
	test_instr(16, |a| a.punpcklwd(mm2, mm3).unwrap(),
		Instruction::with2(Code::Punpcklwd_mm_mmm32, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpcklwd_xmm_xmm() {
	// Punpcklwd_xmm_xmmm128
	test_instr(16, |a| a.punpcklwd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Punpcklwd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpcklwd_mm_m() {
	// Punpcklwd_mm_mmm32
	test_instr(16, |a| a.punpcklwd(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Punpcklwd_mm_mmm32, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn punpcklwd_xmm_m() {
	// Punpcklwd_xmm_xmmm128
	test_instr(16, |a| a.punpcklwd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Punpcklwd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn push_r16() {
	// Push_r16
	test_instr(16, |a| a.push(dx).unwrap(),
		Instruction::with1(Code::Push_r16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn push_r32() {
	// Push_r32
	test_instr(16, |a| a.push(edx).unwrap(),
		Instruction::with1(Code::Push_r32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn push_seg() {
	/* if op0.register() == Register::FS */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Pushw_FS
			test_instr(16, |a| a.push(fs).unwrap(),
				Instruction::with1(Code::Pushw_FS, Register::FS).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.register() == Register::GS */ {
		/* if self.bitness() == 64 */ {
			// skip `if self.bitness() == 64` since it's not supported by the current test bitness
		} /* else if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Pushw_GS
			test_instr(16, |a| a.push(gs).unwrap(),
				Instruction::with1(Code::Pushw_GS, Register::GS).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.register() == Register::ES */ {
		/* if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Pushw_ES
			test_instr(16, |a| a.push(es).unwrap(),
				Instruction::with1(Code::Pushw_ES, Register::ES).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.register() == Register::CS */ {
		/* if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Pushw_CS
			test_instr(16, |a| a.push(cs).unwrap(),
				Instruction::with1(Code::Pushw_CS, Register::CS).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.register() == Register::SS */ {
		/* if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Pushw_SS
			test_instr(16, |a| a.push(ss).unwrap(),
				Instruction::with1(Code::Pushw_SS, Register::SS).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.register() == Register::DS */ {
		/* if self.bitness() >= 32 */ {
			// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
		} /* else */ {
			// Pushw_DS
			test_instr(16, |a| a.push(ds).unwrap(),
				Instruction::with1(Code::Pushw_DS, Register::DS).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else */ {
	}
}

#[test]
#[rustfmt::skip]
fn push_m() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Push_rm64 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Push_rm32
		test_instr(16, |a| a.push(dword_ptr(di)).unwrap(),
			Instruction::with1(Code::Push_rm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Push_rm16
		test_instr(16, |a| a.push(word_ptr(di)).unwrap(),
			Instruction::with1(Code::Push_rm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Push_rm16
		test_invalid_instr(16, |a| assert!(a.push(zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn push_i() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else if op0 >= i8::MIN as i32 && op0 <= i8::MAX as i32 */ {
		// Pushw_imm8
		test_instr(16, |a| a.push(-0x80i32).unwrap(),
			Instruction::with1(Code::Pushw_imm8, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Pushw_imm8
		test_instr(16, |a| a.push(0x7Fi32).unwrap(),
			Instruction::with1(Code::Pushw_imm8, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Push_imm16
		test_instr(16, |a| a.push(0x40B7i32).unwrap(),
			Instruction::with1(Code::Push_imm16, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else if op0 >= i8::MIN as i32 && op0 <= i8::MAX as i32 */ {
		// Pushw_imm8
		test_instr(16, |a| a.push(-0x80).unwrap(),
			Instruction::with1(Code::Pushw_imm8, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Pushw_imm8
		test_instr(16, |a| a.push(0x7F).unwrap(),
			Instruction::with1(Code::Pushw_imm8, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Push_imm16
		test_instr(16, |a| a.push(0x40B7).unwrap(),
			Instruction::with1(Code::Push_imm16, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn push_u() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else if op0 <= i8::MAX as u32 || (0xFF80 <= op0 && op0 <= 0xFFFF) */ {
		// Pushw_imm8
		test_instr(16, |a| a.push(0xFF80u32).unwrap(),
			Instruction::with1(Code::Pushw_imm8, 0xFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Pushw_imm8
		test_instr(16, |a| a.push(0x7Fu32).unwrap(),
			Instruction::with1(Code::Pushw_imm8, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Push_imm16
		test_instr(16, |a| a.push(0x40B7u32).unwrap(),
			Instruction::with1(Code::Push_imm16, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn pusha() {
	// Pushaw
	test_instr(16, |a| a.pusha().unwrap(),
		Instruction::with(Code::Pushaw),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pushad() {
	// Pushad
	test_instr(16, |a| a.pushad().unwrap(),
		Instruction::with(Code::Pushad),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pushf() {
	// Pushfw
	test_instr(16, |a| a.pushf().unwrap(),
		Instruction::with(Code::Pushfw),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pushfd() {
	// Pushfd
	test_instr(16, |a| a.pushfd().unwrap(),
		Instruction::with(Code::Pushfd),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pvalidate() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Pvalidatew
		test_instr(16, |a| a.pvalidate().unwrap(),
			Instruction::with(Code::Pvalidatew),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn pxor_mm_mm() {
	// Pxor_mm_mmm64
	test_instr(16, |a| a.pxor(mm2, mm3).unwrap(),
		Instruction::with2(Code::Pxor_mm_mmm64, Register::MM2, Register::MM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pxor_xmm_xmm() {
	// Pxor_xmm_xmmm128
	test_instr(16, |a| a.pxor(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Pxor_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pxor_mm_m() {
	// Pxor_mm_mmm64
	test_instr(16, |a| a.pxor(mm2, qword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pxor_mm_mmm64, Register::MM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn pxor_xmm_m() {
	// Pxor_xmm_xmmm128
	test_instr(16, |a| a.pxor(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Pxor_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rcl_r8_r8() {
	// Rcl_rm8_CL
	test_instr(16, |a| a.rcl(dl, cl).unwrap(),
		Instruction::with2(Code::Rcl_rm8_CL, Register::DL, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rcl_r16_r8() {
	// Rcl_rm16_CL
	test_instr(16, |a| a.rcl(dx, cl).unwrap(),
		Instruction::with2(Code::Rcl_rm16_CL, Register::DX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rcl_r32_r8() {
	// Rcl_rm32_CL
	test_instr(16, |a| a.rcl(edx, cl).unwrap(),
		Instruction::with2(Code::Rcl_rm32_CL, Register::EDX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rcl_m_r8() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Rcl_rm64_CL - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Rcl_rm32_CL
		test_instr(16, |a| a.rcl(dword_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Rcl_rm32_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Rcl_rm16_CL
		test_instr(16, |a| a.rcl(word_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Rcl_rm16_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Rcl_rm8_CL
		test_instr(16, |a| a.rcl(byte_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Rcl_rm8_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcl_rm8_CL
		test_invalid_instr(16, |a| assert!(a.rcl(zmmword_ptr(di), cl).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rcl_r8_i() {
	/* if op1 == 1 */ {
		// Rcl_rm8_1
		test_instr(16, |a| a.rcl(dl, 1i32).unwrap(),
			Instruction::with2(Code::Rcl_rm8_1, Register::DL, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcl_rm8_imm8
		test_instr(16, |a| a.rcl(dl, 2i32).unwrap(),
			Instruction::with2(Code::Rcl_rm8_imm8, Register::DL, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Rcl_rm8_1
		test_instr(16, |a| a.rcl(dl, 1).unwrap(),
			Instruction::with2(Code::Rcl_rm8_1, Register::DL, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcl_rm8_imm8
		test_instr(16, |a| a.rcl(dl, 2).unwrap(),
			Instruction::with2(Code::Rcl_rm8_imm8, Register::DL, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rcl_r16_i() {
	/* if op1 == 1 */ {
		// Rcl_rm16_1
		test_instr(16, |a| a.rcl(dx, 1i32).unwrap(),
			Instruction::with2(Code::Rcl_rm16_1, Register::DX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcl_rm16_imm8
		test_instr(16, |a| a.rcl(dx, 2i32).unwrap(),
			Instruction::with2(Code::Rcl_rm16_imm8, Register::DX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Rcl_rm16_1
		test_instr(16, |a| a.rcl(dx, 1).unwrap(),
			Instruction::with2(Code::Rcl_rm16_1, Register::DX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcl_rm16_imm8
		test_instr(16, |a| a.rcl(dx, 2).unwrap(),
			Instruction::with2(Code::Rcl_rm16_imm8, Register::DX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rcl_r32_i() {
	/* if op1 == 1 */ {
		// Rcl_rm32_1
		test_instr(16, |a| a.rcl(edx, 1i32).unwrap(),
			Instruction::with2(Code::Rcl_rm32_1, Register::EDX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcl_rm32_imm8
		test_instr(16, |a| a.rcl(edx, 2i32).unwrap(),
			Instruction::with2(Code::Rcl_rm32_imm8, Register::EDX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Rcl_rm32_1
		test_instr(16, |a| a.rcl(edx, 1).unwrap(),
			Instruction::with2(Code::Rcl_rm32_1, Register::EDX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcl_rm32_imm8
		test_instr(16, |a| a.rcl(edx, 2).unwrap(),
			Instruction::with2(Code::Rcl_rm32_imm8, Register::EDX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rcl_m_i() {
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Rcl_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Rcl_rm32_1
			test_instr(16, |a| a.rcl(dword_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Rcl_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Rcl_rm16_1
			test_instr(16, |a| a.rcl(word_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Rcl_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Rcl_rm8_1
			test_instr(16, |a| a.rcl(byte_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Rcl_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Rcl_rm8_1
			test_invalid_instr(16, |a| assert!(a.rcl(zmmword_ptr(di), 1i32).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Rcl_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Rcl_rm32_imm8
		test_instr(16, |a| a.rcl(dword_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Rcl_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Rcl_rm16_imm8
		test_instr(16, |a| a.rcl(word_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Rcl_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Rcl_rm8_imm8
		test_instr(16, |a| a.rcl(byte_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Rcl_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcl_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.rcl(zmmword_ptr(di), 2i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Rcl_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Rcl_rm32_1
			test_instr(16, |a| a.rcl(dword_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Rcl_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Rcl_rm16_1
			test_instr(16, |a| a.rcl(word_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Rcl_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Rcl_rm8_1
			test_instr(16, |a| a.rcl(byte_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Rcl_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Rcl_rm8_1
			test_invalid_instr(16, |a| assert!(a.rcl(zmmword_ptr(di), 1).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Rcl_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Rcl_rm32_imm8
		test_instr(16, |a| a.rcl(dword_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Rcl_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Rcl_rm16_imm8
		test_instr(16, |a| a.rcl(word_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Rcl_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Rcl_rm8_imm8
		test_instr(16, |a| a.rcl(byte_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Rcl_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcl_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.rcl(zmmword_ptr(di), 2).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rcl_r8_u() {
	/* if op1 == 1 */ {
		// Rcl_rm8_1
		test_instr(16, |a| a.rcl(dl, 1u32).unwrap(),
			Instruction::with2(Code::Rcl_rm8_1, Register::DL, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcl_rm8_imm8
		test_instr(16, |a| a.rcl(dl, 2u32).unwrap(),
			Instruction::with2(Code::Rcl_rm8_imm8, Register::DL, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rcl_r16_u() {
	/* if op1 == 1 */ {
		// Rcl_rm16_1
		test_instr(16, |a| a.rcl(dx, 1u32).unwrap(),
			Instruction::with2(Code::Rcl_rm16_1, Register::DX, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcl_rm16_imm8
		test_instr(16, |a| a.rcl(dx, 2u32).unwrap(),
			Instruction::with2(Code::Rcl_rm16_imm8, Register::DX, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rcl_r32_u() {
	/* if op1 == 1 */ {
		// Rcl_rm32_1
		test_instr(16, |a| a.rcl(edx, 1u32).unwrap(),
			Instruction::with2(Code::Rcl_rm32_1, Register::EDX, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcl_rm32_imm8
		test_instr(16, |a| a.rcl(edx, 2u32).unwrap(),
			Instruction::with2(Code::Rcl_rm32_imm8, Register::EDX, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rcl_m_u() {
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Rcl_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Rcl_rm32_1
			test_instr(16, |a| a.rcl(dword_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Rcl_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Rcl_rm16_1
			test_instr(16, |a| a.rcl(word_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Rcl_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Rcl_rm8_1
			test_instr(16, |a| a.rcl(byte_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Rcl_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Rcl_rm8_1
			test_invalid_instr(16, |a| assert!(a.rcl(zmmword_ptr(di), 1u32).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Rcl_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Rcl_rm32_imm8
		test_instr(16, |a| a.rcl(dword_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Rcl_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Rcl_rm16_imm8
		test_instr(16, |a| a.rcl(word_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Rcl_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Rcl_rm8_imm8
		test_instr(16, |a| a.rcl(byte_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Rcl_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcl_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.rcl(zmmword_ptr(di), 2u32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rcpps_xmm_xmm() {
	// Rcpps_xmm_xmmm128
	test_instr(16, |a| a.rcpps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Rcpps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rcpps_xmm_m() {
	// Rcpps_xmm_xmmm128
	test_instr(16, |a| a.rcpps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Rcpps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rcpss_xmm_xmm() {
	// Rcpss_xmm_xmmm32
	test_instr(16, |a| a.rcpss(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Rcpss_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rcpss_xmm_m() {
	// Rcpss_xmm_xmmm32
	test_instr(16, |a| a.rcpss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Rcpss_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rcr_r8_r8() {
	// Rcr_rm8_CL
	test_instr(16, |a| a.rcr(dl, cl).unwrap(),
		Instruction::with2(Code::Rcr_rm8_CL, Register::DL, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rcr_r16_r8() {
	// Rcr_rm16_CL
	test_instr(16, |a| a.rcr(dx, cl).unwrap(),
		Instruction::with2(Code::Rcr_rm16_CL, Register::DX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rcr_r32_r8() {
	// Rcr_rm32_CL
	test_instr(16, |a| a.rcr(edx, cl).unwrap(),
		Instruction::with2(Code::Rcr_rm32_CL, Register::EDX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rcr_m_r8() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Rcr_rm64_CL - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Rcr_rm32_CL
		test_instr(16, |a| a.rcr(dword_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Rcr_rm32_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Rcr_rm16_CL
		test_instr(16, |a| a.rcr(word_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Rcr_rm16_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Rcr_rm8_CL
		test_instr(16, |a| a.rcr(byte_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Rcr_rm8_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcr_rm8_CL
		test_invalid_instr(16, |a| assert!(a.rcr(zmmword_ptr(di), cl).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rcr_r8_i() {
	/* if op1 == 1 */ {
		// Rcr_rm8_1
		test_instr(16, |a| a.rcr(dl, 1i32).unwrap(),
			Instruction::with2(Code::Rcr_rm8_1, Register::DL, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcr_rm8_imm8
		test_instr(16, |a| a.rcr(dl, 2i32).unwrap(),
			Instruction::with2(Code::Rcr_rm8_imm8, Register::DL, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Rcr_rm8_1
		test_instr(16, |a| a.rcr(dl, 1).unwrap(),
			Instruction::with2(Code::Rcr_rm8_1, Register::DL, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcr_rm8_imm8
		test_instr(16, |a| a.rcr(dl, 2).unwrap(),
			Instruction::with2(Code::Rcr_rm8_imm8, Register::DL, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rcr_r16_i() {
	/* if op1 == 1 */ {
		// Rcr_rm16_1
		test_instr(16, |a| a.rcr(dx, 1i32).unwrap(),
			Instruction::with2(Code::Rcr_rm16_1, Register::DX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcr_rm16_imm8
		test_instr(16, |a| a.rcr(dx, 2i32).unwrap(),
			Instruction::with2(Code::Rcr_rm16_imm8, Register::DX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Rcr_rm16_1
		test_instr(16, |a| a.rcr(dx, 1).unwrap(),
			Instruction::with2(Code::Rcr_rm16_1, Register::DX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcr_rm16_imm8
		test_instr(16, |a| a.rcr(dx, 2).unwrap(),
			Instruction::with2(Code::Rcr_rm16_imm8, Register::DX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rcr_r32_i() {
	/* if op1 == 1 */ {
		// Rcr_rm32_1
		test_instr(16, |a| a.rcr(edx, 1i32).unwrap(),
			Instruction::with2(Code::Rcr_rm32_1, Register::EDX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcr_rm32_imm8
		test_instr(16, |a| a.rcr(edx, 2i32).unwrap(),
			Instruction::with2(Code::Rcr_rm32_imm8, Register::EDX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Rcr_rm32_1
		test_instr(16, |a| a.rcr(edx, 1).unwrap(),
			Instruction::with2(Code::Rcr_rm32_1, Register::EDX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcr_rm32_imm8
		test_instr(16, |a| a.rcr(edx, 2).unwrap(),
			Instruction::with2(Code::Rcr_rm32_imm8, Register::EDX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rcr_m_i() {
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Rcr_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Rcr_rm32_1
			test_instr(16, |a| a.rcr(dword_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Rcr_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Rcr_rm16_1
			test_instr(16, |a| a.rcr(word_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Rcr_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Rcr_rm8_1
			test_instr(16, |a| a.rcr(byte_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Rcr_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Rcr_rm8_1
			test_invalid_instr(16, |a| assert!(a.rcr(zmmword_ptr(di), 1i32).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Rcr_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Rcr_rm32_imm8
		test_instr(16, |a| a.rcr(dword_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Rcr_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Rcr_rm16_imm8
		test_instr(16, |a| a.rcr(word_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Rcr_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Rcr_rm8_imm8
		test_instr(16, |a| a.rcr(byte_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Rcr_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcr_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.rcr(zmmword_ptr(di), 2i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Rcr_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Rcr_rm32_1
			test_instr(16, |a| a.rcr(dword_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Rcr_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Rcr_rm16_1
			test_instr(16, |a| a.rcr(word_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Rcr_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Rcr_rm8_1
			test_instr(16, |a| a.rcr(byte_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Rcr_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Rcr_rm8_1
			test_invalid_instr(16, |a| assert!(a.rcr(zmmword_ptr(di), 1).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Rcr_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Rcr_rm32_imm8
		test_instr(16, |a| a.rcr(dword_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Rcr_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Rcr_rm16_imm8
		test_instr(16, |a| a.rcr(word_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Rcr_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Rcr_rm8_imm8
		test_instr(16, |a| a.rcr(byte_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Rcr_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcr_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.rcr(zmmword_ptr(di), 2).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rcr_r8_u() {
	/* if op1 == 1 */ {
		// Rcr_rm8_1
		test_instr(16, |a| a.rcr(dl, 1u32).unwrap(),
			Instruction::with2(Code::Rcr_rm8_1, Register::DL, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcr_rm8_imm8
		test_instr(16, |a| a.rcr(dl, 2u32).unwrap(),
			Instruction::with2(Code::Rcr_rm8_imm8, Register::DL, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rcr_r16_u() {
	/* if op1 == 1 */ {
		// Rcr_rm16_1
		test_instr(16, |a| a.rcr(dx, 1u32).unwrap(),
			Instruction::with2(Code::Rcr_rm16_1, Register::DX, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcr_rm16_imm8
		test_instr(16, |a| a.rcr(dx, 2u32).unwrap(),
			Instruction::with2(Code::Rcr_rm16_imm8, Register::DX, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rcr_r32_u() {
	/* if op1 == 1 */ {
		// Rcr_rm32_1
		test_instr(16, |a| a.rcr(edx, 1u32).unwrap(),
			Instruction::with2(Code::Rcr_rm32_1, Register::EDX, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcr_rm32_imm8
		test_instr(16, |a| a.rcr(edx, 2u32).unwrap(),
			Instruction::with2(Code::Rcr_rm32_imm8, Register::EDX, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rcr_m_u() {
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Rcr_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Rcr_rm32_1
			test_instr(16, |a| a.rcr(dword_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Rcr_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Rcr_rm16_1
			test_instr(16, |a| a.rcr(word_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Rcr_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Rcr_rm8_1
			test_instr(16, |a| a.rcr(byte_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Rcr_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Rcr_rm8_1
			test_invalid_instr(16, |a| assert!(a.rcr(zmmword_ptr(di), 1u32).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Rcr_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Rcr_rm32_imm8
		test_instr(16, |a| a.rcr(dword_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Rcr_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Rcr_rm16_imm8
		test_instr(16, |a| a.rcr(word_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Rcr_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Rcr_rm8_imm8
		test_instr(16, |a| a.rcr(byte_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Rcr_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rcr_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.rcr(zmmword_ptr(di), 2u32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rdm() {
	// Rdm
	test_instr(16, |a| a.rdm().unwrap(),
		Instruction::with(Code::Rdm),
		TestInstrFlags::NONE, DecoderOptions::CYRIX_DMI);
}

#[test]
#[rustfmt::skip]
fn rdmsr() {
	// Rdmsr
	test_instr(16, |a| a.rdmsr().unwrap(),
		Instruction::with(Code::Rdmsr),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rdpid_r32() {
	// Rdpid_r32
	test_instr(16, |a| a.rdpid(edx).unwrap(),
		Instruction::with1(Code::Rdpid_r32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rdpkru() {
	// Rdpkru
	test_instr(16, |a| a.rdpkru().unwrap(),
		Instruction::with(Code::Rdpkru),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rdpmc() {
	// Rdpmc
	test_instr(16, |a| a.rdpmc().unwrap(),
		Instruction::with(Code::Rdpmc),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rdpru() {
	// Rdpru
	test_instr(16, |a| a.rdpru().unwrap(),
		Instruction::with(Code::Rdpru),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rdrand_r16() {
	// Rdrand_r16
	test_instr(16, |a| a.rdrand(dx).unwrap(),
		Instruction::with1(Code::Rdrand_r16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rdrand_r32() {
	// Rdrand_r32
	test_instr(16, |a| a.rdrand(edx).unwrap(),
		Instruction::with1(Code::Rdrand_r32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rdseed_r16() {
	// Rdseed_r16
	test_instr(16, |a| a.rdseed(dx).unwrap(),
		Instruction::with1(Code::Rdseed_r16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rdseed_r32() {
	// Rdseed_r32
	test_instr(16, |a| a.rdseed(edx).unwrap(),
		Instruction::with1(Code::Rdseed_r32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rdshr_r32() {
	// Rdshr_rm32
	test_instr(16, |a| a.rdshr(edx).unwrap(),
		Instruction::with1(Code::Rdshr_rm32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn rdshr_m() {
	// Rdshr_rm32
	test_instr(16, |a| a.rdshr(dword_ptr(si)).unwrap(),
		Instruction::with1(Code::Rdshr_rm32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn rdsspd_r32() {
	// Rdsspd_r32
	test_instr(16, |a| a.rdsspd(edx).unwrap(),
		Instruction::with1(Code::Rdsspd_r32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rdtsc() {
	// Rdtsc
	test_instr(16, |a| a.rdtsc().unwrap(),
		Instruction::with(Code::Rdtsc),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rdtscp() {
	// Rdtscp
	test_instr(16, |a| a.rdtscp().unwrap(),
		Instruction::with(Code::Rdtscp),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rdudbg() {
	// Rdudbg
	test_instr(16, |a| a.rdudbg().unwrap(),
		Instruction::with(Code::Rdudbg),
		TestInstrFlags::NONE, DecoderOptions::UDBG);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f0d_r16_r16() {
	// Reservednop_rm16_r16_0F0D
	test_instr(16, |a| a.reservednop_0f0d(dx, bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F0D, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f0d_m_r16() {
	// Reservednop_rm16_r16_0F0D
	test_instr(16, |a| a.reservednop_0f0d(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F0D, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f0d_r32_r32() {
	// Reservednop_rm32_r32_0F0D
	test_instr(16, |a| a.reservednop_0f0d(edx, ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F0D, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f0d_m_r32() {
	// Reservednop_rm32_r32_0F0D
	test_instr(16, |a| a.reservednop_0f0d(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F0D, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f18_r16_r16() {
	// Reservednop_rm16_r16_0F18
	test_instr(16, |a| a.reservednop_0f18(dx, bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F18, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f18_m_r16() {
	// Reservednop_rm16_r16_0F18
	test_instr(16, |a| a.reservednop_0f18(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F18, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f18_r32_r32() {
	// Reservednop_rm32_r32_0F18
	test_instr(16, |a| a.reservednop_0f18(edx, ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F18, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f18_m_r32() {
	// Reservednop_rm32_r32_0F18
	test_instr(16, |a| a.reservednop_0f18(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F18, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f19_r16_r16() {
	// Reservednop_rm16_r16_0F19
	test_instr(16, |a| a.reservednop_0f19(dx, bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F19, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f19_m_r16() {
	// Reservednop_rm16_r16_0F19
	test_instr(16, |a| a.reservednop_0f19(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F19, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f19_r32_r32() {
	// Reservednop_rm32_r32_0F19
	test_instr(16, |a| a.reservednop_0f19(edx, ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F19, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f19_m_r32() {
	// Reservednop_rm32_r32_0F19
	test_instr(16, |a| a.reservednop_0f19(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F19, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1a_r16_r16() {
	// Reservednop_rm16_r16_0F1A
	test_instr(16, |a| a.reservednop_0f1a(dx, bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F1A, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1a_m_r16() {
	// Reservednop_rm16_r16_0F1A
	test_instr(16, |a| a.reservednop_0f1a(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F1A, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1a_r32_r32() {
	// Reservednop_rm32_r32_0F1A
	test_instr(16, |a| a.reservednop_0f1a(edx, ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F1A, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1a_m_r32() {
	// Reservednop_rm32_r32_0F1A
	test_instr(16, |a| a.reservednop_0f1a(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F1A, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1b_r16_r16() {
	// Reservednop_rm16_r16_0F1B
	test_instr(16, |a| a.reservednop_0f1b(dx, bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F1B, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1b_m_r16() {
	// Reservednop_rm16_r16_0F1B
	test_instr(16, |a| a.reservednop_0f1b(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F1B, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1b_r32_r32() {
	// Reservednop_rm32_r32_0F1B
	test_instr(16, |a| a.reservednop_0f1b(edx, ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F1B, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1b_m_r32() {
	// Reservednop_rm32_r32_0F1B
	test_instr(16, |a| a.reservednop_0f1b(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F1B, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1c_r16_r16() {
	// Reservednop_rm16_r16_0F1C
	test_instr(16, |a| a.reservednop_0f1c(dx, bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F1C, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1c_m_r16() {
	// Reservednop_rm16_r16_0F1C
	test_instr(16, |a| a.reservednop_0f1c(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F1C, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1c_r32_r32() {
	// Reservednop_rm32_r32_0F1C
	test_instr(16, |a| a.reservednop_0f1c(edx, ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F1C, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1c_m_r32() {
	// Reservednop_rm32_r32_0F1C
	test_instr(16, |a| a.reservednop_0f1c(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F1C, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1d_r16_r16() {
	// Reservednop_rm16_r16_0F1D
	test_instr(16, |a| a.reservednop_0f1d(dx, bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F1D, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1d_m_r16() {
	// Reservednop_rm16_r16_0F1D
	test_instr(16, |a| a.reservednop_0f1d(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F1D, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1d_r32_r32() {
	// Reservednop_rm32_r32_0F1D
	test_instr(16, |a| a.reservednop_0f1d(edx, ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F1D, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1d_m_r32() {
	// Reservednop_rm32_r32_0F1D
	test_instr(16, |a| a.reservednop_0f1d(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F1D, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1e_r16_r16() {
	// Reservednop_rm16_r16_0F1E
	test_instr(16, |a| a.reservednop_0f1e(dx, bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F1E, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1e_m_r16() {
	// Reservednop_rm16_r16_0F1E
	test_instr(16, |a| a.reservednop_0f1e(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F1E, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1e_r32_r32() {
	// Reservednop_rm32_r32_0F1E
	test_instr(16, |a| a.reservednop_0f1e(edx, ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F1E, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1e_m_r32() {
	// Reservednop_rm32_r32_0F1E
	test_instr(16, |a| a.reservednop_0f1e(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F1E, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1f_r16_r16() {
	// Reservednop_rm16_r16_0F1F
	test_instr(16, |a| a.reservednop_0f1f(dx, bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F1F, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1f_m_r16() {
	// Reservednop_rm16_r16_0F1F
	test_instr(16, |a| a.reservednop_0f1f(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Reservednop_rm16_r16_0F1F, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1f_r32_r32() {
	// Reservednop_rm32_r32_0F1F
	test_instr(16, |a| a.reservednop_0f1f(edx, ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F1F, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn reservednop_0f1f_m_r32() {
	// Reservednop_rm32_r32_0F1F
	test_instr(16, |a| a.reservednop_0f1f(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Reservednop_rm32_r32_0F1F, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::FORCE_RESERVED_NOP);
}

#[test]
#[rustfmt::skip]
fn ret() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Retnw
		test_instr(16, |a| a.ret().unwrap(),
			Instruction::with(Code::Retnw),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn ret_i() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Retnw_imm16
		test_instr(16, |a| a.ret_1(0x40B7i32).unwrap(),
			Instruction::with1(Code::Retnw_imm16, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Retnw_imm16
		test_instr(16, |a| a.ret_1(0x40B7).unwrap(),
			Instruction::with1(Code::Retnw_imm16, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn ret_u() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Retnw_imm16
		test_instr(16, |a| a.ret_1(0x40B7u32).unwrap(),
			Instruction::with1(Code::Retnw_imm16, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn retf() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Retfw
		test_instr(16, |a| a.retf().unwrap(),
			Instruction::with(Code::Retfw),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn retf_i() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Retfw_imm16
		test_instr(16, |a| a.retf_1(0x40B7i32).unwrap(),
			Instruction::with1(Code::Retfw_imm16, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Retfw_imm16
		test_instr(16, |a| a.retf_1(0x40B7).unwrap(),
			Instruction::with1(Code::Retfw_imm16, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn retf_u() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Retfw_imm16
		test_instr(16, |a| a.retf_1(0x40B7u32).unwrap(),
			Instruction::with1(Code::Retfw_imm16, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rol_r8_r8() {
	// Rol_rm8_CL
	test_instr(16, |a| a.rol(dl, cl).unwrap(),
		Instruction::with2(Code::Rol_rm8_CL, Register::DL, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rol_r16_r8() {
	// Rol_rm16_CL
	test_instr(16, |a| a.rol(dx, cl).unwrap(),
		Instruction::with2(Code::Rol_rm16_CL, Register::DX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rol_r32_r8() {
	// Rol_rm32_CL
	test_instr(16, |a| a.rol(edx, cl).unwrap(),
		Instruction::with2(Code::Rol_rm32_CL, Register::EDX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rol_m_r8() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Rol_rm64_CL - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Rol_rm32_CL
		test_instr(16, |a| a.rol(dword_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Rol_rm32_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Rol_rm16_CL
		test_instr(16, |a| a.rol(word_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Rol_rm16_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Rol_rm8_CL
		test_instr(16, |a| a.rol(byte_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Rol_rm8_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rol_rm8_CL
		test_invalid_instr(16, |a| assert!(a.rol(zmmword_ptr(di), cl).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rol_r8_i() {
	/* if op1 == 1 */ {
		// Rol_rm8_1
		test_instr(16, |a| a.rol(dl, 1i32).unwrap(),
			Instruction::with2(Code::Rol_rm8_1, Register::DL, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rol_rm8_imm8
		test_instr(16, |a| a.rol(dl, 2i32).unwrap(),
			Instruction::with2(Code::Rol_rm8_imm8, Register::DL, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Rol_rm8_1
		test_instr(16, |a| a.rol(dl, 1).unwrap(),
			Instruction::with2(Code::Rol_rm8_1, Register::DL, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rol_rm8_imm8
		test_instr(16, |a| a.rol(dl, 2).unwrap(),
			Instruction::with2(Code::Rol_rm8_imm8, Register::DL, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rol_r16_i() {
	/* if op1 == 1 */ {
		// Rol_rm16_1
		test_instr(16, |a| a.rol(dx, 1i32).unwrap(),
			Instruction::with2(Code::Rol_rm16_1, Register::DX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rol_rm16_imm8
		test_instr(16, |a| a.rol(dx, 2i32).unwrap(),
			Instruction::with2(Code::Rol_rm16_imm8, Register::DX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Rol_rm16_1
		test_instr(16, |a| a.rol(dx, 1).unwrap(),
			Instruction::with2(Code::Rol_rm16_1, Register::DX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rol_rm16_imm8
		test_instr(16, |a| a.rol(dx, 2).unwrap(),
			Instruction::with2(Code::Rol_rm16_imm8, Register::DX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rol_r32_i() {
	/* if op1 == 1 */ {
		// Rol_rm32_1
		test_instr(16, |a| a.rol(edx, 1i32).unwrap(),
			Instruction::with2(Code::Rol_rm32_1, Register::EDX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rol_rm32_imm8
		test_instr(16, |a| a.rol(edx, 2i32).unwrap(),
			Instruction::with2(Code::Rol_rm32_imm8, Register::EDX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Rol_rm32_1
		test_instr(16, |a| a.rol(edx, 1).unwrap(),
			Instruction::with2(Code::Rol_rm32_1, Register::EDX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rol_rm32_imm8
		test_instr(16, |a| a.rol(edx, 2).unwrap(),
			Instruction::with2(Code::Rol_rm32_imm8, Register::EDX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rol_m_i() {
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Rol_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Rol_rm32_1
			test_instr(16, |a| a.rol(dword_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Rol_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Rol_rm16_1
			test_instr(16, |a| a.rol(word_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Rol_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Rol_rm8_1
			test_instr(16, |a| a.rol(byte_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Rol_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Rol_rm8_1
			test_invalid_instr(16, |a| assert!(a.rol(zmmword_ptr(di), 1i32).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Rol_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Rol_rm32_imm8
		test_instr(16, |a| a.rol(dword_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Rol_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Rol_rm16_imm8
		test_instr(16, |a| a.rol(word_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Rol_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Rol_rm8_imm8
		test_instr(16, |a| a.rol(byte_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Rol_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rol_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.rol(zmmword_ptr(di), 2i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Rol_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Rol_rm32_1
			test_instr(16, |a| a.rol(dword_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Rol_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Rol_rm16_1
			test_instr(16, |a| a.rol(word_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Rol_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Rol_rm8_1
			test_instr(16, |a| a.rol(byte_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Rol_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Rol_rm8_1
			test_invalid_instr(16, |a| assert!(a.rol(zmmword_ptr(di), 1).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Rol_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Rol_rm32_imm8
		test_instr(16, |a| a.rol(dword_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Rol_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Rol_rm16_imm8
		test_instr(16, |a| a.rol(word_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Rol_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Rol_rm8_imm8
		test_instr(16, |a| a.rol(byte_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Rol_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rol_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.rol(zmmword_ptr(di), 2).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rol_r8_u() {
	/* if op1 == 1 */ {
		// Rol_rm8_1
		test_instr(16, |a| a.rol(dl, 1u32).unwrap(),
			Instruction::with2(Code::Rol_rm8_1, Register::DL, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rol_rm8_imm8
		test_instr(16, |a| a.rol(dl, 2u32).unwrap(),
			Instruction::with2(Code::Rol_rm8_imm8, Register::DL, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rol_r16_u() {
	/* if op1 == 1 */ {
		// Rol_rm16_1
		test_instr(16, |a| a.rol(dx, 1u32).unwrap(),
			Instruction::with2(Code::Rol_rm16_1, Register::DX, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rol_rm16_imm8
		test_instr(16, |a| a.rol(dx, 2u32).unwrap(),
			Instruction::with2(Code::Rol_rm16_imm8, Register::DX, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rol_r32_u() {
	/* if op1 == 1 */ {
		// Rol_rm32_1
		test_instr(16, |a| a.rol(edx, 1u32).unwrap(),
			Instruction::with2(Code::Rol_rm32_1, Register::EDX, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rol_rm32_imm8
		test_instr(16, |a| a.rol(edx, 2u32).unwrap(),
			Instruction::with2(Code::Rol_rm32_imm8, Register::EDX, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rol_m_u() {
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Rol_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Rol_rm32_1
			test_instr(16, |a| a.rol(dword_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Rol_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Rol_rm16_1
			test_instr(16, |a| a.rol(word_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Rol_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Rol_rm8_1
			test_instr(16, |a| a.rol(byte_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Rol_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Rol_rm8_1
			test_invalid_instr(16, |a| assert!(a.rol(zmmword_ptr(di), 1u32).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Rol_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Rol_rm32_imm8
		test_instr(16, |a| a.rol(dword_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Rol_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Rol_rm16_imm8
		test_instr(16, |a| a.rol(word_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Rol_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Rol_rm8_imm8
		test_instr(16, |a| a.rol(byte_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Rol_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Rol_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.rol(zmmword_ptr(di), 2u32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn ror_r8_r8() {
	// Ror_rm8_CL
	test_instr(16, |a| a.ror(dl, cl).unwrap(),
		Instruction::with2(Code::Ror_rm8_CL, Register::DL, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ror_r16_r8() {
	// Ror_rm16_CL
	test_instr(16, |a| a.ror(dx, cl).unwrap(),
		Instruction::with2(Code::Ror_rm16_CL, Register::DX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ror_r32_r8() {
	// Ror_rm32_CL
	test_instr(16, |a| a.ror(edx, cl).unwrap(),
		Instruction::with2(Code::Ror_rm32_CL, Register::EDX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ror_m_r8() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Ror_rm64_CL - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Ror_rm32_CL
		test_instr(16, |a| a.ror(dword_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Ror_rm32_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Ror_rm16_CL
		test_instr(16, |a| a.ror(word_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Ror_rm16_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Ror_rm8_CL
		test_instr(16, |a| a.ror(byte_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Ror_rm8_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Ror_rm8_CL
		test_invalid_instr(16, |a| assert!(a.ror(zmmword_ptr(di), cl).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn ror_r8_i() {
	/* if op1 == 1 */ {
		// Ror_rm8_1
		test_instr(16, |a| a.ror(dl, 1i32).unwrap(),
			Instruction::with2(Code::Ror_rm8_1, Register::DL, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Ror_rm8_imm8
		test_instr(16, |a| a.ror(dl, 2i32).unwrap(),
			Instruction::with2(Code::Ror_rm8_imm8, Register::DL, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Ror_rm8_1
		test_instr(16, |a| a.ror(dl, 1).unwrap(),
			Instruction::with2(Code::Ror_rm8_1, Register::DL, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Ror_rm8_imm8
		test_instr(16, |a| a.ror(dl, 2).unwrap(),
			Instruction::with2(Code::Ror_rm8_imm8, Register::DL, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn ror_r16_i() {
	/* if op1 == 1 */ {
		// Ror_rm16_1
		test_instr(16, |a| a.ror(dx, 1i32).unwrap(),
			Instruction::with2(Code::Ror_rm16_1, Register::DX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Ror_rm16_imm8
		test_instr(16, |a| a.ror(dx, 2i32).unwrap(),
			Instruction::with2(Code::Ror_rm16_imm8, Register::DX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Ror_rm16_1
		test_instr(16, |a| a.ror(dx, 1).unwrap(),
			Instruction::with2(Code::Ror_rm16_1, Register::DX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Ror_rm16_imm8
		test_instr(16, |a| a.ror(dx, 2).unwrap(),
			Instruction::with2(Code::Ror_rm16_imm8, Register::DX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn ror_r32_i() {
	/* if op1 == 1 */ {
		// Ror_rm32_1
		test_instr(16, |a| a.ror(edx, 1i32).unwrap(),
			Instruction::with2(Code::Ror_rm32_1, Register::EDX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Ror_rm32_imm8
		test_instr(16, |a| a.ror(edx, 2i32).unwrap(),
			Instruction::with2(Code::Ror_rm32_imm8, Register::EDX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Ror_rm32_1
		test_instr(16, |a| a.ror(edx, 1).unwrap(),
			Instruction::with2(Code::Ror_rm32_1, Register::EDX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Ror_rm32_imm8
		test_instr(16, |a| a.ror(edx, 2).unwrap(),
			Instruction::with2(Code::Ror_rm32_imm8, Register::EDX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn ror_m_i() {
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Ror_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Ror_rm32_1
			test_instr(16, |a| a.ror(dword_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Ror_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Ror_rm16_1
			test_instr(16, |a| a.ror(word_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Ror_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Ror_rm8_1
			test_instr(16, |a| a.ror(byte_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Ror_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Ror_rm8_1
			test_invalid_instr(16, |a| assert!(a.ror(zmmword_ptr(di), 1i32).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Ror_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Ror_rm32_imm8
		test_instr(16, |a| a.ror(dword_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Ror_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Ror_rm16_imm8
		test_instr(16, |a| a.ror(word_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Ror_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Ror_rm8_imm8
		test_instr(16, |a| a.ror(byte_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Ror_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Ror_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.ror(zmmword_ptr(di), 2i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Ror_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Ror_rm32_1
			test_instr(16, |a| a.ror(dword_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Ror_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Ror_rm16_1
			test_instr(16, |a| a.ror(word_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Ror_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Ror_rm8_1
			test_instr(16, |a| a.ror(byte_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Ror_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Ror_rm8_1
			test_invalid_instr(16, |a| assert!(a.ror(zmmword_ptr(di), 1).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Ror_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Ror_rm32_imm8
		test_instr(16, |a| a.ror(dword_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Ror_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Ror_rm16_imm8
		test_instr(16, |a| a.ror(word_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Ror_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Ror_rm8_imm8
		test_instr(16, |a| a.ror(byte_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Ror_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Ror_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.ror(zmmword_ptr(di), 2).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn ror_r8_u() {
	/* if op1 == 1 */ {
		// Ror_rm8_1
		test_instr(16, |a| a.ror(dl, 1u32).unwrap(),
			Instruction::with2(Code::Ror_rm8_1, Register::DL, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Ror_rm8_imm8
		test_instr(16, |a| a.ror(dl, 2u32).unwrap(),
			Instruction::with2(Code::Ror_rm8_imm8, Register::DL, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn ror_r16_u() {
	/* if op1 == 1 */ {
		// Ror_rm16_1
		test_instr(16, |a| a.ror(dx, 1u32).unwrap(),
			Instruction::with2(Code::Ror_rm16_1, Register::DX, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Ror_rm16_imm8
		test_instr(16, |a| a.ror(dx, 2u32).unwrap(),
			Instruction::with2(Code::Ror_rm16_imm8, Register::DX, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn ror_r32_u() {
	/* if op1 == 1 */ {
		// Ror_rm32_1
		test_instr(16, |a| a.ror(edx, 1u32).unwrap(),
			Instruction::with2(Code::Ror_rm32_1, Register::EDX, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Ror_rm32_imm8
		test_instr(16, |a| a.ror(edx, 2u32).unwrap(),
			Instruction::with2(Code::Ror_rm32_imm8, Register::EDX, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn ror_m_u() {
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Ror_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Ror_rm32_1
			test_instr(16, |a| a.ror(dword_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Ror_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Ror_rm16_1
			test_instr(16, |a| a.ror(word_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Ror_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Ror_rm8_1
			test_instr(16, |a| a.ror(byte_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Ror_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Ror_rm8_1
			test_invalid_instr(16, |a| assert!(a.ror(zmmword_ptr(di), 1u32).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Ror_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Ror_rm32_imm8
		test_instr(16, |a| a.ror(dword_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Ror_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Ror_rm16_imm8
		test_instr(16, |a| a.ror(word_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Ror_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Ror_rm8_imm8
		test_instr(16, |a| a.ror(byte_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Ror_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Ror_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.ror(zmmword_ptr(di), 2u32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn rorx_r32_r32_i() {
	// VEX_Rorx_r32_rm32_imm8
	test_instr(16, |a| a.rorx(edx, ebx, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Rorx_r32_rm32_imm8, Register::EDX, Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Rorx_r32_rm32_imm8
	test_instr(16, |a| a.rorx(edx, ebx, -5).unwrap(),
		Instruction::with3(Code::VEX_Rorx_r32_rm32_imm8, Register::EDX, Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rorx_r32_m_i() {
	// VEX_Rorx_r32_rm32_imm8
	test_instr(16, |a| a.rorx(edx, dword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::VEX_Rorx_r32_rm32_imm8, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Rorx_r32_rm32_imm8
	test_instr(16, |a| a.rorx(edx, dword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::VEX_Rorx_r32_rm32_imm8, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rorx_r32_r32_u() {
	// VEX_Rorx_r32_rm32_imm8
	test_instr(16, |a| a.rorx(edx, ebx, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Rorx_r32_rm32_imm8, Register::EDX, Register::EBX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rorx_r32_m_u() {
	// VEX_Rorx_r32_rm32_imm8
	test_instr(16, |a| a.rorx(edx, dword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Rorx_r32_rm32_imm8, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn roundpd_xmm_xmm_i() {
	// Roundpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.roundpd(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Roundpd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Roundpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.roundpd(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Roundpd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn roundpd_xmm_m_i() {
	// Roundpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.roundpd(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Roundpd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Roundpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.roundpd(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Roundpd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn roundpd_xmm_xmm_u() {
	// Roundpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.roundpd(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Roundpd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn roundpd_xmm_m_u() {
	// Roundpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.roundpd(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Roundpd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn roundps_xmm_xmm_i() {
	// Roundps_xmm_xmmm128_imm8
	test_instr(16, |a| a.roundps(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Roundps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Roundps_xmm_xmmm128_imm8
	test_instr(16, |a| a.roundps(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Roundps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn roundps_xmm_m_i() {
	// Roundps_xmm_xmmm128_imm8
	test_instr(16, |a| a.roundps(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Roundps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Roundps_xmm_xmmm128_imm8
	test_instr(16, |a| a.roundps(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Roundps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn roundps_xmm_xmm_u() {
	// Roundps_xmm_xmmm128_imm8
	test_instr(16, |a| a.roundps(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Roundps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn roundps_xmm_m_u() {
	// Roundps_xmm_xmmm128_imm8
	test_instr(16, |a| a.roundps(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Roundps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn roundsd_xmm_xmm_i() {
	// Roundsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.roundsd(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Roundsd_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Roundsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.roundsd(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Roundsd_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn roundsd_xmm_m_i() {
	// Roundsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.roundsd(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Roundsd_xmm_xmmm64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Roundsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.roundsd(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Roundsd_xmm_xmmm64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn roundsd_xmm_xmm_u() {
	// Roundsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.roundsd(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Roundsd_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn roundsd_xmm_m_u() {
	// Roundsd_xmm_xmmm64_imm8
	test_instr(16, |a| a.roundsd(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Roundsd_xmm_xmmm64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn roundss_xmm_xmm_i() {
	// Roundss_xmm_xmmm32_imm8
	test_instr(16, |a| a.roundss(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Roundss_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Roundss_xmm_xmmm32_imm8
	test_instr(16, |a| a.roundss(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Roundss_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn roundss_xmm_m_i() {
	// Roundss_xmm_xmmm32_imm8
	test_instr(16, |a| a.roundss(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Roundss_xmm_xmmm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Roundss_xmm_xmmm32_imm8
	test_instr(16, |a| a.roundss(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Roundss_xmm_xmmm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn roundss_xmm_xmm_u() {
	// Roundss_xmm_xmmm32_imm8
	test_instr(16, |a| a.roundss(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Roundss_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn roundss_xmm_m_u() {
	// Roundss_xmm_xmmm32_imm8
	test_instr(16, |a| a.roundss(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Roundss_xmm_xmmm32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rsdc_seg_m() {
	// Rsdc_Sreg_m80
	test_instr(16, |a| a.rsdc(ds, ptr(si)).unwrap(),
		Instruction::with2(Code::Rsdc_Sreg_m80, Register::DS, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn rsldt_m() {
	// Rsldt_m80
	test_instr(16, |a| a.rsldt(ptr(si)).unwrap(),
		Instruction::with1(Code::Rsldt_m80, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn rsm() {
	// Rsm
	test_instr(16, |a| a.rsm().unwrap(),
		Instruction::with(Code::Rsm),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rsqrtps_xmm_xmm() {
	// Rsqrtps_xmm_xmmm128
	test_instr(16, |a| a.rsqrtps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Rsqrtps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rsqrtps_xmm_m() {
	// Rsqrtps_xmm_xmmm128
	test_instr(16, |a| a.rsqrtps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Rsqrtps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rsqrtss_xmm_xmm() {
	// Rsqrtss_xmm_xmmm32
	test_instr(16, |a| a.rsqrtss(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Rsqrtss_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rsqrtss_xmm_m() {
	// Rsqrtss_xmm_xmmm32
	test_instr(16, |a| a.rsqrtss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Rsqrtss_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rstorssp_m() {
	// Rstorssp_m64
	test_instr(16, |a| a.rstorssp(ptr(si)).unwrap(),
		Instruction::with1(Code::Rstorssp_m64, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn rsts_m() {
	// Rsts_m80
	test_instr(16, |a| a.rsts(ptr(si)).unwrap(),
		Instruction::with1(Code::Rsts_m80, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn sahf() {
	// Sahf
	test_instr(16, |a| a.sahf().unwrap(),
		Instruction::with(Code::Sahf),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sal_r8_r8() {
	// Sal_rm8_CL
	test_instr(16, |a| a.sal(dl, cl).unwrap(),
		Instruction::with2(Code::Sal_rm8_CL, Register::DL, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sal_r16_r8() {
	// Sal_rm16_CL
	test_instr(16, |a| a.sal(dx, cl).unwrap(),
		Instruction::with2(Code::Sal_rm16_CL, Register::DX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sal_r32_r8() {
	// Sal_rm32_CL
	test_instr(16, |a| a.sal(edx, cl).unwrap(),
		Instruction::with2(Code::Sal_rm32_CL, Register::EDX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sal_m_r8() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Sal_rm64_CL - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Sal_rm32_CL
		test_instr(16, |a| a.sal(dword_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Sal_rm32_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Sal_rm16_CL
		test_instr(16, |a| a.sal(word_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Sal_rm16_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Sal_rm8_CL
		test_instr(16, |a| a.sal(byte_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Sal_rm8_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sal_rm8_CL
		test_invalid_instr(16, |a| assert!(a.sal(zmmword_ptr(di), cl).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sal_r8_i() {
	/* if op1 == 1 */ {
		// Sal_rm8_1
		test_instr(16, |a| a.sal(dl, 1i32).unwrap(),
			Instruction::with2(Code::Sal_rm8_1, Register::DL, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sal_rm8_imm8
		test_instr(16, |a| a.sal(dl, 2i32).unwrap(),
			Instruction::with2(Code::Sal_rm8_imm8, Register::DL, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Sal_rm8_1
		test_instr(16, |a| a.sal(dl, 1).unwrap(),
			Instruction::with2(Code::Sal_rm8_1, Register::DL, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sal_rm8_imm8
		test_instr(16, |a| a.sal(dl, 2).unwrap(),
			Instruction::with2(Code::Sal_rm8_imm8, Register::DL, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sal_r16_i() {
	/* if op1 == 1 */ {
		// Sal_rm16_1
		test_instr(16, |a| a.sal(dx, 1i32).unwrap(),
			Instruction::with2(Code::Sal_rm16_1, Register::DX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sal_rm16_imm8
		test_instr(16, |a| a.sal(dx, 2i32).unwrap(),
			Instruction::with2(Code::Sal_rm16_imm8, Register::DX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Sal_rm16_1
		test_instr(16, |a| a.sal(dx, 1).unwrap(),
			Instruction::with2(Code::Sal_rm16_1, Register::DX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sal_rm16_imm8
		test_instr(16, |a| a.sal(dx, 2).unwrap(),
			Instruction::with2(Code::Sal_rm16_imm8, Register::DX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sal_r32_i() {
	/* if op1 == 1 */ {
		// Sal_rm32_1
		test_instr(16, |a| a.sal(edx, 1i32).unwrap(),
			Instruction::with2(Code::Sal_rm32_1, Register::EDX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sal_rm32_imm8
		test_instr(16, |a| a.sal(edx, 2i32).unwrap(),
			Instruction::with2(Code::Sal_rm32_imm8, Register::EDX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Sal_rm32_1
		test_instr(16, |a| a.sal(edx, 1).unwrap(),
			Instruction::with2(Code::Sal_rm32_1, Register::EDX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sal_rm32_imm8
		test_instr(16, |a| a.sal(edx, 2).unwrap(),
			Instruction::with2(Code::Sal_rm32_imm8, Register::EDX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sal_m_i() {
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Sal_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Sal_rm32_1
			test_instr(16, |a| a.sal(dword_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Sal_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Sal_rm16_1
			test_instr(16, |a| a.sal(word_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Sal_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Sal_rm8_1
			test_instr(16, |a| a.sal(byte_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Sal_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sal_rm8_1
			test_invalid_instr(16, |a| assert!(a.sal(zmmword_ptr(di), 1i32).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Sal_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Sal_rm32_imm8
		test_instr(16, |a| a.sal(dword_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Sal_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Sal_rm16_imm8
		test_instr(16, |a| a.sal(word_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Sal_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Sal_rm8_imm8
		test_instr(16, |a| a.sal(byte_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Sal_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sal_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.sal(zmmword_ptr(di), 2i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Sal_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Sal_rm32_1
			test_instr(16, |a| a.sal(dword_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Sal_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Sal_rm16_1
			test_instr(16, |a| a.sal(word_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Sal_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Sal_rm8_1
			test_instr(16, |a| a.sal(byte_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Sal_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sal_rm8_1
			test_invalid_instr(16, |a| assert!(a.sal(zmmword_ptr(di), 1).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Sal_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Sal_rm32_imm8
		test_instr(16, |a| a.sal(dword_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Sal_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Sal_rm16_imm8
		test_instr(16, |a| a.sal(word_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Sal_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Sal_rm8_imm8
		test_instr(16, |a| a.sal(byte_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Sal_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sal_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.sal(zmmword_ptr(di), 2).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sal_r8_u() {
	/* if op1 == 1 */ {
		// Sal_rm8_1
		test_instr(16, |a| a.sal(dl, 1u32).unwrap(),
			Instruction::with2(Code::Sal_rm8_1, Register::DL, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sal_rm8_imm8
		test_instr(16, |a| a.sal(dl, 2u32).unwrap(),
			Instruction::with2(Code::Sal_rm8_imm8, Register::DL, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sal_r16_u() {
	/* if op1 == 1 */ {
		// Sal_rm16_1
		test_instr(16, |a| a.sal(dx, 1u32).unwrap(),
			Instruction::with2(Code::Sal_rm16_1, Register::DX, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sal_rm16_imm8
		test_instr(16, |a| a.sal(dx, 2u32).unwrap(),
			Instruction::with2(Code::Sal_rm16_imm8, Register::DX, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sal_r32_u() {
	/* if op1 == 1 */ {
		// Sal_rm32_1
		test_instr(16, |a| a.sal(edx, 1u32).unwrap(),
			Instruction::with2(Code::Sal_rm32_1, Register::EDX, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sal_rm32_imm8
		test_instr(16, |a| a.sal(edx, 2u32).unwrap(),
			Instruction::with2(Code::Sal_rm32_imm8, Register::EDX, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sal_m_u() {
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Sal_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Sal_rm32_1
			test_instr(16, |a| a.sal(dword_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Sal_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Sal_rm16_1
			test_instr(16, |a| a.sal(word_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Sal_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Sal_rm8_1
			test_instr(16, |a| a.sal(byte_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Sal_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sal_rm8_1
			test_invalid_instr(16, |a| assert!(a.sal(zmmword_ptr(di), 1u32).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Sal_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Sal_rm32_imm8
		test_instr(16, |a| a.sal(dword_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Sal_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Sal_rm16_imm8
		test_instr(16, |a| a.sal(word_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Sal_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Sal_rm8_imm8
		test_instr(16, |a| a.sal(byte_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Sal_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sal_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.sal(zmmword_ptr(di), 2u32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn salc() {
	// Salc
	test_instr(16, |a| a.salc().unwrap(),
		Instruction::with(Code::Salc),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sar_r8_r8() {
	// Sar_rm8_CL
	test_instr(16, |a| a.sar(dl, cl).unwrap(),
		Instruction::with2(Code::Sar_rm8_CL, Register::DL, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sar_r16_r8() {
	// Sar_rm16_CL
	test_instr(16, |a| a.sar(dx, cl).unwrap(),
		Instruction::with2(Code::Sar_rm16_CL, Register::DX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sar_r32_r8() {
	// Sar_rm32_CL
	test_instr(16, |a| a.sar(edx, cl).unwrap(),
		Instruction::with2(Code::Sar_rm32_CL, Register::EDX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sar_m_r8() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Sar_rm64_CL - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Sar_rm32_CL
		test_instr(16, |a| a.sar(dword_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Sar_rm32_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Sar_rm16_CL
		test_instr(16, |a| a.sar(word_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Sar_rm16_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Sar_rm8_CL
		test_instr(16, |a| a.sar(byte_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Sar_rm8_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sar_rm8_CL
		test_invalid_instr(16, |a| assert!(a.sar(zmmword_ptr(di), cl).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sar_r8_i() {
	/* if op1 == 1 */ {
		// Sar_rm8_1
		test_instr(16, |a| a.sar(dl, 1i32).unwrap(),
			Instruction::with2(Code::Sar_rm8_1, Register::DL, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sar_rm8_imm8
		test_instr(16, |a| a.sar(dl, 2i32).unwrap(),
			Instruction::with2(Code::Sar_rm8_imm8, Register::DL, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Sar_rm8_1
		test_instr(16, |a| a.sar(dl, 1).unwrap(),
			Instruction::with2(Code::Sar_rm8_1, Register::DL, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sar_rm8_imm8
		test_instr(16, |a| a.sar(dl, 2).unwrap(),
			Instruction::with2(Code::Sar_rm8_imm8, Register::DL, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sar_r16_i() {
	/* if op1 == 1 */ {
		// Sar_rm16_1
		test_instr(16, |a| a.sar(dx, 1i32).unwrap(),
			Instruction::with2(Code::Sar_rm16_1, Register::DX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sar_rm16_imm8
		test_instr(16, |a| a.sar(dx, 2i32).unwrap(),
			Instruction::with2(Code::Sar_rm16_imm8, Register::DX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Sar_rm16_1
		test_instr(16, |a| a.sar(dx, 1).unwrap(),
			Instruction::with2(Code::Sar_rm16_1, Register::DX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sar_rm16_imm8
		test_instr(16, |a| a.sar(dx, 2).unwrap(),
			Instruction::with2(Code::Sar_rm16_imm8, Register::DX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sar_r32_i() {
	/* if op1 == 1 */ {
		// Sar_rm32_1
		test_instr(16, |a| a.sar(edx, 1i32).unwrap(),
			Instruction::with2(Code::Sar_rm32_1, Register::EDX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sar_rm32_imm8
		test_instr(16, |a| a.sar(edx, 2i32).unwrap(),
			Instruction::with2(Code::Sar_rm32_imm8, Register::EDX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Sar_rm32_1
		test_instr(16, |a| a.sar(edx, 1).unwrap(),
			Instruction::with2(Code::Sar_rm32_1, Register::EDX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sar_rm32_imm8
		test_instr(16, |a| a.sar(edx, 2).unwrap(),
			Instruction::with2(Code::Sar_rm32_imm8, Register::EDX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sar_m_i() {
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Sar_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Sar_rm32_1
			test_instr(16, |a| a.sar(dword_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Sar_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Sar_rm16_1
			test_instr(16, |a| a.sar(word_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Sar_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Sar_rm8_1
			test_instr(16, |a| a.sar(byte_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Sar_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sar_rm8_1
			test_invalid_instr(16, |a| assert!(a.sar(zmmword_ptr(di), 1i32).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Sar_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Sar_rm32_imm8
		test_instr(16, |a| a.sar(dword_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Sar_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Sar_rm16_imm8
		test_instr(16, |a| a.sar(word_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Sar_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Sar_rm8_imm8
		test_instr(16, |a| a.sar(byte_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Sar_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sar_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.sar(zmmword_ptr(di), 2i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Sar_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Sar_rm32_1
			test_instr(16, |a| a.sar(dword_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Sar_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Sar_rm16_1
			test_instr(16, |a| a.sar(word_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Sar_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Sar_rm8_1
			test_instr(16, |a| a.sar(byte_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Sar_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sar_rm8_1
			test_invalid_instr(16, |a| assert!(a.sar(zmmword_ptr(di), 1).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Sar_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Sar_rm32_imm8
		test_instr(16, |a| a.sar(dword_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Sar_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Sar_rm16_imm8
		test_instr(16, |a| a.sar(word_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Sar_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Sar_rm8_imm8
		test_instr(16, |a| a.sar(byte_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Sar_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sar_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.sar(zmmword_ptr(di), 2).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sar_r8_u() {
	/* if op1 == 1 */ {
		// Sar_rm8_1
		test_instr(16, |a| a.sar(dl, 1u32).unwrap(),
			Instruction::with2(Code::Sar_rm8_1, Register::DL, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sar_rm8_imm8
		test_instr(16, |a| a.sar(dl, 2u32).unwrap(),
			Instruction::with2(Code::Sar_rm8_imm8, Register::DL, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sar_r16_u() {
	/* if op1 == 1 */ {
		// Sar_rm16_1
		test_instr(16, |a| a.sar(dx, 1u32).unwrap(),
			Instruction::with2(Code::Sar_rm16_1, Register::DX, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sar_rm16_imm8
		test_instr(16, |a| a.sar(dx, 2u32).unwrap(),
			Instruction::with2(Code::Sar_rm16_imm8, Register::DX, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sar_r32_u() {
	/* if op1 == 1 */ {
		// Sar_rm32_1
		test_instr(16, |a| a.sar(edx, 1u32).unwrap(),
			Instruction::with2(Code::Sar_rm32_1, Register::EDX, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sar_rm32_imm8
		test_instr(16, |a| a.sar(edx, 2u32).unwrap(),
			Instruction::with2(Code::Sar_rm32_imm8, Register::EDX, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sar_m_u() {
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Sar_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Sar_rm32_1
			test_instr(16, |a| a.sar(dword_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Sar_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Sar_rm16_1
			test_instr(16, |a| a.sar(word_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Sar_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Sar_rm8_1
			test_instr(16, |a| a.sar(byte_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Sar_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sar_rm8_1
			test_invalid_instr(16, |a| assert!(a.sar(zmmword_ptr(di), 1u32).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Sar_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Sar_rm32_imm8
		test_instr(16, |a| a.sar(dword_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Sar_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Sar_rm16_imm8
		test_instr(16, |a| a.sar(word_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Sar_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Sar_rm8_imm8
		test_instr(16, |a| a.sar(byte_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Sar_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sar_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.sar(zmmword_ptr(di), 2u32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sarx_r32_r32_r32() {
	// VEX_Sarx_r32_rm32_r32
	test_instr(16, |a| a.sarx(edx, ebx, esp).unwrap(),
		Instruction::with3(Code::VEX_Sarx_r32_rm32_r32, Register::EDX, Register::EBX, Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sarx_r32_m_r32() {
	// VEX_Sarx_r32_rm32_r32
	test_instr(16, |a| a.sarx(edx, dword_ptr(si), esp).unwrap(),
		Instruction::with3(Code::VEX_Sarx_r32_rm32_r32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn saveprevssp() {
	// Saveprevssp
	test_instr(16, |a| a.saveprevssp().unwrap(),
		Instruction::with(Code::Saveprevssp),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sbb_r8_r8() {
	// Sbb_rm8_r8
	test_instr(16, |a| a.sbb(dl, bl).unwrap(),
		Instruction::with2(Code::Sbb_rm8_r8, Register::DL, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sbb_m_r8() {
	// Sbb_rm8_r8
	test_instr(16, |a| a.sbb(byte_ptr(si), bl).unwrap(),
		Instruction::with2(Code::Sbb_rm8_r8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sbb_r16_r16() {
	// Sbb_rm16_r16
	test_instr(16, |a| a.sbb(dx, bx).unwrap(),
		Instruction::with2(Code::Sbb_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sbb_m_r16() {
	// Sbb_rm16_r16
	test_instr(16, |a| a.sbb(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Sbb_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sbb_r32_r32() {
	// Sbb_rm32_r32
	test_instr(16, |a| a.sbb(edx, ebx).unwrap(),
		Instruction::with2(Code::Sbb_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sbb_m_r32() {
	// Sbb_rm32_r32
	test_instr(16, |a| a.sbb(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Sbb_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sbb_r8_m() {
	// Sbb_r8_rm8
	test_instr(16, |a| a.sbb(dl, byte_ptr(si)).unwrap(),
		Instruction::with2(Code::Sbb_r8_rm8, Register::DL, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sbb_r16_m() {
	// Sbb_r16_rm16
	test_instr(16, |a| a.sbb(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Sbb_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sbb_r32_m() {
	// Sbb_r32_rm32
	test_instr(16, |a| a.sbb(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Sbb_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sbb_r8_i() {
	/* if op0.register() == Register::AL */ {
		// Sbb_AL_imm8
		test_instr(16, |a| a.sbb(al, -5i32).unwrap(),
			Instruction::with2(Code::Sbb_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sbb_rm8_imm8
		test_instr(16, |a| a.sbb(dl, -5i32).unwrap(),
			Instruction::with2(Code::Sbb_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AL */ {
		// Sbb_AL_imm8
		test_instr(16, |a| a.sbb(al, -5).unwrap(),
			Instruction::with2(Code::Sbb_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sbb_rm8_imm8
		test_instr(16, |a| a.sbb(dl, -5).unwrap(),
			Instruction::with2(Code::Sbb_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sbb_r16_i() {
	/* if op0.register() == Register::AX */ {
		// Sbb_AX_imm16
		test_instr(16, |a| a.sbb(ax, 0x40B7i32).unwrap(),
			Instruction::with2(Code::Sbb_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Sbb_rm16_imm8
		test_instr(16, |a| a.sbb(dx, -0x80i32).unwrap(),
			Instruction::with2(Code::Sbb_rm16_imm8, Register::DX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Sbb_rm16_imm8
		test_instr(16, |a| a.sbb(dx, 0x7Fi32).unwrap(),
			Instruction::with2(Code::Sbb_rm16_imm8, Register::DX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sbb_rm16_imm16
		test_instr(16, |a| a.sbb(dx, 0x40B7i32).unwrap(),
			Instruction::with2(Code::Sbb_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AX */ {
		// Sbb_AX_imm16
		test_instr(16, |a| a.sbb(ax, 0x40B7).unwrap(),
			Instruction::with2(Code::Sbb_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Sbb_rm16_imm8
		test_instr(16, |a| a.sbb(dx, -0x80).unwrap(),
			Instruction::with2(Code::Sbb_rm16_imm8, Register::DX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Sbb_rm16_imm8
		test_instr(16, |a| a.sbb(dx, 0x7F).unwrap(),
			Instruction::with2(Code::Sbb_rm16_imm8, Register::DX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sbb_rm16_imm16
		test_instr(16, |a| a.sbb(dx, 0x40B7).unwrap(),
			Instruction::with2(Code::Sbb_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sbb_r32_i() {
	/* if op0.register() == Register::EAX */ {
		// Sbb_EAX_imm32
		test_instr(16, |a| a.sbb(eax, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Sbb_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Sbb_rm32_imm8
		test_instr(16, |a| a.sbb(edx, -0x80i32).unwrap(),
			Instruction::with2(Code::Sbb_rm32_imm8, Register::EDX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Sbb_rm32_imm8
		test_instr(16, |a| a.sbb(edx, 0x7Fi32).unwrap(),
			Instruction::with2(Code::Sbb_rm32_imm8, Register::EDX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sbb_rm32_imm32
		test_instr(16, |a| a.sbb(edx, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Sbb_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::EAX */ {
		// Sbb_EAX_imm32
		test_instr(16, |a| a.sbb(eax, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Sbb_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Sbb_rm32_imm8
		test_instr(16, |a| a.sbb(edx, -0x80).unwrap(),
			Instruction::with2(Code::Sbb_rm32_imm8, Register::EDX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Sbb_rm32_imm8
		test_instr(16, |a| a.sbb(edx, 0x7F).unwrap(),
			Instruction::with2(Code::Sbb_rm32_imm8, Register::EDX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sbb_rm32_imm32
		test_instr(16, |a| a.sbb(edx, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Sbb_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sbb_m_i() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Skipping Sbb_rm64_imm8 - Not supported by current bitness
			// Skipping Sbb_rm64_imm8 - Not supported by current bitness
		} /* else */ {
			// Skipping Sbb_rm64_imm32 - Not supported by current bitness
		}
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Sbb_rm32_imm8
			test_instr(16, |a| a.sbb(dword_ptr(di), -0x80i32).unwrap(),
				Instruction::with2(Code::Sbb_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Sbb_rm32_imm8
			test_instr(16, |a| a.sbb(dword_ptr(di), 0x7Fi32).unwrap(),
				Instruction::with2(Code::Sbb_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sbb_rm32_imm32
			test_instr(16, |a| a.sbb(dword_ptr(di), 0x7FFFFFFFi32).unwrap(),
				Instruction::with2(Code::Sbb_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Sbb_rm16_imm8
			test_instr(16, |a| a.sbb(word_ptr(di), -0x80i32).unwrap(),
				Instruction::with2(Code::Sbb_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Sbb_rm16_imm8
			test_instr(16, |a| a.sbb(word_ptr(di), 0x7Fi32).unwrap(),
				Instruction::with2(Code::Sbb_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sbb_rm16_imm16
			test_instr(16, |a| a.sbb(word_ptr(di), 0x40B7i32).unwrap(),
				Instruction::with2(Code::Sbb_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Sbb_rm8_imm8
		test_instr(16, |a| a.sbb(byte_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::Sbb_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sbb_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.sbb(zmmword_ptr(di), -5i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op0.size() == MemoryOperandSize::Qword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Skipping Sbb_rm64_imm8 - Not supported by current bitness
			// Skipping Sbb_rm64_imm8 - Not supported by current bitness
		} /* else */ {
			// Skipping Sbb_rm64_imm32 - Not supported by current bitness
		}
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Sbb_rm32_imm8
			test_instr(16, |a| a.sbb(dword_ptr(di), -0x80).unwrap(),
				Instruction::with2(Code::Sbb_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Sbb_rm32_imm8
			test_instr(16, |a| a.sbb(dword_ptr(di), 0x7F).unwrap(),
				Instruction::with2(Code::Sbb_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sbb_rm32_imm32
			test_instr(16, |a| a.sbb(dword_ptr(di), 0x7FFFFFFF).unwrap(),
				Instruction::with2(Code::Sbb_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Sbb_rm16_imm8
			test_instr(16, |a| a.sbb(word_ptr(di), -0x80).unwrap(),
				Instruction::with2(Code::Sbb_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Sbb_rm16_imm8
			test_instr(16, |a| a.sbb(word_ptr(di), 0x7F).unwrap(),
				Instruction::with2(Code::Sbb_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sbb_rm16_imm16
			test_instr(16, |a| a.sbb(word_ptr(di), 0x40B7).unwrap(),
				Instruction::with2(Code::Sbb_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Sbb_rm8_imm8
		test_instr(16, |a| a.sbb(byte_ptr(di), -5).unwrap(),
			Instruction::with2(Code::Sbb_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sbb_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.sbb(zmmword_ptr(di), -5).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sbb_r8_u() {
	/* if op0.register() == Register::AL */ {
		// Sbb_AL_imm8
		test_instr(16, |a| a.sbb(al, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Sbb_AL_imm8, Register::AL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sbb_rm8_imm8
		test_instr(16, |a| a.sbb(dl, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Sbb_rm8_imm8, Register::DL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sbb_r16_u() {
	/* if op0.register() == Register::AX */ {
		// Sbb_AX_imm16
		test_instr(16, |a| a.sbb(ax, 0x40B7u32).unwrap(),
			Instruction::with2(Code::Sbb_AX_imm16, Register::AX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 <= i8::MAX as u32 || (0xFF80 <= op1 && op1 <= 0xFFFF) */ {
		// Sbb_rm16_imm8
		test_instr(16, |a| a.sbb(dx, 0xFF80u32).unwrap(),
			Instruction::with2(Code::Sbb_rm16_imm8, Register::DX, 0xFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Sbb_rm16_imm8
		test_instr(16, |a| a.sbb(dx, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Sbb_rm16_imm8, Register::DX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sbb_rm16_imm16
		test_instr(16, |a| a.sbb(dx, 0x40B7u32).unwrap(),
			Instruction::with2(Code::Sbb_rm16_imm16, Register::DX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sbb_r32_u() {
	/* if op0.register() == Register::EAX */ {
		// Sbb_EAX_imm32
		test_instr(16, |a| a.sbb(eax, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Sbb_EAX_imm32, Register::EAX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 <= i8::MAX as u32 || 0xFFFF_FF80 <= op1 */ {
		// Sbb_rm32_imm8
		test_instr(16, |a| a.sbb(edx, 0xFFFFFF80u32).unwrap(),
			Instruction::with2(Code::Sbb_rm32_imm8, Register::EDX, 0xFFFFFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Sbb_rm32_imm8
		test_instr(16, |a| a.sbb(edx, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Sbb_rm32_imm8, Register::EDX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sbb_rm32_imm32
		test_instr(16, |a| a.sbb(edx, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Sbb_rm32_imm32, Register::EDX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sbb_m_u() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 <= i8::MAX as u32 || 0xFFFF_FF80 <= op1 */ {
			// Sbb_rm32_imm8
			test_instr(16, |a| a.sbb(dword_ptr(di), 0xFFFFFF80u32).unwrap(),
				Instruction::with2(Code::Sbb_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFFFFFF80u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Sbb_rm32_imm8
			test_instr(16, |a| a.sbb(dword_ptr(di), 0x7Fu32).unwrap(),
				Instruction::with2(Code::Sbb_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sbb_rm32_imm32
			test_instr(16, |a| a.sbb(dword_ptr(di), 0x7FFFFFFFu32).unwrap(),
				Instruction::with2(Code::Sbb_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 <= i8::MAX as u32 || (0xFF80 <= op1 && op1 <= 0xFFFF) */ {
			// Sbb_rm16_imm8
			test_instr(16, |a| a.sbb(word_ptr(di), 0xFF80u32).unwrap(),
				Instruction::with2(Code::Sbb_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFF80u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Sbb_rm16_imm8
			test_instr(16, |a| a.sbb(word_ptr(di), 0x7Fu32).unwrap(),
				Instruction::with2(Code::Sbb_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sbb_rm16_imm16
			test_instr(16, |a| a.sbb(word_ptr(di), 0x40B7u32).unwrap(),
				Instruction::with2(Code::Sbb_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Sbb_rm8_imm8
		test_instr(16, |a| a.sbb(byte_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::Sbb_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sbb_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.sbb(zmmword_ptr(di), 0x7Fu32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn scasb() {
	// Scasb_AL_m8
	test_instr(16, |a| a.scasb().unwrap(),
		Instruction::with_scasb(16, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn scasd() {
	// Scasd_EAX_m32
	test_instr(16, |a| a.scasd().unwrap(),
		Instruction::with_scasd(16, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn scasw() {
	// Scasw_AX_m16
	test_instr(16, |a| a.scasw().unwrap(),
		Instruction::with_scasw(16, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn serialize() {
	// Serialize
	test_instr(16, |a| a.serialize().unwrap(),
		Instruction::with(Code::Serialize),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn seta_r8() {
	// Seta_rm8
	test_instr(16, |a| a.seta(dl).unwrap(),
		Instruction::with1(Code::Seta_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn seta_m() {
	// Seta_rm8
	test_instr(16, |a| a.seta(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Seta_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setae_r8() {
	// Setae_rm8
	test_instr(16, |a| a.setae(dl).unwrap(),
		Instruction::with1(Code::Setae_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setae_m() {
	// Setae_rm8
	test_instr(16, |a| a.setae(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setae_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setb_r8() {
	// Setb_rm8
	test_instr(16, |a| a.setb(dl).unwrap(),
		Instruction::with1(Code::Setb_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setb_m() {
	// Setb_rm8
	test_instr(16, |a| a.setb(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setb_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setbe_r8() {
	// Setbe_rm8
	test_instr(16, |a| a.setbe(dl).unwrap(),
		Instruction::with1(Code::Setbe_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setbe_m() {
	// Setbe_rm8
	test_instr(16, |a| a.setbe(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setbe_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setc_r8() {
	// Setb_rm8
	test_instr(16, |a| a.setc(dl).unwrap(),
		Instruction::with1(Code::Setb_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setc_m() {
	// Setb_rm8
	test_instr(16, |a| a.setc(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setb_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sete_r8() {
	// Sete_rm8
	test_instr(16, |a| a.sete(dl).unwrap(),
		Instruction::with1(Code::Sete_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sete_m() {
	// Sete_rm8
	test_instr(16, |a| a.sete(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Sete_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setg_r8() {
	// Setg_rm8
	test_instr(16, |a| a.setg(dl).unwrap(),
		Instruction::with1(Code::Setg_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setg_m() {
	// Setg_rm8
	test_instr(16, |a| a.setg(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setg_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setge_r8() {
	// Setge_rm8
	test_instr(16, |a| a.setge(dl).unwrap(),
		Instruction::with1(Code::Setge_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setge_m() {
	// Setge_rm8
	test_instr(16, |a| a.setge(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setge_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setl_r8() {
	// Setl_rm8
	test_instr(16, |a| a.setl(dl).unwrap(),
		Instruction::with1(Code::Setl_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setl_m() {
	// Setl_rm8
	test_instr(16, |a| a.setl(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setl_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setle_r8() {
	// Setle_rm8
	test_instr(16, |a| a.setle(dl).unwrap(),
		Instruction::with1(Code::Setle_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setle_m() {
	// Setle_rm8
	test_instr(16, |a| a.setle(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setle_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setna_r8() {
	// Setbe_rm8
	test_instr(16, |a| a.setna(dl).unwrap(),
		Instruction::with1(Code::Setbe_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setna_m() {
	// Setbe_rm8
	test_instr(16, |a| a.setna(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setbe_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnae_r8() {
	// Setb_rm8
	test_instr(16, |a| a.setnae(dl).unwrap(),
		Instruction::with1(Code::Setb_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnae_m() {
	// Setb_rm8
	test_instr(16, |a| a.setnae(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setb_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnb_r8() {
	// Setae_rm8
	test_instr(16, |a| a.setnb(dl).unwrap(),
		Instruction::with1(Code::Setae_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnb_m() {
	// Setae_rm8
	test_instr(16, |a| a.setnb(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setae_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnbe_r8() {
	// Seta_rm8
	test_instr(16, |a| a.setnbe(dl).unwrap(),
		Instruction::with1(Code::Seta_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnbe_m() {
	// Seta_rm8
	test_instr(16, |a| a.setnbe(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Seta_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnc_r8() {
	// Setae_rm8
	test_instr(16, |a| a.setnc(dl).unwrap(),
		Instruction::with1(Code::Setae_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnc_m() {
	// Setae_rm8
	test_instr(16, |a| a.setnc(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setae_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setne_r8() {
	// Setne_rm8
	test_instr(16, |a| a.setne(dl).unwrap(),
		Instruction::with1(Code::Setne_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setne_m() {
	// Setne_rm8
	test_instr(16, |a| a.setne(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setne_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setng_r8() {
	// Setle_rm8
	test_instr(16, |a| a.setng(dl).unwrap(),
		Instruction::with1(Code::Setle_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setng_m() {
	// Setle_rm8
	test_instr(16, |a| a.setng(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setle_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnge_r8() {
	// Setl_rm8
	test_instr(16, |a| a.setnge(dl).unwrap(),
		Instruction::with1(Code::Setl_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnge_m() {
	// Setl_rm8
	test_instr(16, |a| a.setnge(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setl_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnl_r8() {
	// Setge_rm8
	test_instr(16, |a| a.setnl(dl).unwrap(),
		Instruction::with1(Code::Setge_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnl_m() {
	// Setge_rm8
	test_instr(16, |a| a.setnl(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setge_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnle_r8() {
	// Setg_rm8
	test_instr(16, |a| a.setnle(dl).unwrap(),
		Instruction::with1(Code::Setg_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnle_m() {
	// Setg_rm8
	test_instr(16, |a| a.setnle(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setg_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setno_r8() {
	// Setno_rm8
	test_instr(16, |a| a.setno(dl).unwrap(),
		Instruction::with1(Code::Setno_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setno_m() {
	// Setno_rm8
	test_instr(16, |a| a.setno(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setno_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnp_r8() {
	// Setnp_rm8
	test_instr(16, |a| a.setnp(dl).unwrap(),
		Instruction::with1(Code::Setnp_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnp_m() {
	// Setnp_rm8
	test_instr(16, |a| a.setnp(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setnp_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setns_r8() {
	// Setns_rm8
	test_instr(16, |a| a.setns(dl).unwrap(),
		Instruction::with1(Code::Setns_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setns_m() {
	// Setns_rm8
	test_instr(16, |a| a.setns(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setns_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnz_r8() {
	// Setne_rm8
	test_instr(16, |a| a.setnz(dl).unwrap(),
		Instruction::with1(Code::Setne_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setnz_m() {
	// Setne_rm8
	test_instr(16, |a| a.setnz(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setne_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn seto_r8() {
	// Seto_rm8
	test_instr(16, |a| a.seto(dl).unwrap(),
		Instruction::with1(Code::Seto_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn seto_m() {
	// Seto_rm8
	test_instr(16, |a| a.seto(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Seto_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setp_r8() {
	// Setp_rm8
	test_instr(16, |a| a.setp(dl).unwrap(),
		Instruction::with1(Code::Setp_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setp_m() {
	// Setp_rm8
	test_instr(16, |a| a.setp(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setp_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setpe_r8() {
	// Setp_rm8
	test_instr(16, |a| a.setpe(dl).unwrap(),
		Instruction::with1(Code::Setp_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setpe_m() {
	// Setp_rm8
	test_instr(16, |a| a.setpe(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setp_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setpo_r8() {
	// Setnp_rm8
	test_instr(16, |a| a.setpo(dl).unwrap(),
		Instruction::with1(Code::Setnp_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setpo_m() {
	// Setnp_rm8
	test_instr(16, |a| a.setpo(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Setnp_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sets_r8() {
	// Sets_rm8
	test_instr(16, |a| a.sets(dl).unwrap(),
		Instruction::with1(Code::Sets_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sets_m() {
	// Sets_rm8
	test_instr(16, |a| a.sets(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Sets_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setssbsy() {
	// Setssbsy
	test_instr(16, |a| a.setssbsy().unwrap(),
		Instruction::with(Code::Setssbsy),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setz_r8() {
	// Sete_rm8
	test_instr(16, |a| a.setz(dl).unwrap(),
		Instruction::with1(Code::Sete_rm8, Register::DL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn setz_m() {
	// Sete_rm8
	test_instr(16, |a| a.setz(byte_ptr(si)).unwrap(),
		Instruction::with1(Code::Sete_rm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sfence() {
	// Sfence
	test_instr(16, |a| a.sfence().unwrap(),
		Instruction::with(Code::Sfence),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sgdt_m() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Sgdt_m1632_16
		test_instr(16, |a| a.sgdt(ptr(si)).unwrap(),
			Instruction::with1(Code::Sgdt_m1632_16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sha1msg1_xmm_xmm() {
	// Sha1msg1_xmm_xmmm128
	test_instr(16, |a| a.sha1msg1(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Sha1msg1_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sha1msg1_xmm_m() {
	// Sha1msg1_xmm_xmmm128
	test_instr(16, |a| a.sha1msg1(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Sha1msg1_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sha1msg2_xmm_xmm() {
	// Sha1msg2_xmm_xmmm128
	test_instr(16, |a| a.sha1msg2(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Sha1msg2_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sha1msg2_xmm_m() {
	// Sha1msg2_xmm_xmmm128
	test_instr(16, |a| a.sha1msg2(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Sha1msg2_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sha1nexte_xmm_xmm() {
	// Sha1nexte_xmm_xmmm128
	test_instr(16, |a| a.sha1nexte(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Sha1nexte_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sha1nexte_xmm_m() {
	// Sha1nexte_xmm_xmmm128
	test_instr(16, |a| a.sha1nexte(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Sha1nexte_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sha1rnds4_xmm_xmm_i() {
	// Sha1rnds4_xmm_xmmm128_imm8
	test_instr(16, |a| a.sha1rnds4(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Sha1rnds4_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Sha1rnds4_xmm_xmmm128_imm8
	test_instr(16, |a| a.sha1rnds4(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Sha1rnds4_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sha1rnds4_xmm_m_i() {
	// Sha1rnds4_xmm_xmmm128_imm8
	test_instr(16, |a| a.sha1rnds4(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Sha1rnds4_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Sha1rnds4_xmm_xmmm128_imm8
	test_instr(16, |a| a.sha1rnds4(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Sha1rnds4_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sha1rnds4_xmm_xmm_u() {
	// Sha1rnds4_xmm_xmmm128_imm8
	test_instr(16, |a| a.sha1rnds4(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Sha1rnds4_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sha1rnds4_xmm_m_u() {
	// Sha1rnds4_xmm_xmmm128_imm8
	test_instr(16, |a| a.sha1rnds4(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Sha1rnds4_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sha256msg1_xmm_xmm() {
	// Sha256msg1_xmm_xmmm128
	test_instr(16, |a| a.sha256msg1(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Sha256msg1_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sha256msg1_xmm_m() {
	// Sha256msg1_xmm_xmmm128
	test_instr(16, |a| a.sha256msg1(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Sha256msg1_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sha256msg2_xmm_xmm() {
	// Sha256msg2_xmm_xmmm128
	test_instr(16, |a| a.sha256msg2(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Sha256msg2_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sha256msg2_xmm_m() {
	// Sha256msg2_xmm_xmmm128
	test_instr(16, |a| a.sha256msg2(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Sha256msg2_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sha256rnds2_xmm_xmm() {
	// Sha256rnds2_xmm_xmmm128
	test_instr(16, |a| a.sha256rnds2(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Sha256rnds2_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sha256rnds2_xmm_m() {
	// Sha256rnds2_xmm_xmmm128
	test_instr(16, |a| a.sha256rnds2(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Sha256rnds2_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shl_r8_r8() {
	// Shl_rm8_CL
	test_instr(16, |a| a.shl(dl, cl).unwrap(),
		Instruction::with2(Code::Shl_rm8_CL, Register::DL, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shl_r16_r8() {
	// Shl_rm16_CL
	test_instr(16, |a| a.shl(dx, cl).unwrap(),
		Instruction::with2(Code::Shl_rm16_CL, Register::DX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shl_r32_r8() {
	// Shl_rm32_CL
	test_instr(16, |a| a.shl(edx, cl).unwrap(),
		Instruction::with2(Code::Shl_rm32_CL, Register::EDX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shl_m_r8() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Shl_rm64_CL - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Shl_rm32_CL
		test_instr(16, |a| a.shl(dword_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Shl_rm32_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Shl_rm16_CL
		test_instr(16, |a| a.shl(word_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Shl_rm16_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Shl_rm8_CL
		test_instr(16, |a| a.shl(byte_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Shl_rm8_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shl_rm8_CL
		test_invalid_instr(16, |a| assert!(a.shl(zmmword_ptr(di), cl).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shl_r8_i() {
	/* if op1 == 1 */ {
		// Shl_rm8_1
		test_instr(16, |a| a.shl(dl, 1i32).unwrap(),
			Instruction::with2(Code::Shl_rm8_1, Register::DL, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shl_rm8_imm8
		test_instr(16, |a| a.shl(dl, 2i32).unwrap(),
			Instruction::with2(Code::Shl_rm8_imm8, Register::DL, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Shl_rm8_1
		test_instr(16, |a| a.shl(dl, 1).unwrap(),
			Instruction::with2(Code::Shl_rm8_1, Register::DL, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shl_rm8_imm8
		test_instr(16, |a| a.shl(dl, 2).unwrap(),
			Instruction::with2(Code::Shl_rm8_imm8, Register::DL, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shl_r16_i() {
	/* if op1 == 1 */ {
		// Shl_rm16_1
		test_instr(16, |a| a.shl(dx, 1i32).unwrap(),
			Instruction::with2(Code::Shl_rm16_1, Register::DX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shl_rm16_imm8
		test_instr(16, |a| a.shl(dx, 2i32).unwrap(),
			Instruction::with2(Code::Shl_rm16_imm8, Register::DX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Shl_rm16_1
		test_instr(16, |a| a.shl(dx, 1).unwrap(),
			Instruction::with2(Code::Shl_rm16_1, Register::DX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shl_rm16_imm8
		test_instr(16, |a| a.shl(dx, 2).unwrap(),
			Instruction::with2(Code::Shl_rm16_imm8, Register::DX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shl_r32_i() {
	/* if op1 == 1 */ {
		// Shl_rm32_1
		test_instr(16, |a| a.shl(edx, 1i32).unwrap(),
			Instruction::with2(Code::Shl_rm32_1, Register::EDX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shl_rm32_imm8
		test_instr(16, |a| a.shl(edx, 2i32).unwrap(),
			Instruction::with2(Code::Shl_rm32_imm8, Register::EDX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Shl_rm32_1
		test_instr(16, |a| a.shl(edx, 1).unwrap(),
			Instruction::with2(Code::Shl_rm32_1, Register::EDX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shl_rm32_imm8
		test_instr(16, |a| a.shl(edx, 2).unwrap(),
			Instruction::with2(Code::Shl_rm32_imm8, Register::EDX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shl_m_i() {
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Shl_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Shl_rm32_1
			test_instr(16, |a| a.shl(dword_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Shl_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Shl_rm16_1
			test_instr(16, |a| a.shl(word_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Shl_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Shl_rm8_1
			test_instr(16, |a| a.shl(byte_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Shl_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Shl_rm8_1
			test_invalid_instr(16, |a| assert!(a.shl(zmmword_ptr(di), 1i32).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Shl_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Shl_rm32_imm8
		test_instr(16, |a| a.shl(dword_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Shl_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Shl_rm16_imm8
		test_instr(16, |a| a.shl(word_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Shl_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Shl_rm8_imm8
		test_instr(16, |a| a.shl(byte_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Shl_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shl_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.shl(zmmword_ptr(di), 2i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Shl_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Shl_rm32_1
			test_instr(16, |a| a.shl(dword_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Shl_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Shl_rm16_1
			test_instr(16, |a| a.shl(word_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Shl_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Shl_rm8_1
			test_instr(16, |a| a.shl(byte_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Shl_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Shl_rm8_1
			test_invalid_instr(16, |a| assert!(a.shl(zmmword_ptr(di), 1).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Shl_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Shl_rm32_imm8
		test_instr(16, |a| a.shl(dword_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Shl_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Shl_rm16_imm8
		test_instr(16, |a| a.shl(word_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Shl_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Shl_rm8_imm8
		test_instr(16, |a| a.shl(byte_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Shl_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shl_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.shl(zmmword_ptr(di), 2).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shl_r8_u() {
	/* if op1 == 1 */ {
		// Shl_rm8_1
		test_instr(16, |a| a.shl(dl, 1u32).unwrap(),
			Instruction::with2(Code::Shl_rm8_1, Register::DL, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shl_rm8_imm8
		test_instr(16, |a| a.shl(dl, 2u32).unwrap(),
			Instruction::with2(Code::Shl_rm8_imm8, Register::DL, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shl_r16_u() {
	/* if op1 == 1 */ {
		// Shl_rm16_1
		test_instr(16, |a| a.shl(dx, 1u32).unwrap(),
			Instruction::with2(Code::Shl_rm16_1, Register::DX, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shl_rm16_imm8
		test_instr(16, |a| a.shl(dx, 2u32).unwrap(),
			Instruction::with2(Code::Shl_rm16_imm8, Register::DX, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shl_r32_u() {
	/* if op1 == 1 */ {
		// Shl_rm32_1
		test_instr(16, |a| a.shl(edx, 1u32).unwrap(),
			Instruction::with2(Code::Shl_rm32_1, Register::EDX, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shl_rm32_imm8
		test_instr(16, |a| a.shl(edx, 2u32).unwrap(),
			Instruction::with2(Code::Shl_rm32_imm8, Register::EDX, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shl_m_u() {
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Shl_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Shl_rm32_1
			test_instr(16, |a| a.shl(dword_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Shl_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Shl_rm16_1
			test_instr(16, |a| a.shl(word_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Shl_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Shl_rm8_1
			test_instr(16, |a| a.shl(byte_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Shl_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Shl_rm8_1
			test_invalid_instr(16, |a| assert!(a.shl(zmmword_ptr(di), 1u32).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Shl_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Shl_rm32_imm8
		test_instr(16, |a| a.shl(dword_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Shl_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Shl_rm16_imm8
		test_instr(16, |a| a.shl(word_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Shl_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Shl_rm8_imm8
		test_instr(16, |a| a.shl(byte_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Shl_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shl_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.shl(zmmword_ptr(di), 2u32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shld_r16_r16_r8() {
	// Shld_rm16_r16_CL
	test_instr(16, |a| a.shld(dx, bx, cl).unwrap(),
		Instruction::with3(Code::Shld_rm16_r16_CL, Register::DX, Register::BX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shld_m_r16_r8() {
	// Shld_rm16_r16_CL
	test_instr(16, |a| a.shld(word_ptr(si), bx, cl).unwrap(),
		Instruction::with3(Code::Shld_rm16_r16_CL, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shld_r32_r32_r8() {
	// Shld_rm32_r32_CL
	test_instr(16, |a| a.shld(edx, ebx, cl).unwrap(),
		Instruction::with3(Code::Shld_rm32_r32_CL, Register::EDX, Register::EBX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shld_m_r32_r8() {
	// Shld_rm32_r32_CL
	test_instr(16, |a| a.shld(dword_ptr(si), ebx, cl).unwrap(),
		Instruction::with3(Code::Shld_rm32_r32_CL, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shld_r16_r16_i() {
	// Shld_rm16_r16_imm8
	test_instr(16, |a| a.shld(dx, bx, -5i32).unwrap(),
		Instruction::with3(Code::Shld_rm16_r16_imm8, Register::DX, Register::BX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Shld_rm16_r16_imm8
	test_instr(16, |a| a.shld(dx, bx, -5).unwrap(),
		Instruction::with3(Code::Shld_rm16_r16_imm8, Register::DX, Register::BX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shld_m_r16_i() {
	// Shld_rm16_r16_imm8
	test_instr(16, |a| a.shld(word_ptr(si), bx, -5i32).unwrap(),
		Instruction::with3(Code::Shld_rm16_r16_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Shld_rm16_r16_imm8
	test_instr(16, |a| a.shld(word_ptr(si), bx, -5).unwrap(),
		Instruction::with3(Code::Shld_rm16_r16_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shld_r32_r32_i() {
	// Shld_rm32_r32_imm8
	test_instr(16, |a| a.shld(edx, ebx, -5i32).unwrap(),
		Instruction::with3(Code::Shld_rm32_r32_imm8, Register::EDX, Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Shld_rm32_r32_imm8
	test_instr(16, |a| a.shld(edx, ebx, -5).unwrap(),
		Instruction::with3(Code::Shld_rm32_r32_imm8, Register::EDX, Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shld_m_r32_i() {
	// Shld_rm32_r32_imm8
	test_instr(16, |a| a.shld(dword_ptr(si), ebx, -5i32).unwrap(),
		Instruction::with3(Code::Shld_rm32_r32_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Shld_rm32_r32_imm8
	test_instr(16, |a| a.shld(dword_ptr(si), ebx, -5).unwrap(),
		Instruction::with3(Code::Shld_rm32_r32_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shld_r16_r16_u() {
	// Shld_rm16_r16_imm8
	test_instr(16, |a| a.shld(dx, bx, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Shld_rm16_r16_imm8, Register::DX, Register::BX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shld_m_r16_u() {
	// Shld_rm16_r16_imm8
	test_instr(16, |a| a.shld(word_ptr(si), bx, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Shld_rm16_r16_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shld_r32_r32_u() {
	// Shld_rm32_r32_imm8
	test_instr(16, |a| a.shld(edx, ebx, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Shld_rm32_r32_imm8, Register::EDX, Register::EBX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shld_m_r32_u() {
	// Shld_rm32_r32_imm8
	test_instr(16, |a| a.shld(dword_ptr(si), ebx, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Shld_rm32_r32_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shlx_r32_r32_r32() {
	// VEX_Shlx_r32_rm32_r32
	test_instr(16, |a| a.shlx(edx, ebx, esp).unwrap(),
		Instruction::with3(Code::VEX_Shlx_r32_rm32_r32, Register::EDX, Register::EBX, Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shlx_r32_m_r32() {
	// VEX_Shlx_r32_rm32_r32
	test_instr(16, |a| a.shlx(edx, dword_ptr(si), esp).unwrap(),
		Instruction::with3(Code::VEX_Shlx_r32_rm32_r32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shr_r8_r8() {
	// Shr_rm8_CL
	test_instr(16, |a| a.shr(dl, cl).unwrap(),
		Instruction::with2(Code::Shr_rm8_CL, Register::DL, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shr_r16_r8() {
	// Shr_rm16_CL
	test_instr(16, |a| a.shr(dx, cl).unwrap(),
		Instruction::with2(Code::Shr_rm16_CL, Register::DX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shr_r32_r8() {
	// Shr_rm32_CL
	test_instr(16, |a| a.shr(edx, cl).unwrap(),
		Instruction::with2(Code::Shr_rm32_CL, Register::EDX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shr_m_r8() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Shr_rm64_CL - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Shr_rm32_CL
		test_instr(16, |a| a.shr(dword_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Shr_rm32_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Shr_rm16_CL
		test_instr(16, |a| a.shr(word_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Shr_rm16_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Shr_rm8_CL
		test_instr(16, |a| a.shr(byte_ptr(di), cl).unwrap(),
			Instruction::with2(Code::Shr_rm8_CL, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::CL).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shr_rm8_CL
		test_invalid_instr(16, |a| assert!(a.shr(zmmword_ptr(di), cl).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shr_r8_i() {
	/* if op1 == 1 */ {
		// Shr_rm8_1
		test_instr(16, |a| a.shr(dl, 1i32).unwrap(),
			Instruction::with2(Code::Shr_rm8_1, Register::DL, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shr_rm8_imm8
		test_instr(16, |a| a.shr(dl, 2i32).unwrap(),
			Instruction::with2(Code::Shr_rm8_imm8, Register::DL, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Shr_rm8_1
		test_instr(16, |a| a.shr(dl, 1).unwrap(),
			Instruction::with2(Code::Shr_rm8_1, Register::DL, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shr_rm8_imm8
		test_instr(16, |a| a.shr(dl, 2).unwrap(),
			Instruction::with2(Code::Shr_rm8_imm8, Register::DL, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shr_r16_i() {
	/* if op1 == 1 */ {
		// Shr_rm16_1
		test_instr(16, |a| a.shr(dx, 1i32).unwrap(),
			Instruction::with2(Code::Shr_rm16_1, Register::DX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shr_rm16_imm8
		test_instr(16, |a| a.shr(dx, 2i32).unwrap(),
			Instruction::with2(Code::Shr_rm16_imm8, Register::DX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Shr_rm16_1
		test_instr(16, |a| a.shr(dx, 1).unwrap(),
			Instruction::with2(Code::Shr_rm16_1, Register::DX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shr_rm16_imm8
		test_instr(16, |a| a.shr(dx, 2).unwrap(),
			Instruction::with2(Code::Shr_rm16_imm8, Register::DX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shr_r32_i() {
	/* if op1 == 1 */ {
		// Shr_rm32_1
		test_instr(16, |a| a.shr(edx, 1i32).unwrap(),
			Instruction::with2(Code::Shr_rm32_1, Register::EDX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shr_rm32_imm8
		test_instr(16, |a| a.shr(edx, 2i32).unwrap(),
			Instruction::with2(Code::Shr_rm32_imm8, Register::EDX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op1 == 1 */ {
		// Shr_rm32_1
		test_instr(16, |a| a.shr(edx, 1).unwrap(),
			Instruction::with2(Code::Shr_rm32_1, Register::EDX, 1i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shr_rm32_imm8
		test_instr(16, |a| a.shr(edx, 2).unwrap(),
			Instruction::with2(Code::Shr_rm32_imm8, Register::EDX, 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shr_m_i() {
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Shr_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Shr_rm32_1
			test_instr(16, |a| a.shr(dword_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Shr_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Shr_rm16_1
			test_instr(16, |a| a.shr(word_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Shr_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Shr_rm8_1
			test_instr(16, |a| a.shr(byte_ptr(di), 1i32).unwrap(),
				Instruction::with2(Code::Shr_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Shr_rm8_1
			test_invalid_instr(16, |a| assert!(a.shr(zmmword_ptr(di), 1i32).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Shr_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Shr_rm32_imm8
		test_instr(16, |a| a.shr(dword_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Shr_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Shr_rm16_imm8
		test_instr(16, |a| a.shr(word_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Shr_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Shr_rm8_imm8
		test_instr(16, |a| a.shr(byte_ptr(di), 2i32).unwrap(),
			Instruction::with2(Code::Shr_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shr_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.shr(zmmword_ptr(di), 2i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Shr_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Shr_rm32_1
			test_instr(16, |a| a.shr(dword_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Shr_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Shr_rm16_1
			test_instr(16, |a| a.shr(word_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Shr_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Shr_rm8_1
			test_instr(16, |a| a.shr(byte_ptr(di), 1).unwrap(),
				Instruction::with2(Code::Shr_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Shr_rm8_1
			test_invalid_instr(16, |a| assert!(a.shr(zmmword_ptr(di), 1).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Shr_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Shr_rm32_imm8
		test_instr(16, |a| a.shr(dword_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Shr_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Shr_rm16_imm8
		test_instr(16, |a| a.shr(word_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Shr_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Shr_rm8_imm8
		test_instr(16, |a| a.shr(byte_ptr(di), 2).unwrap(),
			Instruction::with2(Code::Shr_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shr_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.shr(zmmword_ptr(di), 2).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shr_r8_u() {
	/* if op1 == 1 */ {
		// Shr_rm8_1
		test_instr(16, |a| a.shr(dl, 1u32).unwrap(),
			Instruction::with2(Code::Shr_rm8_1, Register::DL, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shr_rm8_imm8
		test_instr(16, |a| a.shr(dl, 2u32).unwrap(),
			Instruction::with2(Code::Shr_rm8_imm8, Register::DL, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shr_r16_u() {
	/* if op1 == 1 */ {
		// Shr_rm16_1
		test_instr(16, |a| a.shr(dx, 1u32).unwrap(),
			Instruction::with2(Code::Shr_rm16_1, Register::DX, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shr_rm16_imm8
		test_instr(16, |a| a.shr(dx, 2u32).unwrap(),
			Instruction::with2(Code::Shr_rm16_imm8, Register::DX, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shr_r32_u() {
	/* if op1 == 1 */ {
		// Shr_rm32_1
		test_instr(16, |a| a.shr(edx, 1u32).unwrap(),
			Instruction::with2(Code::Shr_rm32_1, Register::EDX, 1u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shr_rm32_imm8
		test_instr(16, |a| a.shr(edx, 2u32).unwrap(),
			Instruction::with2(Code::Shr_rm32_imm8, Register::EDX, 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shr_m_u() {
	/* if op1 == 1 */ {
		/* if op0.size() == MemoryOperandSize::Qword */ {
			// Skipping Shr_rm64_1 - Not supported by current bitness
		} /* else if op0.size() == MemoryOperandSize::Dword */ {
			// Shr_rm32_1
			test_instr(16, |a| a.shr(dword_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Shr_rm32_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Word */ {
			// Shr_rm16_1
			test_instr(16, |a| a.shr(word_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Shr_rm16_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else if op0.size() == MemoryOperandSize::Byte */ {
			// Shr_rm8_1
			test_instr(16, |a| a.shr(byte_ptr(di), 1u32).unwrap(),
				Instruction::with2(Code::Shr_rm8_1, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 1u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Shr_rm8_1
			test_invalid_instr(16, |a| assert!(a.shr(zmmword_ptr(di), 1u32).is_err()), TestInstrFlags::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Shr_rm64_imm8 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Shr_rm32_imm8
		test_instr(16, |a| a.shr(dword_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Shr_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Shr_rm16_imm8
		test_instr(16, |a| a.shr(word_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Shr_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Shr_rm8_imm8
		test_instr(16, |a| a.shr(byte_ptr(di), 2u32).unwrap(),
			Instruction::with2(Code::Shr_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 2u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Shr_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.shr(zmmword_ptr(di), 2u32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn shrd_r16_r16_r8() {
	// Shrd_rm16_r16_CL
	test_instr(16, |a| a.shrd(dx, bx, cl).unwrap(),
		Instruction::with3(Code::Shrd_rm16_r16_CL, Register::DX, Register::BX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shrd_m_r16_r8() {
	// Shrd_rm16_r16_CL
	test_instr(16, |a| a.shrd(word_ptr(si), bx, cl).unwrap(),
		Instruction::with3(Code::Shrd_rm16_r16_CL, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shrd_r32_r32_r8() {
	// Shrd_rm32_r32_CL
	test_instr(16, |a| a.shrd(edx, ebx, cl).unwrap(),
		Instruction::with3(Code::Shrd_rm32_r32_CL, Register::EDX, Register::EBX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shrd_m_r32_r8() {
	// Shrd_rm32_r32_CL
	test_instr(16, |a| a.shrd(dword_ptr(si), ebx, cl).unwrap(),
		Instruction::with3(Code::Shrd_rm32_r32_CL, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX, Register::CL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shrd_r16_r16_i() {
	// Shrd_rm16_r16_imm8
	test_instr(16, |a| a.shrd(dx, bx, -5i32).unwrap(),
		Instruction::with3(Code::Shrd_rm16_r16_imm8, Register::DX, Register::BX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Shrd_rm16_r16_imm8
	test_instr(16, |a| a.shrd(dx, bx, -5).unwrap(),
		Instruction::with3(Code::Shrd_rm16_r16_imm8, Register::DX, Register::BX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shrd_m_r16_i() {
	// Shrd_rm16_r16_imm8
	test_instr(16, |a| a.shrd(word_ptr(si), bx, -5i32).unwrap(),
		Instruction::with3(Code::Shrd_rm16_r16_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Shrd_rm16_r16_imm8
	test_instr(16, |a| a.shrd(word_ptr(si), bx, -5).unwrap(),
		Instruction::with3(Code::Shrd_rm16_r16_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shrd_r32_r32_i() {
	// Shrd_rm32_r32_imm8
	test_instr(16, |a| a.shrd(edx, ebx, -5i32).unwrap(),
		Instruction::with3(Code::Shrd_rm32_r32_imm8, Register::EDX, Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Shrd_rm32_r32_imm8
	test_instr(16, |a| a.shrd(edx, ebx, -5).unwrap(),
		Instruction::with3(Code::Shrd_rm32_r32_imm8, Register::EDX, Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shrd_m_r32_i() {
	// Shrd_rm32_r32_imm8
	test_instr(16, |a| a.shrd(dword_ptr(si), ebx, -5i32).unwrap(),
		Instruction::with3(Code::Shrd_rm32_r32_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Shrd_rm32_r32_imm8
	test_instr(16, |a| a.shrd(dword_ptr(si), ebx, -5).unwrap(),
		Instruction::with3(Code::Shrd_rm32_r32_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shrd_r16_r16_u() {
	// Shrd_rm16_r16_imm8
	test_instr(16, |a| a.shrd(dx, bx, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Shrd_rm16_r16_imm8, Register::DX, Register::BX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shrd_m_r16_u() {
	// Shrd_rm16_r16_imm8
	test_instr(16, |a| a.shrd(word_ptr(si), bx, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Shrd_rm16_r16_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shrd_r32_r32_u() {
	// Shrd_rm32_r32_imm8
	test_instr(16, |a| a.shrd(edx, ebx, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Shrd_rm32_r32_imm8, Register::EDX, Register::EBX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shrd_m_r32_u() {
	// Shrd_rm32_r32_imm8
	test_instr(16, |a| a.shrd(dword_ptr(si), ebx, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Shrd_rm32_r32_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shrx_r32_r32_r32() {
	// VEX_Shrx_r32_rm32_r32
	test_instr(16, |a| a.shrx(edx, ebx, esp).unwrap(),
		Instruction::with3(Code::VEX_Shrx_r32_rm32_r32, Register::EDX, Register::EBX, Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shrx_r32_m_r32() {
	// VEX_Shrx_r32_rm32_r32
	test_instr(16, |a| a.shrx(edx, dword_ptr(si), esp).unwrap(),
		Instruction::with3(Code::VEX_Shrx_r32_rm32_r32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shufpd_xmm_xmm_i() {
	// Shufpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.shufpd(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Shufpd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Shufpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.shufpd(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Shufpd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shufpd_xmm_m_i() {
	// Shufpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.shufpd(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Shufpd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Shufpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.shufpd(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Shufpd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shufpd_xmm_xmm_u() {
	// Shufpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.shufpd(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Shufpd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shufpd_xmm_m_u() {
	// Shufpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.shufpd(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Shufpd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shufps_xmm_xmm_i() {
	// Shufps_xmm_xmmm128_imm8
	test_instr(16, |a| a.shufps(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::Shufps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Shufps_xmm_xmmm128_imm8
	test_instr(16, |a| a.shufps(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::Shufps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shufps_xmm_m_i() {
	// Shufps_xmm_xmmm128_imm8
	test_instr(16, |a| a.shufps(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::Shufps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Shufps_xmm_xmmm128_imm8
	test_instr(16, |a| a.shufps(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::Shufps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shufps_xmm_xmm_u() {
	// Shufps_xmm_xmmm128_imm8
	test_instr(16, |a| a.shufps(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::Shufps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn shufps_xmm_m_u() {
	// Shufps_xmm_xmmm128_imm8
	test_instr(16, |a| a.shufps(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::Shufps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sidt_m() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Sidt_m1632_16
		test_instr(16, |a| a.sidt(ptr(si)).unwrap(),
			Instruction::with1(Code::Sidt_m1632_16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn skinit() {
	// Skinit
	test_instr(16, |a| a.skinit().unwrap(),
		Instruction::with(Code::Skinit),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sldt_r16() {
	// Sldt_rm16
	test_instr(16, |a| a.sldt(dx).unwrap(),
		Instruction::with1(Code::Sldt_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sldt_r32() {
	// Sldt_r32m16
	test_instr(16, |a| a.sldt(edx).unwrap(),
		Instruction::with1(Code::Sldt_r32m16, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sldt_m() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Sldt_rm16
		test_instr(16, |a| a.sldt(word_ptr(si)).unwrap(),
			Instruction::with1(Code::Sldt_rm16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn slwpcb_r32() {
	// XOP_Slwpcb_r32
	test_instr(16, |a| a.slwpcb(edx).unwrap(),
		Instruction::with1(Code::XOP_Slwpcb_r32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn smint() {
	// Smint
	test_instr(16, |a| a.smint().unwrap(),
		Instruction::with(Code::Smint),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn smint_0f7e() {
	// Smint_0F7E
	test_instr(16, |a| a.smint_0f7e().unwrap(),
		Instruction::with(Code::Smint_0F7E),
		TestInstrFlags::NONE, DecoderOptions::CYRIX_SMINT_0F7E);
}

#[test]
#[rustfmt::skip]
fn smsw_r16() {
	// Smsw_rm16
	test_instr(16, |a| a.smsw(dx).unwrap(),
		Instruction::with1(Code::Smsw_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn smsw_r32() {
	// Smsw_r32m16
	test_instr(16, |a| a.smsw(edx).unwrap(),
		Instruction::with1(Code::Smsw_r32m16, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn smsw_m() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Smsw_rm16
		test_instr(16, |a| a.smsw(word_ptr(si)).unwrap(),
			Instruction::with1(Code::Smsw_rm16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sqrtpd_xmm_xmm() {
	// Sqrtpd_xmm_xmmm128
	test_instr(16, |a| a.sqrtpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Sqrtpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sqrtpd_xmm_m() {
	// Sqrtpd_xmm_xmmm128
	test_instr(16, |a| a.sqrtpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Sqrtpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sqrtps_xmm_xmm() {
	// Sqrtps_xmm_xmmm128
	test_instr(16, |a| a.sqrtps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Sqrtps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sqrtps_xmm_m() {
	// Sqrtps_xmm_xmmm128
	test_instr(16, |a| a.sqrtps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Sqrtps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sqrtsd_xmm_xmm() {
	// Sqrtsd_xmm_xmmm64
	test_instr(16, |a| a.sqrtsd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Sqrtsd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sqrtsd_xmm_m() {
	// Sqrtsd_xmm_xmmm64
	test_instr(16, |a| a.sqrtsd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Sqrtsd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sqrtss_xmm_xmm() {
	// Sqrtss_xmm_xmmm32
	test_instr(16, |a| a.sqrtss(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Sqrtss_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sqrtss_xmm_m() {
	// Sqrtss_xmm_xmmm32
	test_instr(16, |a| a.sqrtss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Sqrtss_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn stac() {
	// Stac
	test_instr(16, |a| a.stac().unwrap(),
		Instruction::with(Code::Stac),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn stc() {
	// Stc
	test_instr(16, |a| a.stc().unwrap(),
		Instruction::with(Code::Stc),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn std() {
	// Std
	test_instr(16, |a| a.std().unwrap(),
		Instruction::with(Code::Std),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn stgi() {
	// Stgi
	test_instr(16, |a| a.stgi().unwrap(),
		Instruction::with(Code::Stgi),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sti() {
	// Sti
	test_instr(16, |a| a.sti().unwrap(),
		Instruction::with(Code::Sti),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn stmxcsr_m() {
	// Stmxcsr_m32
	test_instr(16, |a| a.stmxcsr(ptr(si)).unwrap(),
		Instruction::with1(Code::Stmxcsr_m32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn stosb() {
	// Stosb_m8_AL
	test_instr(16, |a| a.stosb().unwrap(),
		Instruction::with_stosb(16, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn stosd() {
	// Stosd_m32_EAX
	test_instr(16, |a| a.stosd().unwrap(),
		Instruction::with_stosd(16, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn stosw() {
	// Stosw_m16_AX
	test_instr(16, |a| a.stosw().unwrap(),
		Instruction::with_stosw(16, RepPrefixKind::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn str_r16() {
	// Str_rm16
	test_instr(16, |a| a.str(dx).unwrap(),
		Instruction::with1(Code::Str_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn str_r32() {
	// Str_r32m16
	test_instr(16, |a| a.str(edx).unwrap(),
		Instruction::with1(Code::Str_r32m16, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn str_m() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Str_rm16
		test_instr(16, |a| a.str(word_ptr(si)).unwrap(),
			Instruction::with1(Code::Str_rm16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sub_r8_r8() {
	// Sub_rm8_r8
	test_instr(16, |a| a.sub(dl, bl).unwrap(),
		Instruction::with2(Code::Sub_rm8_r8, Register::DL, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sub_m_r8() {
	// Sub_rm8_r8
	test_instr(16, |a| a.sub(byte_ptr(si), bl).unwrap(),
		Instruction::with2(Code::Sub_rm8_r8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sub_r16_r16() {
	// Sub_rm16_r16
	test_instr(16, |a| a.sub(dx, bx).unwrap(),
		Instruction::with2(Code::Sub_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sub_m_r16() {
	// Sub_rm16_r16
	test_instr(16, |a| a.sub(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Sub_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sub_r32_r32() {
	// Sub_rm32_r32
	test_instr(16, |a| a.sub(edx, ebx).unwrap(),
		Instruction::with2(Code::Sub_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sub_m_r32() {
	// Sub_rm32_r32
	test_instr(16, |a| a.sub(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Sub_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sub_r8_m() {
	// Sub_r8_rm8
	test_instr(16, |a| a.sub(dl, byte_ptr(si)).unwrap(),
		Instruction::with2(Code::Sub_r8_rm8, Register::DL, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sub_r16_m() {
	// Sub_r16_rm16
	test_instr(16, |a| a.sub(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Sub_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sub_r32_m() {
	// Sub_r32_rm32
	test_instr(16, |a| a.sub(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Sub_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sub_r8_i() {
	/* if op0.register() == Register::AL */ {
		// Sub_AL_imm8
		test_instr(16, |a| a.sub(al, -5i32).unwrap(),
			Instruction::with2(Code::Sub_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sub_rm8_imm8
		test_instr(16, |a| a.sub(dl, -5i32).unwrap(),
			Instruction::with2(Code::Sub_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AL */ {
		// Sub_AL_imm8
		test_instr(16, |a| a.sub(al, -5).unwrap(),
			Instruction::with2(Code::Sub_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sub_rm8_imm8
		test_instr(16, |a| a.sub(dl, -5).unwrap(),
			Instruction::with2(Code::Sub_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sub_r16_i() {
	/* if op0.register() == Register::AX */ {
		// Sub_AX_imm16
		test_instr(16, |a| a.sub(ax, 0x40B7i32).unwrap(),
			Instruction::with2(Code::Sub_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Sub_rm16_imm8
		test_instr(16, |a| a.sub(dx, -0x80i32).unwrap(),
			Instruction::with2(Code::Sub_rm16_imm8, Register::DX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Sub_rm16_imm8
		test_instr(16, |a| a.sub(dx, 0x7Fi32).unwrap(),
			Instruction::with2(Code::Sub_rm16_imm8, Register::DX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sub_rm16_imm16
		test_instr(16, |a| a.sub(dx, 0x40B7i32).unwrap(),
			Instruction::with2(Code::Sub_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AX */ {
		// Sub_AX_imm16
		test_instr(16, |a| a.sub(ax, 0x40B7).unwrap(),
			Instruction::with2(Code::Sub_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Sub_rm16_imm8
		test_instr(16, |a| a.sub(dx, -0x80).unwrap(),
			Instruction::with2(Code::Sub_rm16_imm8, Register::DX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Sub_rm16_imm8
		test_instr(16, |a| a.sub(dx, 0x7F).unwrap(),
			Instruction::with2(Code::Sub_rm16_imm8, Register::DX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sub_rm16_imm16
		test_instr(16, |a| a.sub(dx, 0x40B7).unwrap(),
			Instruction::with2(Code::Sub_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sub_r32_i() {
	/* if op0.register() == Register::EAX */ {
		// Sub_EAX_imm32
		test_instr(16, |a| a.sub(eax, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Sub_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Sub_rm32_imm8
		test_instr(16, |a| a.sub(edx, -0x80i32).unwrap(),
			Instruction::with2(Code::Sub_rm32_imm8, Register::EDX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Sub_rm32_imm8
		test_instr(16, |a| a.sub(edx, 0x7Fi32).unwrap(),
			Instruction::with2(Code::Sub_rm32_imm8, Register::EDX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sub_rm32_imm32
		test_instr(16, |a| a.sub(edx, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Sub_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::EAX */ {
		// Sub_EAX_imm32
		test_instr(16, |a| a.sub(eax, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Sub_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Sub_rm32_imm8
		test_instr(16, |a| a.sub(edx, -0x80).unwrap(),
			Instruction::with2(Code::Sub_rm32_imm8, Register::EDX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Sub_rm32_imm8
		test_instr(16, |a| a.sub(edx, 0x7F).unwrap(),
			Instruction::with2(Code::Sub_rm32_imm8, Register::EDX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sub_rm32_imm32
		test_instr(16, |a| a.sub(edx, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Sub_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sub_m_i() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Skipping Sub_rm64_imm8 - Not supported by current bitness
			// Skipping Sub_rm64_imm8 - Not supported by current bitness
		} /* else */ {
			// Skipping Sub_rm64_imm32 - Not supported by current bitness
		}
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Sub_rm32_imm8
			test_instr(16, |a| a.sub(dword_ptr(di), -0x80i32).unwrap(),
				Instruction::with2(Code::Sub_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Sub_rm32_imm8
			test_instr(16, |a| a.sub(dword_ptr(di), 0x7Fi32).unwrap(),
				Instruction::with2(Code::Sub_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sub_rm32_imm32
			test_instr(16, |a| a.sub(dword_ptr(di), 0x7FFFFFFFi32).unwrap(),
				Instruction::with2(Code::Sub_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Sub_rm16_imm8
			test_instr(16, |a| a.sub(word_ptr(di), -0x80i32).unwrap(),
				Instruction::with2(Code::Sub_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Sub_rm16_imm8
			test_instr(16, |a| a.sub(word_ptr(di), 0x7Fi32).unwrap(),
				Instruction::with2(Code::Sub_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sub_rm16_imm16
			test_instr(16, |a| a.sub(word_ptr(di), 0x40B7i32).unwrap(),
				Instruction::with2(Code::Sub_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Sub_rm8_imm8
		test_instr(16, |a| a.sub(byte_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::Sub_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sub_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.sub(zmmword_ptr(di), -5i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op0.size() == MemoryOperandSize::Qword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Skipping Sub_rm64_imm8 - Not supported by current bitness
			// Skipping Sub_rm64_imm8 - Not supported by current bitness
		} /* else */ {
			// Skipping Sub_rm64_imm32 - Not supported by current bitness
		}
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Sub_rm32_imm8
			test_instr(16, |a| a.sub(dword_ptr(di), -0x80).unwrap(),
				Instruction::with2(Code::Sub_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Sub_rm32_imm8
			test_instr(16, |a| a.sub(dword_ptr(di), 0x7F).unwrap(),
				Instruction::with2(Code::Sub_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sub_rm32_imm32
			test_instr(16, |a| a.sub(dword_ptr(di), 0x7FFFFFFF).unwrap(),
				Instruction::with2(Code::Sub_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Sub_rm16_imm8
			test_instr(16, |a| a.sub(word_ptr(di), -0x80).unwrap(),
				Instruction::with2(Code::Sub_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Sub_rm16_imm8
			test_instr(16, |a| a.sub(word_ptr(di), 0x7F).unwrap(),
				Instruction::with2(Code::Sub_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sub_rm16_imm16
			test_instr(16, |a| a.sub(word_ptr(di), 0x40B7).unwrap(),
				Instruction::with2(Code::Sub_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Sub_rm8_imm8
		test_instr(16, |a| a.sub(byte_ptr(di), -5).unwrap(),
			Instruction::with2(Code::Sub_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sub_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.sub(zmmword_ptr(di), -5).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sub_r8_u() {
	/* if op0.register() == Register::AL */ {
		// Sub_AL_imm8
		test_instr(16, |a| a.sub(al, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Sub_AL_imm8, Register::AL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sub_rm8_imm8
		test_instr(16, |a| a.sub(dl, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Sub_rm8_imm8, Register::DL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sub_r16_u() {
	/* if op0.register() == Register::AX */ {
		// Sub_AX_imm16
		test_instr(16, |a| a.sub(ax, 0x40B7u32).unwrap(),
			Instruction::with2(Code::Sub_AX_imm16, Register::AX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 <= i8::MAX as u32 || (0xFF80 <= op1 && op1 <= 0xFFFF) */ {
		// Sub_rm16_imm8
		test_instr(16, |a| a.sub(dx, 0xFF80u32).unwrap(),
			Instruction::with2(Code::Sub_rm16_imm8, Register::DX, 0xFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Sub_rm16_imm8
		test_instr(16, |a| a.sub(dx, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Sub_rm16_imm8, Register::DX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sub_rm16_imm16
		test_instr(16, |a| a.sub(dx, 0x40B7u32).unwrap(),
			Instruction::with2(Code::Sub_rm16_imm16, Register::DX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sub_r32_u() {
	/* if op0.register() == Register::EAX */ {
		// Sub_EAX_imm32
		test_instr(16, |a| a.sub(eax, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Sub_EAX_imm32, Register::EAX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 <= i8::MAX as u32 || 0xFFFF_FF80 <= op1 */ {
		// Sub_rm32_imm8
		test_instr(16, |a| a.sub(edx, 0xFFFFFF80u32).unwrap(),
			Instruction::with2(Code::Sub_rm32_imm8, Register::EDX, 0xFFFFFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Sub_rm32_imm8
		test_instr(16, |a| a.sub(edx, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Sub_rm32_imm8, Register::EDX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sub_rm32_imm32
		test_instr(16, |a| a.sub(edx, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Sub_rm32_imm32, Register::EDX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn sub_m_u() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 <= i8::MAX as u32 || 0xFFFF_FF80 <= op1 */ {
			// Sub_rm32_imm8
			test_instr(16, |a| a.sub(dword_ptr(di), 0xFFFFFF80u32).unwrap(),
				Instruction::with2(Code::Sub_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFFFFFF80u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Sub_rm32_imm8
			test_instr(16, |a| a.sub(dword_ptr(di), 0x7Fu32).unwrap(),
				Instruction::with2(Code::Sub_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sub_rm32_imm32
			test_instr(16, |a| a.sub(dword_ptr(di), 0x7FFFFFFFu32).unwrap(),
				Instruction::with2(Code::Sub_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 <= i8::MAX as u32 || (0xFF80 <= op1 && op1 <= 0xFFFF) */ {
			// Sub_rm16_imm8
			test_instr(16, |a| a.sub(word_ptr(di), 0xFF80u32).unwrap(),
				Instruction::with2(Code::Sub_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFF80u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Sub_rm16_imm8
			test_instr(16, |a| a.sub(word_ptr(di), 0x7Fu32).unwrap(),
				Instruction::with2(Code::Sub_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Sub_rm16_imm16
			test_instr(16, |a| a.sub(word_ptr(di), 0x40B7u32).unwrap(),
				Instruction::with2(Code::Sub_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Sub_rm8_imm8
		test_instr(16, |a| a.sub(byte_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::Sub_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Sub_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.sub(zmmword_ptr(di), 0x7Fu32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn subpd_xmm_xmm() {
	// Subpd_xmm_xmmm128
	test_instr(16, |a| a.subpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Subpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn subpd_xmm_m() {
	// Subpd_xmm_xmmm128
	test_instr(16, |a| a.subpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Subpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn subps_xmm_xmm() {
	// Subps_xmm_xmmm128
	test_instr(16, |a| a.subps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Subps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn subps_xmm_m() {
	// Subps_xmm_xmmm128
	test_instr(16, |a| a.subps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Subps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn subsd_xmm_xmm() {
	// Subsd_xmm_xmmm64
	test_instr(16, |a| a.subsd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Subsd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn subsd_xmm_m() {
	// Subsd_xmm_xmmm64
	test_instr(16, |a| a.subsd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Subsd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn subss_xmm_xmm() {
	// Subss_xmm_xmmm32
	test_instr(16, |a| a.subss(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Subss_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn subss_xmm_m() {
	// Subss_xmm_xmmm32
	test_instr(16, |a| a.subss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Subss_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn svdc_m_seg() {
	// Svdc_m80_Sreg
	test_instr(16, |a| a.svdc(ptr(si), ds).unwrap(),
		Instruction::with2(Code::Svdc_m80_Sreg, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::DS).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn svldt_m() {
	// Svldt_m80
	test_instr(16, |a| a.svldt(ptr(si)).unwrap(),
		Instruction::with1(Code::Svldt_m80, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn svts_m() {
	// Svts_m80
	test_instr(16, |a| a.svts(ptr(si)).unwrap(),
		Instruction::with1(Code::Svts_m80, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn syscall() {
	// Syscall
	test_instr(16, |a| a.syscall().unwrap(),
		Instruction::with(Code::Syscall),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sysenter() {
	// Sysenter
	test_instr(16, |a| a.sysenter().unwrap(),
		Instruction::with(Code::Sysenter),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sysexit() {
	// Sysexitd
	test_instr(16, |a| a.sysexit().unwrap(),
		Instruction::with(Code::Sysexitd),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn sysret() {
	// Sysretd
	test_instr(16, |a| a.sysret().unwrap(),
		Instruction::with(Code::Sysretd),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn t1mskc_r32_r32() {
	// XOP_T1mskc_r32_rm32
	test_instr(16, |a| a.t1mskc(edx, ebx).unwrap(),
		Instruction::with2(Code::XOP_T1mskc_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn t1mskc_r32_m() {
	// XOP_T1mskc_r32_rm32
	test_instr(16, |a| a.t1mskc(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_T1mskc_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn tdcall() {
	// Tdcall
	test_instr(16, |a| a.tdcall().unwrap(),
		Instruction::with(Code::Tdcall),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn test_r8_r8() {
	// Test_rm8_r8
	test_instr(16, |a| a.test(dl, bl).unwrap(),
		Instruction::with2(Code::Test_rm8_r8, Register::DL, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn test_m_r8() {
	// Test_rm8_r8
	test_instr(16, |a| a.test(byte_ptr(si), bl).unwrap(),
		Instruction::with2(Code::Test_rm8_r8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn test_r16_r16() {
	// Test_rm16_r16
	test_instr(16, |a| a.test(dx, bx).unwrap(),
		Instruction::with2(Code::Test_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn test_m_r16() {
	// Test_rm16_r16
	test_instr(16, |a| a.test(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Test_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn test_r32_r32() {
	// Test_rm32_r32
	test_instr(16, |a| a.test(edx, ebx).unwrap(),
		Instruction::with2(Code::Test_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn test_m_r32() {
	// Test_rm32_r32
	test_instr(16, |a| a.test(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Test_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn test_r8_i() {
	/* if op0.register() == Register::AL */ {
		// Test_AL_imm8
		test_instr(16, |a| a.test(al, -5i32).unwrap(),
			Instruction::with2(Code::Test_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Test_rm8_imm8
		test_instr(16, |a| a.test(dl, -5i32).unwrap(),
			Instruction::with2(Code::Test_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AL */ {
		// Test_AL_imm8
		test_instr(16, |a| a.test(al, -5).unwrap(),
			Instruction::with2(Code::Test_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Test_rm8_imm8
		test_instr(16, |a| a.test(dl, -5).unwrap(),
			Instruction::with2(Code::Test_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn test_r16_i() {
	/* if op0.register() == Register::AX */ {
		// Test_AX_imm16
		test_instr(16, |a| a.test(ax, 0x40B7i32).unwrap(),
			Instruction::with2(Code::Test_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Test_rm16_imm16
		test_instr(16, |a| a.test(dx, 0x40B7i32).unwrap(),
			Instruction::with2(Code::Test_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AX */ {
		// Test_AX_imm16
		test_instr(16, |a| a.test(ax, 0x40B7).unwrap(),
			Instruction::with2(Code::Test_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Test_rm16_imm16
		test_instr(16, |a| a.test(dx, 0x40B7).unwrap(),
			Instruction::with2(Code::Test_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn test_r32_i() {
	/* if op0.register() == Register::EAX */ {
		// Test_EAX_imm32
		test_instr(16, |a| a.test(eax, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Test_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Test_rm32_imm32
		test_instr(16, |a| a.test(edx, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Test_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::EAX */ {
		// Test_EAX_imm32
		test_instr(16, |a| a.test(eax, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Test_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Test_rm32_imm32
		test_instr(16, |a| a.test(edx, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Test_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn test_m_i() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Test_rm64_imm32 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Test_rm32_imm32
		test_instr(16, |a| a.test(dword_ptr(di), 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Test_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Test_rm16_imm16
		test_instr(16, |a| a.test(word_ptr(di), 0x40B7i32).unwrap(),
			Instruction::with2(Code::Test_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Test_rm8_imm8
		test_instr(16, |a| a.test(byte_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::Test_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Test_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.test(zmmword_ptr(di), -5i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op0.size() == MemoryOperandSize::Qword */ {
		// Skipping Test_rm64_imm32 - Not supported by current bitness
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		// Test_rm32_imm32
		test_instr(16, |a| a.test(dword_ptr(di), 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Test_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Test_rm16_imm16
		test_instr(16, |a| a.test(word_ptr(di), 0x40B7).unwrap(),
			Instruction::with2(Code::Test_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Test_rm8_imm8
		test_instr(16, |a| a.test(byte_ptr(di), -5).unwrap(),
			Instruction::with2(Code::Test_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Test_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.test(zmmword_ptr(di), -5).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn test_r8_u() {
	/* if op0.register() == Register::AL */ {
		// Test_AL_imm8
		test_instr(16, |a| a.test(al, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Test_AL_imm8, Register::AL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Test_rm8_imm8
		test_instr(16, |a| a.test(dl, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Test_rm8_imm8, Register::DL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn test_r16_u() {
	/* if op0.register() == Register::AX */ {
		// Test_AX_imm16
		test_instr(16, |a| a.test(ax, 0x40B7u32).unwrap(),
			Instruction::with2(Code::Test_AX_imm16, Register::AX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Test_rm16_imm16
		test_instr(16, |a| a.test(dx, 0x40B7u32).unwrap(),
			Instruction::with2(Code::Test_rm16_imm16, Register::DX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn test_r32_u() {
	/* if op0.register() == Register::EAX */ {
		// Test_EAX_imm32
		test_instr(16, |a| a.test(eax, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Test_EAX_imm32, Register::EAX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Test_rm32_imm32
		test_instr(16, |a| a.test(edx, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Test_rm32_imm32, Register::EDX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn test_m_u() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		// Test_rm32_imm32
		test_instr(16, |a| a.test(dword_ptr(di), 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Test_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		// Test_rm16_imm16
		test_instr(16, |a| a.test(word_ptr(di), 0x40B7u32).unwrap(),
			Instruction::with2(Code::Test_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Test_rm8_imm8
		test_instr(16, |a| a.test(byte_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::Test_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Test_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.test(zmmword_ptr(di), 0x7Fu32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn tlbsync() {
	// Tlbsync
	test_instr(16, |a| a.tlbsync().unwrap(),
		Instruction::with(Code::Tlbsync),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn tpause_r32() {
	// Tpause_r32
	test_instr(16, |a| a.tpause(edx).unwrap(),
		Instruction::with1(Code::Tpause_r32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn tzcnt_r16_r16() {
	// Tzcnt_r16_rm16
	test_instr(16, |a| a.tzcnt(dx, bx).unwrap(),
		Instruction::with2(Code::Tzcnt_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn tzcnt_r32_r32() {
	// Tzcnt_r32_rm32
	test_instr(16, |a| a.tzcnt(edx, ebx).unwrap(),
		Instruction::with2(Code::Tzcnt_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn tzcnt_r16_m() {
	// Tzcnt_r16_rm16
	test_instr(16, |a| a.tzcnt(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Tzcnt_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn tzcnt_r32_m() {
	// Tzcnt_r32_rm32
	test_instr(16, |a| a.tzcnt(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Tzcnt_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn tzmsk_r32_r32() {
	// XOP_Tzmsk_r32_rm32
	test_instr(16, |a| a.tzmsk(edx, ebx).unwrap(),
		Instruction::with2(Code::XOP_Tzmsk_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn tzmsk_r32_m() {
	// XOP_Tzmsk_r32_rm32
	test_instr(16, |a| a.tzmsk(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Tzmsk_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ucomisd_xmm_xmm() {
	// Ucomisd_xmm_xmmm64
	test_instr(16, |a| a.ucomisd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Ucomisd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ucomisd_xmm_m() {
	// Ucomisd_xmm_xmmm64
	test_instr(16, |a| a.ucomisd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Ucomisd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ucomiss_xmm_xmm() {
	// Ucomiss_xmm_xmmm32
	test_instr(16, |a| a.ucomiss(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Ucomiss_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ucomiss_xmm_m() {
	// Ucomiss_xmm_xmmm32
	test_instr(16, |a| a.ucomiss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Ucomiss_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ud0() {
	// Ud0
	test_instr(16, |a| a.ud0().unwrap(),
		Instruction::with(Code::Ud0),
		TestInstrFlags::NONE, DecoderOptions::AMD);
}

#[test]
#[rustfmt::skip]
fn ud0_r16_r16() {
	// Ud0_r16_rm16
	test_instr(16, |a| a.ud0_2(dx, bx).unwrap(),
		Instruction::with2(Code::Ud0_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ud0_r32_r32() {
	// Ud0_r32_rm32
	test_instr(16, |a| a.ud0_2(edx, ebx).unwrap(),
		Instruction::with2(Code::Ud0_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ud0_r16_m() {
	// Ud0_r16_rm16
	test_instr(16, |a| a.ud0_2(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Ud0_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ud0_r32_m() {
	// Ud0_r32_rm32
	test_instr(16, |a| a.ud0_2(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Ud0_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ud1_r16_r16() {
	// Ud1_r16_rm16
	test_instr(16, |a| a.ud1(dx, bx).unwrap(),
		Instruction::with2(Code::Ud1_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ud1_r32_r32() {
	// Ud1_r32_rm32
	test_instr(16, |a| a.ud1(edx, ebx).unwrap(),
		Instruction::with2(Code::Ud1_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ud1_r16_m() {
	// Ud1_r16_rm16
	test_instr(16, |a| a.ud1(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Ud1_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ud1_r32_m() {
	// Ud1_r32_rm32
	test_instr(16, |a| a.ud1(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Ud1_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn ud2() {
	// Ud2
	test_instr(16, |a| a.ud2().unwrap(),
		Instruction::with(Code::Ud2),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn umonitor_r16() {
	// Umonitor_r16
	test_instr(16, |a| a.umonitor(dx).unwrap(),
		Instruction::with1(Code::Umonitor_r16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn umonitor_r32() {
	// Umonitor_r32
	test_instr(16, |a| a.umonitor(edx).unwrap(),
		Instruction::with1(Code::Umonitor_r32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn umov_r8_r8() {
	// Umov_rm8_r8
	test_instr(16, |a| a.umov(dl, bl).unwrap(),
		Instruction::with2(Code::Umov_rm8_r8, Register::DL, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::UMOV);
}

#[test]
#[rustfmt::skip]
fn umov_m_r8() {
	// Umov_rm8_r8
	test_instr(16, |a| a.umov(byte_ptr(si), bl).unwrap(),
		Instruction::with2(Code::Umov_rm8_r8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::UMOV);
}

#[test]
#[rustfmt::skip]
fn umov_r16_r16() {
	// Umov_rm16_r16
	test_instr(16, |a| a.umov(dx, bx).unwrap(),
		Instruction::with2(Code::Umov_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::UMOV);
}

#[test]
#[rustfmt::skip]
fn umov_m_r16() {
	// Umov_rm16_r16
	test_instr(16, |a| a.umov(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Umov_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::UMOV);
}

#[test]
#[rustfmt::skip]
fn umov_r32_r32() {
	// Umov_rm32_r32
	test_instr(16, |a| a.umov(edx, ebx).unwrap(),
		Instruction::with2(Code::Umov_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::UMOV);
}

#[test]
#[rustfmt::skip]
fn umov_m_r32() {
	// Umov_rm32_r32
	test_instr(16, |a| a.umov(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Umov_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::UMOV);
}

#[test]
#[rustfmt::skip]
fn umov_r8_m() {
	// Umov_r8_rm8
	test_instr(16, |a| a.umov(dl, byte_ptr(si)).unwrap(),
		Instruction::with2(Code::Umov_r8_rm8, Register::DL, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::UMOV);
}

#[test]
#[rustfmt::skip]
fn umov_r16_m() {
	// Umov_r16_rm16
	test_instr(16, |a| a.umov(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Umov_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::UMOV);
}

#[test]
#[rustfmt::skip]
fn umov_r32_m() {
	// Umov_r32_rm32
	test_instr(16, |a| a.umov(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Umov_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::UMOV);
}

#[test]
#[rustfmt::skip]
fn umwait_r32() {
	// Umwait_r32
	test_instr(16, |a| a.umwait(edx).unwrap(),
		Instruction::with1(Code::Umwait_r32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn unpckhpd_xmm_xmm() {
	// Unpckhpd_xmm_xmmm128
	test_instr(16, |a| a.unpckhpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Unpckhpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn unpckhpd_xmm_m() {
	// Unpckhpd_xmm_xmmm128
	test_instr(16, |a| a.unpckhpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Unpckhpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn unpckhps_xmm_xmm() {
	// Unpckhps_xmm_xmmm128
	test_instr(16, |a| a.unpckhps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Unpckhps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn unpckhps_xmm_m() {
	// Unpckhps_xmm_xmmm128
	test_instr(16, |a| a.unpckhps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Unpckhps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn unpcklpd_xmm_xmm() {
	// Unpcklpd_xmm_xmmm128
	test_instr(16, |a| a.unpcklpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Unpcklpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn unpcklpd_xmm_m() {
	// Unpcklpd_xmm_xmmm128
	test_instr(16, |a| a.unpcklpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Unpcklpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn unpcklps_xmm_xmm() {
	// Unpcklps_xmm_xmmm128
	test_instr(16, |a| a.unpcklps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Unpcklps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn unpcklps_xmm_m() {
	// Unpcklps_xmm_xmmm128
	test_instr(16, |a| a.unpcklps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Unpcklps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn v4fmaddps_zmm_zmm_m() {
	// EVEX_V4fmaddps_zmm_k1z_zmmp3_m128
	test_instr(16, |a| a.v4fmaddps(zmm2.k1(), zmm3, ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_V4fmaddps_zmm_k1z_zmmp3_m128, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn v4fmaddss_xmm_xmm_m() {
	// EVEX_V4fmaddss_xmm_k1z_xmmp3_m128
	test_instr(16, |a| a.v4fmaddss(xmm2.k1(), xmm3, ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_V4fmaddss_xmm_k1z_xmmp3_m128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn v4fnmaddps_zmm_zmm_m() {
	// EVEX_V4fnmaddps_zmm_k1z_zmmp3_m128
	test_instr(16, |a| a.v4fnmaddps(zmm2.k1(), zmm3, ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_V4fnmaddps_zmm_k1z_zmmp3_m128, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn v4fnmaddss_xmm_xmm_m() {
	// EVEX_V4fnmaddss_xmm_k1z_xmmp3_m128
	test_instr(16, |a| a.v4fnmaddss(xmm2.k1(), xmm3, ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_V4fnmaddss_xmm_k1z_xmmp3_m128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddpd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaddpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaddpd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vaddpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vaddpd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaddpd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaddpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaddpd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vaddpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vaddpd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaddpd_zmm_zmm_zmm() {
	// EVEX_Vaddpd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vaddpd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vaddpd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddpd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vaddpd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vaddpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaddpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vaddpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vaddpd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaddpd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vaddpd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vaddpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaddpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vaddpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vaddpd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaddpd_zmm_zmm_m() {
	// EVEX_Vaddpd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vaddpd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vaddpd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddph_xmm_xmm_xmm() {
	// EVEX_Vaddph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vaddph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vaddph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddph_ymm_ymm_ymm() {
	// EVEX_Vaddph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vaddph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vaddph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddph_zmm_zmm_zmm() {
	// EVEX_Vaddph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vaddph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vaddph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddph_xmm_xmm_m() {
	// EVEX_Vaddph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vaddph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vaddph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddph_ymm_ymm_m() {
	// EVEX_Vaddph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vaddph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vaddph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddph_zmm_zmm_m() {
	// EVEX_Vaddph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vaddph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vaddph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaddps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaddps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vaddps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vaddps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaddps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaddps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaddps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vaddps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vaddps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaddps_zmm_zmm_zmm() {
	// EVEX_Vaddps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vaddps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vaddps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vaddps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vaddps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaddps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vaddps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vaddps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaddps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vaddps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vaddps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaddps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vaddps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vaddps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaddps_zmm_zmm_m() {
	// EVEX_Vaddps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vaddps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vaddps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddsd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaddsd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vaddsd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vaddsd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaddsd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vaddsd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vaddsd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaddsd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaddsd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vaddsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vaddsd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaddsd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vaddsd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vaddsd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaddsh_xmm_xmm_xmm() {
	// EVEX_Vaddsh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vaddsh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vaddsh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddsh_xmm_xmm_m() {
	// EVEX_Vaddsh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vaddsh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vaddsh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaddss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vaddss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vaddss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaddss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vaddss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vaddss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaddss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaddss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vaddss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vaddss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaddss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vaddss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vaddss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaddsubpd_xmm_xmm_xmm() {
	// VEX_Vaddsubpd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vaddsubpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vaddsubpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddsubpd_ymm_ymm_ymm() {
	// VEX_Vaddsubpd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vaddsubpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vaddsubpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddsubpd_xmm_xmm_m() {
	// VEX_Vaddsubpd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vaddsubpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vaddsubpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddsubpd_ymm_ymm_m() {
	// VEX_Vaddsubpd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vaddsubpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vaddsubpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddsubps_xmm_xmm_xmm() {
	// VEX_Vaddsubps_xmm_xmm_xmmm128
	test_instr(16, |a| a.vaddsubps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vaddsubps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddsubps_ymm_ymm_ymm() {
	// VEX_Vaddsubps_ymm_ymm_ymmm256
	test_instr(16, |a| a.vaddsubps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vaddsubps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddsubps_xmm_xmm_m() {
	// VEX_Vaddsubps_xmm_xmm_xmmm128
	test_instr(16, |a| a.vaddsubps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vaddsubps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaddsubps_ymm_ymm_m() {
	// VEX_Vaddsubps_ymm_ymm_ymmm256
	test_instr(16, |a| a.vaddsubps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vaddsubps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaesdec_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaesdec_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaesdec(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vaesdec_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaesdec_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaesdec(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::EVEX_Vaesdec_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaesdec_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaesdec_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaesdec(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vaesdec_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaesdec_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaesdec(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::EVEX_Vaesdec_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaesdec_zmm_zmm_zmm() {
	// EVEX_Vaesdec_zmm_zmm_zmmm512
	test_instr(16, |a| a.vaesdec(zmm2, zmm3, zmm4).unwrap(),
		Instruction::with3(Code::EVEX_Vaesdec_zmm_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaesdec_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaesdec_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaesdec(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vaesdec_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaesdec_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaesdec(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::EVEX_Vaesdec_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaesdec_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaesdec_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaesdec(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vaesdec_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaesdec_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaesdec(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::EVEX_Vaesdec_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaesdec_zmm_zmm_m() {
	// EVEX_Vaesdec_zmm_zmm_zmmm512
	test_instr(16, |a| a.vaesdec(zmm2, zmm3, zmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::EVEX_Vaesdec_zmm_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaesdeclast_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaesdeclast_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaesdeclast(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vaesdeclast_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaesdeclast_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaesdeclast(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::EVEX_Vaesdeclast_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaesdeclast_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaesdeclast_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaesdeclast(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vaesdeclast_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaesdeclast_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaesdeclast(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::EVEX_Vaesdeclast_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaesdeclast_zmm_zmm_zmm() {
	// EVEX_Vaesdeclast_zmm_zmm_zmmm512
	test_instr(16, |a| a.vaesdeclast(zmm2, zmm3, zmm4).unwrap(),
		Instruction::with3(Code::EVEX_Vaesdeclast_zmm_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaesdeclast_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaesdeclast_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaesdeclast(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vaesdeclast_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaesdeclast_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaesdeclast(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::EVEX_Vaesdeclast_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaesdeclast_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaesdeclast_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaesdeclast(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vaesdeclast_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaesdeclast_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaesdeclast(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::EVEX_Vaesdeclast_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaesdeclast_zmm_zmm_m() {
	// EVEX_Vaesdeclast_zmm_zmm_zmmm512
	test_instr(16, |a| a.vaesdeclast(zmm2, zmm3, zmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::EVEX_Vaesdeclast_zmm_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaesenc_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaesenc_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaesenc(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vaesenc_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaesenc_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaesenc(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::EVEX_Vaesenc_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaesenc_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaesenc_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaesenc(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vaesenc_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaesenc_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaesenc(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::EVEX_Vaesenc_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaesenc_zmm_zmm_zmm() {
	// EVEX_Vaesenc_zmm_zmm_zmmm512
	test_instr(16, |a| a.vaesenc(zmm2, zmm3, zmm4).unwrap(),
		Instruction::with3(Code::EVEX_Vaesenc_zmm_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaesenc_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaesenc_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaesenc(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vaesenc_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaesenc_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaesenc(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::EVEX_Vaesenc_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaesenc_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaesenc_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaesenc(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vaesenc_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaesenc_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaesenc(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::EVEX_Vaesenc_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaesenc_zmm_zmm_m() {
	// EVEX_Vaesenc_zmm_zmm_zmmm512
	test_instr(16, |a| a.vaesenc(zmm2, zmm3, zmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::EVEX_Vaesenc_zmm_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaesenclast_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaesenclast_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaesenclast(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vaesenclast_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaesenclast_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaesenclast(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::EVEX_Vaesenclast_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaesenclast_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaesenclast_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaesenclast(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vaesenclast_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaesenclast_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaesenclast(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::EVEX_Vaesenclast_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaesenclast_zmm_zmm_zmm() {
	// EVEX_Vaesenclast_zmm_zmm_zmmm512
	test_instr(16, |a| a.vaesenclast(zmm2, zmm3, zmm4).unwrap(),
		Instruction::with3(Code::EVEX_Vaesenclast_zmm_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaesenclast_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaesenclast_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaesenclast(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vaesenclast_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaesenclast_xmm_xmm_xmmm128
		test_instr(16, |a| a.vaesenclast(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::EVEX_Vaesenclast_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaesenclast_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vaesenclast_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaesenclast(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vaesenclast_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vaesenclast_ymm_ymm_ymmm256
		test_instr(16, |a| a.vaesenclast(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::EVEX_Vaesenclast_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vaesenclast_zmm_zmm_m() {
	// EVEX_Vaesenclast_zmm_zmm_zmmm512
	test_instr(16, |a| a.vaesenclast(zmm2, zmm3, zmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::EVEX_Vaesenclast_zmm_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaesimc_xmm_xmm() {
	// VEX_Vaesimc_xmm_xmmm128
	test_instr(16, |a| a.vaesimc(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::VEX_Vaesimc_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaesimc_xmm_m() {
	// VEX_Vaesimc_xmm_xmmm128
	test_instr(16, |a| a.vaesimc(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vaesimc_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaeskeygenassist_xmm_xmm_i() {
	// VEX_Vaeskeygenassist_xmm_xmmm128_imm8
	test_instr(16, |a| a.vaeskeygenassist(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vaeskeygenassist_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vaeskeygenassist_xmm_xmmm128_imm8
	test_instr(16, |a| a.vaeskeygenassist(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::VEX_Vaeskeygenassist_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaeskeygenassist_xmm_m_i() {
	// VEX_Vaeskeygenassist_xmm_xmmm128_imm8
	test_instr(16, |a| a.vaeskeygenassist(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vaeskeygenassist_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vaeskeygenassist_xmm_xmmm128_imm8
	test_instr(16, |a| a.vaeskeygenassist(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::VEX_Vaeskeygenassist_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaeskeygenassist_xmm_xmm_u() {
	// VEX_Vaeskeygenassist_xmm_xmmm128_imm8
	test_instr(16, |a| a.vaeskeygenassist(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vaeskeygenassist_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vaeskeygenassist_xmm_m_u() {
	// VEX_Vaeskeygenassist_xmm_xmmm128_imm8
	test_instr(16, |a| a.vaeskeygenassist(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vaeskeygenassist_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignd_xmm_xmm_xmm_i() {
	// EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.valignd(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.valignd(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignd_ymm_ymm_ymm_i() {
	// EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.valignd(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.valignd(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignd_zmm_zmm_zmm_i() {
	// EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.valignd(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.valignd(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignd_xmm_xmm_m_i() {
	// EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.valignd(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.valignd(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignd_ymm_ymm_m_i() {
	// EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.valignd(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.valignd(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignd_zmm_zmm_m_i() {
	// EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.valignd(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.valignd(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignd_xmm_xmm_xmm_u() {
	// EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.valignd(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignd_ymm_ymm_ymm_u() {
	// EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.valignd(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignd_zmm_zmm_zmm_u() {
	// EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.valignd(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignd_xmm_xmm_m_u() {
	// EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.valignd(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignd_ymm_ymm_m_u() {
	// EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.valignd(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignd_zmm_zmm_m_u() {
	// EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.valignd(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignq_xmm_xmm_xmm_i() {
	// EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.valignq(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.valignq(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignq_ymm_ymm_ymm_i() {
	// EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.valignq(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.valignq(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignq_zmm_zmm_zmm_i() {
	// EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.valignq(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.valignq(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignq_xmm_xmm_m_i() {
	// EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.valignq(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.valignq(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignq_ymm_ymm_m_i() {
	// EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.valignq(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.valignq(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignq_zmm_zmm_m_i() {
	// EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.valignq(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.valignq(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignq_xmm_xmm_xmm_u() {
	// EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.valignq(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignq_ymm_ymm_ymm_u() {
	// EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.valignq(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignq_zmm_zmm_zmm_u() {
	// EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.valignq(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignq_xmm_xmm_m_u() {
	// EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.valignq(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignq_ymm_ymm_m_u() {
	// EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.valignq(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn valignq_zmm_zmm_m_u() {
	// EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.valignq(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vandnpd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vandnpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vandnpd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vandnpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vandnpd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vandnpd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vandnpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vandnpd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vandnpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vandnpd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vandnpd_zmm_zmm_zmm() {
	// EVEX_Vandnpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vandnpd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vandnpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vandnpd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vandnpd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vandnpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vandnpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vandnpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vandnpd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vandnpd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vandnpd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vandnpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vandnpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vandnpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vandnpd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vandnpd_zmm_zmm_m() {
	// EVEX_Vandnpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vandnpd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vandnpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vandnps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vandnps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vandnps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vandnps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vandnps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vandnps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vandnps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vandnps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vandnps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vandnps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vandnps_zmm_zmm_zmm() {
	// EVEX_Vandnps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vandnps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vandnps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vandnps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vandnps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vandnps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vandnps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vandnps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vandnps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vandnps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vandnps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vandnps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vandnps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vandnps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vandnps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vandnps_zmm_zmm_m() {
	// EVEX_Vandnps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vandnps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vandnps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vandpd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vandpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vandpd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vandpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vandpd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vandpd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vandpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vandpd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vandpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vandpd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vandpd_zmm_zmm_zmm() {
	// EVEX_Vandpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vandpd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vandpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vandpd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vandpd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vandpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vandpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vandpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vandpd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vandpd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vandpd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vandpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vandpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vandpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vandpd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vandpd_zmm_zmm_m() {
	// EVEX_Vandpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vandpd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vandpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vandps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vandps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vandps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vandps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vandps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vandps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vandps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vandps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vandps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vandps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vandps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vandps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vandps_zmm_zmm_zmm() {
	// EVEX_Vandps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vandps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vandps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vandps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vandps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vandps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vandps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vandps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vandps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vandps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vandps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vandps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vandps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vandps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vandps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vandps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vandps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vandps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vandps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vandps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vandps_zmm_zmm_m() {
	// EVEX_Vandps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vandps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vandps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbcstnebf162ps_xmm_m() {
	// VEX_Vbcstnebf162ps_xmm_m16
	test_instr(16, |a| a.vbcstnebf162ps(xmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vbcstnebf162ps_xmm_m16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbcstnebf162ps_ymm_m() {
	// VEX_Vbcstnebf162ps_ymm_m16
	test_instr(16, |a| a.vbcstnebf162ps(ymm2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vbcstnebf162ps_ymm_m16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbcstnesh2ps_xmm_m() {
	// VEX_Vbcstnesh2ps_xmm_m16
	test_instr(16, |a| a.vbcstnesh2ps(xmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vbcstnesh2ps_xmm_m16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbcstnesh2ps_ymm_m() {
	// VEX_Vbcstnesh2ps_ymm_m16
	test_instr(16, |a| a.vbcstnesh2ps(ymm2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vbcstnesh2ps_ymm_m16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendmpd_xmm_xmm_xmm() {
	// EVEX_Vblendmpd_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vblendmpd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vblendmpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendmpd_ymm_ymm_ymm() {
	// EVEX_Vblendmpd_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vblendmpd(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vblendmpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendmpd_zmm_zmm_zmm() {
	// EVEX_Vblendmpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vblendmpd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vblendmpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendmpd_xmm_xmm_m() {
	// EVEX_Vblendmpd_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vblendmpd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vblendmpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendmpd_ymm_ymm_m() {
	// EVEX_Vblendmpd_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vblendmpd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vblendmpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendmpd_zmm_zmm_m() {
	// EVEX_Vblendmpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vblendmpd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vblendmpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendmps_xmm_xmm_xmm() {
	// EVEX_Vblendmps_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vblendmps(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vblendmps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendmps_ymm_ymm_ymm() {
	// EVEX_Vblendmps_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vblendmps(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vblendmps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendmps_zmm_zmm_zmm() {
	// EVEX_Vblendmps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vblendmps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vblendmps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendmps_xmm_xmm_m() {
	// EVEX_Vblendmps_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vblendmps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vblendmps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendmps_ymm_ymm_m() {
	// EVEX_Vblendmps_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vblendmps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vblendmps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendmps_zmm_zmm_m() {
	// EVEX_Vblendmps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vblendmps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vblendmps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendpd_xmm_xmm_xmm_i() {
	// VEX_Vblendpd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vblendpd(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vblendpd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vblendpd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vblendpd(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vblendpd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendpd_ymm_ymm_ymm_i() {
	// VEX_Vblendpd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vblendpd(ymm2, ymm3, ymm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vblendpd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vblendpd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vblendpd(ymm2, ymm3, ymm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vblendpd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendpd_xmm_xmm_m_i() {
	// VEX_Vblendpd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vblendpd(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vblendpd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vblendpd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vblendpd(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vblendpd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendpd_ymm_ymm_m_i() {
	// VEX_Vblendpd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vblendpd(ymm2, ymm3, ymmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vblendpd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vblendpd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vblendpd(ymm2, ymm3, ymmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vblendpd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendpd_xmm_xmm_xmm_u() {
	// VEX_Vblendpd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vblendpd(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vblendpd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendpd_ymm_ymm_ymm_u() {
	// VEX_Vblendpd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vblendpd(ymm2, ymm3, ymm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vblendpd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendpd_xmm_xmm_m_u() {
	// VEX_Vblendpd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vblendpd(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vblendpd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendpd_ymm_ymm_m_u() {
	// VEX_Vblendpd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vblendpd(ymm2, ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vblendpd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendps_xmm_xmm_xmm_i() {
	// VEX_Vblendps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vblendps(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vblendps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vblendps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vblendps(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vblendps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendps_ymm_ymm_ymm_i() {
	// VEX_Vblendps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vblendps(ymm2, ymm3, ymm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vblendps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vblendps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vblendps(ymm2, ymm3, ymm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vblendps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendps_xmm_xmm_m_i() {
	// VEX_Vblendps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vblendps(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vblendps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vblendps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vblendps(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vblendps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendps_ymm_ymm_m_i() {
	// VEX_Vblendps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vblendps(ymm2, ymm3, ymmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vblendps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vblendps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vblendps(ymm2, ymm3, ymmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vblendps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendps_xmm_xmm_xmm_u() {
	// VEX_Vblendps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vblendps(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vblendps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendps_ymm_ymm_ymm_u() {
	// VEX_Vblendps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vblendps(ymm2, ymm3, ymm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vblendps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendps_xmm_xmm_m_u() {
	// VEX_Vblendps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vblendps(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vblendps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendps_ymm_ymm_m_u() {
	// VEX_Vblendps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vblendps(ymm2, ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vblendps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendvpd_xmm_xmm_xmm_xmm() {
	// VEX_Vblendvpd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vblendvpd(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vblendvpd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendvpd_xmm_xmm_m_xmm() {
	// VEX_Vblendvpd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vblendvpd(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vblendvpd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendvpd_ymm_ymm_ymm_ymm() {
	// VEX_Vblendvpd_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vblendvpd(ymm2, ymm3, ymm4, ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vblendvpd_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendvpd_ymm_ymm_m_ymm() {
	// VEX_Vblendvpd_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vblendvpd(ymm2, ymm3, ymmword_ptr(si), ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vblendvpd_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendvps_xmm_xmm_xmm_xmm() {
	// VEX_Vblendvps_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vblendvps(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vblendvps_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendvps_xmm_xmm_m_xmm() {
	// VEX_Vblendvps_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vblendvps(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vblendvps_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendvps_ymm_ymm_ymm_ymm() {
	// VEX_Vblendvps_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vblendvps(ymm2, ymm3, ymm4, ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vblendvps_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vblendvps_ymm_ymm_m_ymm() {
	// VEX_Vblendvps_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vblendvps(ymm2, ymm3, ymmword_ptr(si), ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vblendvps_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcastf128_ymm_m() {
	// VEX_Vbroadcastf128_ymm_m128
	test_instr(16, |a| a.vbroadcastf128(ymm2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vbroadcastf128_ymm_m128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcastf32x2_ymm_xmm() {
	// EVEX_Vbroadcastf32x2_ymm_k1z_xmmm64
	test_instr(16, |a| a.vbroadcastf32x2(ymm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastf32x2_ymm_k1z_xmmm64, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcastf32x2_zmm_xmm() {
	// EVEX_Vbroadcastf32x2_zmm_k1z_xmmm64
	test_instr(16, |a| a.vbroadcastf32x2(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastf32x2_zmm_k1z_xmmm64, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcastf32x2_ymm_m() {
	// EVEX_Vbroadcastf32x2_ymm_k1z_xmmm64
	test_instr(16, |a| a.vbroadcastf32x2(ymm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastf32x2_ymm_k1z_xmmm64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcastf32x2_zmm_m() {
	// EVEX_Vbroadcastf32x2_zmm_k1z_xmmm64
	test_instr(16, |a| a.vbroadcastf32x2(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastf32x2_zmm_k1z_xmmm64, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcastf32x4_ymm_m() {
	// EVEX_Vbroadcastf32x4_ymm_k1z_m128
	test_instr(16, |a| a.vbroadcastf32x4(ymm2.k1(), ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastf32x4_ymm_k1z_m128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcastf32x4_zmm_m() {
	// EVEX_Vbroadcastf32x4_zmm_k1z_m128
	test_instr(16, |a| a.vbroadcastf32x4(zmm2.k1(), ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastf32x4_zmm_k1z_m128, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcastf32x8_zmm_m() {
	// EVEX_Vbroadcastf32x8_zmm_k1z_m256
	test_instr(16, |a| a.vbroadcastf32x8(zmm2.k1(), ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastf32x8_zmm_k1z_m256, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcastf64x2_ymm_m() {
	// EVEX_Vbroadcastf64x2_ymm_k1z_m128
	test_instr(16, |a| a.vbroadcastf64x2(ymm2.k1(), ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastf64x2_ymm_k1z_m128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcastf64x2_zmm_m() {
	// EVEX_Vbroadcastf64x2_zmm_k1z_m128
	test_instr(16, |a| a.vbroadcastf64x2(zmm2.k1(), ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastf64x2_zmm_k1z_m128, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcastf64x4_zmm_m() {
	// EVEX_Vbroadcastf64x4_zmm_k1z_m256
	test_instr(16, |a| a.vbroadcastf64x4(zmm2.k1(), ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastf64x4_zmm_k1z_m256, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcasti128_ymm_m() {
	// VEX_Vbroadcasti128_ymm_m128
	test_instr(16, |a| a.vbroadcasti128(ymm2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vbroadcasti128_ymm_m128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcasti32x2_xmm_xmm() {
	// EVEX_Vbroadcasti32x2_xmm_k1z_xmmm64
	test_instr(16, |a| a.vbroadcasti32x2(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcasti32x2_xmm_k1z_xmmm64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcasti32x2_ymm_xmm() {
	// EVEX_Vbroadcasti32x2_ymm_k1z_xmmm64
	test_instr(16, |a| a.vbroadcasti32x2(ymm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcasti32x2_ymm_k1z_xmmm64, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcasti32x2_zmm_xmm() {
	// EVEX_Vbroadcasti32x2_zmm_k1z_xmmm64
	test_instr(16, |a| a.vbroadcasti32x2(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcasti32x2_zmm_k1z_xmmm64, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcasti32x2_xmm_m() {
	// EVEX_Vbroadcasti32x2_xmm_k1z_xmmm64
	test_instr(16, |a| a.vbroadcasti32x2(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcasti32x2_xmm_k1z_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcasti32x2_ymm_m() {
	// EVEX_Vbroadcasti32x2_ymm_k1z_xmmm64
	test_instr(16, |a| a.vbroadcasti32x2(ymm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcasti32x2_ymm_k1z_xmmm64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcasti32x2_zmm_m() {
	// EVEX_Vbroadcasti32x2_zmm_k1z_xmmm64
	test_instr(16, |a| a.vbroadcasti32x2(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcasti32x2_zmm_k1z_xmmm64, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcasti32x4_ymm_m() {
	// EVEX_Vbroadcasti32x4_ymm_k1z_m128
	test_instr(16, |a| a.vbroadcasti32x4(ymm2.k1(), ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcasti32x4_ymm_k1z_m128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcasti32x4_zmm_m() {
	// EVEX_Vbroadcasti32x4_zmm_k1z_m128
	test_instr(16, |a| a.vbroadcasti32x4(zmm2.k1(), ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcasti32x4_zmm_k1z_m128, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcasti32x8_zmm_m() {
	// EVEX_Vbroadcasti32x8_zmm_k1z_m256
	test_instr(16, |a| a.vbroadcasti32x8(zmm2.k1(), ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcasti32x8_zmm_k1z_m256, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcasti64x2_ymm_m() {
	// EVEX_Vbroadcasti64x2_ymm_k1z_m128
	test_instr(16, |a| a.vbroadcasti64x2(ymm2.k1(), ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcasti64x2_ymm_k1z_m128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcasti64x2_zmm_m() {
	// EVEX_Vbroadcasti64x2_zmm_k1z_m128
	test_instr(16, |a| a.vbroadcasti64x2(zmm2.k1(), ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcasti64x2_zmm_k1z_m128, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcasti64x4_zmm_m() {
	// EVEX_Vbroadcasti64x4_zmm_k1z_m256
	test_instr(16, |a| a.vbroadcasti64x4(zmm2.k1(), ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcasti64x4_zmm_k1z_m256, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcastsd_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vbroadcastsd_ymm_xmm
		test_instr(16, |a| a.vbroadcastsd(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vbroadcastsd_ymm_xmm, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vbroadcastsd_ymm_k1z_xmmm64
		test_instr(16, |a| a.vbroadcastsd(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastsd_ymm_k1z_xmmm64, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vbroadcastsd_zmm_xmm() {
	// EVEX_Vbroadcastsd_zmm_k1z_xmmm64
	test_instr(16, |a| a.vbroadcastsd(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastsd_zmm_k1z_xmmm64, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcastsd_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vbroadcastsd_ymm_m64
		test_instr(16, |a| a.vbroadcastsd(ymm2, ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vbroadcastsd_ymm_m64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vbroadcastsd_ymm_k1z_xmmm64
		test_instr(16, |a| a.vbroadcastsd(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastsd_ymm_k1z_xmmm64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vbroadcastsd_zmm_m() {
	// EVEX_Vbroadcastsd_zmm_k1z_xmmm64
	test_instr(16, |a| a.vbroadcastsd(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastsd_zmm_k1z_xmmm64, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcastss_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vbroadcastss_xmm_xmm
		test_instr(16, |a| a.vbroadcastss(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vbroadcastss_xmm_xmm, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vbroadcastss_xmm_k1z_xmmm32
		test_instr(16, |a| a.vbroadcastss(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastss_xmm_k1z_xmmm32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vbroadcastss_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vbroadcastss_ymm_xmm
		test_instr(16, |a| a.vbroadcastss(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vbroadcastss_ymm_xmm, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vbroadcastss_ymm_k1z_xmmm32
		test_instr(16, |a| a.vbroadcastss(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastss_ymm_k1z_xmmm32, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vbroadcastss_zmm_xmm() {
	// EVEX_Vbroadcastss_zmm_k1z_xmmm32
	test_instr(16, |a| a.vbroadcastss(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastss_zmm_k1z_xmmm32, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vbroadcastss_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vbroadcastss_xmm_m32
		test_instr(16, |a| a.vbroadcastss(xmm2, ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vbroadcastss_xmm_m32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vbroadcastss_xmm_k1z_xmmm32
		test_instr(16, |a| a.vbroadcastss(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastss_xmm_k1z_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vbroadcastss_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vbroadcastss_ymm_m32
		test_instr(16, |a| a.vbroadcastss(ymm2, ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vbroadcastss_ymm_m32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vbroadcastss_ymm_k1z_xmmm32
		test_instr(16, |a| a.vbroadcastss(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastss_ymm_k1z_xmmm32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vbroadcastss_zmm_m() {
	// EVEX_Vbroadcastss_zmm_k1z_xmmm32
	test_instr(16, |a| a.vbroadcastss(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vbroadcastss_zmm_k1z_xmmm32, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ospd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpeq_ospd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ospd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpeq_ospd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ospd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpeq_ospd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ospd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpeq_ospd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ospd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpeq_ospd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ospd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpeq_ospd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ospd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpeq_ospd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ospd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpeq_ospd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ospd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpeq_ospd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ospd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpeq_ospd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpeq_osph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpeq_osph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpeq_osph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpeq_osph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpeq_osph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpeq_osph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpeq_osps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpeq_osps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpeq_osps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpeq_osps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpeq_osps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpeq_osps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpeq_osps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpeq_osps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpeq_osps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpeq_osps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ossd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpeq_ossd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ossd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpeq_ossd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ossd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpeq_ossd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ossd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpeq_ossd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ossh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpeq_ossh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ossh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpeq_ossh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpeq_osss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpeq_osss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpeq_osss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_osss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpeq_osss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpeq_uqpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpeq_uqpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 8i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpeq_uqpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpeq_uqpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 8i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpeq_uqpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpeq_uqpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpeq_uqpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpeq_uqpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpeq_uqpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpeq_uqpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpeq_uqph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpeq_uqph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpeq_uqph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpeq_uqph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpeq_uqph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpeq_uqph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpeq_uqps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpeq_uqps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 8i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpeq_uqps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpeq_uqps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 8i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpeq_uqps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpeq_uqps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpeq_uqps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpeq_uqps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpeq_uqps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpeq_uqps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpeq_uqsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpeq_uqsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 8i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpeq_uqsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpeq_uqsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpeq_uqsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpeq_uqsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpeq_uqss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpeq_uqss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 8i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpeq_uqss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uqss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpeq_uqss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 8i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uspd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpeq_uspd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uspd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpeq_uspd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x18i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uspd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpeq_uspd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uspd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpeq_uspd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x18i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uspd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpeq_uspd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uspd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpeq_uspd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uspd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpeq_uspd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uspd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpeq_uspd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uspd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpeq_uspd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_uspd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpeq_uspd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpeq_usph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpeq_usph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpeq_usph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpeq_usph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpeq_usph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpeq_usph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpeq_usps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpeq_usps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x18i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpeq_usps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpeq_usps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x18i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpeq_usps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpeq_usps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpeq_usps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpeq_usps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpeq_usps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpeq_usps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ussd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpeq_ussd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ussd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpeq_ussd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x18i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ussd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpeq_ussd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ussd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpeq_ussd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ussh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpeq_ussh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_ussh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpeq_ussh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpeq_usss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpeq_usss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x18i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpeq_usss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeq_usss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpeq_usss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x18i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpeqpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpeqpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpeqpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpeqpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpeqpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpeqpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpeqpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpeqpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpeqpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpeqpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpeqph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpeqph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpeqph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpeqph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpeqph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpeqph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpeqps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpeqps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpeqps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpeqps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpeqps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpeqps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpeqps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpeqps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpeqps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpeqps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpeqsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpeqsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpeqsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpeqsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpeqsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpeqsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpeqss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpeqss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpeqss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpeqss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpeqss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_ospd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpfalse_ospd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_ospd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpfalse_ospd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Bi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_ospd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpfalse_ospd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_ospd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpfalse_ospd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x1Bi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_ospd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpfalse_ospd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_ospd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpfalse_ospd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_ospd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpfalse_ospd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_ospd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpfalse_ospd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_ospd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpfalse_ospd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_ospd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpfalse_ospd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpfalse_osph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpfalse_osph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpfalse_osph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpfalse_osph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpfalse_osph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpfalse_osph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpfalse_osps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpfalse_osps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Bi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpfalse_osps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpfalse_osps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x1Bi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpfalse_osps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpfalse_osps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpfalse_osps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpfalse_osps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpfalse_osps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpfalse_osps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_ossd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpfalse_ossd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_ossd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpfalse_ossd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Bi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_ossd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpfalse_ossd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_ossd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpfalse_ossd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_ossh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpfalse_ossh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_ossh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpfalse_ossh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpfalse_osss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpfalse_osss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Bi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpfalse_osss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalse_osss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpfalse_osss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Bi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsepd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpfalsepd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsepd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpfalsepd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xBi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsepd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpfalsepd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsepd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpfalsepd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0xBi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsepd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpfalsepd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsepd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpfalsepd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsepd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpfalsepd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsepd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpfalsepd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsepd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpfalsepd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsepd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpfalsepd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalseph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpfalseph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalseph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpfalseph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalseph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpfalseph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalseph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpfalseph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalseph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpfalseph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalseph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpfalseph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalseps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpfalseps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalseps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpfalseps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xBi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalseps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpfalseps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalseps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpfalseps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0xBi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalseps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpfalseps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalseps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpfalseps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalseps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpfalseps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalseps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpfalseps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalseps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpfalseps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalseps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpfalseps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsesd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpfalsesd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsesd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpfalsesd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xBi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsesd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpfalsesd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsesd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpfalsesd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsesh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpfalsesh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsesh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpfalsesh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsess_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpfalsess(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsess_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpfalsess(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xBi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsess_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpfalsess(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpfalsess_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpfalsess(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xBi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpge_oqpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpge_oqpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Di32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpge_oqpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpge_oqpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x1Di32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpge_oqpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpge_oqpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpge_oqpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpge_oqpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpge_oqpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpge_oqpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpge_oqph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpge_oqph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpge_oqph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpge_oqph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpge_oqph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpge_oqph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpge_oqps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpge_oqps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Di32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpge_oqps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpge_oqps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x1Di32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpge_oqps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpge_oqps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpge_oqps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpge_oqps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpge_oqps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpge_oqps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpge_oqsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpge_oqsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Di32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpge_oqsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpge_oqsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpge_oqsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpge_oqsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpge_oqss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpge_oqss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Di32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpge_oqss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpge_oqss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpge_oqss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Di32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgepd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpgepd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgepd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpgepd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xDi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgepd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpgepd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgepd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpgepd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0xDi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgepd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpgepd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgepd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpgepd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgepd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpgepd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgepd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpgepd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgepd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpgepd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgepd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpgepd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgeph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpgeph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgeph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpgeph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgeph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpgeph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgeph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpgeph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgeph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpgeph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgeph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpgeph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgeps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpgeps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgeps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpgeps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xDi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgeps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpgeps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgeps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpgeps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0xDi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgeps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpgeps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgeps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpgeps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgeps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpgeps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgeps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpgeps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgeps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpgeps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgeps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpgeps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgesd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpgesd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgesd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpgesd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xDi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgesd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpgesd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgesd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpgesd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgesh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpgesh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgesh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpgesh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgess_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpgess(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgess_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpgess(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xDi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgess_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpgess(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgess_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpgess(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xDi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpgt_oqpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpgt_oqpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Ei32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpgt_oqpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpgt_oqpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x1Ei32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpgt_oqpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpgt_oqpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpgt_oqpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpgt_oqpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpgt_oqpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpgt_oqpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpgt_oqph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpgt_oqph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpgt_oqph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpgt_oqph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpgt_oqph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpgt_oqph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpgt_oqps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpgt_oqps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Ei32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpgt_oqps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpgt_oqps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x1Ei32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpgt_oqps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpgt_oqps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpgt_oqps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpgt_oqps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpgt_oqps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpgt_oqps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpgt_oqsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpgt_oqsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Ei32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpgt_oqsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpgt_oqsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpgt_oqsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpgt_oqsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpgt_oqss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpgt_oqss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Ei32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpgt_oqss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgt_oqss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpgt_oqss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ei32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpgtpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpgtpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xEi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpgtpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpgtpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0xEi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpgtpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpgtpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpgtpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpgtpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpgtpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpgtpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpgtph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpgtph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpgtph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpgtph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpgtph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpgtph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpgtps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpgtps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xEi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpgtps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpgtps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0xEi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpgtps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpgtps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpgtps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpgtps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpgtps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpgtps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpgtsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpgtsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xEi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpgtsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpgtsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpgtsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpgtsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpgtss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpgtss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xEi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpgtss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpgtss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpgtss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xEi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmple_oqpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmple_oqpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x12i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmple_oqpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmple_oqpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x12i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmple_oqpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmple_oqpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmple_oqpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmple_oqpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmple_oqpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmple_oqpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmple_oqph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmple_oqph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmple_oqph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmple_oqph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmple_oqph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmple_oqph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmple_oqps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmple_oqps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x12i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmple_oqps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmple_oqps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x12i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmple_oqps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmple_oqps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmple_oqps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmple_oqps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmple_oqps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmple_oqps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmple_oqsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmple_oqsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x12i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmple_oqsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmple_oqsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmple_oqsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmple_oqsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmple_oqss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmple_oqss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x12i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmple_oqss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmple_oqss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmple_oqss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x12i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplepd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmplepd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplepd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmplepd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplepd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmplepd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplepd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmplepd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplepd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmplepd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplepd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmplepd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplepd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmplepd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplepd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmplepd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplepd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmplepd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplepd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmplepd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpleph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpleph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpleph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpleph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpleph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpleph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpleph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpleph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpleph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpleph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpleph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpleph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpleps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpleps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpleps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpleps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpleps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpleps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpleps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpleps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpleps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpleps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpleps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpleps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpleps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpleps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpleps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpleps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpleps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpleps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpleps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpleps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplesd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmplesd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplesd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmplesd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplesd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmplesd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplesd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmplesd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplesh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmplesh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplesh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmplesh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpless_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpless(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpless_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpless(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpless_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpless(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpless_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpless(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmplt_oqpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmplt_oqpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmplt_oqpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmplt_oqpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmplt_oqpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmplt_oqpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmplt_oqpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmplt_oqpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmplt_oqpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmplt_oqpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmplt_oqph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmplt_oqph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmplt_oqph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmplt_oqph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmplt_oqph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmplt_oqph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmplt_oqps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmplt_oqps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmplt_oqps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmplt_oqps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmplt_oqps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmplt_oqps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmplt_oqps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmplt_oqps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmplt_oqps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmplt_oqps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmplt_oqsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmplt_oqsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmplt_oqsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmplt_oqsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmplt_oqsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmplt_oqsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmplt_oqss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmplt_oqss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmplt_oqss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmplt_oqss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmplt_oqss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpltpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpltpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpltpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpltpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpltpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpltpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpltpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpltpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpltpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpltpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpltph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpltph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpltph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpltph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpltph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpltph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpltps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpltps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpltps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpltps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpltps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpltps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpltps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpltps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpltps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpltps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpltsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpltsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpltsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpltsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpltsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpltsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpltss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpltss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpltss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpltss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpltss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpneq_oqpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpneq_oqpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xCi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpneq_oqpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpneq_oqpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0xCi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpneq_oqpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpneq_oqpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpneq_oqpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpneq_oqpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpneq_oqpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpneq_oqpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpneq_oqph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpneq_oqph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpneq_oqph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpneq_oqph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpneq_oqph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpneq_oqph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpneq_oqps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpneq_oqps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xCi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpneq_oqps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpneq_oqps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0xCi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpneq_oqps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpneq_oqps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpneq_oqps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpneq_oqps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpneq_oqps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpneq_oqps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpneq_oqsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpneq_oqsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xCi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpneq_oqsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpneq_oqsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpneq_oqsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpneq_oqsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpneq_oqss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpneq_oqss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xCi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpneq_oqss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_oqss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpneq_oqss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xCi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ospd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpneq_ospd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ospd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpneq_ospd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Ci32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ospd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpneq_ospd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ospd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpneq_ospd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x1Ci32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ospd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpneq_ospd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ospd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpneq_ospd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ospd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpneq_ospd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ospd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpneq_ospd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ospd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpneq_ospd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ospd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpneq_ospd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpneq_osph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpneq_osph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpneq_osph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpneq_osph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpneq_osph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpneq_osph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpneq_osps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpneq_osps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Ci32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpneq_osps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpneq_osps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x1Ci32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpneq_osps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpneq_osps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpneq_osps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpneq_osps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpneq_osps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpneq_osps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ossd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpneq_ossd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ossd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpneq_ossd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Ci32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ossd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpneq_ossd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ossd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpneq_ossd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ossh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpneq_ossh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ossh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpneq_ossh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpneq_osss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpneq_osss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Ci32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpneq_osss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_osss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpneq_osss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ci32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_uspd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpneq_uspd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_uspd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpneq_uspd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x14i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_uspd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpneq_uspd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_uspd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpneq_uspd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x14i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_uspd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpneq_uspd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_uspd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpneq_uspd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_uspd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpneq_uspd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_uspd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpneq_uspd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_uspd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpneq_uspd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_uspd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpneq_uspd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpneq_usph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpneq_usph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpneq_usph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpneq_usph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpneq_usph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpneq_usph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpneq_usps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpneq_usps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x14i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpneq_usps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpneq_usps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x14i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpneq_usps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpneq_usps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpneq_usps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpneq_usps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpneq_usps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpneq_usps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ussd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpneq_ussd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ussd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpneq_ussd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x14i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ussd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpneq_ussd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ussd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpneq_ussd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ussh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpneq_ussh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_ussh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpneq_ussh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpneq_usss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpneq_usss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x14i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpneq_usss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneq_usss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpneq_usss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x14i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpneqpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpneqpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpneqpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpneqpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpneqpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpneqpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpneqpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpneqpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpneqpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpneqpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpneqph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpneqph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpneqph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpneqph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpneqph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpneqph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpneqps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpneqps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpneqps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpneqps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpneqps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpneqps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpneqps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpneqps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpneqps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpneqps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpneqsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpneqsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpneqsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpneqsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpneqsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpneqsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpneqss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpneqss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpneqss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpneqss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpneqss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpnge_uqpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnge_uqpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x19i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpnge_uqpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnge_uqpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x19i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpnge_uqpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpnge_uqpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnge_uqpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpnge_uqpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnge_uqpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpnge_uqpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpnge_uqph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpnge_uqph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpnge_uqph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpnge_uqph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpnge_uqph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpnge_uqph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpnge_uqps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnge_uqps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x19i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpnge_uqps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnge_uqps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x19i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpnge_uqps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpnge_uqps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnge_uqps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpnge_uqps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnge_uqps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpnge_uqps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpnge_uqsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpnge_uqsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x19i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpnge_uqsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpnge_uqsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpnge_uqsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpnge_uqsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpnge_uqss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpnge_uqss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x19i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpnge_uqss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnge_uqss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpnge_uqss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x19i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngepd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpngepd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngepd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpngepd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 9i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngepd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpngepd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngepd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpngepd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 9i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngepd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpngepd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngepd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpngepd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngepd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpngepd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngepd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpngepd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngepd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpngepd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngepd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpngepd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngeph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpngeph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngeph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpngeph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngeph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpngeph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngeph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpngeph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngeph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpngeph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngeph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpngeph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngeps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpngeps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngeps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpngeps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 9i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngeps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpngeps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngeps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpngeps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 9i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngeps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpngeps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngeps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpngeps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngeps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpngeps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngeps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpngeps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngeps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpngeps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngeps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpngeps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngesd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpngesd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngesd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpngesd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 9i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngesd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpngesd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngesd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpngesd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngesh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpngesh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngesh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpngesh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngess_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpngess(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngess_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpngess(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 9i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngess_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpngess(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngess_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpngess(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 9i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpngt_uqpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpngt_uqpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Ai32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpngt_uqpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpngt_uqpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x1Ai32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpngt_uqpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpngt_uqpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpngt_uqpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpngt_uqpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpngt_uqpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpngt_uqpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpngt_uqph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpngt_uqph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpngt_uqph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpngt_uqph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpngt_uqph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpngt_uqph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpngt_uqps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpngt_uqps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Ai32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpngt_uqps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpngt_uqps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x1Ai32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpngt_uqps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpngt_uqps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpngt_uqps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpngt_uqps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpngt_uqps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpngt_uqps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpngt_uqsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpngt_uqsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Ai32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpngt_uqsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpngt_uqsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpngt_uqsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpngt_uqsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpngt_uqss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpngt_uqss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Ai32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpngt_uqss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngt_uqss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpngt_uqss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Ai32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpngtpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpngtpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xAi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpngtpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpngtpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0xAi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpngtpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpngtpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpngtpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpngtpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpngtpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpngtpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpngtph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpngtph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpngtph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpngtph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpngtph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpngtph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpngtps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpngtps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xAi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpngtps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpngtps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0xAi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpngtps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpngtps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpngtps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpngtps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpngtps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpngtps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpngtsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpngtsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xAi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpngtsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpngtsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpngtsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpngtsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpngtss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpngtss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xAi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpngtss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpngtss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpngtss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xAi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpnle_uqpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnle_uqpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x16i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpnle_uqpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnle_uqpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x16i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpnle_uqpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpnle_uqpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnle_uqpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpnle_uqpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnle_uqpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpnle_uqpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpnle_uqph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpnle_uqph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpnle_uqph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpnle_uqph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpnle_uqph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpnle_uqph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpnle_uqps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnle_uqps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x16i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpnle_uqps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnle_uqps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x16i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpnle_uqps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpnle_uqps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnle_uqps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpnle_uqps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnle_uqps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpnle_uqps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpnle_uqsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpnle_uqsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x16i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpnle_uqsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpnle_uqsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpnle_uqsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpnle_uqsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpnle_uqss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpnle_uqss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x16i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpnle_uqss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnle_uqss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpnle_uqss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x16i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlepd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpnlepd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlepd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnlepd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlepd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpnlepd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlepd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnlepd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlepd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpnlepd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlepd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpnlepd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlepd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnlepd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlepd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpnlepd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlepd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnlepd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlepd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpnlepd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnleph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpnleph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnleph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpnleph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnleph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpnleph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnleph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpnleph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnleph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpnleph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnleph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpnleph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnleps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpnleps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnleps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnleps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnleps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpnleps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnleps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnleps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnleps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpnleps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnleps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpnleps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnleps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnleps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnleps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpnleps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnleps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnleps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnleps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpnleps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlesd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpnlesd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlesd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpnlesd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlesd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpnlesd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlesd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpnlesd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlesh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpnlesh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlesh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpnlesh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnless_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpnless(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnless_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpnless(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnless_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpnless(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnless_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpnless(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpnlt_uqpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnlt_uqpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x15i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpnlt_uqpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnlt_uqpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x15i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpnlt_uqpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpnlt_uqpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnlt_uqpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpnlt_uqpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnlt_uqpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpnlt_uqpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpnlt_uqph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpnlt_uqph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpnlt_uqph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpnlt_uqph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpnlt_uqph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpnlt_uqph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpnlt_uqps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnlt_uqps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x15i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpnlt_uqps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnlt_uqps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x15i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpnlt_uqps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpnlt_uqps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnlt_uqps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpnlt_uqps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnlt_uqps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpnlt_uqps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpnlt_uqsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpnlt_uqsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x15i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpnlt_uqsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpnlt_uqsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpnlt_uqsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpnlt_uqsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpnlt_uqss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpnlt_uqss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x15i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpnlt_uqss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnlt_uqss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpnlt_uqss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x15i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpnltpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnltpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpnltpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnltpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpnltpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpnltpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnltpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpnltpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnltpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpnltpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpnltph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpnltph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpnltph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpnltph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpnltph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpnltph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpnltps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnltps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpnltps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnltps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpnltps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpnltps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpnltps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpnltps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpnltps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpnltps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpnltsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpnltsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpnltsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpnltsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpnltsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpnltsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpnltss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpnltss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpnltss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpnltss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpnltss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_spd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpord_spd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_spd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpord_spd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x17i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_spd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpord_spd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_spd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpord_spd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x17i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_spd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpord_spd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_spd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpord_spd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_spd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpord_spd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_spd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpord_spd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_spd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpord_spd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_spd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpord_spd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpord_sph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpord_sph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpord_sph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpord_sph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpord_sph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpord_sph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpord_sps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpord_sps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x17i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpord_sps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpord_sps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x17i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpord_sps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpord_sps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpord_sps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpord_sps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpord_sps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpord_sps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_ssd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpord_ssd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_ssd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpord_ssd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x17i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_ssd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpord_ssd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_ssd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpord_ssd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_ssh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpord_ssh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_ssh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpord_ssh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpord_sss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpord_sss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x17i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpord_sss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpord_sss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpord_sss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x17i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpordpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpordpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpordpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpordpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpordpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpordpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpordpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpordpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpordpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpordpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpordph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpordph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpordph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpordph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpordph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpordph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpordps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpordps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpordps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpordps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpordps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpordps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpordps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpordps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpordps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpordps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpordsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpordsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpordsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpordsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpordsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpordsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpordss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpordss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpordss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpordss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpordss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_kr_xmm_xmm_i() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmppd(k2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmppd(k2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_xmm_xmm_xmm_i() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmppd(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmppd(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_kr_ymm_ymm_i() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmppd(k2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmppd(k2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_ymm_ymm_ymm_i() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmppd(ymm2, ymm3, ymm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmppd(ymm2, ymm3, ymm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_kr_zmm_zmm_i() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmppd(k2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmppd(k2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_kr_xmm_m_i() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmppd(k2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmppd(k2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_xmm_xmm_m_i() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmppd(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmppd(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_kr_ymm_m_i() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmppd(k2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmppd(k2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_ymm_ymm_m_i() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmppd(ymm2, ymm3, ymmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmppd(ymm2, ymm3, ymmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_kr_zmm_m_i() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmppd(k2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmppd(k2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_kr_xmm_xmm_u() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmppd(k2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_xmm_xmm_xmm_u() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmppd(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_kr_ymm_ymm_u() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmppd(k2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_ymm_ymm_ymm_u() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmppd(ymm2, ymm3, ymm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_kr_zmm_zmm_u() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmppd(k2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_kr_xmm_m_u() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmppd(k2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_xmm_xmm_m_u() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmppd(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_kr_ymm_m_u() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmppd(k2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_ymm_ymm_m_u() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmppd(ymm2, ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmppd_kr_zmm_m_u() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmppd(k2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpph_kr_xmm_xmm_i() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpph(k2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpph(k2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpph_kr_ymm_ymm_i() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpph(k2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpph(k2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpph_kr_zmm_zmm_i() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpph(k2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpph(k2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpph_kr_xmm_m_i() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpph(k2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpph(k2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpph_kr_ymm_m_i() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpph(k2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpph(k2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpph_kr_zmm_m_i() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpph(k2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpph(k2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpph_kr_xmm_xmm_u() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpph(k2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpph_kr_ymm_ymm_u() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpph(k2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpph_kr_zmm_zmm_u() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpph(k2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpph_kr_xmm_m_u() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpph(k2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpph_kr_ymm_m_u() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpph(k2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpph_kr_zmm_m_u() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpph(k2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_kr_xmm_xmm_i() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpps(k2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpps(k2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_xmm_xmm_xmm_i() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpps(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpps(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_kr_ymm_ymm_i() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpps(k2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpps(k2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_ymm_ymm_ymm_i() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpps(ymm2, ymm3, ymm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpps(ymm2, ymm3, ymm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_kr_zmm_zmm_i() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpps(k2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpps(k2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_kr_xmm_m_i() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpps(k2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpps(k2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_xmm_xmm_m_i() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpps(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpps(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_kr_ymm_m_i() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpps(k2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpps(k2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_ymm_ymm_m_i() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpps(ymm2, ymm3, ymmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpps(ymm2, ymm3, ymmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_kr_zmm_m_i() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpps(k2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpps(k2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_kr_xmm_xmm_u() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpps(k2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_xmm_xmm_xmm_u() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpps(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_kr_ymm_ymm_u() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpps(k2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_ymm_ymm_ymm_u() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpps(ymm2, ymm3, ymm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_kr_zmm_zmm_u() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpps(k2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_kr_xmm_m_u() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpps(k2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_xmm_xmm_m_u() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpps(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_kr_ymm_m_u() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpps(k2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_ymm_ymm_m_u() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpps(ymm2, ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpps_kr_zmm_m_u() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpps(k2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpsd_kr_xmm_xmm_i() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpsd(k2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpsd(k2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpsd_xmm_xmm_xmm_i() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpsd(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpsd(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpsd_kr_xmm_m_i() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpsd(k2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpsd(k2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpsd_xmm_xmm_m_i() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpsd(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpsd(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpsd_kr_xmm_xmm_u() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpsd(k2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpsd_xmm_xmm_xmm_u() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpsd(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpsd_kr_xmm_m_u() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpsd(k2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpsd_xmm_xmm_m_u() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpsd(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpsh_kr_xmm_xmm_i() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpsh(k2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpsh(k2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpsh_kr_xmm_m_i() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpsh(k2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpsh(k2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpsh_kr_xmm_xmm_u() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpsh(k2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpsh_kr_xmm_m_u() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpsh(k2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpss_kr_xmm_xmm_i() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpss(k2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpss(k2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpss_xmm_xmm_xmm_i() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpss(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpss(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpss_kr_xmm_m_i() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpss(k2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpss(k2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpss_xmm_xmm_m_i() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpss(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpss(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpss_kr_xmm_xmm_u() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpss(k2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpss_xmm_xmm_xmm_u() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpss(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpss_kr_xmm_m_u() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpss(k2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpss_xmm_xmm_m_u() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpss(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_uspd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmptrue_uspd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_uspd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmptrue_uspd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Fi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_uspd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmptrue_uspd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_uspd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmptrue_uspd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x1Fi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_uspd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmptrue_uspd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_uspd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmptrue_uspd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_uspd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmptrue_uspd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_uspd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmptrue_uspd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_uspd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmptrue_uspd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_uspd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmptrue_uspd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmptrue_usph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmptrue_usph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmptrue_usph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmptrue_usph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmptrue_usph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmptrue_usph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmptrue_usps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmptrue_usps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Fi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmptrue_usps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmptrue_usps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x1Fi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmptrue_usps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmptrue_usps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmptrue_usps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmptrue_usps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmptrue_usps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmptrue_usps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_ussd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmptrue_ussd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_ussd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmptrue_ussd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Fi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_ussd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmptrue_ussd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_ussd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmptrue_ussd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_ussh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmptrue_ussh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_ussh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmptrue_ussh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmptrue_usss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmptrue_usss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x1Fi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmptrue_usss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrue_usss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmptrue_usss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x1Fi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruepd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmptruepd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruepd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmptruepd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruepd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmptruepd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruepd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmptruepd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0xFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruepd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmptruepd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruepd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmptruepd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruepd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmptruepd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruepd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmptruepd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruepd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmptruepd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruepd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmptruepd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrueph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmptrueph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrueph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmptrueph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrueph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmptrueph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrueph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmptrueph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrueph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmptrueph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrueph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmptrueph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrueps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmptrueps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrueps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmptrueps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrueps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmptrueps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrueps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmptrueps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0xFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrueps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmptrueps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrueps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmptrueps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrueps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmptrueps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrueps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmptrueps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrueps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmptrueps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptrueps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmptrueps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruesd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmptruesd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruesd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmptruesd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruesd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmptruesd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruesd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmptruesd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruesh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmptruesh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruesh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmptruesh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruess_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmptruess(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruess_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmptruess(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0xFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruess_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmptruess(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmptruess_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmptruess(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFi32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_spd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpunord_spd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_spd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpunord_spd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x13i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_spd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpunord_spd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_spd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpunord_spd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x13i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_spd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpunord_spd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_spd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpunord_spd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_spd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpunord_spd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_spd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpunord_spd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_spd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpunord_spd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_spd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpunord_spd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpunord_sph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpunord_sph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpunord_sph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpunord_sph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpunord_sph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpunord_sph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpunord_sps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpunord_sps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x13i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpunord_sps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpunord_sps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x13i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpunord_sps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpunord_sps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpunord_sps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpunord_sps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpunord_sps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpunord_sps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_ssd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpunord_ssd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_ssd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpunord_ssd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x13i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_ssd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpunord_ssd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_ssd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpunord_ssd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_ssh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpunord_ssh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_ssh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpunord_ssh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpunord_sss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpunord_sss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x13i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpunord_sss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunord_sss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpunord_sss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x13i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordpd_kr_xmm_xmm() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpunordpd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordpd_xmm_xmm_xmm() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpunordpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordpd_kr_ymm_ymm() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpunordpd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordpd_ymm_ymm_ymm() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpunordpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordpd_kr_zmm_zmm() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpunordpd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordpd_kr_xmm_m() {
	// EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vcmpunordpd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordpd_xmm_xmm_m() {
	// VEX_Vcmppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpunordpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordpd_kr_ymm_m() {
	// EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vcmpunordpd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordpd_ymm_ymm_m() {
	// VEX_Vcmppd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpunordpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordpd_kr_zmm_m() {
	// EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vcmpunordpd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordph_kr_xmm_xmm() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpunordph(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, Register::XMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordph_kr_ymm_ymm() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpunordph(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, Register::YMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordph_kr_zmm_zmm() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpunordph(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordph_kr_xmm_m() {
	// EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8
	test_instr(16, |a| a.vcmpunordph(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordph_kr_ymm_m() {
	// EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8
	test_instr(16, |a| a.vcmpunordph(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordph_kr_zmm_m() {
	// EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vcmpunordph(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordps_kr_xmm_xmm() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpunordps(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordps_xmm_xmm_xmm() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpunordps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordps_kr_ymm_ymm() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpunordps(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordps_ymm_ymm_ymm() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpunordps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordps_kr_zmm_zmm() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpunordps(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, Register::ZMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordps_kr_xmm_m() {
	// EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vcmpunordps(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordps_xmm_xmm_m() {
	// VEX_Vcmpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vcmpunordps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordps_kr_ymm_m() {
	// EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vcmpunordps(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordps_ymm_ymm_m() {
	// VEX_Vcmpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vcmpunordps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordps_kr_zmm_m() {
	// EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vcmpunordps(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordsd_kr_xmm_xmm() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpunordsd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordsd_xmm_xmm_xmm() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpunordsd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordsd_kr_xmm_m() {
	// EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vcmpunordsd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordsd_xmm_xmm_m() {
	// VEX_Vcmpsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vcmpunordsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordsh_kr_xmm_xmm() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpunordsh(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordsh_kr_xmm_m() {
	// EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vcmpunordsh(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordss_kr_xmm_xmm() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpunordss(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, Register::XMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordss_xmm_xmm_xmm() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpunordss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordss_kr_xmm_m() {
	// EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vcmpunordss(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcmpunordss_xmm_xmm_m() {
	// VEX_Vcmpss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vcmpunordss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcomisd_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcomisd_xmm_xmmm64
		test_instr(16, |a| a.vcomisd(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcomisd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcomisd_xmm_xmmm64_sae
		test_instr(16, |a| a.vcomisd(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vcomisd_xmm_xmmm64_sae, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcomisd_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcomisd_xmm_xmmm64
		test_instr(16, |a| a.vcomisd(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcomisd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcomisd_xmm_xmmm64_sae
		test_instr(16, |a| a.vcomisd(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::EVEX_Vcomisd_xmm_xmmm64_sae, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcomish_xmm_xmm() {
	// EVEX_Vcomish_xmm_xmmm16_sae
	test_instr(16, |a| a.vcomish(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vcomish_xmm_xmmm16_sae, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcomish_xmm_m() {
	// EVEX_Vcomish_xmm_xmmm16_sae
	test_instr(16, |a| a.vcomish(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::EVEX_Vcomish_xmm_xmmm16_sae, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcomiss_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcomiss_xmm_xmmm32
		test_instr(16, |a| a.vcomiss(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcomiss_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcomiss_xmm_xmmm32_sae
		test_instr(16, |a| a.vcomiss(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vcomiss_xmm_xmmm32_sae, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcomiss_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcomiss_xmm_xmmm32
		test_instr(16, |a| a.vcomiss(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcomiss_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcomiss_xmm_xmmm32_sae
		test_instr(16, |a| a.vcomiss(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::EVEX_Vcomiss_xmm_xmmm32_sae, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcompresspd_xmm_xmm() {
	// EVEX_Vcompresspd_xmmm128_k1z_xmm
	test_instr(16, |a| a.vcompresspd(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcompresspd_xmmm128_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcompresspd_m_xmm() {
	// EVEX_Vcompresspd_xmmm128_k1z_xmm
	test_instr(16, |a| a.vcompresspd(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcompresspd_xmmm128_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcompresspd_ymm_ymm() {
	// EVEX_Vcompresspd_ymmm256_k1z_ymm
	test_instr(16, |a| a.vcompresspd(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcompresspd_ymmm256_k1z_ymm, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcompresspd_m_ymm() {
	// EVEX_Vcompresspd_ymmm256_k1z_ymm
	test_instr(16, |a| a.vcompresspd(ymmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcompresspd_ymmm256_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcompresspd_zmm_zmm() {
	// EVEX_Vcompresspd_zmmm512_k1z_zmm
	test_instr(16, |a| a.vcompresspd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcompresspd_zmmm512_k1z_zmm, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcompresspd_m_zmm() {
	// EVEX_Vcompresspd_zmmm512_k1z_zmm
	test_instr(16, |a| a.vcompresspd(zmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcompresspd_zmmm512_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcompressps_xmm_xmm() {
	// EVEX_Vcompressps_xmmm128_k1z_xmm
	test_instr(16, |a| a.vcompressps(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcompressps_xmmm128_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcompressps_m_xmm() {
	// EVEX_Vcompressps_xmmm128_k1z_xmm
	test_instr(16, |a| a.vcompressps(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcompressps_xmmm128_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcompressps_ymm_ymm() {
	// EVEX_Vcompressps_ymmm256_k1z_ymm
	test_instr(16, |a| a.vcompressps(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcompressps_ymmm256_k1z_ymm, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcompressps_m_ymm() {
	// EVEX_Vcompressps_ymmm256_k1z_ymm
	test_instr(16, |a| a.vcompressps(ymmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcompressps_ymmm256_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcompressps_zmm_zmm() {
	// EVEX_Vcompressps_zmmm512_k1z_zmm
	test_instr(16, |a| a.vcompressps(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcompressps_zmmm512_k1z_zmm, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcompressps_m_zmm() {
	// EVEX_Vcompressps_zmmm512_k1z_zmm
	test_instr(16, |a| a.vcompressps(zmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcompressps_zmmm512_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtdq2pd_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtdq2pd_xmm_xmmm64
		test_instr(16, |a| a.vcvtdq2pd(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtdq2pd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32
		test_instr(16, |a| a.vcvtdq2pd(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtdq2pd_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtdq2pd_ymm_xmmm128
		test_instr(16, |a| a.vcvtdq2pd(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtdq2pd_ymm_xmmm128, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvtdq2pd(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtdq2pd_zmm_ymm() {
	// EVEX_Vcvtdq2pd_zmm_k1z_ymmm256b32_er
	test_instr(16, |a| a.vcvtdq2pd(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2pd_zmm_k1z_ymmm256b32_er, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtdq2pd_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32
		test_instr(16, |a| a.vcvtdq2pd(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vcvtdq2pd_xmm_xmmm64
		test_instr(16, |a| a.vcvtdq2pd(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcvtdq2pd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32
		test_instr(16, |a| a.vcvtdq2pd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtdq2pd_ymm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvtdq2pd(ymm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vcvtdq2pd_ymm_xmmm128
		test_instr(16, |a| a.vcvtdq2pd(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcvtdq2pd_ymm_xmmm128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvtdq2pd(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtdq2pd_zmm_m() {
	// EVEX_Vcvtdq2pd_zmm_k1z_ymmm256b32_er
	test_instr(16, |a| a.vcvtdq2pd(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2pd_zmm_k1z_ymmm256b32_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtdq2ph_xmm_xmm() {
	// EVEX_Vcvtdq2ph_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvtdq2ph(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2ph_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtdq2ph_xmm_ymm() {
	// EVEX_Vcvtdq2ph_xmm_k1z_ymmm256b32
	test_instr(16, |a| a.vcvtdq2ph(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2ph_xmm_k1z_ymmm256b32, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtdq2ph_ymm_zmm() {
	// EVEX_Vcvtdq2ph_ymm_k1z_zmmm512b32_er
	test_instr(16, |a| a.vcvtdq2ph(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2ph_ymm_k1z_zmmm512b32_er, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtdq2ph_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtdq2ph_xmm_k1z_ymmm256b32
		test_instr(16, |a| a.vcvtdq2ph(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2ph_xmm_k1z_ymmm256b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vcvtdq2ph_xmm_k1z_ymmm256b32
		test_instr(16, |a| a.vcvtdq2ph(xmm2.k1(), ymmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2ph_xmm_k1z_ymmm256b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vcvtdq2ph_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvtdq2ph(xmm2.k1(), xmmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2ph_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtdq2ph_xmm_k1z_xmmm128b32
		test_invalid_instr(16, |a| assert!(a.vcvtdq2ph(xmm2.k1(), byte_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtdq2ph_ymm_m() {
	// EVEX_Vcvtdq2ph_ymm_k1z_zmmm512b32_er
	test_instr(16, |a| a.vcvtdq2ph(ymm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2ph_ymm_k1z_zmmm512b32_er, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtdq2phx_xmm_m() {
	// EVEX_Vcvtdq2ph_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvtdq2phx(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2ph_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtdq2phy_xmm_m() {
	// EVEX_Vcvtdq2ph_xmm_k1z_ymmm256b32
	test_instr(16, |a| a.vcvtdq2phy(xmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2ph_xmm_k1z_ymmm256b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtdq2ps_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtdq2ps_xmm_xmmm128
		test_instr(16, |a| a.vcvtdq2ps(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtdq2ps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvtdq2ps(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtdq2ps_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtdq2ps_ymm_ymmm256
		test_instr(16, |a| a.vcvtdq2ps(ymm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtdq2ps_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32
		test_instr(16, |a| a.vcvtdq2ps(ymm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtdq2ps_zmm_zmm() {
	// EVEX_Vcvtdq2ps_zmm_k1z_zmmm512b32_er
	test_instr(16, |a| a.vcvtdq2ps(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2ps_zmm_k1z_zmmm512b32_er, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtdq2ps_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvtdq2ps(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vcvtdq2ps_xmm_xmmm128
		test_instr(16, |a| a.vcvtdq2ps(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcvtdq2ps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvtdq2ps(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtdq2ps_ymm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32
		test_instr(16, |a| a.vcvtdq2ps(ymm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vcvtdq2ps_ymm_ymmm256
		test_instr(16, |a| a.vcvtdq2ps(ymm2, ymmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcvtdq2ps_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32
		test_instr(16, |a| a.vcvtdq2ps(ymm2.k1(), ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtdq2ps_zmm_m() {
	// EVEX_Vcvtdq2ps_zmm_k1z_zmmm512b32_er
	test_instr(16, |a| a.vcvtdq2ps(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtdq2ps_zmm_k1z_zmmm512b32_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtne2ps2bf16_xmm_xmm_xmm() {
	// EVEX_Vcvtne2ps2bf16_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vcvtne2ps2bf16(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtne2ps2bf16_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtne2ps2bf16_ymm_ymm_ymm() {
	// EVEX_Vcvtne2ps2bf16_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vcvtne2ps2bf16(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtne2ps2bf16_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtne2ps2bf16_zmm_zmm_zmm() {
	// EVEX_Vcvtne2ps2bf16_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vcvtne2ps2bf16(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtne2ps2bf16_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtne2ps2bf16_xmm_xmm_m() {
	// EVEX_Vcvtne2ps2bf16_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vcvtne2ps2bf16(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtne2ps2bf16_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtne2ps2bf16_ymm_ymm_m() {
	// EVEX_Vcvtne2ps2bf16_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vcvtne2ps2bf16(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtne2ps2bf16_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtne2ps2bf16_zmm_zmm_m() {
	// EVEX_Vcvtne2ps2bf16_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vcvtne2ps2bf16(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtne2ps2bf16_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtneebf162ps_xmm_m() {
	// VEX_Vcvtneebf162ps_xmm_m128
	test_instr(16, |a| a.vcvtneebf162ps(xmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vcvtneebf162ps_xmm_m128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtneebf162ps_ymm_m() {
	// VEX_Vcvtneebf162ps_ymm_m256
	test_instr(16, |a| a.vcvtneebf162ps(ymm2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vcvtneebf162ps_ymm_m256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtneeph2ps_xmm_m() {
	// VEX_Vcvtneeph2ps_xmm_m128
	test_instr(16, |a| a.vcvtneeph2ps(xmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vcvtneeph2ps_xmm_m128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtneeph2ps_ymm_m() {
	// VEX_Vcvtneeph2ps_ymm_m256
	test_instr(16, |a| a.vcvtneeph2ps(ymm2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vcvtneeph2ps_ymm_m256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtneobf162ps_xmm_m() {
	// VEX_Vcvtneobf162ps_xmm_m128
	test_instr(16, |a| a.vcvtneobf162ps(xmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vcvtneobf162ps_xmm_m128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtneobf162ps_ymm_m() {
	// VEX_Vcvtneobf162ps_ymm_m256
	test_instr(16, |a| a.vcvtneobf162ps(ymm2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vcvtneobf162ps_ymm_m256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtneoph2ps_xmm_m() {
	// VEX_Vcvtneoph2ps_xmm_m128
	test_instr(16, |a| a.vcvtneoph2ps(xmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vcvtneoph2ps_xmm_m128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtneoph2ps_ymm_m() {
	// VEX_Vcvtneoph2ps_ymm_m256
	test_instr(16, |a| a.vcvtneoph2ps(ymm2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vcvtneoph2ps_ymm_m256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtneps2bf16_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtneps2bf16_xmm_xmmm128
		test_instr(16, |a| a.vcvtneps2bf16(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtneps2bf16_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvtneps2bf16(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtneps2bf16_xmm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtneps2bf16_xmm_ymmm256
		test_instr(16, |a| a.vcvtneps2bf16(xmm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtneps2bf16_xmm_ymmm256, Register::XMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32
		test_instr(16, |a| a.vcvtneps2bf16(xmm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtneps2bf16_ymm_zmm() {
	// EVEX_Vcvtneps2bf16_ymm_k1z_zmmm512b32
	test_instr(16, |a| a.vcvtneps2bf16(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtneps2bf16_ymm_k1z_zmmm512b32, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtneps2bf16_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32
		test_instr(16, |a| a.vcvtneps2bf16(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		/* if self.instruction_prefer_vex() */ {
			// VEX_Vcvtneps2bf16_xmm_ymmm256
			test_instr(16, |a| a.vcvtneps2bf16(xmm2, ymmword_ptr(di)).unwrap(),
				Instruction::with2(Code::VEX_Vcvtneps2bf16_xmm_ymmm256, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
				TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
		} /* else */ {
			// EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32
			test_instr(16, |a| a.vcvtneps2bf16(xmm2.k1(), ymmword_ptr(di)).unwrap(),
				add_op_mask(Instruction::with2(Code::EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
				TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
		}
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		/* if self.instruction_prefer_vex() */ {
			// VEX_Vcvtneps2bf16_xmm_xmmm128
			test_instr(16, |a| a.vcvtneps2bf16(xmm2, xmmword_ptr(di)).unwrap(),
				Instruction::with2(Code::VEX_Vcvtneps2bf16_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
				TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
		} /* else */ {
			// EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32
			test_instr(16, |a| a.vcvtneps2bf16(xmm2.k1(), xmmword_ptr(di)).unwrap(),
				add_op_mask(Instruction::with2(Code::EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
				TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
		}
	} /* else */ {
		/* if self.instruction_prefer_vex() */ {
			// VEX_Vcvtneps2bf16_xmm_xmmm128
			test_invalid_instr(16, |a| assert!(a.vcvtneps2bf16(xmm2, byte_ptr(di)).is_err()), TestInstrFlags::PREFER_VEX);
		} /* else */ {
			// EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32
			test_invalid_instr(16, |a| assert!(a.vcvtneps2bf16(xmm2.k1(), byte_ptr(di)).is_err()), TestInstrFlags::PREFER_EVEX);
		}
	}
}

#[test]
#[rustfmt::skip]
fn vcvtneps2bf16_ymm_m() {
	// EVEX_Vcvtneps2bf16_ymm_k1z_zmmm512b32
	test_instr(16, |a| a.vcvtneps2bf16(ymm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtneps2bf16_ymm_k1z_zmmm512b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtneps2bf16x_xmm_m() {
	// EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvtneps2bf16x(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtneps2bf16y_xmm_m() {
	// EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32
	test_instr(16, |a| a.vcvtneps2bf16y(xmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2dq_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtpd2dq_xmm_xmmm128
		test_instr(16, |a| a.vcvtpd2dq(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtpd2dq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64
		test_instr(16, |a| a.vcvtpd2dq(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtpd2dq_xmm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtpd2dq_xmm_ymmm256
		test_instr(16, |a| a.vcvtpd2dq(xmm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtpd2dq_xmm_ymmm256, Register::XMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64
		test_instr(16, |a| a.vcvtpd2dq(xmm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtpd2dq_ymm_zmm() {
	// EVEX_Vcvtpd2dq_ymm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtpd2dq(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2dq_ymm_k1z_zmmm512b64_er, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2dq_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64
		test_instr(16, |a| a.vcvtpd2dq(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		/* if self.instruction_prefer_vex() */ {
			// VEX_Vcvtpd2dq_xmm_ymmm256
			test_instr(16, |a| a.vcvtpd2dq(xmm2, ymmword_ptr(di)).unwrap(),
				Instruction::with2(Code::VEX_Vcvtpd2dq_xmm_ymmm256, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
				TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
		} /* else */ {
			// EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64
			test_instr(16, |a| a.vcvtpd2dq(xmm2.k1(), ymmword_ptr(di)).unwrap(),
				add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
				TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
		}
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		/* if self.instruction_prefer_vex() */ {
			// VEX_Vcvtpd2dq_xmm_xmmm128
			test_instr(16, |a| a.vcvtpd2dq(xmm2, xmmword_ptr(di)).unwrap(),
				Instruction::with2(Code::VEX_Vcvtpd2dq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
				TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
		} /* else */ {
			// EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64
			test_instr(16, |a| a.vcvtpd2dq(xmm2.k1(), xmmword_ptr(di)).unwrap(),
				add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
				TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
		}
	} /* else */ {
		/* if self.instruction_prefer_vex() */ {
			// VEX_Vcvtpd2dq_xmm_xmmm128
			test_invalid_instr(16, |a| assert!(a.vcvtpd2dq(xmm2, byte_ptr(di)).is_err()), TestInstrFlags::PREFER_VEX);
		} /* else */ {
			// EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64
			test_invalid_instr(16, |a| assert!(a.vcvtpd2dq(xmm2.k1(), byte_ptr(di)).is_err()), TestInstrFlags::PREFER_EVEX);
		}
	}
}

#[test]
#[rustfmt::skip]
fn vcvtpd2dq_ymm_m() {
	// EVEX_Vcvtpd2dq_ymm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtpd2dq(ymm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2dq_ymm_k1z_zmmm512b64_er, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2dqx_xmm_m() {
	// EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtpd2dqx(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2dqy_xmm_m() {
	// EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtpd2dqy(xmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2ph_xmm_xmm() {
	// EVEX_Vcvtpd2ph_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtpd2ph(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ph_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2ph_xmm_ymm() {
	// EVEX_Vcvtpd2ph_xmm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtpd2ph(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ph_xmm_k1z_ymmm256b64, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2ph_xmm_zmm() {
	// EVEX_Vcvtpd2ph_xmm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtpd2ph(xmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ph_xmm_k1z_zmmm512b64_er, Register::XMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2ph_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtpd2ph_xmm_k1z_zmmm512b64_er
		test_instr(16, |a| a.vcvtpd2ph(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ph_xmm_k1z_zmmm512b64_er, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Zword */ {
		// EVEX_Vcvtpd2ph_xmm_k1z_zmmm512b64_er
		test_instr(16, |a| a.vcvtpd2ph(xmm2.k1(), zmmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ph_xmm_k1z_zmmm512b64_er, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vcvtpd2ph_xmm_k1z_ymmm256b64
		test_instr(16, |a| a.vcvtpd2ph(xmm2.k1(), ymmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ph_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vcvtpd2ph_xmm_k1z_xmmm128b64
		test_instr(16, |a| a.vcvtpd2ph(xmm2.k1(), xmmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ph_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtpd2ph_xmm_k1z_xmmm128b64
		test_invalid_instr(16, |a| assert!(a.vcvtpd2ph(xmm2.k1(), byte_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtpd2phx_xmm_m() {
	// EVEX_Vcvtpd2ph_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtpd2phx(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ph_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2phy_xmm_m() {
	// EVEX_Vcvtpd2ph_xmm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtpd2phy(xmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ph_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2phz_xmm_m() {
	// EVEX_Vcvtpd2ph_xmm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtpd2phz(xmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ph_xmm_k1z_zmmm512b64_er, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2ps_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtpd2ps_xmm_xmmm128
		test_instr(16, |a| a.vcvtpd2ps(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtpd2ps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64
		test_instr(16, |a| a.vcvtpd2ps(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtpd2ps_xmm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtpd2ps_xmm_ymmm256
		test_instr(16, |a| a.vcvtpd2ps(xmm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtpd2ps_xmm_ymmm256, Register::XMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64
		test_instr(16, |a| a.vcvtpd2ps(xmm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtpd2ps_ymm_zmm() {
	// EVEX_Vcvtpd2ps_ymm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtpd2ps(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ps_ymm_k1z_zmmm512b64_er, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2ps_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64
		test_instr(16, |a| a.vcvtpd2ps(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		/* if self.instruction_prefer_vex() */ {
			// VEX_Vcvtpd2ps_xmm_ymmm256
			test_instr(16, |a| a.vcvtpd2ps(xmm2, ymmword_ptr(di)).unwrap(),
				Instruction::with2(Code::VEX_Vcvtpd2ps_xmm_ymmm256, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
				TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
		} /* else */ {
			// EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64
			test_instr(16, |a| a.vcvtpd2ps(xmm2.k1(), ymmword_ptr(di)).unwrap(),
				add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
				TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
		}
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		/* if self.instruction_prefer_vex() */ {
			// VEX_Vcvtpd2ps_xmm_xmmm128
			test_instr(16, |a| a.vcvtpd2ps(xmm2, xmmword_ptr(di)).unwrap(),
				Instruction::with2(Code::VEX_Vcvtpd2ps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
				TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
		} /* else */ {
			// EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64
			test_instr(16, |a| a.vcvtpd2ps(xmm2.k1(), xmmword_ptr(di)).unwrap(),
				add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
				TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
		}
	} /* else */ {
		/* if self.instruction_prefer_vex() */ {
			// VEX_Vcvtpd2ps_xmm_xmmm128
			test_invalid_instr(16, |a| assert!(a.vcvtpd2ps(xmm2, byte_ptr(di)).is_err()), TestInstrFlags::PREFER_VEX);
		} /* else */ {
			// EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64
			test_invalid_instr(16, |a| assert!(a.vcvtpd2ps(xmm2.k1(), byte_ptr(di)).is_err()), TestInstrFlags::PREFER_EVEX);
		}
	}
}

#[test]
#[rustfmt::skip]
fn vcvtpd2ps_ymm_m() {
	// EVEX_Vcvtpd2ps_ymm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtpd2ps(ymm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ps_ymm_k1z_zmmm512b64_er, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2psx_xmm_m() {
	// EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtpd2psx(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2psy_xmm_m() {
	// EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtpd2psy(xmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2qq_xmm_xmm() {
	// EVEX_Vcvtpd2qq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtpd2qq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2qq_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2qq_ymm_ymm() {
	// EVEX_Vcvtpd2qq_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtpd2qq(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2qq_ymm_k1z_ymmm256b64, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2qq_zmm_zmm() {
	// EVEX_Vcvtpd2qq_zmm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtpd2qq(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2qq_zmm_k1z_zmmm512b64_er, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2qq_xmm_m() {
	// EVEX_Vcvtpd2qq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtpd2qq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2qq_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2qq_ymm_m() {
	// EVEX_Vcvtpd2qq_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtpd2qq(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2qq_ymm_k1z_ymmm256b64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2qq_zmm_m() {
	// EVEX_Vcvtpd2qq_zmm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtpd2qq(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2qq_zmm_k1z_zmmm512b64_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2udq_xmm_xmm() {
	// EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtpd2udq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2udq_xmm_ymm() {
	// EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtpd2udq(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2udq_ymm_zmm() {
	// EVEX_Vcvtpd2udq_ymm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtpd2udq(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2udq_ymm_k1z_zmmm512b64_er, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2udq_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64
		test_instr(16, |a| a.vcvtpd2udq(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64
		test_instr(16, |a| a.vcvtpd2udq(xmm2.k1(), ymmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64
		test_instr(16, |a| a.vcvtpd2udq(xmm2.k1(), xmmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64
		test_invalid_instr(16, |a| assert!(a.vcvtpd2udq(xmm2.k1(), byte_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtpd2udq_ymm_m() {
	// EVEX_Vcvtpd2udq_ymm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtpd2udq(ymm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2udq_ymm_k1z_zmmm512b64_er, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2udqx_xmm_m() {
	// EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtpd2udqx(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2udqy_xmm_m() {
	// EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtpd2udqy(xmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2uqq_xmm_xmm() {
	// EVEX_Vcvtpd2uqq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtpd2uqq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2uqq_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2uqq_ymm_ymm() {
	// EVEX_Vcvtpd2uqq_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtpd2uqq(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2uqq_ymm_k1z_ymmm256b64, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2uqq_zmm_zmm() {
	// EVEX_Vcvtpd2uqq_zmm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtpd2uqq(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2uqq_zmm_k1z_zmmm512b64_er, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2uqq_xmm_m() {
	// EVEX_Vcvtpd2uqq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtpd2uqq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2uqq_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2uqq_ymm_m() {
	// EVEX_Vcvtpd2uqq_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtpd2uqq(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2uqq_ymm_k1z_ymmm256b64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtpd2uqq_zmm_m() {
	// EVEX_Vcvtpd2uqq_zmm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtpd2uqq(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtpd2uqq_zmm_k1z_zmmm512b64_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2dq_xmm_xmm() {
	// EVEX_Vcvtph2dq_xmm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvtph2dq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2dq_xmm_k1z_xmmm64b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2dq_ymm_xmm() {
	// EVEX_Vcvtph2dq_ymm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvtph2dq(ymm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2dq_ymm_k1z_xmmm128b16, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2dq_zmm_ymm() {
	// EVEX_Vcvtph2dq_zmm_k1z_ymmm256b16_er
	test_instr(16, |a| a.vcvtph2dq(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2dq_zmm_k1z_ymmm256b16_er, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2dq_xmm_m() {
	// EVEX_Vcvtph2dq_xmm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvtph2dq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2dq_xmm_k1z_xmmm64b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2dq_ymm_m() {
	// EVEX_Vcvtph2dq_ymm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvtph2dq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2dq_ymm_k1z_xmmm128b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2dq_zmm_m() {
	// EVEX_Vcvtph2dq_zmm_k1z_ymmm256b16_er
	test_instr(16, |a| a.vcvtph2dq(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2dq_zmm_k1z_ymmm256b16_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2pd_xmm_xmm() {
	// EVEX_Vcvtph2pd_xmm_k1z_xmmm32b16
	test_instr(16, |a| a.vcvtph2pd(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2pd_xmm_k1z_xmmm32b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2pd_ymm_xmm() {
	// EVEX_Vcvtph2pd_ymm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvtph2pd(ymm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2pd_ymm_k1z_xmmm64b16, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2pd_zmm_xmm() {
	// EVEX_Vcvtph2pd_zmm_k1z_xmmm128b16_sae
	test_instr(16, |a| a.vcvtph2pd(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2pd_zmm_k1z_xmmm128b16_sae, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2pd_xmm_m() {
	// EVEX_Vcvtph2pd_xmm_k1z_xmmm32b16
	test_instr(16, |a| a.vcvtph2pd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2pd_xmm_k1z_xmmm32b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2pd_ymm_m() {
	// EVEX_Vcvtph2pd_ymm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvtph2pd(ymm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2pd_ymm_k1z_xmmm64b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2pd_zmm_m() {
	// EVEX_Vcvtph2pd_zmm_k1z_xmmm128b16_sae
	test_instr(16, |a| a.vcvtph2pd(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2pd_zmm_k1z_xmmm128b16_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2ps_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtph2ps_xmm_xmmm64
		test_instr(16, |a| a.vcvtph2ps(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtph2ps_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtph2ps_xmm_k1z_xmmm64
		test_instr(16, |a| a.vcvtph2ps(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2ps_xmm_k1z_xmmm64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtph2ps_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtph2ps_ymm_xmmm128
		test_instr(16, |a| a.vcvtph2ps(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtph2ps_ymm_xmmm128, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtph2ps_ymm_k1z_xmmm128
		test_instr(16, |a| a.vcvtph2ps(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2ps_ymm_k1z_xmmm128, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtph2ps_zmm_ymm() {
	// EVEX_Vcvtph2ps_zmm_k1z_ymmm256_sae
	test_instr(16, |a| a.vcvtph2ps(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2ps_zmm_k1z_ymmm256_sae, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2ps_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtph2ps_xmm_xmmm64
		test_instr(16, |a| a.vcvtph2ps(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcvtph2ps_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtph2ps_xmm_k1z_xmmm64
		test_instr(16, |a| a.vcvtph2ps(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2ps_xmm_k1z_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtph2ps_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtph2ps_ymm_xmmm128
		test_instr(16, |a| a.vcvtph2ps(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcvtph2ps_ymm_xmmm128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtph2ps_ymm_k1z_xmmm128
		test_instr(16, |a| a.vcvtph2ps(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2ps_ymm_k1z_xmmm128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtph2ps_zmm_m() {
	// EVEX_Vcvtph2ps_zmm_k1z_ymmm256_sae
	test_instr(16, |a| a.vcvtph2ps(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2ps_zmm_k1z_ymmm256_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2psx_xmm_xmm() {
	// EVEX_Vcvtph2psx_xmm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvtph2psx(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2psx_xmm_k1z_xmmm64b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2psx_ymm_xmm() {
	// EVEX_Vcvtph2psx_ymm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvtph2psx(ymm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2psx_ymm_k1z_xmmm128b16, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2psx_zmm_ymm() {
	// EVEX_Vcvtph2psx_zmm_k1z_ymmm256b16_sae
	test_instr(16, |a| a.vcvtph2psx(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2psx_zmm_k1z_ymmm256b16_sae, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2psx_xmm_m() {
	// EVEX_Vcvtph2psx_xmm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvtph2psx(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2psx_xmm_k1z_xmmm64b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2psx_ymm_m() {
	// EVEX_Vcvtph2psx_ymm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvtph2psx(ymm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2psx_ymm_k1z_xmmm128b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2psx_zmm_m() {
	// EVEX_Vcvtph2psx_zmm_k1z_ymmm256b16_sae
	test_instr(16, |a| a.vcvtph2psx(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2psx_zmm_k1z_ymmm256b16_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2qq_xmm_xmm() {
	// EVEX_Vcvtph2qq_xmm_k1z_xmmm32b16
	test_instr(16, |a| a.vcvtph2qq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2qq_xmm_k1z_xmmm32b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2qq_ymm_xmm() {
	// EVEX_Vcvtph2qq_ymm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvtph2qq(ymm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2qq_ymm_k1z_xmmm64b16, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2qq_zmm_xmm() {
	// EVEX_Vcvtph2qq_zmm_k1z_xmmm128b16_er
	test_instr(16, |a| a.vcvtph2qq(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2qq_zmm_k1z_xmmm128b16_er, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2qq_xmm_m() {
	// EVEX_Vcvtph2qq_xmm_k1z_xmmm32b16
	test_instr(16, |a| a.vcvtph2qq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2qq_xmm_k1z_xmmm32b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2qq_ymm_m() {
	// EVEX_Vcvtph2qq_ymm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvtph2qq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2qq_ymm_k1z_xmmm64b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2qq_zmm_m() {
	// EVEX_Vcvtph2qq_zmm_k1z_xmmm128b16_er
	test_instr(16, |a| a.vcvtph2qq(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2qq_zmm_k1z_xmmm128b16_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2udq_xmm_xmm() {
	// EVEX_Vcvtph2udq_xmm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvtph2udq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2udq_xmm_k1z_xmmm64b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2udq_ymm_xmm() {
	// EVEX_Vcvtph2udq_ymm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvtph2udq(ymm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2udq_ymm_k1z_xmmm128b16, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2udq_zmm_ymm() {
	// EVEX_Vcvtph2udq_zmm_k1z_ymmm256b16_er
	test_instr(16, |a| a.vcvtph2udq(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2udq_zmm_k1z_ymmm256b16_er, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2udq_xmm_m() {
	// EVEX_Vcvtph2udq_xmm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvtph2udq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2udq_xmm_k1z_xmmm64b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2udq_ymm_m() {
	// EVEX_Vcvtph2udq_ymm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvtph2udq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2udq_ymm_k1z_xmmm128b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2udq_zmm_m() {
	// EVEX_Vcvtph2udq_zmm_k1z_ymmm256b16_er
	test_instr(16, |a| a.vcvtph2udq(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2udq_zmm_k1z_ymmm256b16_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2uqq_xmm_xmm() {
	// EVEX_Vcvtph2uqq_xmm_k1z_xmmm32b16
	test_instr(16, |a| a.vcvtph2uqq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2uqq_xmm_k1z_xmmm32b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2uqq_ymm_xmm() {
	// EVEX_Vcvtph2uqq_ymm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvtph2uqq(ymm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2uqq_ymm_k1z_xmmm64b16, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2uqq_zmm_xmm() {
	// EVEX_Vcvtph2uqq_zmm_k1z_xmmm128b16_er
	test_instr(16, |a| a.vcvtph2uqq(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2uqq_zmm_k1z_xmmm128b16_er, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2uqq_xmm_m() {
	// EVEX_Vcvtph2uqq_xmm_k1z_xmmm32b16
	test_instr(16, |a| a.vcvtph2uqq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2uqq_xmm_k1z_xmmm32b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2uqq_ymm_m() {
	// EVEX_Vcvtph2uqq_ymm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvtph2uqq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2uqq_ymm_k1z_xmmm64b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2uqq_zmm_m() {
	// EVEX_Vcvtph2uqq_zmm_k1z_xmmm128b16_er
	test_instr(16, |a| a.vcvtph2uqq(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2uqq_zmm_k1z_xmmm128b16_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2uw_xmm_xmm() {
	// EVEX_Vcvtph2uw_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvtph2uw(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2uw_xmm_k1z_xmmm128b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2uw_ymm_ymm() {
	// EVEX_Vcvtph2uw_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vcvtph2uw(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2uw_ymm_k1z_ymmm256b16, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2uw_zmm_zmm() {
	// EVEX_Vcvtph2uw_zmm_k1z_zmmm512b16_er
	test_instr(16, |a| a.vcvtph2uw(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2uw_zmm_k1z_zmmm512b16_er, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2uw_xmm_m() {
	// EVEX_Vcvtph2uw_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvtph2uw(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2uw_xmm_k1z_xmmm128b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2uw_ymm_m() {
	// EVEX_Vcvtph2uw_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vcvtph2uw(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2uw_ymm_k1z_ymmm256b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2uw_zmm_m() {
	// EVEX_Vcvtph2uw_zmm_k1z_zmmm512b16_er
	test_instr(16, |a| a.vcvtph2uw(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2uw_zmm_k1z_zmmm512b16_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2w_xmm_xmm() {
	// EVEX_Vcvtph2w_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvtph2w(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2w_xmm_k1z_xmmm128b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2w_ymm_ymm() {
	// EVEX_Vcvtph2w_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vcvtph2w(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2w_ymm_k1z_ymmm256b16, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2w_zmm_zmm() {
	// EVEX_Vcvtph2w_zmm_k1z_zmmm512b16_er
	test_instr(16, |a| a.vcvtph2w(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2w_zmm_k1z_zmmm512b16_er, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2w_xmm_m() {
	// EVEX_Vcvtph2w_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvtph2w(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2w_xmm_k1z_xmmm128b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2w_ymm_m() {
	// EVEX_Vcvtph2w_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vcvtph2w(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2w_ymm_k1z_ymmm256b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtph2w_zmm_m() {
	// EVEX_Vcvtph2w_zmm_k1z_zmmm512b16_er
	test_instr(16, |a| a.vcvtph2w(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtph2w_zmm_k1z_zmmm512b16_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2dq_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2dq_xmm_xmmm128
		test_instr(16, |a| a.vcvtps2dq(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtps2dq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvtps2dq(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtps2dq_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2dq_ymm_ymmm256
		test_instr(16, |a| a.vcvtps2dq(ymm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtps2dq_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32
		test_instr(16, |a| a.vcvtps2dq(ymm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtps2dq_zmm_zmm() {
	// EVEX_Vcvtps2dq_zmm_k1z_zmmm512b32_er
	test_instr(16, |a| a.vcvtps2dq(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2dq_zmm_k1z_zmmm512b32_er, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2dq_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvtps2dq(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2dq_xmm_xmmm128
		test_instr(16, |a| a.vcvtps2dq(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcvtps2dq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvtps2dq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtps2dq_ymm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32
		test_instr(16, |a| a.vcvtps2dq(ymm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2dq_ymm_ymmm256
		test_instr(16, |a| a.vcvtps2dq(ymm2, ymmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcvtps2dq_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32
		test_instr(16, |a| a.vcvtps2dq(ymm2.k1(), ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtps2dq_zmm_m() {
	// EVEX_Vcvtps2dq_zmm_k1z_zmmm512b32_er
	test_instr(16, |a| a.vcvtps2dq(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2dq_zmm_k1z_zmmm512b32_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2pd_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2pd_xmm_xmmm64
		test_instr(16, |a| a.vcvtps2pd(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtps2pd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32
		test_instr(16, |a| a.vcvtps2pd(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtps2pd_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2pd_ymm_xmmm128
		test_instr(16, |a| a.vcvtps2pd(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtps2pd_ymm_xmmm128, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvtps2pd(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtps2pd_zmm_ymm() {
	// EVEX_Vcvtps2pd_zmm_k1z_ymmm256b32_sae
	test_instr(16, |a| a.vcvtps2pd(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2pd_zmm_k1z_ymmm256b32_sae, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2pd_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32
		test_instr(16, |a| a.vcvtps2pd(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2pd_xmm_xmmm64
		test_instr(16, |a| a.vcvtps2pd(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcvtps2pd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32
		test_instr(16, |a| a.vcvtps2pd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtps2pd_ymm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvtps2pd(ymm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2pd_ymm_xmmm128
		test_instr(16, |a| a.vcvtps2pd(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcvtps2pd_ymm_xmmm128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvtps2pd(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtps2pd_zmm_m() {
	// EVEX_Vcvtps2pd_zmm_k1z_ymmm256b32_sae
	test_instr(16, |a| a.vcvtps2pd(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2pd_zmm_k1z_ymmm256b32_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2ph_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2ph_xmmm64_xmm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vcvtps2ph_xmmm64_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmm2.k1(), xmm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2ph_xmmm64_xmm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vcvtps2ph_xmmm64_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmm2.k1(), xmm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtps2ph_m_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2ph_xmmm64_xmm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmmword_ptr(si), xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vcvtps2ph_xmmm64_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmmword_ptr(si).k1(), xmm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2ph_xmmm64_xmm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmmword_ptr(si), xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vcvtps2ph_xmmm64_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmmword_ptr(si).k1(), xmm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtps2ph_xmm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2ph_xmmm128_ymm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vcvtps2ph_xmmm128_ymm_imm8, Register::XMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmm2.k1(), ymm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8, Register::XMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2ph_xmmm128_ymm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vcvtps2ph_xmmm128_ymm_imm8, Register::XMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmm2.k1(), ymm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8, Register::XMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtps2ph_m_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2ph_xmmm128_ymm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmmword_ptr(si), ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vcvtps2ph_xmmm128_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmmword_ptr(si).k1(), ymm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2ph_xmmm128_ymm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmmword_ptr(si), ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vcvtps2ph_xmmm128_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmmword_ptr(si).k1(), ymm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtps2ph_ymm_zmm_i() {
	// EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae
	test_instr(16, |a| a.vcvtps2ph(ymm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, Register::YMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae
	test_instr(16, |a| a.vcvtps2ph(ymm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, Register::YMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2ph_m_zmm_i() {
	// EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae
	test_instr(16, |a| a.vcvtps2ph(ymmword_ptr(si).k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae
	test_instr(16, |a| a.vcvtps2ph(ymmword_ptr(si).k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2ph_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2ph_xmmm64_xmm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vcvtps2ph_xmmm64_xmm_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtps2ph_m_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2ph_xmmm64_xmm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmmword_ptr(si), xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vcvtps2ph_xmmm64_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmmword_ptr(si).k1(), xmm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtps2ph_xmm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2ph_xmmm128_ymm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vcvtps2ph_xmmm128_ymm_imm8, Register::XMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmm2.k1(), ymm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8, Register::XMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtps2ph_m_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtps2ph_xmmm128_ymm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmmword_ptr(si), ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vcvtps2ph_xmmm128_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8
		test_instr(16, |a| a.vcvtps2ph(xmmword_ptr(si).k1(), ymm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtps2ph_ymm_zmm_u() {
	// EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae
	test_instr(16, |a| a.vcvtps2ph(ymm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, Register::YMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2ph_m_zmm_u() {
	// EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae
	test_instr(16, |a| a.vcvtps2ph(ymmword_ptr(si).k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2phx_xmm_xmm() {
	// EVEX_Vcvtps2phx_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvtps2phx(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2phx_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2phx_xmm_ymm() {
	// EVEX_Vcvtps2phx_xmm_k1z_ymmm256b32
	test_instr(16, |a| a.vcvtps2phx(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2phx_xmm_k1z_ymmm256b32, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2phx_ymm_zmm() {
	// EVEX_Vcvtps2phx_ymm_k1z_zmmm512b32_er
	test_instr(16, |a| a.vcvtps2phx(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2phx_ymm_k1z_zmmm512b32_er, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2phx_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtps2phx_xmm_k1z_ymmm256b32
		test_instr(16, |a| a.vcvtps2phx(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2phx_xmm_k1z_ymmm256b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vcvtps2phx_xmm_k1z_ymmm256b32
		test_instr(16, |a| a.vcvtps2phx(xmm2.k1(), ymmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2phx_xmm_k1z_ymmm256b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vcvtps2phx_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvtps2phx(xmm2.k1(), xmmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2phx_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtps2phx_xmm_k1z_xmmm128b32
		test_invalid_instr(16, |a| assert!(a.vcvtps2phx(xmm2.k1(), byte_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtps2phx_ymm_m() {
	// EVEX_Vcvtps2phx_ymm_k1z_zmmm512b32_er
	test_instr(16, |a| a.vcvtps2phx(ymm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2phx_ymm_k1z_zmmm512b32_er, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2phxx_xmm_m() {
	// EVEX_Vcvtps2phx_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvtps2phxx(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2phx_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2phxy_xmm_m() {
	// EVEX_Vcvtps2phx_xmm_k1z_ymmm256b32
	test_instr(16, |a| a.vcvtps2phxy(xmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2phx_xmm_k1z_ymmm256b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2qq_xmm_xmm() {
	// EVEX_Vcvtps2qq_xmm_k1z_xmmm64b32
	test_instr(16, |a| a.vcvtps2qq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2qq_xmm_k1z_xmmm64b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2qq_ymm_xmm() {
	// EVEX_Vcvtps2qq_ymm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvtps2qq(ymm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2qq_ymm_k1z_xmmm128b32, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2qq_zmm_ymm() {
	// EVEX_Vcvtps2qq_zmm_k1z_ymmm256b32_er
	test_instr(16, |a| a.vcvtps2qq(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2qq_zmm_k1z_ymmm256b32_er, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2qq_xmm_m() {
	// EVEX_Vcvtps2qq_xmm_k1z_xmmm64b32
	test_instr(16, |a| a.vcvtps2qq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2qq_xmm_k1z_xmmm64b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2qq_ymm_m() {
	// EVEX_Vcvtps2qq_ymm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvtps2qq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2qq_ymm_k1z_xmmm128b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2qq_zmm_m() {
	// EVEX_Vcvtps2qq_zmm_k1z_ymmm256b32_er
	test_instr(16, |a| a.vcvtps2qq(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2qq_zmm_k1z_ymmm256b32_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2udq_xmm_xmm() {
	// EVEX_Vcvtps2udq_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvtps2udq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2udq_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2udq_ymm_ymm() {
	// EVEX_Vcvtps2udq_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vcvtps2udq(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2udq_ymm_k1z_ymmm256b32, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2udq_zmm_zmm() {
	// EVEX_Vcvtps2udq_zmm_k1z_zmmm512b32_er
	test_instr(16, |a| a.vcvtps2udq(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2udq_zmm_k1z_zmmm512b32_er, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2udq_xmm_m() {
	// EVEX_Vcvtps2udq_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvtps2udq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2udq_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2udq_ymm_m() {
	// EVEX_Vcvtps2udq_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vcvtps2udq(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2udq_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2udq_zmm_m() {
	// EVEX_Vcvtps2udq_zmm_k1z_zmmm512b32_er
	test_instr(16, |a| a.vcvtps2udq(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2udq_zmm_k1z_zmmm512b32_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2uqq_xmm_xmm() {
	// EVEX_Vcvtps2uqq_xmm_k1z_xmmm64b32
	test_instr(16, |a| a.vcvtps2uqq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2uqq_xmm_k1z_xmmm64b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2uqq_ymm_xmm() {
	// EVEX_Vcvtps2uqq_ymm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvtps2uqq(ymm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2uqq_ymm_k1z_xmmm128b32, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2uqq_zmm_ymm() {
	// EVEX_Vcvtps2uqq_zmm_k1z_ymmm256b32_er
	test_instr(16, |a| a.vcvtps2uqq(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2uqq_zmm_k1z_ymmm256b32_er, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2uqq_xmm_m() {
	// EVEX_Vcvtps2uqq_xmm_k1z_xmmm64b32
	test_instr(16, |a| a.vcvtps2uqq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2uqq_xmm_k1z_xmmm64b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2uqq_ymm_m() {
	// EVEX_Vcvtps2uqq_ymm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvtps2uqq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2uqq_ymm_k1z_xmmm128b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtps2uqq_zmm_m() {
	// EVEX_Vcvtps2uqq_zmm_k1z_ymmm256b32_er
	test_instr(16, |a| a.vcvtps2uqq(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtps2uqq_zmm_k1z_ymmm256b32_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2pd_xmm_xmm() {
	// EVEX_Vcvtqq2pd_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtqq2pd(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2pd_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2pd_ymm_ymm() {
	// EVEX_Vcvtqq2pd_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtqq2pd(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2pd_ymm_k1z_ymmm256b64, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2pd_zmm_zmm() {
	// EVEX_Vcvtqq2pd_zmm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtqq2pd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2pd_zmm_k1z_zmmm512b64_er, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2pd_xmm_m() {
	// EVEX_Vcvtqq2pd_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtqq2pd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2pd_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2pd_ymm_m() {
	// EVEX_Vcvtqq2pd_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtqq2pd(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2pd_ymm_k1z_ymmm256b64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2pd_zmm_m() {
	// EVEX_Vcvtqq2pd_zmm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtqq2pd(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2pd_zmm_k1z_zmmm512b64_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2ph_xmm_xmm() {
	// EVEX_Vcvtqq2ph_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtqq2ph(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ph_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2ph_xmm_ymm() {
	// EVEX_Vcvtqq2ph_xmm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtqq2ph(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ph_xmm_k1z_ymmm256b64, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2ph_xmm_zmm() {
	// EVEX_Vcvtqq2ph_xmm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtqq2ph(xmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ph_xmm_k1z_zmmm512b64_er, Register::XMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2ph_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtqq2ph_xmm_k1z_zmmm512b64_er
		test_instr(16, |a| a.vcvtqq2ph(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ph_xmm_k1z_zmmm512b64_er, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Zword */ {
		// EVEX_Vcvtqq2ph_xmm_k1z_zmmm512b64_er
		test_instr(16, |a| a.vcvtqq2ph(xmm2.k1(), zmmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ph_xmm_k1z_zmmm512b64_er, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vcvtqq2ph_xmm_k1z_ymmm256b64
		test_instr(16, |a| a.vcvtqq2ph(xmm2.k1(), ymmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ph_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vcvtqq2ph_xmm_k1z_xmmm128b64
		test_instr(16, |a| a.vcvtqq2ph(xmm2.k1(), xmmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ph_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtqq2ph_xmm_k1z_xmmm128b64
		test_invalid_instr(16, |a| assert!(a.vcvtqq2ph(xmm2.k1(), byte_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtqq2phx_xmm_m() {
	// EVEX_Vcvtqq2ph_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtqq2phx(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ph_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2phy_xmm_m() {
	// EVEX_Vcvtqq2ph_xmm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtqq2phy(xmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ph_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2phz_xmm_m() {
	// EVEX_Vcvtqq2ph_xmm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtqq2phz(xmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ph_xmm_k1z_zmmm512b64_er, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2ps_xmm_xmm() {
	// EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtqq2ps(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2ps_xmm_ymm() {
	// EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtqq2ps(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2ps_ymm_zmm() {
	// EVEX_Vcvtqq2ps_ymm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtqq2ps(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ps_ymm_k1z_zmmm512b64_er, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2ps_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64
		test_instr(16, |a| a.vcvtqq2ps(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64
		test_instr(16, |a| a.vcvtqq2ps(xmm2.k1(), ymmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64
		test_instr(16, |a| a.vcvtqq2ps(xmm2.k1(), xmmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64
		test_invalid_instr(16, |a| assert!(a.vcvtqq2ps(xmm2.k1(), byte_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtqq2ps_ymm_m() {
	// EVEX_Vcvtqq2ps_ymm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtqq2ps(ymm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ps_ymm_k1z_zmmm512b64_er, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2psx_xmm_m() {
	// EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtqq2psx(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtqq2psy_xmm_m() {
	// EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtqq2psy(xmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtsd2sh_xmm_xmm_xmm() {
	// EVEX_Vcvtsd2sh_xmm_k1z_xmm_xmmm64_er
	test_instr(16, |a| a.vcvtsd2sh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtsd2sh_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtsd2sh_xmm_xmm_m() {
	// EVEX_Vcvtsd2sh_xmm_k1z_xmm_xmmm64_er
	test_instr(16, |a| a.vcvtsd2sh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtsd2sh_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtsd2si_r32_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtsd2si_r32_xmmm64
		test_instr(16, |a| a.vcvtsd2si(edx, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtsd2si_r32_xmmm64, Register::EDX, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtsd2si_r32_xmmm64_er
		test_instr(16, |a| a.vcvtsd2si(edx, xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vcvtsd2si_r32_xmmm64_er, Register::EDX, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtsd2si_r32_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtsd2si_r32_xmmm64
		test_instr(16, |a| a.vcvtsd2si(edx, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcvtsd2si_r32_xmmm64, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtsd2si_r32_xmmm64_er
		test_instr(16, |a| a.vcvtsd2si(edx, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::EVEX_Vcvtsd2si_r32_xmmm64_er, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtsd2ss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtsd2ss_xmm_xmm_xmmm64
		test_instr(16, |a| a.vcvtsd2ss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vcvtsd2ss_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtsd2ss_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vcvtsd2ss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vcvtsd2ss_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtsd2ss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtsd2ss_xmm_xmm_xmmm64
		test_instr(16, |a| a.vcvtsd2ss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vcvtsd2ss_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtsd2ss_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vcvtsd2ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vcvtsd2ss_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtsd2usi_r32_xmm() {
	// EVEX_Vcvtsd2usi_r32_xmmm64_er
	test_instr(16, |a| a.vcvtsd2usi(edx, xmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vcvtsd2usi_r32_xmmm64_er, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtsd2usi_r32_m() {
	// EVEX_Vcvtsd2usi_r32_xmmm64_er
	test_instr(16, |a| a.vcvtsd2usi(edx, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::EVEX_Vcvtsd2usi_r32_xmmm64_er, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtsh2sd_xmm_xmm_xmm() {
	// EVEX_Vcvtsh2sd_xmm_k1z_xmm_xmmm16_sae
	test_instr(16, |a| a.vcvtsh2sd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtsh2sd_xmm_k1z_xmm_xmmm16_sae, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtsh2sd_xmm_xmm_m() {
	// EVEX_Vcvtsh2sd_xmm_k1z_xmm_xmmm16_sae
	test_instr(16, |a| a.vcvtsh2sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtsh2sd_xmm_k1z_xmm_xmmm16_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtsh2si_r32_xmm() {
	// EVEX_Vcvtsh2si_r32_xmmm16_er
	test_instr(16, |a| a.vcvtsh2si(edx, xmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vcvtsh2si_r32_xmmm16_er, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtsh2si_r32_m() {
	// EVEX_Vcvtsh2si_r32_xmmm16_er
	test_instr(16, |a| a.vcvtsh2si(edx, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::EVEX_Vcvtsh2si_r32_xmmm16_er, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtsh2ss_xmm_xmm_xmm() {
	// EVEX_Vcvtsh2ss_xmm_k1z_xmm_xmmm16_sae
	test_instr(16, |a| a.vcvtsh2ss(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtsh2ss_xmm_k1z_xmm_xmmm16_sae, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtsh2ss_xmm_xmm_m() {
	// EVEX_Vcvtsh2ss_xmm_k1z_xmm_xmmm16_sae
	test_instr(16, |a| a.vcvtsh2ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtsh2ss_xmm_k1z_xmm_xmmm16_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtsh2usi_r32_xmm() {
	// EVEX_Vcvtsh2usi_r32_xmmm16_er
	test_instr(16, |a| a.vcvtsh2usi(edx, xmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vcvtsh2usi_r32_xmmm16_er, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtsh2usi_r32_m() {
	// EVEX_Vcvtsh2usi_r32_xmmm16_er
	test_instr(16, |a| a.vcvtsh2usi(edx, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::EVEX_Vcvtsh2usi_r32_xmmm16_er, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtsi2sd_xmm_xmm_r32() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtsi2sd_xmm_xmm_rm32
		test_instr(16, |a| a.vcvtsi2sd(xmm2, xmm3, esp).unwrap(),
			Instruction::with3(Code::VEX_Vcvtsi2sd_xmm_xmm_rm32, Register::XMM2, Register::XMM3, Register::ESP).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtsi2sd_xmm_xmm_rm32_er
		test_instr(16, |a| a.vcvtsi2sd(xmm2, xmm3, esp).unwrap(),
			Instruction::with3(Code::EVEX_Vcvtsi2sd_xmm_xmm_rm32_er, Register::XMM2, Register::XMM3, Register::ESP).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtsi2sd_xmm_xmm_m() {
	/* if op2.size() == MemoryOperandSize::Qword */ {
		/* if self.instruction_prefer_vex() */ {
			// Skipping VEX_Vcvtsi2sd_xmm_xmm_rm64 - Not supported by current bitness
		} /* else */ {
			// Skipping EVEX_Vcvtsi2sd_xmm_xmm_rm64_er - Not supported by current bitness
		}
	} /* else if op2.size() == MemoryOperandSize::Dword */ {
		/* if self.instruction_prefer_vex() */ {
			// VEX_Vcvtsi2sd_xmm_xmm_rm32
			test_instr(16, |a| a.vcvtsi2sd(xmm2, xmm3, dword_ptr(di)).unwrap(),
				Instruction::with3(Code::VEX_Vcvtsi2sd_xmm_xmm_rm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
				TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
		} /* else */ {
			// EVEX_Vcvtsi2sd_xmm_xmm_rm32_er
			test_instr(16, |a| a.vcvtsi2sd(xmm2, xmm3, dword_ptr(di)).unwrap(),
				Instruction::with3(Code::EVEX_Vcvtsi2sd_xmm_xmm_rm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
				TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
		}
	} /* else */ {
		/* if self.instruction_prefer_vex() */ {
			// VEX_Vcvtsi2sd_xmm_xmm_rm32
			test_invalid_instr(16, |a| assert!(a.vcvtsi2sd(xmm2, xmm3, zmmword_ptr(di)).is_err()), TestInstrFlags::PREFER_VEX);
		} /* else */ {
			// EVEX_Vcvtsi2sd_xmm_xmm_rm32_er
			test_invalid_instr(16, |a| assert!(a.vcvtsi2sd(xmm2, xmm3, zmmword_ptr(di)).is_err()), TestInstrFlags::PREFER_EVEX);
		}
	}
}

#[test]
#[rustfmt::skip]
fn vcvtsi2sh_xmm_xmm_r32() {
	// EVEX_Vcvtsi2sh_xmm_xmm_rm32_er
	test_instr(16, |a| a.vcvtsi2sh(xmm2, xmm3, esp).unwrap(),
		Instruction::with3(Code::EVEX_Vcvtsi2sh_xmm_xmm_rm32_er, Register::XMM2, Register::XMM3, Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtsi2sh_xmm_xmm_m() {
	/* if op2.size() == MemoryOperandSize::Qword */ {
		// Skipping EVEX_Vcvtsi2sh_xmm_xmm_rm64_er - Not supported by current bitness
	} /* else if op2.size() == MemoryOperandSize::Dword */ {
		// EVEX_Vcvtsi2sh_xmm_xmm_rm32_er
		test_instr(16, |a| a.vcvtsi2sh(xmm2, xmm3, dword_ptr(di)).unwrap(),
			Instruction::with3(Code::EVEX_Vcvtsi2sh_xmm_xmm_rm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtsi2sh_xmm_xmm_rm32_er
		test_invalid_instr(16, |a| assert!(a.vcvtsi2sh(xmm2, xmm3, zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtsi2ss_xmm_xmm_r32() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtsi2ss_xmm_xmm_rm32
		test_instr(16, |a| a.vcvtsi2ss(xmm2, xmm3, esp).unwrap(),
			Instruction::with3(Code::VEX_Vcvtsi2ss_xmm_xmm_rm32, Register::XMM2, Register::XMM3, Register::ESP).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtsi2ss_xmm_xmm_rm32_er
		test_instr(16, |a| a.vcvtsi2ss(xmm2, xmm3, esp).unwrap(),
			Instruction::with3(Code::EVEX_Vcvtsi2ss_xmm_xmm_rm32_er, Register::XMM2, Register::XMM3, Register::ESP).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtsi2ss_xmm_xmm_m() {
	/* if op2.size() == MemoryOperandSize::Qword */ {
		/* if self.instruction_prefer_vex() */ {
			// Skipping VEX_Vcvtsi2ss_xmm_xmm_rm64 - Not supported by current bitness
		} /* else */ {
			// Skipping EVEX_Vcvtsi2ss_xmm_xmm_rm64_er - Not supported by current bitness
		}
	} /* else if op2.size() == MemoryOperandSize::Dword */ {
		/* if self.instruction_prefer_vex() */ {
			// VEX_Vcvtsi2ss_xmm_xmm_rm32
			test_instr(16, |a| a.vcvtsi2ss(xmm2, xmm3, dword_ptr(di)).unwrap(),
				Instruction::with3(Code::VEX_Vcvtsi2ss_xmm_xmm_rm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
				TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
		} /* else */ {
			// EVEX_Vcvtsi2ss_xmm_xmm_rm32_er
			test_instr(16, |a| a.vcvtsi2ss(xmm2, xmm3, dword_ptr(di)).unwrap(),
				Instruction::with3(Code::EVEX_Vcvtsi2ss_xmm_xmm_rm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
				TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
		}
	} /* else */ {
		/* if self.instruction_prefer_vex() */ {
			// VEX_Vcvtsi2ss_xmm_xmm_rm32
			test_invalid_instr(16, |a| assert!(a.vcvtsi2ss(xmm2, xmm3, zmmword_ptr(di)).is_err()), TestInstrFlags::PREFER_VEX);
		} /* else */ {
			// EVEX_Vcvtsi2ss_xmm_xmm_rm32_er
			test_invalid_instr(16, |a| assert!(a.vcvtsi2ss(xmm2, xmm3, zmmword_ptr(di)).is_err()), TestInstrFlags::PREFER_EVEX);
		}
	}
}

#[test]
#[rustfmt::skip]
fn vcvtss2sd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtss2sd_xmm_xmm_xmmm32
		test_instr(16, |a| a.vcvtss2sd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vcvtss2sd_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtss2sd_xmm_k1z_xmm_xmmm32_sae
		test_instr(16, |a| a.vcvtss2sd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vcvtss2sd_xmm_k1z_xmm_xmmm32_sae, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtss2sd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtss2sd_xmm_xmm_xmmm32
		test_instr(16, |a| a.vcvtss2sd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vcvtss2sd_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtss2sd_xmm_k1z_xmm_xmmm32_sae
		test_instr(16, |a| a.vcvtss2sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vcvtss2sd_xmm_k1z_xmm_xmmm32_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtss2sh_xmm_xmm_xmm() {
	// EVEX_Vcvtss2sh_xmm_k1z_xmm_xmmm32_er
	test_instr(16, |a| a.vcvtss2sh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtss2sh_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtss2sh_xmm_xmm_m() {
	// EVEX_Vcvtss2sh_xmm_k1z_xmm_xmmm32_er
	test_instr(16, |a| a.vcvtss2sh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vcvtss2sh_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtss2si_r32_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtss2si_r32_xmmm32
		test_instr(16, |a| a.vcvtss2si(edx, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvtss2si_r32_xmmm32, Register::EDX, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtss2si_r32_xmmm32_er
		test_instr(16, |a| a.vcvtss2si(edx, xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vcvtss2si_r32_xmmm32_er, Register::EDX, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtss2si_r32_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvtss2si_r32_xmmm32
		test_instr(16, |a| a.vcvtss2si(edx, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcvtss2si_r32_xmmm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtss2si_r32_xmmm32_er
		test_instr(16, |a| a.vcvtss2si(edx, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::EVEX_Vcvtss2si_r32_xmmm32_er, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtss2usi_r32_xmm() {
	// EVEX_Vcvtss2usi_r32_xmmm32_er
	test_instr(16, |a| a.vcvtss2usi(edx, xmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vcvtss2usi_r32_xmmm32_er, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtss2usi_r32_m() {
	// EVEX_Vcvtss2usi_r32_xmmm32_er
	test_instr(16, |a| a.vcvtss2usi(edx, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::EVEX_Vcvtss2usi_r32_xmmm32_er, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2dq_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvttpd2dq_xmm_xmmm128
		test_instr(16, |a| a.vcvttpd2dq(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvttpd2dq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64
		test_instr(16, |a| a.vcvttpd2dq(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvttpd2dq_xmm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvttpd2dq_xmm_ymmm256
		test_instr(16, |a| a.vcvttpd2dq(xmm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvttpd2dq_xmm_ymmm256, Register::XMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64
		test_instr(16, |a| a.vcvttpd2dq(xmm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvttpd2dq_ymm_zmm() {
	// EVEX_Vcvttpd2dq_ymm_k1z_zmmm512b64_sae
	test_instr(16, |a| a.vcvttpd2dq(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2dq_ymm_k1z_zmmm512b64_sae, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2dq_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64
		test_instr(16, |a| a.vcvttpd2dq(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		/* if self.instruction_prefer_vex() */ {
			// VEX_Vcvttpd2dq_xmm_ymmm256
			test_instr(16, |a| a.vcvttpd2dq(xmm2, ymmword_ptr(di)).unwrap(),
				Instruction::with2(Code::VEX_Vcvttpd2dq_xmm_ymmm256, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
				TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
		} /* else */ {
			// EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64
			test_instr(16, |a| a.vcvttpd2dq(xmm2.k1(), ymmword_ptr(di)).unwrap(),
				add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
				TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
		}
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		/* if self.instruction_prefer_vex() */ {
			// VEX_Vcvttpd2dq_xmm_xmmm128
			test_instr(16, |a| a.vcvttpd2dq(xmm2, xmmword_ptr(di)).unwrap(),
				Instruction::with2(Code::VEX_Vcvttpd2dq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
				TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
		} /* else */ {
			// EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64
			test_instr(16, |a| a.vcvttpd2dq(xmm2.k1(), xmmword_ptr(di)).unwrap(),
				add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
				TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
		}
	} /* else */ {
		/* if self.instruction_prefer_vex() */ {
			// VEX_Vcvttpd2dq_xmm_xmmm128
			test_invalid_instr(16, |a| assert!(a.vcvttpd2dq(xmm2, byte_ptr(di)).is_err()), TestInstrFlags::PREFER_VEX);
		} /* else */ {
			// EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64
			test_invalid_instr(16, |a| assert!(a.vcvttpd2dq(xmm2.k1(), byte_ptr(di)).is_err()), TestInstrFlags::PREFER_EVEX);
		}
	}
}

#[test]
#[rustfmt::skip]
fn vcvttpd2dq_ymm_m() {
	// EVEX_Vcvttpd2dq_ymm_k1z_zmmm512b64_sae
	test_instr(16, |a| a.vcvttpd2dq(ymm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2dq_ymm_k1z_zmmm512b64_sae, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2dqx_xmm_m() {
	// EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvttpd2dqx(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2dqy_xmm_m() {
	// EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvttpd2dqy(xmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2qq_xmm_xmm() {
	// EVEX_Vcvttpd2qq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvttpd2qq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2qq_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2qq_ymm_ymm() {
	// EVEX_Vcvttpd2qq_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvttpd2qq(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2qq_ymm_k1z_ymmm256b64, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2qq_zmm_zmm() {
	// EVEX_Vcvttpd2qq_zmm_k1z_zmmm512b64_sae
	test_instr(16, |a| a.vcvttpd2qq(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2qq_zmm_k1z_zmmm512b64_sae, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2qq_xmm_m() {
	// EVEX_Vcvttpd2qq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvttpd2qq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2qq_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2qq_ymm_m() {
	// EVEX_Vcvttpd2qq_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvttpd2qq(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2qq_ymm_k1z_ymmm256b64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2qq_zmm_m() {
	// EVEX_Vcvttpd2qq_zmm_k1z_zmmm512b64_sae
	test_instr(16, |a| a.vcvttpd2qq(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2qq_zmm_k1z_zmmm512b64_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2udq_xmm_xmm() {
	// EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvttpd2udq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2udq_xmm_ymm() {
	// EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvttpd2udq(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2udq_ymm_zmm() {
	// EVEX_Vcvttpd2udq_ymm_k1z_zmmm512b64_sae
	test_instr(16, |a| a.vcvttpd2udq(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2udq_ymm_k1z_zmmm512b64_sae, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2udq_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64
		test_instr(16, |a| a.vcvttpd2udq(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64
		test_instr(16, |a| a.vcvttpd2udq(xmm2.k1(), ymmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64
		test_instr(16, |a| a.vcvttpd2udq(xmm2.k1(), xmmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64
		test_invalid_instr(16, |a| assert!(a.vcvttpd2udq(xmm2.k1(), byte_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvttpd2udq_ymm_m() {
	// EVEX_Vcvttpd2udq_ymm_k1z_zmmm512b64_sae
	test_instr(16, |a| a.vcvttpd2udq(ymm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2udq_ymm_k1z_zmmm512b64_sae, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2udqx_xmm_m() {
	// EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvttpd2udqx(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2udqy_xmm_m() {
	// EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvttpd2udqy(xmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2uqq_xmm_xmm() {
	// EVEX_Vcvttpd2uqq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvttpd2uqq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2uqq_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2uqq_ymm_ymm() {
	// EVEX_Vcvttpd2uqq_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvttpd2uqq(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2uqq_ymm_k1z_ymmm256b64, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2uqq_zmm_zmm() {
	// EVEX_Vcvttpd2uqq_zmm_k1z_zmmm512b64_sae
	test_instr(16, |a| a.vcvttpd2uqq(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2uqq_zmm_k1z_zmmm512b64_sae, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2uqq_xmm_m() {
	// EVEX_Vcvttpd2uqq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvttpd2uqq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2uqq_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2uqq_ymm_m() {
	// EVEX_Vcvttpd2uqq_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvttpd2uqq(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2uqq_ymm_k1z_ymmm256b64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttpd2uqq_zmm_m() {
	// EVEX_Vcvttpd2uqq_zmm_k1z_zmmm512b64_sae
	test_instr(16, |a| a.vcvttpd2uqq(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttpd2uqq_zmm_k1z_zmmm512b64_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2dq_xmm_xmm() {
	// EVEX_Vcvttph2dq_xmm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvttph2dq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2dq_xmm_k1z_xmmm64b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2dq_ymm_xmm() {
	// EVEX_Vcvttph2dq_ymm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvttph2dq(ymm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2dq_ymm_k1z_xmmm128b16, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2dq_zmm_ymm() {
	// EVEX_Vcvttph2dq_zmm_k1z_ymmm256b16_sae
	test_instr(16, |a| a.vcvttph2dq(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2dq_zmm_k1z_ymmm256b16_sae, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2dq_xmm_m() {
	// EVEX_Vcvttph2dq_xmm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvttph2dq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2dq_xmm_k1z_xmmm64b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2dq_ymm_m() {
	// EVEX_Vcvttph2dq_ymm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvttph2dq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2dq_ymm_k1z_xmmm128b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2dq_zmm_m() {
	// EVEX_Vcvttph2dq_zmm_k1z_ymmm256b16_sae
	test_instr(16, |a| a.vcvttph2dq(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2dq_zmm_k1z_ymmm256b16_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2qq_xmm_xmm() {
	// EVEX_Vcvttph2qq_xmm_k1z_xmmm32b16
	test_instr(16, |a| a.vcvttph2qq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2qq_xmm_k1z_xmmm32b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2qq_ymm_xmm() {
	// EVEX_Vcvttph2qq_ymm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvttph2qq(ymm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2qq_ymm_k1z_xmmm64b16, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2qq_zmm_xmm() {
	// EVEX_Vcvttph2qq_zmm_k1z_xmmm128b16_sae
	test_instr(16, |a| a.vcvttph2qq(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2qq_zmm_k1z_xmmm128b16_sae, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2qq_xmm_m() {
	// EVEX_Vcvttph2qq_xmm_k1z_xmmm32b16
	test_instr(16, |a| a.vcvttph2qq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2qq_xmm_k1z_xmmm32b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2qq_ymm_m() {
	// EVEX_Vcvttph2qq_ymm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvttph2qq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2qq_ymm_k1z_xmmm64b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2qq_zmm_m() {
	// EVEX_Vcvttph2qq_zmm_k1z_xmmm128b16_sae
	test_instr(16, |a| a.vcvttph2qq(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2qq_zmm_k1z_xmmm128b16_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2udq_xmm_xmm() {
	// EVEX_Vcvttph2udq_xmm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvttph2udq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2udq_xmm_k1z_xmmm64b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2udq_ymm_xmm() {
	// EVEX_Vcvttph2udq_ymm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvttph2udq(ymm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2udq_ymm_k1z_xmmm128b16, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2udq_zmm_ymm() {
	// EVEX_Vcvttph2udq_zmm_k1z_ymmm256b16_sae
	test_instr(16, |a| a.vcvttph2udq(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2udq_zmm_k1z_ymmm256b16_sae, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2udq_xmm_m() {
	// EVEX_Vcvttph2udq_xmm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvttph2udq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2udq_xmm_k1z_xmmm64b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2udq_ymm_m() {
	// EVEX_Vcvttph2udq_ymm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvttph2udq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2udq_ymm_k1z_xmmm128b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2udq_zmm_m() {
	// EVEX_Vcvttph2udq_zmm_k1z_ymmm256b16_sae
	test_instr(16, |a| a.vcvttph2udq(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2udq_zmm_k1z_ymmm256b16_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2uqq_xmm_xmm() {
	// EVEX_Vcvttph2uqq_xmm_k1z_xmmm32b16
	test_instr(16, |a| a.vcvttph2uqq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2uqq_xmm_k1z_xmmm32b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2uqq_ymm_xmm() {
	// EVEX_Vcvttph2uqq_ymm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvttph2uqq(ymm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2uqq_ymm_k1z_xmmm64b16, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2uqq_zmm_xmm() {
	// EVEX_Vcvttph2uqq_zmm_k1z_xmmm128b16_sae
	test_instr(16, |a| a.vcvttph2uqq(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2uqq_zmm_k1z_xmmm128b16_sae, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2uqq_xmm_m() {
	// EVEX_Vcvttph2uqq_xmm_k1z_xmmm32b16
	test_instr(16, |a| a.vcvttph2uqq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2uqq_xmm_k1z_xmmm32b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2uqq_ymm_m() {
	// EVEX_Vcvttph2uqq_ymm_k1z_xmmm64b16
	test_instr(16, |a| a.vcvttph2uqq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2uqq_ymm_k1z_xmmm64b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2uqq_zmm_m() {
	// EVEX_Vcvttph2uqq_zmm_k1z_xmmm128b16_sae
	test_instr(16, |a| a.vcvttph2uqq(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2uqq_zmm_k1z_xmmm128b16_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2uw_xmm_xmm() {
	// EVEX_Vcvttph2uw_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvttph2uw(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2uw_xmm_k1z_xmmm128b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2uw_ymm_ymm() {
	// EVEX_Vcvttph2uw_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vcvttph2uw(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2uw_ymm_k1z_ymmm256b16, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2uw_zmm_zmm() {
	// EVEX_Vcvttph2uw_zmm_k1z_zmmm512b16_sae
	test_instr(16, |a| a.vcvttph2uw(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2uw_zmm_k1z_zmmm512b16_sae, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2uw_xmm_m() {
	// EVEX_Vcvttph2uw_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvttph2uw(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2uw_xmm_k1z_xmmm128b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2uw_ymm_m() {
	// EVEX_Vcvttph2uw_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vcvttph2uw(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2uw_ymm_k1z_ymmm256b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2uw_zmm_m() {
	// EVEX_Vcvttph2uw_zmm_k1z_zmmm512b16_sae
	test_instr(16, |a| a.vcvttph2uw(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2uw_zmm_k1z_zmmm512b16_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2w_xmm_xmm() {
	// EVEX_Vcvttph2w_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvttph2w(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2w_xmm_k1z_xmmm128b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2w_ymm_ymm() {
	// EVEX_Vcvttph2w_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vcvttph2w(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2w_ymm_k1z_ymmm256b16, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2w_zmm_zmm() {
	// EVEX_Vcvttph2w_zmm_k1z_zmmm512b16_sae
	test_instr(16, |a| a.vcvttph2w(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2w_zmm_k1z_zmmm512b16_sae, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2w_xmm_m() {
	// EVEX_Vcvttph2w_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvttph2w(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2w_xmm_k1z_xmmm128b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2w_ymm_m() {
	// EVEX_Vcvttph2w_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vcvttph2w(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2w_ymm_k1z_ymmm256b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttph2w_zmm_m() {
	// EVEX_Vcvttph2w_zmm_k1z_zmmm512b16_sae
	test_instr(16, |a| a.vcvttph2w(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttph2w_zmm_k1z_zmmm512b16_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2dq_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvttps2dq_xmm_xmmm128
		test_instr(16, |a| a.vcvttps2dq(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvttps2dq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvttps2dq(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvttps2dq_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvttps2dq_ymm_ymmm256
		test_instr(16, |a| a.vcvttps2dq(ymm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvttps2dq_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32
		test_instr(16, |a| a.vcvttps2dq(ymm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvttps2dq_zmm_zmm() {
	// EVEX_Vcvttps2dq_zmm_k1z_zmmm512b32_sae
	test_instr(16, |a| a.vcvttps2dq(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2dq_zmm_k1z_zmmm512b32_sae, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2dq_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvttps2dq(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vcvttps2dq_xmm_xmmm128
		test_instr(16, |a| a.vcvttps2dq(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcvttps2dq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvttps2dq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvttps2dq_ymm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32
		test_instr(16, |a| a.vcvttps2dq(ymm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vcvttps2dq_ymm_ymmm256
		test_instr(16, |a| a.vcvttps2dq(ymm2, ymmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcvttps2dq_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32
		test_instr(16, |a| a.vcvttps2dq(ymm2.k1(), ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvttps2dq_zmm_m() {
	// EVEX_Vcvttps2dq_zmm_k1z_zmmm512b32_sae
	test_instr(16, |a| a.vcvttps2dq(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2dq_zmm_k1z_zmmm512b32_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2qq_xmm_xmm() {
	// EVEX_Vcvttps2qq_xmm_k1z_xmmm64b32
	test_instr(16, |a| a.vcvttps2qq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2qq_xmm_k1z_xmmm64b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2qq_ymm_xmm() {
	// EVEX_Vcvttps2qq_ymm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvttps2qq(ymm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2qq_ymm_k1z_xmmm128b32, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2qq_zmm_ymm() {
	// EVEX_Vcvttps2qq_zmm_k1z_ymmm256b32_sae
	test_instr(16, |a| a.vcvttps2qq(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2qq_zmm_k1z_ymmm256b32_sae, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2qq_xmm_m() {
	// EVEX_Vcvttps2qq_xmm_k1z_xmmm64b32
	test_instr(16, |a| a.vcvttps2qq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2qq_xmm_k1z_xmmm64b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2qq_ymm_m() {
	// EVEX_Vcvttps2qq_ymm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvttps2qq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2qq_ymm_k1z_xmmm128b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2qq_zmm_m() {
	// EVEX_Vcvttps2qq_zmm_k1z_ymmm256b32_sae
	test_instr(16, |a| a.vcvttps2qq(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2qq_zmm_k1z_ymmm256b32_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2udq_xmm_xmm() {
	// EVEX_Vcvttps2udq_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvttps2udq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2udq_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2udq_ymm_ymm() {
	// EVEX_Vcvttps2udq_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vcvttps2udq(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2udq_ymm_k1z_ymmm256b32, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2udq_zmm_zmm() {
	// EVEX_Vcvttps2udq_zmm_k1z_zmmm512b32_sae
	test_instr(16, |a| a.vcvttps2udq(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2udq_zmm_k1z_zmmm512b32_sae, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2udq_xmm_m() {
	// EVEX_Vcvttps2udq_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvttps2udq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2udq_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2udq_ymm_m() {
	// EVEX_Vcvttps2udq_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vcvttps2udq(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2udq_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2udq_zmm_m() {
	// EVEX_Vcvttps2udq_zmm_k1z_zmmm512b32_sae
	test_instr(16, |a| a.vcvttps2udq(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2udq_zmm_k1z_zmmm512b32_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2uqq_xmm_xmm() {
	// EVEX_Vcvttps2uqq_xmm_k1z_xmmm64b32
	test_instr(16, |a| a.vcvttps2uqq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2uqq_xmm_k1z_xmmm64b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2uqq_ymm_xmm() {
	// EVEX_Vcvttps2uqq_ymm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvttps2uqq(ymm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2uqq_ymm_k1z_xmmm128b32, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2uqq_zmm_ymm() {
	// EVEX_Vcvttps2uqq_zmm_k1z_ymmm256b32_sae
	test_instr(16, |a| a.vcvttps2uqq(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2uqq_zmm_k1z_ymmm256b32_sae, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2uqq_xmm_m() {
	// EVEX_Vcvttps2uqq_xmm_k1z_xmmm64b32
	test_instr(16, |a| a.vcvttps2uqq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2uqq_xmm_k1z_xmmm64b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2uqq_ymm_m() {
	// EVEX_Vcvttps2uqq_ymm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvttps2uqq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2uqq_ymm_k1z_xmmm128b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttps2uqq_zmm_m() {
	// EVEX_Vcvttps2uqq_zmm_k1z_ymmm256b32_sae
	test_instr(16, |a| a.vcvttps2uqq(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvttps2uqq_zmm_k1z_ymmm256b32_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttsd2si_r32_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvttsd2si_r32_xmmm64
		test_instr(16, |a| a.vcvttsd2si(edx, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvttsd2si_r32_xmmm64, Register::EDX, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvttsd2si_r32_xmmm64_sae
		test_instr(16, |a| a.vcvttsd2si(edx, xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vcvttsd2si_r32_xmmm64_sae, Register::EDX, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvttsd2si_r32_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvttsd2si_r32_xmmm64
		test_instr(16, |a| a.vcvttsd2si(edx, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcvttsd2si_r32_xmmm64, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvttsd2si_r32_xmmm64_sae
		test_instr(16, |a| a.vcvttsd2si(edx, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::EVEX_Vcvttsd2si_r32_xmmm64_sae, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvttsd2usi_r32_xmm() {
	// EVEX_Vcvttsd2usi_r32_xmmm64_sae
	test_instr(16, |a| a.vcvttsd2usi(edx, xmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vcvttsd2usi_r32_xmmm64_sae, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttsd2usi_r32_m() {
	// EVEX_Vcvttsd2usi_r32_xmmm64_sae
	test_instr(16, |a| a.vcvttsd2usi(edx, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::EVEX_Vcvttsd2usi_r32_xmmm64_sae, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttsh2si_r32_xmm() {
	// EVEX_Vcvttsh2si_r32_xmmm16_sae
	test_instr(16, |a| a.vcvttsh2si(edx, xmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vcvttsh2si_r32_xmmm16_sae, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttsh2si_r32_m() {
	// EVEX_Vcvttsh2si_r32_xmmm16_sae
	test_instr(16, |a| a.vcvttsh2si(edx, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::EVEX_Vcvttsh2si_r32_xmmm16_sae, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttsh2usi_r32_xmm() {
	// EVEX_Vcvttsh2usi_r32_xmmm16_sae
	test_instr(16, |a| a.vcvttsh2usi(edx, xmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vcvttsh2usi_r32_xmmm16_sae, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttsh2usi_r32_m() {
	// EVEX_Vcvttsh2usi_r32_xmmm16_sae
	test_instr(16, |a| a.vcvttsh2usi(edx, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::EVEX_Vcvttsh2usi_r32_xmmm16_sae, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttss2si_r32_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvttss2si_r32_xmmm32
		test_instr(16, |a| a.vcvttss2si(edx, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vcvttss2si_r32_xmmm32, Register::EDX, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvttss2si_r32_xmmm32_sae
		test_instr(16, |a| a.vcvttss2si(edx, xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vcvttss2si_r32_xmmm32_sae, Register::EDX, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvttss2si_r32_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vcvttss2si_r32_xmmm32
		test_instr(16, |a| a.vcvttss2si(edx, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vcvttss2si_r32_xmmm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvttss2si_r32_xmmm32_sae
		test_instr(16, |a| a.vcvttss2si(edx, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::EVEX_Vcvttss2si_r32_xmmm32_sae, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvttss2usi_r32_xmm() {
	// EVEX_Vcvttss2usi_r32_xmmm32_sae
	test_instr(16, |a| a.vcvttss2usi(edx, xmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vcvttss2usi_r32_xmmm32_sae, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvttss2usi_r32_m() {
	// EVEX_Vcvttss2usi_r32_xmmm32_sae
	test_instr(16, |a| a.vcvttss2usi(edx, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::EVEX_Vcvttss2usi_r32_xmmm32_sae, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2pd_xmm_xmm() {
	// EVEX_Vcvtudq2pd_xmm_k1z_xmmm64b32
	test_instr(16, |a| a.vcvtudq2pd(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2pd_xmm_k1z_xmmm64b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2pd_ymm_xmm() {
	// EVEX_Vcvtudq2pd_ymm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvtudq2pd(ymm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2pd_ymm_k1z_xmmm128b32, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2pd_zmm_ymm() {
	// EVEX_Vcvtudq2pd_zmm_k1z_ymmm256b32_er
	test_instr(16, |a| a.vcvtudq2pd(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2pd_zmm_k1z_ymmm256b32_er, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2pd_xmm_m() {
	// EVEX_Vcvtudq2pd_xmm_k1z_xmmm64b32
	test_instr(16, |a| a.vcvtudq2pd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2pd_xmm_k1z_xmmm64b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2pd_ymm_m() {
	// EVEX_Vcvtudq2pd_ymm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvtudq2pd(ymm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2pd_ymm_k1z_xmmm128b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2pd_zmm_m() {
	// EVEX_Vcvtudq2pd_zmm_k1z_ymmm256b32_er
	test_instr(16, |a| a.vcvtudq2pd(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2pd_zmm_k1z_ymmm256b32_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2ph_xmm_xmm() {
	// EVEX_Vcvtudq2ph_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvtudq2ph(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2ph_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2ph_xmm_ymm() {
	// EVEX_Vcvtudq2ph_xmm_k1z_ymmm256b32
	test_instr(16, |a| a.vcvtudq2ph(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2ph_xmm_k1z_ymmm256b32, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2ph_ymm_zmm() {
	// EVEX_Vcvtudq2ph_ymm_k1z_zmmm512b32_er
	test_instr(16, |a| a.vcvtudq2ph(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2ph_ymm_k1z_zmmm512b32_er, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2ph_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtudq2ph_xmm_k1z_ymmm256b32
		test_instr(16, |a| a.vcvtudq2ph(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2ph_xmm_k1z_ymmm256b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vcvtudq2ph_xmm_k1z_ymmm256b32
		test_instr(16, |a| a.vcvtudq2ph(xmm2.k1(), ymmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2ph_xmm_k1z_ymmm256b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vcvtudq2ph_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vcvtudq2ph(xmm2.k1(), xmmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2ph_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtudq2ph_xmm_k1z_xmmm128b32
		test_invalid_instr(16, |a| assert!(a.vcvtudq2ph(xmm2.k1(), byte_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtudq2ph_ymm_m() {
	// EVEX_Vcvtudq2ph_ymm_k1z_zmmm512b32_er
	test_instr(16, |a| a.vcvtudq2ph(ymm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2ph_ymm_k1z_zmmm512b32_er, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2phx_xmm_m() {
	// EVEX_Vcvtudq2ph_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvtudq2phx(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2ph_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2phy_xmm_m() {
	// EVEX_Vcvtudq2ph_xmm_k1z_ymmm256b32
	test_instr(16, |a| a.vcvtudq2phy(xmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2ph_xmm_k1z_ymmm256b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2ps_xmm_xmm() {
	// EVEX_Vcvtudq2ps_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvtudq2ps(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2ps_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2ps_ymm_ymm() {
	// EVEX_Vcvtudq2ps_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vcvtudq2ps(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2ps_ymm_k1z_ymmm256b32, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2ps_zmm_zmm() {
	// EVEX_Vcvtudq2ps_zmm_k1z_zmmm512b32_er
	test_instr(16, |a| a.vcvtudq2ps(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2ps_zmm_k1z_zmmm512b32_er, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2ps_xmm_m() {
	// EVEX_Vcvtudq2ps_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vcvtudq2ps(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2ps_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2ps_ymm_m() {
	// EVEX_Vcvtudq2ps_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vcvtudq2ps(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2ps_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtudq2ps_zmm_m() {
	// EVEX_Vcvtudq2ps_zmm_k1z_zmmm512b32_er
	test_instr(16, |a| a.vcvtudq2ps(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtudq2ps_zmm_k1z_zmmm512b32_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2pd_xmm_xmm() {
	// EVEX_Vcvtuqq2pd_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtuqq2pd(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2pd_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2pd_ymm_ymm() {
	// EVEX_Vcvtuqq2pd_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtuqq2pd(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2pd_ymm_k1z_ymmm256b64, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2pd_zmm_zmm() {
	// EVEX_Vcvtuqq2pd_zmm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtuqq2pd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2pd_zmm_k1z_zmmm512b64_er, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2pd_xmm_m() {
	// EVEX_Vcvtuqq2pd_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtuqq2pd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2pd_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2pd_ymm_m() {
	// EVEX_Vcvtuqq2pd_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtuqq2pd(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2pd_ymm_k1z_ymmm256b64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2pd_zmm_m() {
	// EVEX_Vcvtuqq2pd_zmm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtuqq2pd(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2pd_zmm_k1z_zmmm512b64_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2ph_xmm_xmm() {
	// EVEX_Vcvtuqq2ph_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtuqq2ph(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ph_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2ph_xmm_ymm() {
	// EVEX_Vcvtuqq2ph_xmm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtuqq2ph(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ph_xmm_k1z_ymmm256b64, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2ph_xmm_zmm() {
	// EVEX_Vcvtuqq2ph_xmm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtuqq2ph(xmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ph_xmm_k1z_zmmm512b64_er, Register::XMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2ph_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtuqq2ph_xmm_k1z_zmmm512b64_er
		test_instr(16, |a| a.vcvtuqq2ph(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ph_xmm_k1z_zmmm512b64_er, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Zword */ {
		// EVEX_Vcvtuqq2ph_xmm_k1z_zmmm512b64_er
		test_instr(16, |a| a.vcvtuqq2ph(xmm2.k1(), zmmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ph_xmm_k1z_zmmm512b64_er, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vcvtuqq2ph_xmm_k1z_ymmm256b64
		test_instr(16, |a| a.vcvtuqq2ph(xmm2.k1(), ymmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ph_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vcvtuqq2ph_xmm_k1z_xmmm128b64
		test_instr(16, |a| a.vcvtuqq2ph(xmm2.k1(), xmmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ph_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtuqq2ph_xmm_k1z_xmmm128b64
		test_invalid_instr(16, |a| assert!(a.vcvtuqq2ph(xmm2.k1(), byte_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2phx_xmm_m() {
	// EVEX_Vcvtuqq2ph_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtuqq2phx(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ph_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2phy_xmm_m() {
	// EVEX_Vcvtuqq2ph_xmm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtuqq2phy(xmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ph_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2phz_xmm_m() {
	// EVEX_Vcvtuqq2ph_xmm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtuqq2phz(xmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ph_xmm_k1z_zmmm512b64_er, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2ps_xmm_xmm() {
	// EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtuqq2ps(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2ps_xmm_ymm() {
	// EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtuqq2ps(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2ps_ymm_zmm() {
	// EVEX_Vcvtuqq2ps_ymm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtuqq2ps(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ps_ymm_k1z_zmmm512b64_er, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2ps_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64
		test_instr(16, |a| a.vcvtuqq2ps(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64
		test_instr(16, |a| a.vcvtuqq2ps(xmm2.k1(), ymmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64
		test_instr(16, |a| a.vcvtuqq2ps(xmm2.k1(), xmmword_ptr(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64
		test_invalid_instr(16, |a| assert!(a.vcvtuqq2ps(xmm2.k1(), byte_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2ps_ymm_m() {
	// EVEX_Vcvtuqq2ps_ymm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vcvtuqq2ps(ymm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ps_ymm_k1z_zmmm512b64_er, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2psx_xmm_m() {
	// EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vcvtuqq2psx(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuqq2psy_xmm_m() {
	// EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64
	test_instr(16, |a| a.vcvtuqq2psy(xmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtusi2sd_xmm_xmm_r32() {
	// EVEX_Vcvtusi2sd_xmm_xmm_rm32_er
	test_instr(16, |a| a.vcvtusi2sd(xmm2, xmm3, esp).unwrap(),
		Instruction::with3(Code::EVEX_Vcvtusi2sd_xmm_xmm_rm32_er, Register::XMM2, Register::XMM3, Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtusi2sd_xmm_xmm_m() {
	/* if op2.size() == MemoryOperandSize::Qword */ {
		// Skipping EVEX_Vcvtusi2sd_xmm_xmm_rm64_er - Not supported by current bitness
	} /* else if op2.size() == MemoryOperandSize::Dword */ {
		// EVEX_Vcvtusi2sd_xmm_xmm_rm32_er
		test_instr(16, |a| a.vcvtusi2sd(xmm2, xmm3, dword_ptr(di)).unwrap(),
			Instruction::with3(Code::EVEX_Vcvtusi2sd_xmm_xmm_rm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtusi2sd_xmm_xmm_rm32_er
		test_invalid_instr(16, |a| assert!(a.vcvtusi2sd(xmm2, xmm3, zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtusi2sh_xmm_xmm_r32() {
	// EVEX_Vcvtusi2sh_xmm_xmm_rm32_er
	test_instr(16, |a| a.vcvtusi2sh(xmm2, xmm3, esp).unwrap(),
		Instruction::with3(Code::EVEX_Vcvtusi2sh_xmm_xmm_rm32_er, Register::XMM2, Register::XMM3, Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtusi2sh_xmm_xmm_m() {
	/* if op2.size() == MemoryOperandSize::Qword */ {
		// Skipping EVEX_Vcvtusi2sh_xmm_xmm_rm64_er - Not supported by current bitness
	} /* else if op2.size() == MemoryOperandSize::Dword */ {
		// EVEX_Vcvtusi2sh_xmm_xmm_rm32_er
		test_instr(16, |a| a.vcvtusi2sh(xmm2, xmm3, dword_ptr(di)).unwrap(),
			Instruction::with3(Code::EVEX_Vcvtusi2sh_xmm_xmm_rm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtusi2sh_xmm_xmm_rm32_er
		test_invalid_instr(16, |a| assert!(a.vcvtusi2sh(xmm2, xmm3, zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtusi2ss_xmm_xmm_r32() {
	// EVEX_Vcvtusi2ss_xmm_xmm_rm32_er
	test_instr(16, |a| a.vcvtusi2ss(xmm2, xmm3, esp).unwrap(),
		Instruction::with3(Code::EVEX_Vcvtusi2ss_xmm_xmm_rm32_er, Register::XMM2, Register::XMM3, Register::ESP).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtusi2ss_xmm_xmm_m() {
	/* if op2.size() == MemoryOperandSize::Qword */ {
		// Skipping EVEX_Vcvtusi2ss_xmm_xmm_rm64_er - Not supported by current bitness
	} /* else if op2.size() == MemoryOperandSize::Dword */ {
		// EVEX_Vcvtusi2ss_xmm_xmm_rm32_er
		test_instr(16, |a| a.vcvtusi2ss(xmm2, xmm3, dword_ptr(di)).unwrap(),
			Instruction::with3(Code::EVEX_Vcvtusi2ss_xmm_xmm_rm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vcvtusi2ss_xmm_xmm_rm32_er
		test_invalid_instr(16, |a| assert!(a.vcvtusi2ss(xmm2, xmm3, zmmword_ptr(di)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vcvtuw2ph_xmm_xmm() {
	// EVEX_Vcvtuw2ph_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvtuw2ph(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuw2ph_xmm_k1z_xmmm128b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuw2ph_ymm_ymm() {
	// EVEX_Vcvtuw2ph_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vcvtuw2ph(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuw2ph_ymm_k1z_ymmm256b16, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuw2ph_zmm_zmm() {
	// EVEX_Vcvtuw2ph_zmm_k1z_zmmm512b16_er
	test_instr(16, |a| a.vcvtuw2ph(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuw2ph_zmm_k1z_zmmm512b16_er, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuw2ph_xmm_m() {
	// EVEX_Vcvtuw2ph_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvtuw2ph(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuw2ph_xmm_k1z_xmmm128b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuw2ph_ymm_m() {
	// EVEX_Vcvtuw2ph_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vcvtuw2ph(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuw2ph_ymm_k1z_ymmm256b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtuw2ph_zmm_m() {
	// EVEX_Vcvtuw2ph_zmm_k1z_zmmm512b16_er
	test_instr(16, |a| a.vcvtuw2ph(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtuw2ph_zmm_k1z_zmmm512b16_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtw2ph_xmm_xmm() {
	// EVEX_Vcvtw2ph_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvtw2ph(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtw2ph_xmm_k1z_xmmm128b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtw2ph_ymm_ymm() {
	// EVEX_Vcvtw2ph_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vcvtw2ph(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtw2ph_ymm_k1z_ymmm256b16, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtw2ph_zmm_zmm() {
	// EVEX_Vcvtw2ph_zmm_k1z_zmmm512b16_er
	test_instr(16, |a| a.vcvtw2ph(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtw2ph_zmm_k1z_zmmm512b16_er, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtw2ph_xmm_m() {
	// EVEX_Vcvtw2ph_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vcvtw2ph(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtw2ph_xmm_k1z_xmmm128b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtw2ph_ymm_m() {
	// EVEX_Vcvtw2ph_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vcvtw2ph(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtw2ph_ymm_k1z_ymmm256b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vcvtw2ph_zmm_m() {
	// EVEX_Vcvtw2ph_zmm_k1z_zmmm512b16_er
	test_instr(16, |a| a.vcvtw2ph(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vcvtw2ph_zmm_k1z_zmmm512b16_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdbpsadbw_xmm_xmm_xmm_i() {
	// EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdbpsadbw(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdbpsadbw(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdbpsadbw_ymm_ymm_ymm_i() {
	// EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vdbpsadbw(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vdbpsadbw(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdbpsadbw_zmm_zmm_zmm_i() {
	// EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vdbpsadbw(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vdbpsadbw(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdbpsadbw_xmm_xmm_m_i() {
	// EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdbpsadbw(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdbpsadbw(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdbpsadbw_ymm_ymm_m_i() {
	// EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vdbpsadbw(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vdbpsadbw(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdbpsadbw_zmm_zmm_m_i() {
	// EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vdbpsadbw(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vdbpsadbw(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdbpsadbw_xmm_xmm_xmm_u() {
	// EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdbpsadbw(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdbpsadbw_ymm_ymm_ymm_u() {
	// EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vdbpsadbw(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdbpsadbw_zmm_zmm_zmm_u() {
	// EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vdbpsadbw(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdbpsadbw_xmm_xmm_m_u() {
	// EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdbpsadbw(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdbpsadbw_ymm_ymm_m_u() {
	// EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vdbpsadbw(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdbpsadbw_zmm_zmm_m_u() {
	// EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vdbpsadbw(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdivpd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vdivpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vdivpd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vdivpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vdivpd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vdivpd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vdivpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vdivpd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vdivpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vdivpd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vdivpd_zmm_zmm_zmm() {
	// EVEX_Vdivpd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vdivpd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdivpd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdivpd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vdivpd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vdivpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vdivpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vdivpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vdivpd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vdivpd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vdivpd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vdivpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vdivpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vdivpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vdivpd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vdivpd_zmm_zmm_m() {
	// EVEX_Vdivpd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vdivpd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdivpd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdivph_xmm_xmm_xmm() {
	// EVEX_Vdivph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vdivph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdivph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdivph_ymm_ymm_ymm() {
	// EVEX_Vdivph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vdivph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdivph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdivph_zmm_zmm_zmm() {
	// EVEX_Vdivph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vdivph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdivph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdivph_xmm_xmm_m() {
	// EVEX_Vdivph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vdivph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdivph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdivph_ymm_ymm_m() {
	// EVEX_Vdivph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vdivph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdivph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdivph_zmm_zmm_m() {
	// EVEX_Vdivph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vdivph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdivph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdivps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vdivps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vdivps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vdivps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vdivps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vdivps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vdivps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vdivps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vdivps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vdivps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vdivps_zmm_zmm_zmm() {
	// EVEX_Vdivps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vdivps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdivps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdivps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vdivps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vdivps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vdivps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vdivps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vdivps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vdivps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vdivps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vdivps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vdivps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vdivps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vdivps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vdivps_zmm_zmm_m() {
	// EVEX_Vdivps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vdivps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdivps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdivsd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vdivsd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vdivsd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vdivsd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vdivsd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vdivsd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vdivsd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vdivsd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vdivsd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vdivsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vdivsd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vdivsd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vdivsd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vdivsd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vdivsh_xmm_xmm_xmm() {
	// EVEX_Vdivsh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vdivsh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdivsh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdivsh_xmm_xmm_m() {
	// EVEX_Vdivsh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vdivsh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdivsh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdivss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vdivss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vdivss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vdivss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vdivss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vdivss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vdivss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vdivss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vdivss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vdivss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vdivss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vdivss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vdivss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vdivss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vdpbf16ps_xmm_xmm_xmm() {
	// EVEX_Vdpbf16ps_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vdpbf16ps(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdpbf16ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdpbf16ps_ymm_ymm_ymm() {
	// EVEX_Vdpbf16ps_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vdpbf16ps(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdpbf16ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdpbf16ps_zmm_zmm_zmm() {
	// EVEX_Vdpbf16ps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vdpbf16ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdpbf16ps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdpbf16ps_xmm_xmm_m() {
	// EVEX_Vdpbf16ps_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vdpbf16ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdpbf16ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdpbf16ps_ymm_ymm_m() {
	// EVEX_Vdpbf16ps_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vdpbf16ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdpbf16ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdpbf16ps_zmm_zmm_m() {
	// EVEX_Vdpbf16ps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vdpbf16ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vdpbf16ps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdppd_xmm_xmm_xmm_i() {
	// VEX_Vdppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdppd(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vdppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vdppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdppd(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vdppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdppd_xmm_xmm_m_i() {
	// VEX_Vdppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdppd(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vdppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vdppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdppd(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vdppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdppd_xmm_xmm_xmm_u() {
	// VEX_Vdppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdppd(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vdppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdppd_xmm_xmm_m_u() {
	// VEX_Vdppd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdppd(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vdppd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdpps_xmm_xmm_xmm_i() {
	// VEX_Vdpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdpps(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vdpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vdpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdpps(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vdpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdpps_ymm_ymm_ymm_i() {
	// VEX_Vdpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vdpps(ymm2, ymm3, ymm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vdpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vdpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vdpps(ymm2, ymm3, ymm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vdpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdpps_xmm_xmm_m_i() {
	// VEX_Vdpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdpps(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vdpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vdpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdpps(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vdpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdpps_ymm_ymm_m_i() {
	// VEX_Vdpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vdpps(ymm2, ymm3, ymmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vdpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vdpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vdpps(ymm2, ymm3, ymmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vdpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdpps_xmm_xmm_xmm_u() {
	// VEX_Vdpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdpps(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vdpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdpps_ymm_ymm_ymm_u() {
	// VEX_Vdpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vdpps(ymm2, ymm3, ymm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vdpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdpps_xmm_xmm_m_u() {
	// VEX_Vdpps_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vdpps(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vdpps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vdpps_ymm_ymm_m_u() {
	// VEX_Vdpps_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vdpps(ymm2, ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vdpps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn verr_r16() {
	// Verr_rm16
	test_instr(16, |a| a.verr(dx).unwrap(),
		Instruction::with1(Code::Verr_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn verr_r32() {
	// Verr_r32m16
	test_instr(16, |a| a.verr(edx).unwrap(),
		Instruction::with1(Code::Verr_r32m16, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn verr_m() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Verr_rm16
		test_instr(16, |a| a.verr(word_ptr(si)).unwrap(),
			Instruction::with1(Code::Verr_rm16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn verw_r16() {
	// Verw_rm16
	test_instr(16, |a| a.verw(dx).unwrap(),
		Instruction::with1(Code::Verw_rm16, Register::DX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn verw_r32() {
	// Verw_r32m16
	test_instr(16, |a| a.verw(edx).unwrap(),
		Instruction::with1(Code::Verw_r32m16, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn verw_m() {
	/* if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Verw_rm16
		test_instr(16, |a| a.verw(word_ptr(si)).unwrap(),
			Instruction::with1(Code::Verw_rm16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vexp2pd_zmm_zmm() {
	// EVEX_Vexp2pd_zmm_k1z_zmmm512b64_sae
	test_instr(16, |a| a.vexp2pd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vexp2pd_zmm_k1z_zmmm512b64_sae, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vexp2pd_zmm_m() {
	// EVEX_Vexp2pd_zmm_k1z_zmmm512b64_sae
	test_instr(16, |a| a.vexp2pd(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vexp2pd_zmm_k1z_zmmm512b64_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vexp2ps_zmm_zmm() {
	// EVEX_Vexp2ps_zmm_k1z_zmmm512b32_sae
	test_instr(16, |a| a.vexp2ps(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vexp2ps_zmm_k1z_zmmm512b32_sae, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vexp2ps_zmm_m() {
	// EVEX_Vexp2ps_zmm_k1z_zmmm512b32_sae
	test_instr(16, |a| a.vexp2ps(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vexp2ps_zmm_k1z_zmmm512b32_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vexpandpd_xmm_xmm() {
	// EVEX_Vexpandpd_xmm_k1z_xmmm128
	test_instr(16, |a| a.vexpandpd(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vexpandpd_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vexpandpd_ymm_ymm() {
	// EVEX_Vexpandpd_ymm_k1z_ymmm256
	test_instr(16, |a| a.vexpandpd(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vexpandpd_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vexpandpd_zmm_zmm() {
	// EVEX_Vexpandpd_zmm_k1z_zmmm512
	test_instr(16, |a| a.vexpandpd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vexpandpd_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vexpandpd_xmm_m() {
	// EVEX_Vexpandpd_xmm_k1z_xmmm128
	test_instr(16, |a| a.vexpandpd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vexpandpd_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vexpandpd_ymm_m() {
	// EVEX_Vexpandpd_ymm_k1z_ymmm256
	test_instr(16, |a| a.vexpandpd(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vexpandpd_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vexpandpd_zmm_m() {
	// EVEX_Vexpandpd_zmm_k1z_zmmm512
	test_instr(16, |a| a.vexpandpd(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vexpandpd_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vexpandps_xmm_xmm() {
	// EVEX_Vexpandps_xmm_k1z_xmmm128
	test_instr(16, |a| a.vexpandps(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vexpandps_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vexpandps_ymm_ymm() {
	// EVEX_Vexpandps_ymm_k1z_ymmm256
	test_instr(16, |a| a.vexpandps(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vexpandps_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vexpandps_zmm_zmm() {
	// EVEX_Vexpandps_zmm_k1z_zmmm512
	test_instr(16, |a| a.vexpandps(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vexpandps_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vexpandps_xmm_m() {
	// EVEX_Vexpandps_xmm_k1z_xmmm128
	test_instr(16, |a| a.vexpandps(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vexpandps_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vexpandps_ymm_m() {
	// EVEX_Vexpandps_ymm_k1z_ymmm256
	test_instr(16, |a| a.vexpandps(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vexpandps_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vexpandps_zmm_m() {
	// EVEX_Vexpandps_zmm_k1z_zmmm512
	test_instr(16, |a| a.vexpandps(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vexpandps_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf128_xmm_ymm_i() {
	// VEX_Vextractf128_xmmm128_ymm_imm8
	test_instr(16, |a| a.vextractf128(xmm2, ymm3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vextractf128_xmmm128_ymm_imm8, Register::XMM2, Register::YMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vextractf128_xmmm128_ymm_imm8
	test_instr(16, |a| a.vextractf128(xmm2, ymm3, -5).unwrap(),
		Instruction::with3(Code::VEX_Vextractf128_xmmm128_ymm_imm8, Register::XMM2, Register::YMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf128_m_ymm_i() {
	// VEX_Vextractf128_xmmm128_ymm_imm8
	test_instr(16, |a| a.vextractf128(xmmword_ptr(si), ymm3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vextractf128_xmmm128_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vextractf128_xmmm128_ymm_imm8
	test_instr(16, |a| a.vextractf128(xmmword_ptr(si), ymm3, -5).unwrap(),
		Instruction::with3(Code::VEX_Vextractf128_xmmm128_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf128_xmm_ymm_u() {
	// VEX_Vextractf128_xmmm128_ymm_imm8
	test_instr(16, |a| a.vextractf128(xmm2, ymm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vextractf128_xmmm128_ymm_imm8, Register::XMM2, Register::YMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf128_m_ymm_u() {
	// VEX_Vextractf128_xmmm128_ymm_imm8
	test_instr(16, |a| a.vextractf128(xmmword_ptr(si), ymm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vextractf128_xmmm128_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf32x4_xmm_ymm_i() {
	// EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextractf32x4(xmm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, Register::XMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextractf32x4(xmm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, Register::XMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf32x4_m_ymm_i() {
	// EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextractf32x4(xmmword_ptr(si).k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextractf32x4(xmmword_ptr(si).k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf32x4_xmm_zmm_i() {
	// EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf32x4(xmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, Register::XMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf32x4(xmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, Register::XMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf32x4_m_zmm_i() {
	// EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf32x4(xmmword_ptr(si).k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf32x4(xmmword_ptr(si).k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf32x4_xmm_ymm_u() {
	// EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextractf32x4(xmm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, Register::XMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf32x4_m_ymm_u() {
	// EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextractf32x4(xmmword_ptr(si).k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf32x4_xmm_zmm_u() {
	// EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf32x4(xmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, Register::XMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf32x4_m_zmm_u() {
	// EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf32x4(xmmword_ptr(si).k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf32x8_ymm_zmm_i() {
	// EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf32x8(ymm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, Register::YMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf32x8(ymm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, Register::YMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf32x8_m_zmm_i() {
	// EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf32x8(ymmword_ptr(si).k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf32x8(ymmword_ptr(si).k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf32x8_ymm_zmm_u() {
	// EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf32x8(ymm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, Register::YMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf32x8_m_zmm_u() {
	// EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf32x8(ymmword_ptr(si).k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf64x2_xmm_ymm_i() {
	// EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextractf64x2(xmm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, Register::XMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextractf64x2(xmm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, Register::XMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf64x2_m_ymm_i() {
	// EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextractf64x2(xmmword_ptr(si).k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextractf64x2(xmmword_ptr(si).k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf64x2_xmm_zmm_i() {
	// EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf64x2(xmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, Register::XMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf64x2(xmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, Register::XMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf64x2_m_zmm_i() {
	// EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf64x2(xmmword_ptr(si).k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf64x2(xmmword_ptr(si).k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf64x2_xmm_ymm_u() {
	// EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextractf64x2(xmm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, Register::XMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf64x2_m_ymm_u() {
	// EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextractf64x2(xmmword_ptr(si).k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf64x2_xmm_zmm_u() {
	// EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf64x2(xmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, Register::XMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf64x2_m_zmm_u() {
	// EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf64x2(xmmword_ptr(si).k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf64x4_ymm_zmm_i() {
	// EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf64x4(ymm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, Register::YMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf64x4(ymm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, Register::YMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf64x4_m_zmm_i() {
	// EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf64x4(ymmword_ptr(si).k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf64x4(ymmword_ptr(si).k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf64x4_ymm_zmm_u() {
	// EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf64x4(ymm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, Register::YMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractf64x4_m_zmm_u() {
	// EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextractf64x4(ymmword_ptr(si).k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti128_xmm_ymm_i() {
	// VEX_Vextracti128_xmmm128_ymm_imm8
	test_instr(16, |a| a.vextracti128(xmm2, ymm3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vextracti128_xmmm128_ymm_imm8, Register::XMM2, Register::YMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vextracti128_xmmm128_ymm_imm8
	test_instr(16, |a| a.vextracti128(xmm2, ymm3, -5).unwrap(),
		Instruction::with3(Code::VEX_Vextracti128_xmmm128_ymm_imm8, Register::XMM2, Register::YMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti128_m_ymm_i() {
	// VEX_Vextracti128_xmmm128_ymm_imm8
	test_instr(16, |a| a.vextracti128(xmmword_ptr(si), ymm3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vextracti128_xmmm128_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vextracti128_xmmm128_ymm_imm8
	test_instr(16, |a| a.vextracti128(xmmword_ptr(si), ymm3, -5).unwrap(),
		Instruction::with3(Code::VEX_Vextracti128_xmmm128_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti128_xmm_ymm_u() {
	// VEX_Vextracti128_xmmm128_ymm_imm8
	test_instr(16, |a| a.vextracti128(xmm2, ymm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vextracti128_xmmm128_ymm_imm8, Register::XMM2, Register::YMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti128_m_ymm_u() {
	// VEX_Vextracti128_xmmm128_ymm_imm8
	test_instr(16, |a| a.vextracti128(xmmword_ptr(si), ymm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vextracti128_xmmm128_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti32x4_xmm_ymm_i() {
	// EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextracti32x4(xmm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, Register::XMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextracti32x4(xmm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, Register::XMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti32x4_m_ymm_i() {
	// EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextracti32x4(xmmword_ptr(si).k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextracti32x4(xmmword_ptr(si).k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti32x4_xmm_zmm_i() {
	// EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti32x4(xmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, Register::XMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti32x4(xmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, Register::XMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti32x4_m_zmm_i() {
	// EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti32x4(xmmword_ptr(si).k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti32x4(xmmword_ptr(si).k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti32x4_xmm_ymm_u() {
	// EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextracti32x4(xmm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, Register::XMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti32x4_m_ymm_u() {
	// EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextracti32x4(xmmword_ptr(si).k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti32x4_xmm_zmm_u() {
	// EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti32x4(xmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, Register::XMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti32x4_m_zmm_u() {
	// EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti32x4(xmmword_ptr(si).k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti32x8_ymm_zmm_i() {
	// EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti32x8(ymm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, Register::YMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti32x8(ymm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, Register::YMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti32x8_m_zmm_i() {
	// EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti32x8(ymmword_ptr(si).k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti32x8(ymmword_ptr(si).k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti32x8_ymm_zmm_u() {
	// EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti32x8(ymm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, Register::YMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti32x8_m_zmm_u() {
	// EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti32x8(ymmword_ptr(si).k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti64x2_xmm_ymm_i() {
	// EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextracti64x2(xmm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, Register::XMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextracti64x2(xmm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, Register::XMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti64x2_m_ymm_i() {
	// EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextracti64x2(xmmword_ptr(si).k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextracti64x2(xmmword_ptr(si).k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti64x2_xmm_zmm_i() {
	// EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti64x2(xmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, Register::XMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti64x2(xmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, Register::XMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti64x2_m_zmm_i() {
	// EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti64x2(xmmword_ptr(si).k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti64x2(xmmword_ptr(si).k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti64x2_xmm_ymm_u() {
	// EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextracti64x2(xmm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, Register::XMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti64x2_m_ymm_u() {
	// EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8
	test_instr(16, |a| a.vextracti64x2(xmmword_ptr(si).k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti64x2_xmm_zmm_u() {
	// EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti64x2(xmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, Register::XMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti64x2_m_zmm_u() {
	// EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti64x2(xmmword_ptr(si).k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti64x4_ymm_zmm_i() {
	// EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti64x4(ymm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, Register::YMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti64x4(ymm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, Register::YMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti64x4_m_zmm_i() {
	// EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti64x4(ymmword_ptr(si).k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti64x4(ymmword_ptr(si).k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti64x4_ymm_zmm_u() {
	// EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti64x4(ymm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, Register::YMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextracti64x4_m_zmm_u() {
	// EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8
	test_instr(16, |a| a.vextracti64x4(ymmword_ptr(si).k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vextractps_r32_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vextractps_rm32_xmm_imm8
		test_instr(16, |a| a.vextractps(edx, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vextractps_rm32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vextractps_rm32_xmm_imm8
		test_instr(16, |a| a.vextractps(edx, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::EVEX_Vextractps_rm32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vextractps_rm32_xmm_imm8
		test_instr(16, |a| a.vextractps(edx, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vextractps_rm32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vextractps_rm32_xmm_imm8
		test_instr(16, |a| a.vextractps(edx, xmm3, -5).unwrap(),
			Instruction::with3(Code::EVEX_Vextractps_rm32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vextractps_m_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vextractps_rm32_xmm_imm8
		test_instr(16, |a| a.vextractps(dword_ptr(si), xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vextractps_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vextractps_rm32_xmm_imm8
		test_instr(16, |a| a.vextractps(dword_ptr(si), xmm3, -5i32).unwrap(),
			Instruction::with3(Code::EVEX_Vextractps_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vextractps_rm32_xmm_imm8
		test_instr(16, |a| a.vextractps(dword_ptr(si), xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vextractps_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vextractps_rm32_xmm_imm8
		test_instr(16, |a| a.vextractps(dword_ptr(si), xmm3, -5).unwrap(),
			Instruction::with3(Code::EVEX_Vextractps_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vextractps_r32_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vextractps_rm32_xmm_imm8
		test_instr(16, |a| a.vextractps(edx, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vextractps_rm32_xmm_imm8, Register::EDX, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vextractps_rm32_xmm_imm8
		test_instr(16, |a| a.vextractps(edx, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::EVEX_Vextractps_rm32_xmm_imm8, Register::EDX, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vextractps_m_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vextractps_rm32_xmm_imm8
		test_instr(16, |a| a.vextractps(dword_ptr(si), xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vextractps_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vextractps_rm32_xmm_imm8
		test_instr(16, |a| a.vextractps(dword_ptr(si), xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::EVEX_Vextractps_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfcmaddcph_xmm_xmm_xmm() {
	// EVEX_Vfcmaddcph_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vfcmaddcph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfcmaddcph_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfcmaddcph_ymm_ymm_ymm() {
	// EVEX_Vfcmaddcph_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vfcmaddcph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfcmaddcph_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfcmaddcph_zmm_zmm_zmm() {
	// EVEX_Vfcmaddcph_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfcmaddcph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfcmaddcph_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfcmaddcph_xmm_xmm_m() {
	// EVEX_Vfcmaddcph_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vfcmaddcph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfcmaddcph_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfcmaddcph_ymm_ymm_m() {
	// EVEX_Vfcmaddcph_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vfcmaddcph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfcmaddcph_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfcmaddcph_zmm_zmm_m() {
	// EVEX_Vfcmaddcph_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfcmaddcph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfcmaddcph_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfcmaddcsh_xmm_xmm_xmm() {
	// EVEX_Vfcmaddcsh_xmm_k1z_xmm_xmmm32_er
	test_instr(16, |a| a.vfcmaddcsh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfcmaddcsh_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfcmaddcsh_xmm_xmm_m() {
	// EVEX_Vfcmaddcsh_xmm_k1z_xmm_xmmm32_er
	test_instr(16, |a| a.vfcmaddcsh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfcmaddcsh_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfcmulcph_xmm_xmm_xmm() {
	// EVEX_Vfcmulcph_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vfcmulcph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfcmulcph_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfcmulcph_ymm_ymm_ymm() {
	// EVEX_Vfcmulcph_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vfcmulcph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfcmulcph_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfcmulcph_zmm_zmm_zmm() {
	// EVEX_Vfcmulcph_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfcmulcph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfcmulcph_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfcmulcph_xmm_xmm_m() {
	// EVEX_Vfcmulcph_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vfcmulcph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfcmulcph_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfcmulcph_ymm_ymm_m() {
	// EVEX_Vfcmulcph_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vfcmulcph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfcmulcph_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfcmulcph_zmm_zmm_m() {
	// EVEX_Vfcmulcph_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfcmulcph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfcmulcph_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfcmulcsh_xmm_xmm_xmm() {
	// EVEX_Vfcmulcsh_xmm_k1z_xmm_xmmm32_er
	test_instr(16, |a| a.vfcmulcsh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfcmulcsh_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfcmulcsh_xmm_xmm_m() {
	// EVEX_Vfcmulcsh_xmm_k1z_xmm_xmmm32_er
	test_instr(16, |a| a.vfcmulcsh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfcmulcsh_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmpd_xmm_xmm_xmm_i() {
	// EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vfixupimmpd(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vfixupimmpd(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmpd_ymm_ymm_ymm_i() {
	// EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vfixupimmpd(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vfixupimmpd(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmpd_zmm_zmm_zmm_i() {
	// EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vfixupimmpd(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vfixupimmpd(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmpd_xmm_xmm_m_i() {
	// EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vfixupimmpd(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vfixupimmpd(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmpd_ymm_ymm_m_i() {
	// EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vfixupimmpd(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vfixupimmpd(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmpd_zmm_zmm_m_i() {
	// EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vfixupimmpd(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vfixupimmpd(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmpd_xmm_xmm_xmm_u() {
	// EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vfixupimmpd(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmpd_ymm_ymm_ymm_u() {
	// EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vfixupimmpd(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmpd_zmm_zmm_zmm_u() {
	// EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vfixupimmpd(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmpd_xmm_xmm_m_u() {
	// EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vfixupimmpd(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmpd_ymm_ymm_m_u() {
	// EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vfixupimmpd(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmpd_zmm_zmm_m_u() {
	// EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vfixupimmpd(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmps_xmm_xmm_xmm_i() {
	// EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vfixupimmps(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vfixupimmps(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmps_ymm_ymm_ymm_i() {
	// EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vfixupimmps(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vfixupimmps(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmps_zmm_zmm_zmm_i() {
	// EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vfixupimmps(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vfixupimmps(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmps_xmm_xmm_m_i() {
	// EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vfixupimmps(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vfixupimmps(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmps_ymm_ymm_m_i() {
	// EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vfixupimmps(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vfixupimmps(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmps_zmm_zmm_m_i() {
	// EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vfixupimmps(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vfixupimmps(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmps_xmm_xmm_xmm_u() {
	// EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vfixupimmps(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmps_ymm_ymm_ymm_u() {
	// EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vfixupimmps(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmps_zmm_zmm_zmm_u() {
	// EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vfixupimmps(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmps_xmm_xmm_m_u() {
	// EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vfixupimmps(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmps_ymm_ymm_m_u() {
	// EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vfixupimmps(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmps_zmm_zmm_m_u() {
	// EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vfixupimmps(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmsd_xmm_xmm_xmm_i() {
	// EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vfixupimmsd(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vfixupimmsd(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmsd_xmm_xmm_m_i() {
	// EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vfixupimmsd(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vfixupimmsd(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmsd_xmm_xmm_xmm_u() {
	// EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vfixupimmsd(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmsd_xmm_xmm_m_u() {
	// EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vfixupimmsd(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmss_xmm_xmm_xmm_i() {
	// EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vfixupimmss(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vfixupimmss(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmss_xmm_xmm_m_i() {
	// EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vfixupimmss(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vfixupimmss(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmss_xmm_xmm_xmm_u() {
	// EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vfixupimmss(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfixupimmss_xmm_xmm_m_u() {
	// EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vfixupimmss(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd132pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd132pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmadd132pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd132pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmadd132pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd132pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd132pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmadd132pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd132pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmadd132pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd132pd_zmm_zmm_zmm() {
	// EVEX_Vfmadd132pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmadd132pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd132pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmadd132pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd132pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmadd132pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd132pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmadd132pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd132pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmadd132pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd132pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmadd132pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd132pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmadd132pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd132pd_zmm_zmm_m() {
	// EVEX_Vfmadd132pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmadd132pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd132ph_xmm_xmm_xmm() {
	// EVEX_Vfmadd132ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmadd132ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd132ph_ymm_ymm_ymm() {
	// EVEX_Vfmadd132ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmadd132ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd132ph_zmm_zmm_zmm() {
	// EVEX_Vfmadd132ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmadd132ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd132ph_xmm_xmm_m() {
	// EVEX_Vfmadd132ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmadd132ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd132ph_ymm_ymm_m() {
	// EVEX_Vfmadd132ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmadd132ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd132ph_zmm_zmm_m() {
	// EVEX_Vfmadd132ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmadd132ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd132ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd132ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmadd132ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd132ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmadd132ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd132ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd132ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmadd132ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd132ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmadd132ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd132ps_zmm_zmm_zmm() {
	// EVEX_Vfmadd132ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmadd132ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd132ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmadd132ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd132ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmadd132ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd132ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmadd132ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd132ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmadd132ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd132ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmadd132ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd132ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmadd132ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd132ps_zmm_zmm_m() {
	// EVEX_Vfmadd132ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmadd132ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd132sd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd132sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfmadd132sd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd132sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd132sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfmadd132sd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd132sd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd132sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfmadd132sd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd132sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd132sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfmadd132sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd132sh_xmm_xmm_xmm() {
	// EVEX_Vfmadd132sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfmadd132sh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd132sh_xmm_xmm_m() {
	// EVEX_Vfmadd132sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfmadd132sh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd132ss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd132ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfmadd132ss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd132ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd132ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfmadd132ss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd132ss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd132ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfmadd132ss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd132ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd132ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfmadd132ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd132ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd213pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd213pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmadd213pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd213pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmadd213pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd213pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd213pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmadd213pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd213pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmadd213pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd213pd_zmm_zmm_zmm() {
	// EVEX_Vfmadd213pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmadd213pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd213pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmadd213pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd213pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmadd213pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd213pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmadd213pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd213pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmadd213pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd213pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmadd213pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd213pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmadd213pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd213pd_zmm_zmm_m() {
	// EVEX_Vfmadd213pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmadd213pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd213ph_xmm_xmm_xmm() {
	// EVEX_Vfmadd213ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmadd213ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd213ph_ymm_ymm_ymm() {
	// EVEX_Vfmadd213ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmadd213ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd213ph_zmm_zmm_zmm() {
	// EVEX_Vfmadd213ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmadd213ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd213ph_xmm_xmm_m() {
	// EVEX_Vfmadd213ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmadd213ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd213ph_ymm_ymm_m() {
	// EVEX_Vfmadd213ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmadd213ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd213ph_zmm_zmm_m() {
	// EVEX_Vfmadd213ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmadd213ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd213ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd213ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmadd213ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd213ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmadd213ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd213ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd213ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmadd213ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd213ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmadd213ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd213ps_zmm_zmm_zmm() {
	// EVEX_Vfmadd213ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmadd213ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd213ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmadd213ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd213ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmadd213ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd213ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmadd213ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd213ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmadd213ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd213ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmadd213ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd213ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmadd213ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd213ps_zmm_zmm_m() {
	// EVEX_Vfmadd213ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmadd213ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd213sd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd213sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfmadd213sd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd213sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd213sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfmadd213sd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd213sd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd213sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfmadd213sd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd213sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd213sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfmadd213sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd213sh_xmm_xmm_xmm() {
	// EVEX_Vfmadd213sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfmadd213sh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd213sh_xmm_xmm_m() {
	// EVEX_Vfmadd213sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfmadd213sh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd213ss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd213ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfmadd213ss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd213ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd213ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfmadd213ss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd213ss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd213ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfmadd213ss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd213ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd213ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfmadd213ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd213ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd231pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd231pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmadd231pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd231pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmadd231pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd231pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd231pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmadd231pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd231pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmadd231pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd231pd_zmm_zmm_zmm() {
	// EVEX_Vfmadd231pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmadd231pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd231pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmadd231pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd231pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmadd231pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd231pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmadd231pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd231pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmadd231pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd231pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmadd231pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd231pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmadd231pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd231pd_zmm_zmm_m() {
	// EVEX_Vfmadd231pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmadd231pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd231ph_xmm_xmm_xmm() {
	// EVEX_Vfmadd231ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmadd231ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd231ph_ymm_ymm_ymm() {
	// EVEX_Vfmadd231ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmadd231ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd231ph_zmm_zmm_zmm() {
	// EVEX_Vfmadd231ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmadd231ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd231ph_xmm_xmm_m() {
	// EVEX_Vfmadd231ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmadd231ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd231ph_ymm_ymm_m() {
	// EVEX_Vfmadd231ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmadd231ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd231ph_zmm_zmm_m() {
	// EVEX_Vfmadd231ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmadd231ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd231ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd231ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmadd231ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd231ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmadd231ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd231ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd231ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmadd231ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd231ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmadd231ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd231ps_zmm_zmm_zmm() {
	// EVEX_Vfmadd231ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmadd231ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd231ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmadd231ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd231ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmadd231ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd231ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmadd231ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd231ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmadd231ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd231ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmadd231ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd231ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmadd231ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd231ps_zmm_zmm_m() {
	// EVEX_Vfmadd231ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmadd231ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd231sd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd231sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfmadd231sd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd231sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd231sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfmadd231sd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd231sd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd231sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfmadd231sd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd231sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd231sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfmadd231sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd231sh_xmm_xmm_xmm() {
	// EVEX_Vfmadd231sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfmadd231sh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd231sh_xmm_xmm_m() {
	// EVEX_Vfmadd231sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfmadd231sh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmadd231ss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd231ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfmadd231ss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd231ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd231ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfmadd231ss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmadd231ss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmadd231ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfmadd231ss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmadd231ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmadd231ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfmadd231ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmadd231ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddcph_xmm_xmm_xmm() {
	// EVEX_Vfmaddcph_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vfmaddcph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddcph_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddcph_ymm_ymm_ymm() {
	// EVEX_Vfmaddcph_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vfmaddcph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddcph_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddcph_zmm_zmm_zmm() {
	// EVEX_Vfmaddcph_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmaddcph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddcph_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddcph_xmm_xmm_m() {
	// EVEX_Vfmaddcph_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vfmaddcph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddcph_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddcph_ymm_ymm_m() {
	// EVEX_Vfmaddcph_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vfmaddcph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddcph_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddcph_zmm_zmm_m() {
	// EVEX_Vfmaddcph_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmaddcph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddcph_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddcsh_xmm_xmm_xmm() {
	// EVEX_Vfmaddcsh_xmm_k1z_xmm_xmmm32_er
	test_instr(16, |a| a.vfmaddcsh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddcsh_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddcsh_xmm_xmm_m() {
	// EVEX_Vfmaddcsh_xmm_k1z_xmm_xmmm32_er
	test_instr(16, |a| a.vfmaddcsh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddcsh_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddpd_xmm_xmm_xmm_xmm() {
	// VEX_Vfmaddpd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfmaddpd(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddpd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddpd_xmm_xmm_m_xmm() {
	// VEX_Vfmaddpd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfmaddpd(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddpd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddpd_ymm_ymm_ymm_ymm() {
	// VEX_Vfmaddpd_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfmaddpd(ymm2, ymm3, ymm4, ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddpd_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddpd_ymm_ymm_m_ymm() {
	// VEX_Vfmaddpd_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfmaddpd(ymm2, ymm3, ymmword_ptr(si), ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddpd_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddpd_xmm_xmm_xmm_m() {
	// VEX_Vfmaddpd_xmm_xmm_xmm_xmmm128
	test_instr(16, |a| a.vfmaddpd(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddpd_xmm_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddpd_ymm_ymm_ymm_m() {
	// VEX_Vfmaddpd_ymm_ymm_ymm_ymmm256
	test_instr(16, |a| a.vfmaddpd(ymm2, ymm3, ymm4, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddpd_ymm_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddps_xmm_xmm_xmm_xmm() {
	// VEX_Vfmaddps_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfmaddps(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddps_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddps_xmm_xmm_m_xmm() {
	// VEX_Vfmaddps_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfmaddps(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddps_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddps_ymm_ymm_ymm_ymm() {
	// VEX_Vfmaddps_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfmaddps(ymm2, ymm3, ymm4, ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddps_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddps_ymm_ymm_m_ymm() {
	// VEX_Vfmaddps_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfmaddps(ymm2, ymm3, ymmword_ptr(si), ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddps_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddps_xmm_xmm_xmm_m() {
	// VEX_Vfmaddps_xmm_xmm_xmm_xmmm128
	test_instr(16, |a| a.vfmaddps(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddps_xmm_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddps_ymm_ymm_ymm_m() {
	// VEX_Vfmaddps_ymm_ymm_ymm_ymmm256
	test_instr(16, |a| a.vfmaddps(ymm2, ymm3, ymm4, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddps_ymm_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsd_xmm_xmm_xmm_xmm() {
	// VEX_Vfmaddsd_xmm_xmm_xmmm64_xmm
	test_instr(16, |a| a.vfmaddsd(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddsd_xmm_xmm_xmmm64_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsd_xmm_xmm_m_xmm() {
	// VEX_Vfmaddsd_xmm_xmm_xmmm64_xmm
	test_instr(16, |a| a.vfmaddsd(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddsd_xmm_xmm_xmmm64_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsd_xmm_xmm_xmm_m() {
	// VEX_Vfmaddsd_xmm_xmm_xmm_xmmm64
	test_instr(16, |a| a.vfmaddsd(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddsd_xmm_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddss_xmm_xmm_xmm_xmm() {
	// VEX_Vfmaddss_xmm_xmm_xmmm32_xmm
	test_instr(16, |a| a.vfmaddss(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddss_xmm_xmm_xmmm32_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddss_xmm_xmm_m_xmm() {
	// VEX_Vfmaddss_xmm_xmm_xmmm32_xmm
	test_instr(16, |a| a.vfmaddss(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddss_xmm_xmm_xmmm32_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddss_xmm_xmm_xmm_m() {
	// VEX_Vfmaddss_xmm_xmm_xmm_xmmm32
	test_instr(16, |a| a.vfmaddss(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddss_xmm_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub132pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmaddsub132pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub132pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmaddsub132pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub132pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmaddsub132pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub132pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmaddsub132pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132pd_zmm_zmm_zmm() {
	// EVEX_Vfmaddsub132pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmaddsub132pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmaddsub132pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub132pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmaddsub132pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub132pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmaddsub132pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmaddsub132pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub132pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmaddsub132pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub132pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmaddsub132pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132pd_zmm_zmm_m() {
	// EVEX_Vfmaddsub132pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmaddsub132pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132ph_xmm_xmm_xmm() {
	// EVEX_Vfmaddsub132ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmaddsub132ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132ph_ymm_ymm_ymm() {
	// EVEX_Vfmaddsub132ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmaddsub132ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132ph_zmm_zmm_zmm() {
	// EVEX_Vfmaddsub132ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmaddsub132ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132ph_xmm_xmm_m() {
	// EVEX_Vfmaddsub132ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmaddsub132ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132ph_ymm_ymm_m() {
	// EVEX_Vfmaddsub132ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmaddsub132ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132ph_zmm_zmm_m() {
	// EVEX_Vfmaddsub132ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmaddsub132ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub132ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmaddsub132ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub132ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmaddsub132ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub132ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmaddsub132ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub132ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmaddsub132ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132ps_zmm_zmm_zmm() {
	// EVEX_Vfmaddsub132ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmaddsub132ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmaddsub132ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub132ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmaddsub132ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub132ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmaddsub132ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmaddsub132ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub132ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmaddsub132ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub132ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmaddsub132ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub132ps_zmm_zmm_m() {
	// EVEX_Vfmaddsub132ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmaddsub132ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub132ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub213pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmaddsub213pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub213pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmaddsub213pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub213pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmaddsub213pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub213pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmaddsub213pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213pd_zmm_zmm_zmm() {
	// EVEX_Vfmaddsub213pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmaddsub213pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmaddsub213pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub213pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmaddsub213pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub213pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmaddsub213pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmaddsub213pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub213pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmaddsub213pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub213pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmaddsub213pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213pd_zmm_zmm_m() {
	// EVEX_Vfmaddsub213pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmaddsub213pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213ph_xmm_xmm_xmm() {
	// EVEX_Vfmaddsub213ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmaddsub213ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213ph_ymm_ymm_ymm() {
	// EVEX_Vfmaddsub213ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmaddsub213ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213ph_zmm_zmm_zmm() {
	// EVEX_Vfmaddsub213ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmaddsub213ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213ph_xmm_xmm_m() {
	// EVEX_Vfmaddsub213ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmaddsub213ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213ph_ymm_ymm_m() {
	// EVEX_Vfmaddsub213ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmaddsub213ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213ph_zmm_zmm_m() {
	// EVEX_Vfmaddsub213ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmaddsub213ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub213ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmaddsub213ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub213ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmaddsub213ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub213ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmaddsub213ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub213ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmaddsub213ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213ps_zmm_zmm_zmm() {
	// EVEX_Vfmaddsub213ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmaddsub213ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmaddsub213ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub213ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmaddsub213ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub213ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmaddsub213ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmaddsub213ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub213ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmaddsub213ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub213ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmaddsub213ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub213ps_zmm_zmm_m() {
	// EVEX_Vfmaddsub213ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmaddsub213ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub213ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub231pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmaddsub231pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub231pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmaddsub231pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub231pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmaddsub231pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub231pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmaddsub231pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231pd_zmm_zmm_zmm() {
	// EVEX_Vfmaddsub231pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmaddsub231pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmaddsub231pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub231pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmaddsub231pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub231pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmaddsub231pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmaddsub231pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub231pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmaddsub231pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub231pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmaddsub231pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231pd_zmm_zmm_m() {
	// EVEX_Vfmaddsub231pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmaddsub231pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231ph_xmm_xmm_xmm() {
	// EVEX_Vfmaddsub231ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmaddsub231ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231ph_ymm_ymm_ymm() {
	// EVEX_Vfmaddsub231ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmaddsub231ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231ph_zmm_zmm_zmm() {
	// EVEX_Vfmaddsub231ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmaddsub231ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231ph_xmm_xmm_m() {
	// EVEX_Vfmaddsub231ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmaddsub231ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231ph_ymm_ymm_m() {
	// EVEX_Vfmaddsub231ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmaddsub231ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231ph_zmm_zmm_m() {
	// EVEX_Vfmaddsub231ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmaddsub231ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub231ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmaddsub231ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub231ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmaddsub231ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub231ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmaddsub231ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub231ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmaddsub231ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231ps_zmm_zmm_zmm() {
	// EVEX_Vfmaddsub231ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmaddsub231ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmaddsub231ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub231ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmaddsub231ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub231ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmaddsub231ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmaddsub231ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmaddsub231ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmaddsub231ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmaddsub231ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmaddsub231ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmaddsub231ps_zmm_zmm_m() {
	// EVEX_Vfmaddsub231ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmaddsub231ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmaddsub231ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsubpd_xmm_xmm_xmm_xmm() {
	// VEX_Vfmaddsubpd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfmaddsubpd(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddsubpd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsubpd_xmm_xmm_m_xmm() {
	// VEX_Vfmaddsubpd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfmaddsubpd(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddsubpd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsubpd_ymm_ymm_ymm_ymm() {
	// VEX_Vfmaddsubpd_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfmaddsubpd(ymm2, ymm3, ymm4, ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddsubpd_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsubpd_ymm_ymm_m_ymm() {
	// VEX_Vfmaddsubpd_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfmaddsubpd(ymm2, ymm3, ymmword_ptr(si), ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddsubpd_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsubpd_xmm_xmm_xmm_m() {
	// VEX_Vfmaddsubpd_xmm_xmm_xmm_xmmm128
	test_instr(16, |a| a.vfmaddsubpd(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddsubpd_xmm_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsubpd_ymm_ymm_ymm_m() {
	// VEX_Vfmaddsubpd_ymm_ymm_ymm_ymmm256
	test_instr(16, |a| a.vfmaddsubpd(ymm2, ymm3, ymm4, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddsubpd_ymm_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsubps_xmm_xmm_xmm_xmm() {
	// VEX_Vfmaddsubps_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfmaddsubps(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddsubps_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsubps_xmm_xmm_m_xmm() {
	// VEX_Vfmaddsubps_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfmaddsubps(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddsubps_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsubps_ymm_ymm_ymm_ymm() {
	// VEX_Vfmaddsubps_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfmaddsubps(ymm2, ymm3, ymm4, ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddsubps_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsubps_ymm_ymm_m_ymm() {
	// VEX_Vfmaddsubps_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfmaddsubps(ymm2, ymm3, ymmword_ptr(si), ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddsubps_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsubps_xmm_xmm_xmm_m() {
	// VEX_Vfmaddsubps_xmm_xmm_xmm_xmmm128
	test_instr(16, |a| a.vfmaddsubps(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddsubps_xmm_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmaddsubps_ymm_ymm_ymm_m() {
	// VEX_Vfmaddsubps_ymm_ymm_ymm_ymmm256
	test_instr(16, |a| a.vfmaddsubps(ymm2, ymm3, ymm4, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmaddsubps_ymm_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub132pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub132pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsub132pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub132pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsub132pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub132pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub132pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsub132pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub132pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsub132pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub132pd_zmm_zmm_zmm() {
	// EVEX_Vfmsub132pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmsub132pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub132pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsub132pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub132pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsub132pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub132pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsub132pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub132pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsub132pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub132pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsub132pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub132pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsub132pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub132pd_zmm_zmm_m() {
	// EVEX_Vfmsub132pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmsub132pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub132ph_xmm_xmm_xmm() {
	// EVEX_Vfmsub132ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmsub132ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub132ph_ymm_ymm_ymm() {
	// EVEX_Vfmsub132ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmsub132ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub132ph_zmm_zmm_zmm() {
	// EVEX_Vfmsub132ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmsub132ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub132ph_xmm_xmm_m() {
	// EVEX_Vfmsub132ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmsub132ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub132ph_ymm_ymm_m() {
	// EVEX_Vfmsub132ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmsub132ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub132ph_zmm_zmm_m() {
	// EVEX_Vfmsub132ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmsub132ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub132ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub132ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsub132ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub132ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsub132ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub132ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub132ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsub132ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub132ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsub132ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub132ps_zmm_zmm_zmm() {
	// EVEX_Vfmsub132ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmsub132ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub132ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsub132ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub132ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsub132ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub132ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsub132ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub132ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsub132ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub132ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsub132ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub132ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsub132ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub132ps_zmm_zmm_m() {
	// EVEX_Vfmsub132ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmsub132ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub132sd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub132sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfmsub132sd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub132sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub132sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfmsub132sd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub132sd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub132sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfmsub132sd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub132sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub132sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfmsub132sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub132sh_xmm_xmm_xmm() {
	// EVEX_Vfmsub132sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfmsub132sh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub132sh_xmm_xmm_m() {
	// EVEX_Vfmsub132sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfmsub132sh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub132ss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub132ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfmsub132ss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub132ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub132ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfmsub132ss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub132ss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub132ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfmsub132ss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub132ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub132ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfmsub132ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub132ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub213pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub213pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsub213pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub213pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsub213pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub213pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub213pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsub213pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub213pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsub213pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub213pd_zmm_zmm_zmm() {
	// EVEX_Vfmsub213pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmsub213pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub213pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsub213pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub213pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsub213pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub213pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsub213pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub213pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsub213pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub213pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsub213pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub213pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsub213pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub213pd_zmm_zmm_m() {
	// EVEX_Vfmsub213pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmsub213pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub213ph_xmm_xmm_xmm() {
	// EVEX_Vfmsub213ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmsub213ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub213ph_ymm_ymm_ymm() {
	// EVEX_Vfmsub213ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmsub213ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub213ph_zmm_zmm_zmm() {
	// EVEX_Vfmsub213ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmsub213ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub213ph_xmm_xmm_m() {
	// EVEX_Vfmsub213ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmsub213ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub213ph_ymm_ymm_m() {
	// EVEX_Vfmsub213ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmsub213ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub213ph_zmm_zmm_m() {
	// EVEX_Vfmsub213ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmsub213ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub213ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub213ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsub213ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub213ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsub213ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub213ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub213ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsub213ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub213ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsub213ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub213ps_zmm_zmm_zmm() {
	// EVEX_Vfmsub213ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmsub213ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub213ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsub213ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub213ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsub213ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub213ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsub213ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub213ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsub213ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub213ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsub213ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub213ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsub213ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub213ps_zmm_zmm_m() {
	// EVEX_Vfmsub213ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmsub213ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub213sd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub213sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfmsub213sd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub213sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub213sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfmsub213sd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub213sd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub213sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfmsub213sd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub213sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub213sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfmsub213sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub213sh_xmm_xmm_xmm() {
	// EVEX_Vfmsub213sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfmsub213sh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub213sh_xmm_xmm_m() {
	// EVEX_Vfmsub213sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfmsub213sh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub213ss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub213ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfmsub213ss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub213ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub213ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfmsub213ss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub213ss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub213ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfmsub213ss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub213ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub213ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfmsub213ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub213ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub231pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub231pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsub231pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub231pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsub231pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub231pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub231pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsub231pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub231pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsub231pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub231pd_zmm_zmm_zmm() {
	// EVEX_Vfmsub231pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmsub231pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub231pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsub231pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub231pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsub231pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub231pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsub231pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub231pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsub231pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub231pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsub231pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub231pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsub231pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub231pd_zmm_zmm_m() {
	// EVEX_Vfmsub231pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmsub231pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub231ph_xmm_xmm_xmm() {
	// EVEX_Vfmsub231ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmsub231ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub231ph_ymm_ymm_ymm() {
	// EVEX_Vfmsub231ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmsub231ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub231ph_zmm_zmm_zmm() {
	// EVEX_Vfmsub231ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmsub231ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub231ph_xmm_xmm_m() {
	// EVEX_Vfmsub231ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmsub231ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub231ph_ymm_ymm_m() {
	// EVEX_Vfmsub231ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmsub231ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub231ph_zmm_zmm_m() {
	// EVEX_Vfmsub231ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmsub231ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub231ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub231ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsub231ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub231ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsub231ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub231ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub231ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsub231ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub231ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsub231ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub231ps_zmm_zmm_zmm() {
	// EVEX_Vfmsub231ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmsub231ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub231ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsub231ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub231ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsub231ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub231ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsub231ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub231ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsub231ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub231ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsub231ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub231ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsub231ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub231ps_zmm_zmm_m() {
	// EVEX_Vfmsub231ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmsub231ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub231sd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub231sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfmsub231sd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub231sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub231sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfmsub231sd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub231sd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub231sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfmsub231sd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub231sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub231sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfmsub231sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub231sh_xmm_xmm_xmm() {
	// EVEX_Vfmsub231sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfmsub231sh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub231sh_xmm_xmm_m() {
	// EVEX_Vfmsub231sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfmsub231sh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsub231ss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub231ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfmsub231ss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub231ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub231ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfmsub231ss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsub231ss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsub231ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfmsub231ss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsub231ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsub231ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfmsub231ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsub231ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd132pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsubadd132pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd132pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsubadd132pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd132pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsubadd132pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd132pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsubadd132pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132pd_zmm_zmm_zmm() {
	// EVEX_Vfmsubadd132pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmsubadd132pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsubadd132pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd132pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsubadd132pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd132pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsubadd132pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsubadd132pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd132pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsubadd132pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd132pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsubadd132pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132pd_zmm_zmm_m() {
	// EVEX_Vfmsubadd132pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmsubadd132pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132ph_xmm_xmm_xmm() {
	// EVEX_Vfmsubadd132ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmsubadd132ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132ph_ymm_ymm_ymm() {
	// EVEX_Vfmsubadd132ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmsubadd132ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132ph_zmm_zmm_zmm() {
	// EVEX_Vfmsubadd132ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmsubadd132ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132ph_xmm_xmm_m() {
	// EVEX_Vfmsubadd132ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmsubadd132ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132ph_ymm_ymm_m() {
	// EVEX_Vfmsubadd132ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmsubadd132ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132ph_zmm_zmm_m() {
	// EVEX_Vfmsubadd132ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmsubadd132ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd132ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsubadd132ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd132ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsubadd132ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd132ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsubadd132ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd132ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsubadd132ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132ps_zmm_zmm_zmm() {
	// EVEX_Vfmsubadd132ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmsubadd132ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsubadd132ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd132ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsubadd132ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd132ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsubadd132ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsubadd132ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd132ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsubadd132ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd132ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsubadd132ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd132ps_zmm_zmm_m() {
	// EVEX_Vfmsubadd132ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmsubadd132ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd132ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd213pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsubadd213pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd213pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsubadd213pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd213pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsubadd213pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd213pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsubadd213pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213pd_zmm_zmm_zmm() {
	// EVEX_Vfmsubadd213pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmsubadd213pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsubadd213pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd213pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsubadd213pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd213pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsubadd213pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsubadd213pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd213pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsubadd213pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd213pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsubadd213pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213pd_zmm_zmm_m() {
	// EVEX_Vfmsubadd213pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmsubadd213pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213ph_xmm_xmm_xmm() {
	// EVEX_Vfmsubadd213ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmsubadd213ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213ph_ymm_ymm_ymm() {
	// EVEX_Vfmsubadd213ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmsubadd213ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213ph_zmm_zmm_zmm() {
	// EVEX_Vfmsubadd213ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmsubadd213ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213ph_xmm_xmm_m() {
	// EVEX_Vfmsubadd213ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmsubadd213ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213ph_ymm_ymm_m() {
	// EVEX_Vfmsubadd213ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmsubadd213ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213ph_zmm_zmm_m() {
	// EVEX_Vfmsubadd213ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmsubadd213ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd213ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsubadd213ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd213ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsubadd213ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd213ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsubadd213ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd213ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsubadd213ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213ps_zmm_zmm_zmm() {
	// EVEX_Vfmsubadd213ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmsubadd213ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsubadd213ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd213ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsubadd213ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd213ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsubadd213ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsubadd213ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd213ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsubadd213ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd213ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsubadd213ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd213ps_zmm_zmm_m() {
	// EVEX_Vfmsubadd213ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmsubadd213ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd213ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd231pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsubadd231pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd231pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsubadd231pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd231pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsubadd231pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd231pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsubadd231pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231pd_zmm_zmm_zmm() {
	// EVEX_Vfmsubadd231pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmsubadd231pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsubadd231pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd231pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsubadd231pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd231pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfmsubadd231pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsubadd231pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd231pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsubadd231pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd231pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfmsubadd231pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231pd_zmm_zmm_m() {
	// EVEX_Vfmsubadd231pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfmsubadd231pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231ph_xmm_xmm_xmm() {
	// EVEX_Vfmsubadd231ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmsubadd231ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231ph_ymm_ymm_ymm() {
	// EVEX_Vfmsubadd231ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmsubadd231ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231ph_zmm_zmm_zmm() {
	// EVEX_Vfmsubadd231ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmsubadd231ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231ph_xmm_xmm_m() {
	// EVEX_Vfmsubadd231ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfmsubadd231ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231ph_ymm_ymm_m() {
	// EVEX_Vfmsubadd231ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfmsubadd231ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231ph_zmm_zmm_m() {
	// EVEX_Vfmsubadd231ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfmsubadd231ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd231ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsubadd231ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd231ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsubadd231ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd231ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsubadd231ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd231ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsubadd231ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231ps_zmm_zmm_zmm() {
	// EVEX_Vfmsubadd231ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmsubadd231ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsubadd231ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd231ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfmsubadd231ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd231ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfmsubadd231ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsubadd231ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfmsubadd231ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfmsubadd231ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfmsubadd231ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfmsubadd231ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfmsubadd231ps_zmm_zmm_m() {
	// EVEX_Vfmsubadd231ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmsubadd231ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmsubadd231ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubaddpd_xmm_xmm_xmm_xmm() {
	// VEX_Vfmsubaddpd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfmsubaddpd(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubaddpd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubaddpd_xmm_xmm_m_xmm() {
	// VEX_Vfmsubaddpd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfmsubaddpd(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubaddpd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubaddpd_ymm_ymm_ymm_ymm() {
	// VEX_Vfmsubaddpd_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfmsubaddpd(ymm2, ymm3, ymm4, ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubaddpd_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubaddpd_ymm_ymm_m_ymm() {
	// VEX_Vfmsubaddpd_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfmsubaddpd(ymm2, ymm3, ymmword_ptr(si), ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubaddpd_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubaddpd_xmm_xmm_xmm_m() {
	// VEX_Vfmsubaddpd_xmm_xmm_xmm_xmmm128
	test_instr(16, |a| a.vfmsubaddpd(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubaddpd_xmm_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubaddpd_ymm_ymm_ymm_m() {
	// VEX_Vfmsubaddpd_ymm_ymm_ymm_ymmm256
	test_instr(16, |a| a.vfmsubaddpd(ymm2, ymm3, ymm4, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubaddpd_ymm_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubaddps_xmm_xmm_xmm_xmm() {
	// VEX_Vfmsubaddps_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfmsubaddps(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubaddps_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubaddps_xmm_xmm_m_xmm() {
	// VEX_Vfmsubaddps_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfmsubaddps(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubaddps_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubaddps_ymm_ymm_ymm_ymm() {
	// VEX_Vfmsubaddps_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfmsubaddps(ymm2, ymm3, ymm4, ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubaddps_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubaddps_ymm_ymm_m_ymm() {
	// VEX_Vfmsubaddps_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfmsubaddps(ymm2, ymm3, ymmword_ptr(si), ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubaddps_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubaddps_xmm_xmm_xmm_m() {
	// VEX_Vfmsubaddps_xmm_xmm_xmm_xmmm128
	test_instr(16, |a| a.vfmsubaddps(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubaddps_xmm_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubaddps_ymm_ymm_ymm_m() {
	// VEX_Vfmsubaddps_ymm_ymm_ymm_ymmm256
	test_instr(16, |a| a.vfmsubaddps(ymm2, ymm3, ymm4, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubaddps_ymm_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubpd_xmm_xmm_xmm_xmm() {
	// VEX_Vfmsubpd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfmsubpd(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubpd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubpd_xmm_xmm_m_xmm() {
	// VEX_Vfmsubpd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfmsubpd(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubpd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubpd_ymm_ymm_ymm_ymm() {
	// VEX_Vfmsubpd_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfmsubpd(ymm2, ymm3, ymm4, ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubpd_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubpd_ymm_ymm_m_ymm() {
	// VEX_Vfmsubpd_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfmsubpd(ymm2, ymm3, ymmword_ptr(si), ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubpd_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubpd_xmm_xmm_xmm_m() {
	// VEX_Vfmsubpd_xmm_xmm_xmm_xmmm128
	test_instr(16, |a| a.vfmsubpd(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubpd_xmm_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubpd_ymm_ymm_ymm_m() {
	// VEX_Vfmsubpd_ymm_ymm_ymm_ymmm256
	test_instr(16, |a| a.vfmsubpd(ymm2, ymm3, ymm4, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubpd_ymm_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubps_xmm_xmm_xmm_xmm() {
	// VEX_Vfmsubps_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfmsubps(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubps_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubps_xmm_xmm_m_xmm() {
	// VEX_Vfmsubps_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfmsubps(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubps_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubps_ymm_ymm_ymm_ymm() {
	// VEX_Vfmsubps_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfmsubps(ymm2, ymm3, ymm4, ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubps_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubps_ymm_ymm_m_ymm() {
	// VEX_Vfmsubps_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfmsubps(ymm2, ymm3, ymmword_ptr(si), ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubps_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubps_xmm_xmm_xmm_m() {
	// VEX_Vfmsubps_xmm_xmm_xmm_xmmm128
	test_instr(16, |a| a.vfmsubps(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubps_xmm_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubps_ymm_ymm_ymm_m() {
	// VEX_Vfmsubps_ymm_ymm_ymm_ymmm256
	test_instr(16, |a| a.vfmsubps(ymm2, ymm3, ymm4, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubps_ymm_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubsd_xmm_xmm_xmm_xmm() {
	// VEX_Vfmsubsd_xmm_xmm_xmmm64_xmm
	test_instr(16, |a| a.vfmsubsd(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubsd_xmm_xmm_xmmm64_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubsd_xmm_xmm_m_xmm() {
	// VEX_Vfmsubsd_xmm_xmm_xmmm64_xmm
	test_instr(16, |a| a.vfmsubsd(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubsd_xmm_xmm_xmmm64_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubsd_xmm_xmm_xmm_m() {
	// VEX_Vfmsubsd_xmm_xmm_xmm_xmmm64
	test_instr(16, |a| a.vfmsubsd(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubsd_xmm_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubss_xmm_xmm_xmm_xmm() {
	// VEX_Vfmsubss_xmm_xmm_xmmm32_xmm
	test_instr(16, |a| a.vfmsubss(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubss_xmm_xmm_xmmm32_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubss_xmm_xmm_m_xmm() {
	// VEX_Vfmsubss_xmm_xmm_xmmm32_xmm
	test_instr(16, |a| a.vfmsubss(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubss_xmm_xmm_xmmm32_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmsubss_xmm_xmm_xmm_m() {
	// VEX_Vfmsubss_xmm_xmm_xmm_xmmm32
	test_instr(16, |a| a.vfmsubss(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfmsubss_xmm_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmulcph_xmm_xmm_xmm() {
	// EVEX_Vfmulcph_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vfmulcph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmulcph_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmulcph_ymm_ymm_ymm() {
	// EVEX_Vfmulcph_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vfmulcph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmulcph_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmulcph_zmm_zmm_zmm() {
	// EVEX_Vfmulcph_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmulcph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmulcph_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmulcph_xmm_xmm_m() {
	// EVEX_Vfmulcph_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vfmulcph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmulcph_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmulcph_ymm_ymm_m() {
	// EVEX_Vfmulcph_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vfmulcph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmulcph_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmulcph_zmm_zmm_m() {
	// EVEX_Vfmulcph_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfmulcph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmulcph_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmulcsh_xmm_xmm_xmm() {
	// EVEX_Vfmulcsh_xmm_k1z_xmm_xmmm32_er
	test_instr(16, |a| a.vfmulcsh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmulcsh_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfmulcsh_xmm_xmm_m() {
	// EVEX_Vfmulcsh_xmm_k1z_xmm_xmmm32_er
	test_instr(16, |a| a.vfmulcsh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfmulcsh_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd132pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd132pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmadd132pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd132pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmadd132pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd132pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd132pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmadd132pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd132pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmadd132pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd132pd_zmm_zmm_zmm() {
	// EVEX_Vfnmadd132pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfnmadd132pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd132pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmadd132pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd132pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmadd132pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd132pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmadd132pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd132pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmadd132pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd132pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmadd132pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd132pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmadd132pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd132pd_zmm_zmm_m() {
	// EVEX_Vfnmadd132pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfnmadd132pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd132ph_xmm_xmm_xmm() {
	// EVEX_Vfnmadd132ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfnmadd132ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd132ph_ymm_ymm_ymm() {
	// EVEX_Vfnmadd132ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfnmadd132ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd132ph_zmm_zmm_zmm() {
	// EVEX_Vfnmadd132ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfnmadd132ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd132ph_xmm_xmm_m() {
	// EVEX_Vfnmadd132ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfnmadd132ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd132ph_ymm_ymm_m() {
	// EVEX_Vfnmadd132ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfnmadd132ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd132ph_zmm_zmm_m() {
	// EVEX_Vfnmadd132ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfnmadd132ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd132ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd132ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmadd132ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd132ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmadd132ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd132ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd132ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmadd132ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd132ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmadd132ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd132ps_zmm_zmm_zmm() {
	// EVEX_Vfnmadd132ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfnmadd132ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd132ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmadd132ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd132ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmadd132ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd132ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmadd132ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd132ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmadd132ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd132ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmadd132ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd132ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmadd132ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd132ps_zmm_zmm_m() {
	// EVEX_Vfnmadd132ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfnmadd132ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd132sd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd132sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfnmadd132sd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd132sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd132sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfnmadd132sd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd132sd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd132sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfnmadd132sd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd132sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd132sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfnmadd132sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd132sh_xmm_xmm_xmm() {
	// EVEX_Vfnmadd132sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfnmadd132sh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd132sh_xmm_xmm_m() {
	// EVEX_Vfnmadd132sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfnmadd132sh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd132ss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd132ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfnmadd132ss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd132ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd132ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfnmadd132ss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd132ss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd132ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfnmadd132ss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd132ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd132ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfnmadd132ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd132ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd213pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd213pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmadd213pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd213pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmadd213pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd213pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd213pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmadd213pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd213pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmadd213pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd213pd_zmm_zmm_zmm() {
	// EVEX_Vfnmadd213pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfnmadd213pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd213pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmadd213pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd213pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmadd213pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd213pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmadd213pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd213pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmadd213pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd213pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmadd213pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd213pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmadd213pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd213pd_zmm_zmm_m() {
	// EVEX_Vfnmadd213pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfnmadd213pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd213ph_xmm_xmm_xmm() {
	// EVEX_Vfnmadd213ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfnmadd213ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd213ph_ymm_ymm_ymm() {
	// EVEX_Vfnmadd213ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfnmadd213ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd213ph_zmm_zmm_zmm() {
	// EVEX_Vfnmadd213ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfnmadd213ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd213ph_xmm_xmm_m() {
	// EVEX_Vfnmadd213ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfnmadd213ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd213ph_ymm_ymm_m() {
	// EVEX_Vfnmadd213ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfnmadd213ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd213ph_zmm_zmm_m() {
	// EVEX_Vfnmadd213ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfnmadd213ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd213ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd213ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmadd213ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd213ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmadd213ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd213ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd213ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmadd213ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd213ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmadd213ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd213ps_zmm_zmm_zmm() {
	// EVEX_Vfnmadd213ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfnmadd213ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd213ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmadd213ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd213ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmadd213ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd213ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmadd213ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd213ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmadd213ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd213ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmadd213ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd213ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmadd213ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd213ps_zmm_zmm_m() {
	// EVEX_Vfnmadd213ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfnmadd213ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd213sd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd213sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfnmadd213sd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd213sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd213sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfnmadd213sd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd213sd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd213sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfnmadd213sd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd213sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd213sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfnmadd213sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd213sh_xmm_xmm_xmm() {
	// EVEX_Vfnmadd213sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfnmadd213sh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd213sh_xmm_xmm_m() {
	// EVEX_Vfnmadd213sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfnmadd213sh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd213ss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd213ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfnmadd213ss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd213ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd213ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfnmadd213ss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd213ss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd213ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfnmadd213ss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd213ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd213ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfnmadd213ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd213ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd231pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd231pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmadd231pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd231pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmadd231pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd231pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd231pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmadd231pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd231pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmadd231pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd231pd_zmm_zmm_zmm() {
	// EVEX_Vfnmadd231pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfnmadd231pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd231pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmadd231pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd231pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmadd231pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd231pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmadd231pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd231pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmadd231pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd231pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmadd231pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd231pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmadd231pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd231pd_zmm_zmm_m() {
	// EVEX_Vfnmadd231pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfnmadd231pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd231ph_xmm_xmm_xmm() {
	// EVEX_Vfnmadd231ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfnmadd231ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd231ph_ymm_ymm_ymm() {
	// EVEX_Vfnmadd231ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfnmadd231ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd231ph_zmm_zmm_zmm() {
	// EVEX_Vfnmadd231ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfnmadd231ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd231ph_xmm_xmm_m() {
	// EVEX_Vfnmadd231ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfnmadd231ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd231ph_ymm_ymm_m() {
	// EVEX_Vfnmadd231ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfnmadd231ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd231ph_zmm_zmm_m() {
	// EVEX_Vfnmadd231ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfnmadd231ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd231ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd231ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmadd231ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd231ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmadd231ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd231ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd231ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmadd231ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd231ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmadd231ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd231ps_zmm_zmm_zmm() {
	// EVEX_Vfnmadd231ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfnmadd231ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd231ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmadd231ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd231ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmadd231ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd231ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmadd231ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd231ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmadd231ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd231ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmadd231ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd231ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmadd231ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd231ps_zmm_zmm_m() {
	// EVEX_Vfnmadd231ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfnmadd231ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd231sd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd231sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfnmadd231sd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd231sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd231sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfnmadd231sd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd231sd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd231sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfnmadd231sd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd231sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd231sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfnmadd231sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd231sh_xmm_xmm_xmm() {
	// EVEX_Vfnmadd231sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfnmadd231sh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd231sh_xmm_xmm_m() {
	// EVEX_Vfnmadd231sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfnmadd231sh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmadd231ss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd231ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfnmadd231ss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd231ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd231ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfnmadd231ss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmadd231ss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmadd231ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfnmadd231ss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmadd231ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmadd231ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfnmadd231ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmadd231ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmaddpd_xmm_xmm_xmm_xmm() {
	// VEX_Vfnmaddpd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfnmaddpd(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddpd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmaddpd_xmm_xmm_m_xmm() {
	// VEX_Vfnmaddpd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfnmaddpd(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddpd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmaddpd_ymm_ymm_ymm_ymm() {
	// VEX_Vfnmaddpd_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfnmaddpd(ymm2, ymm3, ymm4, ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddpd_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmaddpd_ymm_ymm_m_ymm() {
	// VEX_Vfnmaddpd_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfnmaddpd(ymm2, ymm3, ymmword_ptr(si), ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddpd_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmaddpd_xmm_xmm_xmm_m() {
	// VEX_Vfnmaddpd_xmm_xmm_xmm_xmmm128
	test_instr(16, |a| a.vfnmaddpd(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddpd_xmm_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmaddpd_ymm_ymm_ymm_m() {
	// VEX_Vfnmaddpd_ymm_ymm_ymm_ymmm256
	test_instr(16, |a| a.vfnmaddpd(ymm2, ymm3, ymm4, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddpd_ymm_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmaddps_xmm_xmm_xmm_xmm() {
	// VEX_Vfnmaddps_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfnmaddps(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddps_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmaddps_xmm_xmm_m_xmm() {
	// VEX_Vfnmaddps_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfnmaddps(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddps_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmaddps_ymm_ymm_ymm_ymm() {
	// VEX_Vfnmaddps_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfnmaddps(ymm2, ymm3, ymm4, ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddps_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmaddps_ymm_ymm_m_ymm() {
	// VEX_Vfnmaddps_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfnmaddps(ymm2, ymm3, ymmword_ptr(si), ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddps_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmaddps_xmm_xmm_xmm_m() {
	// VEX_Vfnmaddps_xmm_xmm_xmm_xmmm128
	test_instr(16, |a| a.vfnmaddps(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddps_xmm_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmaddps_ymm_ymm_ymm_m() {
	// VEX_Vfnmaddps_ymm_ymm_ymm_ymmm256
	test_instr(16, |a| a.vfnmaddps(ymm2, ymm3, ymm4, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddps_ymm_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmaddsd_xmm_xmm_xmm_xmm() {
	// VEX_Vfnmaddsd_xmm_xmm_xmmm64_xmm
	test_instr(16, |a| a.vfnmaddsd(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddsd_xmm_xmm_xmmm64_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmaddsd_xmm_xmm_m_xmm() {
	// VEX_Vfnmaddsd_xmm_xmm_xmmm64_xmm
	test_instr(16, |a| a.vfnmaddsd(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddsd_xmm_xmm_xmmm64_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmaddsd_xmm_xmm_xmm_m() {
	// VEX_Vfnmaddsd_xmm_xmm_xmm_xmmm64
	test_instr(16, |a| a.vfnmaddsd(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddsd_xmm_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmaddss_xmm_xmm_xmm_xmm() {
	// VEX_Vfnmaddss_xmm_xmm_xmmm32_xmm
	test_instr(16, |a| a.vfnmaddss(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddss_xmm_xmm_xmmm32_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmaddss_xmm_xmm_m_xmm() {
	// VEX_Vfnmaddss_xmm_xmm_xmmm32_xmm
	test_instr(16, |a| a.vfnmaddss(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddss_xmm_xmm_xmmm32_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmaddss_xmm_xmm_xmm_m() {
	// VEX_Vfnmaddss_xmm_xmm_xmm_xmmm32
	test_instr(16, |a| a.vfnmaddss(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfnmaddss_xmm_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub132pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub132pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmsub132pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub132pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmsub132pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub132pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub132pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmsub132pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub132pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmsub132pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub132pd_zmm_zmm_zmm() {
	// EVEX_Vfnmsub132pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfnmsub132pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub132pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmsub132pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub132pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmsub132pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub132pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmsub132pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub132pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmsub132pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub132pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmsub132pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub132pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmsub132pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub132pd_zmm_zmm_m() {
	// EVEX_Vfnmsub132pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfnmsub132pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub132ph_xmm_xmm_xmm() {
	// EVEX_Vfnmsub132ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfnmsub132ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub132ph_ymm_ymm_ymm() {
	// EVEX_Vfnmsub132ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfnmsub132ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub132ph_zmm_zmm_zmm() {
	// EVEX_Vfnmsub132ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfnmsub132ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub132ph_xmm_xmm_m() {
	// EVEX_Vfnmsub132ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfnmsub132ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub132ph_ymm_ymm_m() {
	// EVEX_Vfnmsub132ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfnmsub132ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub132ph_zmm_zmm_m() {
	// EVEX_Vfnmsub132ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfnmsub132ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub132ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub132ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmsub132ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub132ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmsub132ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub132ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub132ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmsub132ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub132ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmsub132ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub132ps_zmm_zmm_zmm() {
	// EVEX_Vfnmsub132ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfnmsub132ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub132ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmsub132ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub132ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmsub132ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub132ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmsub132ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub132ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmsub132ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub132ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmsub132ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub132ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmsub132ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub132ps_zmm_zmm_m() {
	// EVEX_Vfnmsub132ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfnmsub132ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub132sd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub132sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfnmsub132sd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub132sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub132sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfnmsub132sd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub132sd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub132sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfnmsub132sd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub132sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub132sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfnmsub132sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub132sh_xmm_xmm_xmm() {
	// EVEX_Vfnmsub132sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfnmsub132sh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub132sh_xmm_xmm_m() {
	// EVEX_Vfnmsub132sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfnmsub132sh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub132ss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub132ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfnmsub132ss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub132ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub132ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfnmsub132ss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub132ss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub132ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfnmsub132ss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub132ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub132ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfnmsub132ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub132ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub213pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub213pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmsub213pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub213pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmsub213pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub213pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub213pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmsub213pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub213pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmsub213pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub213pd_zmm_zmm_zmm() {
	// EVEX_Vfnmsub213pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfnmsub213pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub213pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmsub213pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub213pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmsub213pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub213pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmsub213pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub213pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmsub213pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub213pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmsub213pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub213pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmsub213pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub213pd_zmm_zmm_m() {
	// EVEX_Vfnmsub213pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfnmsub213pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub213ph_xmm_xmm_xmm() {
	// EVEX_Vfnmsub213ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfnmsub213ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub213ph_ymm_ymm_ymm() {
	// EVEX_Vfnmsub213ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfnmsub213ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub213ph_zmm_zmm_zmm() {
	// EVEX_Vfnmsub213ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfnmsub213ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub213ph_xmm_xmm_m() {
	// EVEX_Vfnmsub213ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfnmsub213ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub213ph_ymm_ymm_m() {
	// EVEX_Vfnmsub213ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfnmsub213ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub213ph_zmm_zmm_m() {
	// EVEX_Vfnmsub213ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfnmsub213ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub213ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub213ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmsub213ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub213ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmsub213ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub213ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub213ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmsub213ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub213ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmsub213ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub213ps_zmm_zmm_zmm() {
	// EVEX_Vfnmsub213ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfnmsub213ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub213ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmsub213ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub213ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmsub213ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub213ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmsub213ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub213ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmsub213ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub213ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmsub213ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub213ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmsub213ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub213ps_zmm_zmm_m() {
	// EVEX_Vfnmsub213ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfnmsub213ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub213sd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub213sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfnmsub213sd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub213sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub213sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfnmsub213sd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub213sd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub213sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfnmsub213sd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub213sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub213sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfnmsub213sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub213sh_xmm_xmm_xmm() {
	// EVEX_Vfnmsub213sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfnmsub213sh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub213sh_xmm_xmm_m() {
	// EVEX_Vfnmsub213sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfnmsub213sh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub213ss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub213ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfnmsub213ss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub213ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub213ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfnmsub213ss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub213ss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub213ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfnmsub213ss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub213ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub213ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfnmsub213ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub213ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub231pd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub231pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmsub231pd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub231pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmsub231pd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub231pd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub231pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmsub231pd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub231pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmsub231pd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub231pd_zmm_zmm_zmm() {
	// EVEX_Vfnmsub231pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfnmsub231pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub231pd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmsub231pd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub231pd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmsub231pd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub231pd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vfnmsub231pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub231pd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmsub231pd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub231pd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmsub231pd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub231pd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vfnmsub231pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub231pd_zmm_zmm_m() {
	// EVEX_Vfnmsub231pd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vfnmsub231pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231pd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub231ph_xmm_xmm_xmm() {
	// EVEX_Vfnmsub231ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfnmsub231ph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub231ph_ymm_ymm_ymm() {
	// EVEX_Vfnmsub231ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfnmsub231ph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub231ph_zmm_zmm_zmm() {
	// EVEX_Vfnmsub231ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfnmsub231ph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub231ph_xmm_xmm_m() {
	// EVEX_Vfnmsub231ph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vfnmsub231ph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231ph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub231ph_ymm_ymm_m() {
	// EVEX_Vfnmsub231ph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vfnmsub231ph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231ph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub231ph_zmm_zmm_m() {
	// EVEX_Vfnmsub231ph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vfnmsub231ph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231ph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub231ps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub231ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmsub231ps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub231ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmsub231ps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub231ps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub231ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmsub231ps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub231ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmsub231ps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub231ps_zmm_zmm_zmm() {
	// EVEX_Vfnmsub231ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfnmsub231ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub231ps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmsub231ps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub231ps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vfnmsub231ps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub231ps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vfnmsub231ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub231ps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmsub231ps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub231ps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vfnmsub231ps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub231ps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vfnmsub231ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub231ps_zmm_zmm_m() {
	// EVEX_Vfnmsub231ps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vfnmsub231ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231ps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub231sd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub231sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfnmsub231sd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub231sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub231sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfnmsub231sd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub231sd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub231sd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vfnmsub231sd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub231sd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub231sd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vfnmsub231sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231sd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub231sh_xmm_xmm_xmm() {
	// EVEX_Vfnmsub231sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfnmsub231sh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub231sh_xmm_xmm_m() {
	// EVEX_Vfnmsub231sh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vfnmsub231sh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231sh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsub231ss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub231ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfnmsub231ss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub231ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub231ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfnmsub231ss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsub231ss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vfnmsub231ss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vfnmsub231ss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vfnmsub231ss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfnmsub231ss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vfnmsub231ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfnmsub231ss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfnmsubpd_xmm_xmm_xmm_xmm() {
	// VEX_Vfnmsubpd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfnmsubpd(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubpd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsubpd_xmm_xmm_m_xmm() {
	// VEX_Vfnmsubpd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfnmsubpd(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubpd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsubpd_ymm_ymm_ymm_ymm() {
	// VEX_Vfnmsubpd_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfnmsubpd(ymm2, ymm3, ymm4, ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubpd_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsubpd_ymm_ymm_m_ymm() {
	// VEX_Vfnmsubpd_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfnmsubpd(ymm2, ymm3, ymmword_ptr(si), ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubpd_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsubpd_xmm_xmm_xmm_m() {
	// VEX_Vfnmsubpd_xmm_xmm_xmm_xmmm128
	test_instr(16, |a| a.vfnmsubpd(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubpd_xmm_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsubpd_ymm_ymm_ymm_m() {
	// VEX_Vfnmsubpd_ymm_ymm_ymm_ymmm256
	test_instr(16, |a| a.vfnmsubpd(ymm2, ymm3, ymm4, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubpd_ymm_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsubps_xmm_xmm_xmm_xmm() {
	// VEX_Vfnmsubps_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfnmsubps(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubps_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsubps_xmm_xmm_m_xmm() {
	// VEX_Vfnmsubps_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vfnmsubps(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubps_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsubps_ymm_ymm_ymm_ymm() {
	// VEX_Vfnmsubps_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfnmsubps(ymm2, ymm3, ymm4, ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubps_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsubps_ymm_ymm_m_ymm() {
	// VEX_Vfnmsubps_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vfnmsubps(ymm2, ymm3, ymmword_ptr(si), ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubps_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsubps_xmm_xmm_xmm_m() {
	// VEX_Vfnmsubps_xmm_xmm_xmm_xmmm128
	test_instr(16, |a| a.vfnmsubps(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubps_xmm_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsubps_ymm_ymm_ymm_m() {
	// VEX_Vfnmsubps_ymm_ymm_ymm_ymmm256
	test_instr(16, |a| a.vfnmsubps(ymm2, ymm3, ymm4, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubps_ymm_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsubsd_xmm_xmm_xmm_xmm() {
	// VEX_Vfnmsubsd_xmm_xmm_xmmm64_xmm
	test_instr(16, |a| a.vfnmsubsd(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubsd_xmm_xmm_xmmm64_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsubsd_xmm_xmm_m_xmm() {
	// VEX_Vfnmsubsd_xmm_xmm_xmmm64_xmm
	test_instr(16, |a| a.vfnmsubsd(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubsd_xmm_xmm_xmmm64_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsubsd_xmm_xmm_xmm_m() {
	// VEX_Vfnmsubsd_xmm_xmm_xmm_xmmm64
	test_instr(16, |a| a.vfnmsubsd(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubsd_xmm_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsubss_xmm_xmm_xmm_xmm() {
	// VEX_Vfnmsubss_xmm_xmm_xmmm32_xmm
	test_instr(16, |a| a.vfnmsubss(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubss_xmm_xmm_xmmm32_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsubss_xmm_xmm_m_xmm() {
	// VEX_Vfnmsubss_xmm_xmm_xmmm32_xmm
	test_instr(16, |a| a.vfnmsubss(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubss_xmm_xmm_xmmm32_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfnmsubss_xmm_xmm_xmm_m() {
	// VEX_Vfnmsubss_xmm_xmm_xmm_xmmm32
	test_instr(16, |a| a.vfnmsubss(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vfnmsubss_xmm_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasspd_kr_xmm_i() {
	// EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8
	test_instr(16, |a| a.vfpclasspd(k2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, Register::K2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8
	test_instr(16, |a| a.vfpclasspd(k2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, Register::K2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasspd_kr_ymm_i() {
	// EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8
	test_instr(16, |a| a.vfpclasspd(k2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, Register::K2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8
	test_instr(16, |a| a.vfpclasspd(k2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, Register::K2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasspd_kr_zmm_i() {
	// EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8
	test_instr(16, |a| a.vfpclasspd(k2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register::K2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8
	test_instr(16, |a| a.vfpclasspd(k2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register::K2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasspd_kr_m_i() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8
		test_instr(16, |a| a.vfpclasspd(k2.k1(), dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Zword */ {
		// EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8
		test_instr(16, |a| a.vfpclasspd(k2.k1(), zmmword_ptr(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8
		test_instr(16, |a| a.vfpclasspd(k2.k1(), ymmword_ptr(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8
		test_instr(16, |a| a.vfpclasspd(k2.k1(), xmmword_ptr(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8
		test_invalid_instr(16, |a| assert!(a.vfpclasspd(k2.k1(), byte_ptr(di), -5i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op1.is_broadcast() */ {
		// EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8
		test_instr(16, |a| a.vfpclasspd(k2.k1(), dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Zword */ {
		// EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8
		test_instr(16, |a| a.vfpclasspd(k2.k1(), zmmword_ptr(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8
		test_instr(16, |a| a.vfpclasspd(k2.k1(), ymmword_ptr(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8
		test_instr(16, |a| a.vfpclasspd(k2.k1(), xmmword_ptr(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8
		test_invalid_instr(16, |a| assert!(a.vfpclasspd(k2.k1(), byte_ptr(di), -5).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfpclasspd_kr_xmm_u() {
	// EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8
	test_instr(16, |a| a.vfpclasspd(k2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, Register::K2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasspd_kr_ymm_u() {
	// EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8
	test_instr(16, |a| a.vfpclasspd(k2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, Register::K2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasspd_kr_zmm_u() {
	// EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8
	test_instr(16, |a| a.vfpclasspd(k2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register::K2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasspd_kr_m_u() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8
		test_instr(16, |a| a.vfpclasspd(k2.k1(), dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Zword */ {
		// EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8
		test_instr(16, |a| a.vfpclasspd(k2.k1(), zmmword_ptr(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8
		test_instr(16, |a| a.vfpclasspd(k2.k1(), ymmword_ptr(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8
		test_instr(16, |a| a.vfpclasspd(k2.k1(), xmmword_ptr(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8
		test_invalid_instr(16, |a| assert!(a.vfpclasspd(k2.k1(), byte_ptr(di), 0x7Fu32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfpclasspdx_kr_m_i() {
	// EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8
	test_instr(16, |a| a.vfpclasspdx(k2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8
	test_instr(16, |a| a.vfpclasspdx(k2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasspdx_kr_m_u() {
	// EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8
	test_instr(16, |a| a.vfpclasspdx(k2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasspdy_kr_m_i() {
	// EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8
	test_instr(16, |a| a.vfpclasspdy(k2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8
	test_instr(16, |a| a.vfpclasspdy(k2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasspdy_kr_m_u() {
	// EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8
	test_instr(16, |a| a.vfpclasspdy(k2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasspdz_kr_m_i() {
	// EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8
	test_instr(16, |a| a.vfpclasspdz(k2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8
	test_instr(16, |a| a.vfpclasspdz(k2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasspdz_kr_m_u() {
	// EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8
	test_instr(16, |a| a.vfpclasspdz(k2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassph_kr_xmm_i() {
	// EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8
	test_instr(16, |a| a.vfpclassph(k2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, Register::K2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8
	test_instr(16, |a| a.vfpclassph(k2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, Register::K2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassph_kr_ymm_i() {
	// EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8
	test_instr(16, |a| a.vfpclassph(k2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, Register::K2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8
	test_instr(16, |a| a.vfpclassph(k2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, Register::K2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassph_kr_zmm_i() {
	// EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8
	test_instr(16, |a| a.vfpclassph(k2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register::K2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8
	test_instr(16, |a| a.vfpclassph(k2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register::K2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassph_kr_m_i() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8
		test_instr(16, |a| a.vfpclassph(k2.k1(), dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Zword */ {
		// EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8
		test_instr(16, |a| a.vfpclassph(k2.k1(), zmmword_ptr(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8
		test_instr(16, |a| a.vfpclassph(k2.k1(), ymmword_ptr(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8
		test_instr(16, |a| a.vfpclassph(k2.k1(), xmmword_ptr(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8
		test_invalid_instr(16, |a| assert!(a.vfpclassph(k2.k1(), byte_ptr(di), -5i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op1.is_broadcast() */ {
		// EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8
		test_instr(16, |a| a.vfpclassph(k2.k1(), dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Zword */ {
		// EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8
		test_instr(16, |a| a.vfpclassph(k2.k1(), zmmword_ptr(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8
		test_instr(16, |a| a.vfpclassph(k2.k1(), ymmword_ptr(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8
		test_instr(16, |a| a.vfpclassph(k2.k1(), xmmword_ptr(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8
		test_invalid_instr(16, |a| assert!(a.vfpclassph(k2.k1(), byte_ptr(di), -5).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfpclassph_kr_xmm_u() {
	// EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8
	test_instr(16, |a| a.vfpclassph(k2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, Register::K2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassph_kr_ymm_u() {
	// EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8
	test_instr(16, |a| a.vfpclassph(k2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, Register::K2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassph_kr_zmm_u() {
	// EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8
	test_instr(16, |a| a.vfpclassph(k2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register::K2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassph_kr_m_u() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8
		test_instr(16, |a| a.vfpclassph(k2.k1(), dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Zword */ {
		// EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8
		test_instr(16, |a| a.vfpclassph(k2.k1(), zmmword_ptr(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8
		test_instr(16, |a| a.vfpclassph(k2.k1(), ymmword_ptr(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8
		test_instr(16, |a| a.vfpclassph(k2.k1(), xmmword_ptr(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8
		test_invalid_instr(16, |a| assert!(a.vfpclassph(k2.k1(), byte_ptr(di), 0x7Fu32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfpclassphx_kr_m_i() {
	// EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8
	test_instr(16, |a| a.vfpclassphx(k2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8
	test_instr(16, |a| a.vfpclassphx(k2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassphx_kr_m_u() {
	// EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8
	test_instr(16, |a| a.vfpclassphx(k2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassphy_kr_m_i() {
	// EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8
	test_instr(16, |a| a.vfpclassphy(k2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8
	test_instr(16, |a| a.vfpclassphy(k2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassphy_kr_m_u() {
	// EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8
	test_instr(16, |a| a.vfpclassphy(k2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassphz_kr_m_i() {
	// EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8
	test_instr(16, |a| a.vfpclassphz(k2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8
	test_instr(16, |a| a.vfpclassphz(k2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassphz_kr_m_u() {
	// EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8
	test_instr(16, |a| a.vfpclassphz(k2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassps_kr_xmm_i() {
	// EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8
	test_instr(16, |a| a.vfpclassps(k2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, Register::K2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8
	test_instr(16, |a| a.vfpclassps(k2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, Register::K2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassps_kr_ymm_i() {
	// EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8
	test_instr(16, |a| a.vfpclassps(k2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, Register::K2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8
	test_instr(16, |a| a.vfpclassps(k2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, Register::K2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassps_kr_zmm_i() {
	// EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8
	test_instr(16, |a| a.vfpclassps(k2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register::K2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8
	test_instr(16, |a| a.vfpclassps(k2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register::K2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassps_kr_m_i() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8
		test_instr(16, |a| a.vfpclassps(k2.k1(), dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Zword */ {
		// EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8
		test_instr(16, |a| a.vfpclassps(k2.k1(), zmmword_ptr(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8
		test_instr(16, |a| a.vfpclassps(k2.k1(), ymmword_ptr(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8
		test_instr(16, |a| a.vfpclassps(k2.k1(), xmmword_ptr(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8
		test_invalid_instr(16, |a| assert!(a.vfpclassps(k2.k1(), byte_ptr(di), -5i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op1.is_broadcast() */ {
		// EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8
		test_instr(16, |a| a.vfpclassps(k2.k1(), dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Zword */ {
		// EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8
		test_instr(16, |a| a.vfpclassps(k2.k1(), zmmword_ptr(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8
		test_instr(16, |a| a.vfpclassps(k2.k1(), ymmword_ptr(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8
		test_instr(16, |a| a.vfpclassps(k2.k1(), xmmword_ptr(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8
		test_invalid_instr(16, |a| assert!(a.vfpclassps(k2.k1(), byte_ptr(di), -5).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfpclassps_kr_xmm_u() {
	// EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8
	test_instr(16, |a| a.vfpclassps(k2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, Register::K2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassps_kr_ymm_u() {
	// EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8
	test_instr(16, |a| a.vfpclassps(k2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, Register::K2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassps_kr_zmm_u() {
	// EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8
	test_instr(16, |a| a.vfpclassps(k2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register::K2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassps_kr_m_u() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8
		test_instr(16, |a| a.vfpclassps(k2.k1(), dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Zword */ {
		// EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8
		test_instr(16, |a| a.vfpclassps(k2.k1(), zmmword_ptr(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Yword */ {
		// EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8
		test_instr(16, |a| a.vfpclassps(k2.k1(), ymmword_ptr(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.size() == MemoryOperandSize::Xword */ {
		// EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8
		test_instr(16, |a| a.vfpclassps(k2.k1(), xmmword_ptr(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, Register::K2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8
		test_invalid_instr(16, |a| assert!(a.vfpclassps(k2.k1(), byte_ptr(di), 0x7Fu32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vfpclasspsx_kr_m_i() {
	// EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8
	test_instr(16, |a| a.vfpclasspsx(k2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8
	test_instr(16, |a| a.vfpclasspsx(k2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasspsx_kr_m_u() {
	// EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8
	test_instr(16, |a| a.vfpclasspsx(k2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasspsy_kr_m_i() {
	// EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8
	test_instr(16, |a| a.vfpclasspsy(k2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8
	test_instr(16, |a| a.vfpclasspsy(k2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasspsy_kr_m_u() {
	// EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8
	test_instr(16, |a| a.vfpclasspsy(k2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasspsz_kr_m_i() {
	// EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8
	test_instr(16, |a| a.vfpclasspsz(k2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8
	test_instr(16, |a| a.vfpclasspsz(k2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasspsz_kr_m_u() {
	// EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8
	test_instr(16, |a| a.vfpclasspsz(k2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasssd_kr_xmm_i() {
	// EVEX_Vfpclasssd_kr_k1_xmmm64_imm8
	test_instr(16, |a| a.vfpclasssd(k2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, Register::K2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclasssd_kr_k1_xmmm64_imm8
	test_instr(16, |a| a.vfpclasssd(k2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, Register::K2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasssd_kr_m_i() {
	// EVEX_Vfpclasssd_kr_k1_xmmm64_imm8
	test_instr(16, |a| a.vfpclasssd(k2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclasssd_kr_k1_xmmm64_imm8
	test_instr(16, |a| a.vfpclasssd(k2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasssd_kr_xmm_u() {
	// EVEX_Vfpclasssd_kr_k1_xmmm64_imm8
	test_instr(16, |a| a.vfpclasssd(k2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, Register::K2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasssd_kr_m_u() {
	// EVEX_Vfpclasssd_kr_k1_xmmm64_imm8
	test_instr(16, |a| a.vfpclasssd(k2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasssh_kr_xmm_i() {
	// EVEX_Vfpclasssh_kr_k1_xmmm16_imm8
	test_instr(16, |a| a.vfpclasssh(k2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasssh_kr_k1_xmmm16_imm8, Register::K2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclasssh_kr_k1_xmmm16_imm8
	test_instr(16, |a| a.vfpclasssh(k2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasssh_kr_k1_xmmm16_imm8, Register::K2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasssh_kr_m_i() {
	// EVEX_Vfpclasssh_kr_k1_xmmm16_imm8
	test_instr(16, |a| a.vfpclasssh(k2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasssh_kr_k1_xmmm16_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclasssh_kr_k1_xmmm16_imm8
	test_instr(16, |a| a.vfpclasssh(k2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasssh_kr_k1_xmmm16_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasssh_kr_xmm_u() {
	// EVEX_Vfpclasssh_kr_k1_xmmm16_imm8
	test_instr(16, |a| a.vfpclasssh(k2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasssh_kr_k1_xmmm16_imm8, Register::K2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclasssh_kr_m_u() {
	// EVEX_Vfpclasssh_kr_k1_xmmm16_imm8
	test_instr(16, |a| a.vfpclasssh(k2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclasssh_kr_k1_xmmm16_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassss_kr_xmm_i() {
	// EVEX_Vfpclassss_kr_k1_xmmm32_imm8
	test_instr(16, |a| a.vfpclassss(k2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassss_kr_k1_xmmm32_imm8, Register::K2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclassss_kr_k1_xmmm32_imm8
	test_instr(16, |a| a.vfpclassss(k2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassss_kr_k1_xmmm32_imm8, Register::K2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassss_kr_m_i() {
	// EVEX_Vfpclassss_kr_k1_xmmm32_imm8
	test_instr(16, |a| a.vfpclassss(k2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassss_kr_k1_xmmm32_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vfpclassss_kr_k1_xmmm32_imm8
	test_instr(16, |a| a.vfpclassss(k2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassss_kr_k1_xmmm32_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassss_kr_xmm_u() {
	// EVEX_Vfpclassss_kr_k1_xmmm32_imm8
	test_instr(16, |a| a.vfpclassss(k2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassss_kr_k1_xmmm32_imm8, Register::K2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfpclassss_kr_m_u() {
	// EVEX_Vfpclassss_kr_k1_xmmm32_imm8
	test_instr(16, |a| a.vfpclassss(k2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vfpclassss_kr_k1_xmmm32_imm8, Register::K2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfrczpd_xmm_xmm() {
	// XOP_Vfrczpd_xmm_xmmm128
	test_instr(16, |a| a.vfrczpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vfrczpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfrczpd_ymm_ymm() {
	// XOP_Vfrczpd_ymm_ymmm256
	test_instr(16, |a| a.vfrczpd(ymm2, ymm3).unwrap(),
		Instruction::with2(Code::XOP_Vfrczpd_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfrczpd_xmm_m() {
	// XOP_Vfrczpd_xmm_xmmm128
	test_instr(16, |a| a.vfrczpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vfrczpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfrczpd_ymm_m() {
	// XOP_Vfrczpd_ymm_ymmm256
	test_instr(16, |a| a.vfrczpd(ymm2, ymmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vfrczpd_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfrczps_xmm_xmm() {
	// XOP_Vfrczps_xmm_xmmm128
	test_instr(16, |a| a.vfrczps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vfrczps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfrczps_ymm_ymm() {
	// XOP_Vfrczps_ymm_ymmm256
	test_instr(16, |a| a.vfrczps(ymm2, ymm3).unwrap(),
		Instruction::with2(Code::XOP_Vfrczps_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfrczps_xmm_m() {
	// XOP_Vfrczps_xmm_xmmm128
	test_instr(16, |a| a.vfrczps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vfrczps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfrczps_ymm_m() {
	// XOP_Vfrczps_ymm_ymmm256
	test_instr(16, |a| a.vfrczps(ymm2, ymmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vfrczps_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfrczsd_xmm_xmm() {
	// XOP_Vfrczsd_xmm_xmmm64
	test_instr(16, |a| a.vfrczsd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vfrczsd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfrczsd_xmm_m() {
	// XOP_Vfrczsd_xmm_xmmm64
	test_instr(16, |a| a.vfrczsd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vfrczsd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfrczss_xmm_xmm() {
	// XOP_Vfrczss_xmm_xmmm32
	test_instr(16, |a| a.vfrczss(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vfrczss_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vfrczss_xmm_m() {
	// XOP_Vfrczss_xmm_xmmm32
	test_instr(16, |a| a.vfrczss(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vfrczss_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherdpd_xmm_m() {
	// EVEX_Vgatherdpd_xmm_k1_vm32x
	test_instr(16, |a| a.vgatherdpd(xmm2.k1(), ptr(edx+xmm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgatherdpd_xmm_k1_vm32x, Register::XMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherdpd_ymm_m() {
	// EVEX_Vgatherdpd_ymm_k1_vm32x
	test_instr(16, |a| a.vgatherdpd(ymm2.k1(), ptr(edx+xmm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgatherdpd_ymm_k1_vm32x, Register::YMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherdpd_zmm_m() {
	// EVEX_Vgatherdpd_zmm_k1_vm32y
	test_instr(16, |a| a.vgatherdpd(zmm2.k1(), ptr(edx+ymm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgatherdpd_zmm_k1_vm32y, Register::ZMM2, MemoryOperand::new(Register::EDX, Register::YMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherdpd_xmm_m_xmm() {
	// VEX_Vgatherdpd_xmm_vm32x_xmm
	test_instr(16, |a| a.vgatherdpd_3(xmm2, ptr(edx+xmm3), xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vgatherdpd_xmm_vm32x_xmm, Register::XMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherdpd_ymm_m_ymm() {
	// VEX_Vgatherdpd_ymm_vm32x_ymm
	test_instr(16, |a| a.vgatherdpd_3(ymm2, ptr(edx+xmm3), ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vgatherdpd_ymm_vm32x_ymm, Register::YMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None), Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherdps_xmm_m() {
	// EVEX_Vgatherdps_xmm_k1_vm32x
	test_instr(16, |a| a.vgatherdps(xmm2.k1(), ptr(edx+xmm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgatherdps_xmm_k1_vm32x, Register::XMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherdps_ymm_m() {
	// EVEX_Vgatherdps_ymm_k1_vm32y
	test_instr(16, |a| a.vgatherdps(ymm2.k1(), ptr(edx+ymm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgatherdps_ymm_k1_vm32y, Register::YMM2, MemoryOperand::new(Register::EDX, Register::YMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherdps_zmm_m() {
	// EVEX_Vgatherdps_zmm_k1_vm32z
	test_instr(16, |a| a.vgatherdps(zmm2.k1(), ptr(edx+zmm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgatherdps_zmm_k1_vm32z, Register::ZMM2, MemoryOperand::new(Register::EDX, Register::ZMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherdps_xmm_m_xmm() {
	// VEX_Vgatherdps_xmm_vm32x_xmm
	test_instr(16, |a| a.vgatherdps_3(xmm2, ptr(edx+xmm3), xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vgatherdps_xmm_vm32x_xmm, Register::XMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherdps_ymm_m_ymm() {
	// VEX_Vgatherdps_ymm_vm32y_ymm
	test_instr(16, |a| a.vgatherdps_3(ymm2, ptr(edx+ymm3), ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vgatherdps_ymm_vm32y_ymm, Register::YMM2, MemoryOperand::new(Register::EDX, Register::YMM3, 1, 0x0i64, 0, false, Register::None), Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherpf0dpd_m() {
	// EVEX_Vgatherpf0dpd_vm32y_k1
	test_instr(16, |a| a.vgatherpf0dpd(ptr(edx+ymm2).k1()).unwrap(),
		add_op_mask(Instruction::with1(Code::EVEX_Vgatherpf0dpd_vm32y_k1, MemoryOperand::new(Register::EDX, Register::YMM2, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherpf0dps_m() {
	// EVEX_Vgatherpf0dps_vm32z_k1
	test_instr(16, |a| a.vgatherpf0dps(ptr(edx+zmm2).k1()).unwrap(),
		add_op_mask(Instruction::with1(Code::EVEX_Vgatherpf0dps_vm32z_k1, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherpf0qpd_m() {
	// EVEX_Vgatherpf0qpd_vm64z_k1
	test_instr(16, |a| a.vgatherpf0qpd(ptr(edx+zmm2).k1()).unwrap(),
		add_op_mask(Instruction::with1(Code::EVEX_Vgatherpf0qpd_vm64z_k1, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherpf0qps_m() {
	// EVEX_Vgatherpf0qps_vm64z_k1
	test_instr(16, |a| a.vgatherpf0qps(ptr(edx+zmm2).k1()).unwrap(),
		add_op_mask(Instruction::with1(Code::EVEX_Vgatherpf0qps_vm64z_k1, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherpf1dpd_m() {
	// EVEX_Vgatherpf1dpd_vm32y_k1
	test_instr(16, |a| a.vgatherpf1dpd(ptr(edx+ymm2).k1()).unwrap(),
		add_op_mask(Instruction::with1(Code::EVEX_Vgatherpf1dpd_vm32y_k1, MemoryOperand::new(Register::EDX, Register::YMM2, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherpf1dps_m() {
	// EVEX_Vgatherpf1dps_vm32z_k1
	test_instr(16, |a| a.vgatherpf1dps(ptr(edx+zmm2).k1()).unwrap(),
		add_op_mask(Instruction::with1(Code::EVEX_Vgatherpf1dps_vm32z_k1, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherpf1qpd_m() {
	// EVEX_Vgatherpf1qpd_vm64z_k1
	test_instr(16, |a| a.vgatherpf1qpd(ptr(edx+zmm2).k1()).unwrap(),
		add_op_mask(Instruction::with1(Code::EVEX_Vgatherpf1qpd_vm64z_k1, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherpf1qps_m() {
	// EVEX_Vgatherpf1qps_vm64z_k1
	test_instr(16, |a| a.vgatherpf1qps(ptr(edx+zmm2).k1()).unwrap(),
		add_op_mask(Instruction::with1(Code::EVEX_Vgatherpf1qps_vm64z_k1, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherqpd_xmm_m() {
	// EVEX_Vgatherqpd_xmm_k1_vm64x
	test_instr(16, |a| a.vgatherqpd(xmm2.k1(), ptr(edx+xmm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgatherqpd_xmm_k1_vm64x, Register::XMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherqpd_ymm_m() {
	// EVEX_Vgatherqpd_ymm_k1_vm64y
	test_instr(16, |a| a.vgatherqpd(ymm2.k1(), ptr(edx+ymm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgatherqpd_ymm_k1_vm64y, Register::YMM2, MemoryOperand::new(Register::EDX, Register::YMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherqpd_zmm_m() {
	// EVEX_Vgatherqpd_zmm_k1_vm64z
	test_instr(16, |a| a.vgatherqpd(zmm2.k1(), ptr(edx+zmm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgatherqpd_zmm_k1_vm64z, Register::ZMM2, MemoryOperand::new(Register::EDX, Register::ZMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherqpd_xmm_m_xmm() {
	// VEX_Vgatherqpd_xmm_vm64x_xmm
	test_instr(16, |a| a.vgatherqpd_3(xmm2, ptr(edx+xmm3), xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vgatherqpd_xmm_vm64x_xmm, Register::XMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherqpd_ymm_m_ymm() {
	// VEX_Vgatherqpd_ymm_vm64y_ymm
	test_instr(16, |a| a.vgatherqpd_3(ymm2, ptr(edx+ymm3), ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vgatherqpd_ymm_vm64y_ymm, Register::YMM2, MemoryOperand::new(Register::EDX, Register::YMM3, 1, 0x0i64, 0, false, Register::None), Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherqps_xmm_m() {
	/* if op1.index().is_xmm() */ {
		// EVEX_Vgatherqps_xmm_k1_vm64x
		test_instr(16, |a| a.vgatherqps(xmm2.k1(), ptr(edx+xmm3)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vgatherqps_xmm_k1_vm64x, Register::XMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.index().is_ymm() */ {
		// EVEX_Vgatherqps_xmm_k1_vm64y
		test_instr(16, |a| a.vgatherqps(xmm2.k1(), ptr(edx+ymm3)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vgatherqps_xmm_k1_vm64y, Register::XMM2, MemoryOperand::new(Register::EDX, Register::YMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgatherqps_xmm_k1_vm64y
		test_invalid_instr(16, |a| assert!(a.vgatherqps(xmm2.k1(), ptr(edx+zmm1)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgatherqps_ymm_m() {
	// EVEX_Vgatherqps_ymm_k1_vm64z
	test_instr(16, |a| a.vgatherqps(ymm2.k1(), ptr(edx+zmm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgatherqps_ymm_k1_vm64z, Register::YMM2, MemoryOperand::new(Register::EDX, Register::ZMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgatherqps_xmm_m_xmm() {
	/* if op1.index().is_xmm() */ {
		// VEX_Vgatherqps_xmm_vm64x_xmm
		test_instr(16, |a| a.vgatherqps_3(xmm2, ptr(edx+xmm3), xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vgatherqps_xmm_vm64x_xmm, Register::XMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.index().is_ymm() */ {
		// VEX_Vgatherqps_xmm_vm64y_xmm
		test_instr(16, |a| a.vgatherqps_3(xmm2, ptr(edx+ymm3), xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vgatherqps_xmm_vm64y_xmm, Register::XMM2, MemoryOperand::new(Register::EDX, Register::YMM3, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// VEX_Vgatherqps_xmm_vm64y_xmm
		test_invalid_instr(16, |a| assert!(a.vgatherqps_3(xmm2, ptr(edx+zmm1), xmm4).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgetexppd_xmm_xmm() {
	// EVEX_Vgetexppd_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vgetexppd(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexppd_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexppd_ymm_ymm() {
	// EVEX_Vgetexppd_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vgetexppd(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexppd_ymm_k1z_ymmm256b64, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexppd_zmm_zmm() {
	// EVEX_Vgetexppd_zmm_k1z_zmmm512b64_sae
	test_instr(16, |a| a.vgetexppd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexppd_zmm_k1z_zmmm512b64_sae, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexppd_xmm_m() {
	// EVEX_Vgetexppd_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vgetexppd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexppd_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexppd_ymm_m() {
	// EVEX_Vgetexppd_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vgetexppd(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexppd_ymm_k1z_ymmm256b64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexppd_zmm_m() {
	// EVEX_Vgetexppd_zmm_k1z_zmmm512b64_sae
	test_instr(16, |a| a.vgetexppd(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexppd_zmm_k1z_zmmm512b64_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpph_xmm_xmm() {
	// EVEX_Vgetexpph_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vgetexpph(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexpph_xmm_k1z_xmmm128b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpph_ymm_ymm() {
	// EVEX_Vgetexpph_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vgetexpph(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexpph_ymm_k1z_ymmm256b16, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpph_zmm_zmm() {
	// EVEX_Vgetexpph_zmm_k1z_zmmm512b16_sae
	test_instr(16, |a| a.vgetexpph(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexpph_zmm_k1z_zmmm512b16_sae, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpph_xmm_m() {
	// EVEX_Vgetexpph_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vgetexpph(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexpph_xmm_k1z_xmmm128b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpph_ymm_m() {
	// EVEX_Vgetexpph_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vgetexpph(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexpph_ymm_k1z_ymmm256b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpph_zmm_m() {
	// EVEX_Vgetexpph_zmm_k1z_zmmm512b16_sae
	test_instr(16, |a| a.vgetexpph(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexpph_zmm_k1z_zmmm512b16_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpps_xmm_xmm() {
	// EVEX_Vgetexpps_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vgetexpps(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexpps_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpps_ymm_ymm() {
	// EVEX_Vgetexpps_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vgetexpps(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexpps_ymm_k1z_ymmm256b32, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpps_zmm_zmm() {
	// EVEX_Vgetexpps_zmm_k1z_zmmm512b32_sae
	test_instr(16, |a| a.vgetexpps(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexpps_zmm_k1z_zmmm512b32_sae, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpps_xmm_m() {
	// EVEX_Vgetexpps_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vgetexpps(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexpps_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpps_ymm_m() {
	// EVEX_Vgetexpps_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vgetexpps(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexpps_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpps_zmm_m() {
	// EVEX_Vgetexpps_zmm_k1z_zmmm512b32_sae
	test_instr(16, |a| a.vgetexpps(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vgetexpps_zmm_k1z_zmmm512b32_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpsd_xmm_xmm_xmm() {
	// EVEX_Vgetexpsd_xmm_k1z_xmm_xmmm64_sae
	test_instr(16, |a| a.vgetexpsd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetexpsd_xmm_k1z_xmm_xmmm64_sae, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpsd_xmm_xmm_m() {
	// EVEX_Vgetexpsd_xmm_k1z_xmm_xmmm64_sae
	test_instr(16, |a| a.vgetexpsd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetexpsd_xmm_k1z_xmm_xmmm64_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpsh_xmm_xmm_xmm() {
	// EVEX_Vgetexpsh_xmm_k1z_xmm_xmmm16_sae
	test_instr(16, |a| a.vgetexpsh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetexpsh_xmm_k1z_xmm_xmmm16_sae, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpsh_xmm_xmm_m() {
	// EVEX_Vgetexpsh_xmm_k1z_xmm_xmmm16_sae
	test_instr(16, |a| a.vgetexpsh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetexpsh_xmm_k1z_xmm_xmmm16_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpss_xmm_xmm_xmm() {
	// EVEX_Vgetexpss_xmm_k1z_xmm_xmmm32_sae
	test_instr(16, |a| a.vgetexpss(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetexpss_xmm_k1z_xmm_xmmm32_sae, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetexpss_xmm_xmm_m() {
	// EVEX_Vgetexpss_xmm_k1z_xmm_xmmm32_sae
	test_instr(16, |a| a.vgetexpss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetexpss_xmm_k1z_xmm_xmmm32_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantpd_xmm_xmm_i() {
	// EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vgetmantpd(xmm2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vgetmantpd(xmm2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantpd_ymm_ymm_i() {
	// EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vgetmantpd(ymm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vgetmantpd(ymm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantpd_zmm_zmm_i() {
	// EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vgetmantpd(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vgetmantpd(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantpd_xmm_m_i() {
	// EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vgetmantpd(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vgetmantpd(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantpd_ymm_m_i() {
	// EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vgetmantpd(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vgetmantpd(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantpd_zmm_m_i() {
	// EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vgetmantpd(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vgetmantpd(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantpd_xmm_xmm_u() {
	// EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vgetmantpd(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantpd_ymm_ymm_u() {
	// EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vgetmantpd(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantpd_zmm_zmm_u() {
	// EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vgetmantpd(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantpd_xmm_m_u() {
	// EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vgetmantpd(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantpd_ymm_m_u() {
	// EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vgetmantpd(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantpd_zmm_m_u() {
	// EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vgetmantpd(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantph_xmm_xmm_i() {
	// EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vgetmantph(xmm2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vgetmantph(xmm2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantph_ymm_ymm_i() {
	// EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vgetmantph(ymm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vgetmantph(ymm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantph_zmm_zmm_i() {
	// EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vgetmantph(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vgetmantph(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantph_xmm_m_i() {
	// EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vgetmantph(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vgetmantph(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantph_ymm_m_i() {
	// EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vgetmantph(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vgetmantph(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantph_zmm_m_i() {
	// EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vgetmantph(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vgetmantph(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantph_xmm_xmm_u() {
	// EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vgetmantph(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantph_ymm_ymm_u() {
	// EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vgetmantph(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantph_zmm_zmm_u() {
	// EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vgetmantph(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantph_xmm_m_u() {
	// EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vgetmantph(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantph_ymm_m_u() {
	// EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vgetmantph(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantph_zmm_m_u() {
	// EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vgetmantph(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantps_xmm_xmm_i() {
	// EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vgetmantps(xmm2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vgetmantps(xmm2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantps_ymm_ymm_i() {
	// EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vgetmantps(ymm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vgetmantps(ymm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantps_zmm_zmm_i() {
	// EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vgetmantps(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vgetmantps(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantps_xmm_m_i() {
	// EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vgetmantps(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vgetmantps(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantps_ymm_m_i() {
	// EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vgetmantps(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vgetmantps(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantps_zmm_m_i() {
	// EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vgetmantps(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vgetmantps(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantps_xmm_xmm_u() {
	// EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vgetmantps(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantps_ymm_ymm_u() {
	// EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vgetmantps(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantps_zmm_zmm_u() {
	// EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vgetmantps(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantps_xmm_m_u() {
	// EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vgetmantps(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantps_ymm_m_u() {
	// EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vgetmantps(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantps_zmm_m_u() {
	// EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vgetmantps(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantsd_xmm_xmm_xmm_i() {
	// EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vgetmantsd(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vgetmantsd(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantsd_xmm_xmm_m_i() {
	// EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vgetmantsd(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vgetmantsd(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantsd_xmm_xmm_xmm_u() {
	// EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vgetmantsd(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantsd_xmm_xmm_m_u() {
	// EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vgetmantsd(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantsh_xmm_xmm_xmm_i() {
	// EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vgetmantsh(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vgetmantsh(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantsh_xmm_xmm_m_i() {
	// EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vgetmantsh(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vgetmantsh(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantsh_xmm_xmm_xmm_u() {
	// EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vgetmantsh(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantsh_xmm_xmm_m_u() {
	// EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vgetmantsh(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantss_xmm_xmm_xmm_i() {
	// EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vgetmantss(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vgetmantss(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantss_xmm_xmm_m_i() {
	// EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vgetmantss(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vgetmantss(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantss_xmm_xmm_xmm_u() {
	// EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vgetmantss(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgetmantss_xmm_xmm_m_u() {
	// EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vgetmantss(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineinvqb_xmm_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(xmm2, xmm3, xmm4, -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(xmm2, xmm3, xmm4, -5).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineinvqb_ymm_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(ymm2, ymm3, ymm4, -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(ymm2, ymm3, ymm4, -5).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineinvqb_zmm_zmm_zmm_i() {
	// EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vgf2p8affineinvqb(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vgf2p8affineinvqb(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineinvqb_xmm_xmm_m_i() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(xmm2.k1(), xmm3, dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if op2.is_broadcast() */ {
		// EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(xmm2.k1(), xmm3, dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineinvqb_ymm_ymm_m_i() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(ymm2.k1(), ymm3, dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(ymm2, ymm3, ymmword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if op2.is_broadcast() */ {
		// EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(ymm2.k1(), ymm3, dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(ymm2, ymm3, ymmword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineinvqb_zmm_zmm_m_i() {
	// EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vgf2p8affineinvqb(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vgf2p8affineinvqb(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineinvqb_xmm_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineinvqb_ymm_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(ymm2, ymm3, ymm4, 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineinvqb_zmm_zmm_zmm_u() {
	// EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vgf2p8affineinvqb(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineinvqb_xmm_xmm_m_u() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(xmm2.k1(), xmm3, dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineinvqb_ymm_ymm_m_u() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(ymm2.k1(), ymm3, dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(ymm2, ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineinvqb(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineinvqb_zmm_zmm_m_u() {
	// EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vgf2p8affineinvqb(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineqb_xmm_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vgf2p8affineqb(xmm2, xmm3, xmm4, -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vgf2p8affineqb(xmm2, xmm3, xmm4, -5).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineqb_ymm_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vgf2p8affineqb(ymm2, ymm3, ymm4, -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vgf2p8affineqb(ymm2, ymm3, ymm4, -5).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineqb_zmm_zmm_zmm_i() {
	// EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vgf2p8affineqb(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vgf2p8affineqb(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineqb_xmm_xmm_m_i() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(xmm2.k1(), xmm3, dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vgf2p8affineqb(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if op2.is_broadcast() */ {
		// EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(xmm2.k1(), xmm3, dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vgf2p8affineqb(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineqb_ymm_ymm_m_i() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(ymm2.k1(), ymm3, dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vgf2p8affineqb(ymm2, ymm3, ymmword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if op2.is_broadcast() */ {
		// EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(ymm2.k1(), ymm3, dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vgf2p8affineqb(ymm2, ymm3, ymmword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineqb_zmm_zmm_m_i() {
	// EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vgf2p8affineqb(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vgf2p8affineqb(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineqb_xmm_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vgf2p8affineqb(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineqb_ymm_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vgf2p8affineqb(ymm2, ymm3, ymm4, 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineqb_zmm_zmm_zmm_u() {
	// EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vgf2p8affineqb(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineqb_xmm_xmm_m_u() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(xmm2.k1(), xmm3, dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vgf2p8affineqb(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineqb_ymm_ymm_m_u() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(ymm2.k1(), ymm3, dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vgf2p8affineqb(ymm2, ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vgf2p8affineqb(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8affineqb_zmm_zmm_m_u() {
	// EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vgf2p8affineqb(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgf2p8mulb_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8mulb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vgf2p8mulb(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vgf2p8mulb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8mulb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vgf2p8mulb(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vgf2p8mulb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8mulb_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8mulb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vgf2p8mulb(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vgf2p8mulb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8mulb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vgf2p8mulb(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vgf2p8mulb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8mulb_zmm_zmm_zmm() {
	// EVEX_Vgf2p8mulb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vgf2p8mulb(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgf2p8mulb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vgf2p8mulb_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8mulb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vgf2p8mulb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vgf2p8mulb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8mulb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vgf2p8mulb(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vgf2p8mulb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8mulb_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vgf2p8mulb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vgf2p8mulb(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vgf2p8mulb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vgf2p8mulb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vgf2p8mulb(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vgf2p8mulb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vgf2p8mulb_zmm_zmm_m() {
	// EVEX_Vgf2p8mulb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vgf2p8mulb(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vgf2p8mulb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vhaddpd_xmm_xmm_xmm() {
	// VEX_Vhaddpd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vhaddpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vhaddpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vhaddpd_ymm_ymm_ymm() {
	// VEX_Vhaddpd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vhaddpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vhaddpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vhaddpd_xmm_xmm_m() {
	// VEX_Vhaddpd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vhaddpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vhaddpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vhaddpd_ymm_ymm_m() {
	// VEX_Vhaddpd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vhaddpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vhaddpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vhaddps_xmm_xmm_xmm() {
	// VEX_Vhaddps_xmm_xmm_xmmm128
	test_instr(16, |a| a.vhaddps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vhaddps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vhaddps_ymm_ymm_ymm() {
	// VEX_Vhaddps_ymm_ymm_ymmm256
	test_instr(16, |a| a.vhaddps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vhaddps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vhaddps_xmm_xmm_m() {
	// VEX_Vhaddps_xmm_xmm_xmmm128
	test_instr(16, |a| a.vhaddps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vhaddps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vhaddps_ymm_ymm_m() {
	// VEX_Vhaddps_ymm_ymm_ymmm256
	test_instr(16, |a| a.vhaddps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vhaddps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vhsubpd_xmm_xmm_xmm() {
	// VEX_Vhsubpd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vhsubpd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vhsubpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vhsubpd_ymm_ymm_ymm() {
	// VEX_Vhsubpd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vhsubpd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vhsubpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vhsubpd_xmm_xmm_m() {
	// VEX_Vhsubpd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vhsubpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vhsubpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vhsubpd_ymm_ymm_m() {
	// VEX_Vhsubpd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vhsubpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vhsubpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vhsubps_xmm_xmm_xmm() {
	// VEX_Vhsubps_xmm_xmm_xmmm128
	test_instr(16, |a| a.vhsubps(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vhsubps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vhsubps_ymm_ymm_ymm() {
	// VEX_Vhsubps_ymm_ymm_ymmm256
	test_instr(16, |a| a.vhsubps(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vhsubps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vhsubps_xmm_xmm_m() {
	// VEX_Vhsubps_xmm_xmm_xmmm128
	test_instr(16, |a| a.vhsubps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vhsubps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vhsubps_ymm_ymm_m() {
	// VEX_Vhsubps_ymm_ymm_ymmm256
	test_instr(16, |a| a.vhsubps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vhsubps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf128_ymm_ymm_xmm_i() {
	// VEX_Vinsertf128_ymm_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf128(ymm2, ymm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vinsertf128_ymm_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf128(ymm2, ymm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf128_ymm_ymm_m_i() {
	// VEX_Vinsertf128_ymm_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf128(ymm2, ymm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vinsertf128_ymm_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf128(ymm2, ymm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf128_ymm_ymm_xmm_u() {
	// VEX_Vinsertf128_ymm_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf128(ymm2, ymm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf128_ymm_ymm_m_u() {
	// VEX_Vinsertf128_ymm_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf128(ymm2, ymm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf32x4_ymm_ymm_xmm_i() {
	// EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf32x4(ymm2.k1(), ymm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf32x4(ymm2.k1(), ymm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf32x4_zmm_zmm_xmm_i() {
	// EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf32x4(zmm2.k1(), zmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf32x4(zmm2.k1(), zmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf32x4_ymm_ymm_m_i() {
	// EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf32x4(ymm2.k1(), ymm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf32x4(ymm2.k1(), ymm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf32x4_zmm_zmm_m_i() {
	// EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf32x4(zmm2.k1(), zmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf32x4(zmm2.k1(), zmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf32x4_ymm_ymm_xmm_u() {
	// EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf32x4(ymm2.k1(), ymm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf32x4_zmm_zmm_xmm_u() {
	// EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf32x4(zmm2.k1(), zmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf32x4_ymm_ymm_m_u() {
	// EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf32x4(ymm2.k1(), ymm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf32x4_zmm_zmm_m_u() {
	// EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf32x4(zmm2.k1(), zmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf32x8_zmm_zmm_ymm_i() {
	// EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinsertf32x8(zmm2.k1(), zmm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinsertf32x8(zmm2.k1(), zmm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf32x8_zmm_zmm_m_i() {
	// EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinsertf32x8(zmm2.k1(), zmm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinsertf32x8(zmm2.k1(), zmm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf32x8_zmm_zmm_ymm_u() {
	// EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinsertf32x8(zmm2.k1(), zmm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf32x8_zmm_zmm_m_u() {
	// EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinsertf32x8(zmm2.k1(), zmm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf64x2_ymm_ymm_xmm_i() {
	// EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf64x2(ymm2.k1(), ymm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf64x2(ymm2.k1(), ymm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf64x2_zmm_zmm_xmm_i() {
	// EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf64x2(zmm2.k1(), zmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf64x2(zmm2.k1(), zmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf64x2_ymm_ymm_m_i() {
	// EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf64x2(ymm2.k1(), ymm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf64x2(ymm2.k1(), ymm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf64x2_zmm_zmm_m_i() {
	// EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf64x2(zmm2.k1(), zmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf64x2(zmm2.k1(), zmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf64x2_ymm_ymm_xmm_u() {
	// EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf64x2(ymm2.k1(), ymm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf64x2_zmm_zmm_xmm_u() {
	// EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf64x2(zmm2.k1(), zmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf64x2_ymm_ymm_m_u() {
	// EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf64x2(ymm2.k1(), ymm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf64x2_zmm_zmm_m_u() {
	// EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinsertf64x2(zmm2.k1(), zmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf64x4_zmm_zmm_ymm_i() {
	// EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinsertf64x4(zmm2.k1(), zmm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinsertf64x4(zmm2.k1(), zmm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf64x4_zmm_zmm_m_i() {
	// EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinsertf64x4(zmm2.k1(), zmm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinsertf64x4(zmm2.k1(), zmm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf64x4_zmm_zmm_ymm_u() {
	// EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinsertf64x4(zmm2.k1(), zmm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertf64x4_zmm_zmm_m_u() {
	// EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinsertf64x4(zmm2.k1(), zmm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti128_ymm_ymm_xmm_i() {
	// VEX_Vinserti128_ymm_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti128(ymm2, ymm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vinserti128_ymm_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vinserti128_ymm_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti128(ymm2, ymm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vinserti128_ymm_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti128_ymm_ymm_m_i() {
	// VEX_Vinserti128_ymm_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti128(ymm2, ymm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vinserti128_ymm_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vinserti128_ymm_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti128(ymm2, ymm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vinserti128_ymm_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti128_ymm_ymm_xmm_u() {
	// VEX_Vinserti128_ymm_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti128(ymm2, ymm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vinserti128_ymm_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti128_ymm_ymm_m_u() {
	// VEX_Vinserti128_ymm_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti128(ymm2, ymm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vinserti128_ymm_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti32x4_ymm_ymm_xmm_i() {
	// EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti32x4(ymm2.k1(), ymm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti32x4(ymm2.k1(), ymm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti32x4_zmm_zmm_xmm_i() {
	// EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinserti32x4(zmm2.k1(), zmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinserti32x4(zmm2.k1(), zmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti32x4_ymm_ymm_m_i() {
	// EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti32x4(ymm2.k1(), ymm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti32x4(ymm2.k1(), ymm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti32x4_zmm_zmm_m_i() {
	// EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinserti32x4(zmm2.k1(), zmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinserti32x4(zmm2.k1(), zmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti32x4_ymm_ymm_xmm_u() {
	// EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti32x4(ymm2.k1(), ymm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti32x4_zmm_zmm_xmm_u() {
	// EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinserti32x4(zmm2.k1(), zmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti32x4_ymm_ymm_m_u() {
	// EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti32x4(ymm2.k1(), ymm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti32x4_zmm_zmm_m_u() {
	// EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinserti32x4(zmm2.k1(), zmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti32x8_zmm_zmm_ymm_i() {
	// EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinserti32x8(zmm2.k1(), zmm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinserti32x8(zmm2.k1(), zmm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti32x8_zmm_zmm_m_i() {
	// EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinserti32x8(zmm2.k1(), zmm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinserti32x8(zmm2.k1(), zmm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti32x8_zmm_zmm_ymm_u() {
	// EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinserti32x8(zmm2.k1(), zmm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti32x8_zmm_zmm_m_u() {
	// EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinserti32x8(zmm2.k1(), zmm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti64x2_ymm_ymm_xmm_i() {
	// EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti64x2(ymm2.k1(), ymm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti64x2(ymm2.k1(), ymm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti64x2_zmm_zmm_xmm_i() {
	// EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinserti64x2(zmm2.k1(), zmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinserti64x2(zmm2.k1(), zmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti64x2_ymm_ymm_m_i() {
	// EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti64x2(ymm2.k1(), ymm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti64x2(ymm2.k1(), ymm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti64x2_zmm_zmm_m_i() {
	// EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinserti64x2(zmm2.k1(), zmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinserti64x2(zmm2.k1(), zmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti64x2_ymm_ymm_xmm_u() {
	// EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti64x2(ymm2.k1(), ymm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti64x2_zmm_zmm_xmm_u() {
	// EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinserti64x2(zmm2.k1(), zmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti64x2_ymm_ymm_m_u() {
	// EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8
	test_instr(16, |a| a.vinserti64x2(ymm2.k1(), ymm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti64x2_zmm_zmm_m_u() {
	// EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8
	test_instr(16, |a| a.vinserti64x2(zmm2.k1(), zmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti64x4_zmm_zmm_ymm_i() {
	// EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinserti64x4(zmm2.k1(), zmm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinserti64x4(zmm2.k1(), zmm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti64x4_zmm_zmm_m_i() {
	// EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinserti64x4(zmm2.k1(), zmm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinserti64x4(zmm2.k1(), zmm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti64x4_zmm_zmm_ymm_u() {
	// EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinserti64x4(zmm2.k1(), zmm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinserti64x4_zmm_zmm_m_u() {
	// EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8
	test_instr(16, |a| a.vinserti64x4(zmm2.k1(), zmm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vinsertps_xmm_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vinsertps_xmm_xmm_xmmm32_imm8
		test_instr(16, |a| a.vinsertps(xmm2, xmm3, xmm4, -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vinsertps_xmm_xmm_xmmm32_imm8
		test_instr(16, |a| a.vinsertps(xmm2, xmm3, xmm4, -5i32).unwrap(),
			Instruction::with4(Code::EVEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vinsertps_xmm_xmm_xmmm32_imm8
		test_instr(16, |a| a.vinsertps(xmm2, xmm3, xmm4, -5).unwrap(),
			Instruction::with4(Code::VEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vinsertps_xmm_xmm_xmmm32_imm8
		test_instr(16, |a| a.vinsertps(xmm2, xmm3, xmm4, -5).unwrap(),
			Instruction::with4(Code::EVEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vinsertps_xmm_xmm_m_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vinsertps_xmm_xmm_xmmm32_imm8
		test_instr(16, |a| a.vinsertps(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vinsertps_xmm_xmm_xmmm32_imm8
		test_instr(16, |a| a.vinsertps(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::EVEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vinsertps_xmm_xmm_xmmm32_imm8
		test_instr(16, |a| a.vinsertps(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::VEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vinsertps_xmm_xmm_xmmm32_imm8
		test_instr(16, |a| a.vinsertps(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::EVEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vinsertps_xmm_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vinsertps_xmm_xmm_xmmm32_imm8
		test_instr(16, |a| a.vinsertps(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vinsertps_xmm_xmm_xmmm32_imm8
		test_instr(16, |a| a.vinsertps(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
			Instruction::with4(Code::EVEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vinsertps_xmm_xmm_m_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vinsertps_xmm_xmm_xmmm32_imm8
		test_instr(16, |a| a.vinsertps(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vinsertps_xmm_xmm_xmmm32_imm8
		test_instr(16, |a| a.vinsertps(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::EVEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vlddqu_xmm_m() {
	// VEX_Vlddqu_xmm_m128
	test_instr(16, |a| a.vlddqu(xmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vlddqu_xmm_m128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vlddqu_ymm_m() {
	// VEX_Vlddqu_ymm_m256
	test_instr(16, |a| a.vlddqu(ymm2, ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vlddqu_ymm_m256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vldmxcsr_m() {
	// VEX_Vldmxcsr_m32
	test_instr(16, |a| a.vldmxcsr(ptr(si)).unwrap(),
		Instruction::with1(Code::VEX_Vldmxcsr_m32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaskmovdqu_xmm_xmm() {
	// VEX_Vmaskmovdqu_rDI_xmm_xmm
	test_instr(16, |a| a.vmaskmovdqu(xmm2, xmm3).unwrap(),
		Instruction::with_vmaskmovdqu(16, Register::XMM2, Register::XMM3, Register::None).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaskmovpd_m_xmm_xmm() {
	// VEX_Vmaskmovpd_m128_xmm_xmm
	test_instr(16, |a| a.vmaskmovpd(ptr(si), xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vmaskmovpd_m128_xmm_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaskmovpd_m_ymm_ymm() {
	// VEX_Vmaskmovpd_m256_ymm_ymm
	test_instr(16, |a| a.vmaskmovpd(ptr(si), ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vmaskmovpd_m256_ymm_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaskmovpd_xmm_xmm_m() {
	// VEX_Vmaskmovpd_xmm_xmm_m128
	test_instr(16, |a| a.vmaskmovpd(xmm2, xmm3, ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vmaskmovpd_xmm_xmm_m128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaskmovpd_ymm_ymm_m() {
	// VEX_Vmaskmovpd_ymm_ymm_m256
	test_instr(16, |a| a.vmaskmovpd(ymm2, ymm3, ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vmaskmovpd_ymm_ymm_m256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaskmovps_m_xmm_xmm() {
	// VEX_Vmaskmovps_m128_xmm_xmm
	test_instr(16, |a| a.vmaskmovps(ptr(si), xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vmaskmovps_m128_xmm_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaskmovps_m_ymm_ymm() {
	// VEX_Vmaskmovps_m256_ymm_ymm
	test_instr(16, |a| a.vmaskmovps(ptr(si), ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vmaskmovps_m256_ymm_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaskmovps_xmm_xmm_m() {
	// VEX_Vmaskmovps_xmm_xmm_m128
	test_instr(16, |a| a.vmaskmovps(xmm2, xmm3, ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vmaskmovps_xmm_xmm_m128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaskmovps_ymm_ymm_m() {
	// VEX_Vmaskmovps_ymm_ymm_m256
	test_instr(16, |a| a.vmaskmovps(ymm2, ymm3, ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vmaskmovps_ymm_ymm_m256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaxpd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmaxpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vmaxpd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vmaxpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vmaxpd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmaxpd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmaxpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vmaxpd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vmaxpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vmaxpd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmaxpd_zmm_zmm_zmm() {
	// EVEX_Vmaxpd_zmm_k1z_zmm_zmmm512b64_sae
	test_instr(16, |a| a.vmaxpd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmaxpd_zmm_k1z_zmm_zmmm512b64_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaxpd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vmaxpd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vmaxpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vmaxpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vmaxpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vmaxpd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmaxpd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vmaxpd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vmaxpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vmaxpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vmaxpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vmaxpd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmaxpd_zmm_zmm_m() {
	// EVEX_Vmaxpd_zmm_k1z_zmm_zmmm512b64_sae
	test_instr(16, |a| a.vmaxpd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmaxpd_zmm_k1z_zmm_zmmm512b64_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaxph_xmm_xmm_xmm() {
	// EVEX_Vmaxph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vmaxph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmaxph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaxph_ymm_ymm_ymm() {
	// EVEX_Vmaxph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vmaxph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmaxph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaxph_zmm_zmm_zmm() {
	// EVEX_Vmaxph_zmm_k1z_zmm_zmmm512b16_sae
	test_instr(16, |a| a.vmaxph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmaxph_zmm_k1z_zmm_zmmm512b16_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaxph_xmm_xmm_m() {
	// EVEX_Vmaxph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vmaxph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmaxph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaxph_ymm_ymm_m() {
	// EVEX_Vmaxph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vmaxph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmaxph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaxph_zmm_zmm_m() {
	// EVEX_Vmaxph_zmm_k1z_zmm_zmmm512b16_sae
	test_instr(16, |a| a.vmaxph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmaxph_zmm_k1z_zmm_zmmm512b16_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaxps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmaxps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vmaxps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vmaxps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vmaxps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmaxps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmaxps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vmaxps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vmaxps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vmaxps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmaxps_zmm_zmm_zmm() {
	// EVEX_Vmaxps_zmm_k1z_zmm_zmmm512b32_sae
	test_instr(16, |a| a.vmaxps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmaxps_zmm_k1z_zmm_zmmm512b32_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaxps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vmaxps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vmaxps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vmaxps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vmaxps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vmaxps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmaxps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vmaxps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vmaxps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vmaxps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vmaxps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vmaxps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmaxps_zmm_zmm_m() {
	// EVEX_Vmaxps_zmm_k1z_zmm_zmmm512b32_sae
	test_instr(16, |a| a.vmaxps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmaxps_zmm_k1z_zmm_zmmm512b32_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaxsd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmaxsd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vmaxsd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vmaxsd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmaxsd_xmm_k1z_xmm_xmmm64_sae
		test_instr(16, |a| a.vmaxsd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmaxsd_xmm_k1z_xmm_xmmm64_sae, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmaxsd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmaxsd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vmaxsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vmaxsd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmaxsd_xmm_k1z_xmm_xmmm64_sae
		test_instr(16, |a| a.vmaxsd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmaxsd_xmm_k1z_xmm_xmmm64_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmaxsh_xmm_xmm_xmm() {
	// EVEX_Vmaxsh_xmm_k1z_xmm_xmmm16_sae
	test_instr(16, |a| a.vmaxsh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmaxsh_xmm_k1z_xmm_xmmm16_sae, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaxsh_xmm_xmm_m() {
	// EVEX_Vmaxsh_xmm_k1z_xmm_xmmm16_sae
	test_instr(16, |a| a.vmaxsh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmaxsh_xmm_k1z_xmm_xmmm16_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmaxss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmaxss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vmaxss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vmaxss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmaxss_xmm_k1z_xmm_xmmm32_sae
		test_instr(16, |a| a.vmaxss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmaxss_xmm_k1z_xmm_xmmm32_sae, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmaxss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmaxss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vmaxss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vmaxss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmaxss_xmm_k1z_xmm_xmmm32_sae
		test_instr(16, |a| a.vmaxss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmaxss_xmm_k1z_xmm_xmmm32_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmcall() {
	// Vmcall
	test_instr(16, |a| a.vmcall().unwrap(),
		Instruction::with(Code::Vmcall),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmclear_m() {
	// Vmclear_m64
	test_instr(16, |a| a.vmclear(ptr(si)).unwrap(),
		Instruction::with1(Code::Vmclear_m64, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmfunc() {
	// Vmfunc
	test_instr(16, |a| a.vmfunc().unwrap(),
		Instruction::with(Code::Vmfunc),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmgexit() {
	// Vmgexit
	test_instr(16, |a| a.vmgexit().unwrap(),
		Instruction::with(Code::Vmgexit),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vminpd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vminpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vminpd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vminpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vminpd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vminpd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vminpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vminpd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vminpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vminpd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vminpd_zmm_zmm_zmm() {
	// EVEX_Vminpd_zmm_k1z_zmm_zmmm512b64_sae
	test_instr(16, |a| a.vminpd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vminpd_zmm_k1z_zmm_zmmm512b64_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vminpd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vminpd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vminpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vminpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vminpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vminpd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vminpd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vminpd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vminpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vminpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vminpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vminpd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vminpd_zmm_zmm_m() {
	// EVEX_Vminpd_zmm_k1z_zmm_zmmm512b64_sae
	test_instr(16, |a| a.vminpd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vminpd_zmm_k1z_zmm_zmmm512b64_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vminph_xmm_xmm_xmm() {
	// EVEX_Vminph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vminph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vminph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vminph_ymm_ymm_ymm() {
	// EVEX_Vminph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vminph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vminph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vminph_zmm_zmm_zmm() {
	// EVEX_Vminph_zmm_k1z_zmm_zmmm512b16_sae
	test_instr(16, |a| a.vminph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vminph_zmm_k1z_zmm_zmmm512b16_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vminph_xmm_xmm_m() {
	// EVEX_Vminph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vminph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vminph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vminph_ymm_ymm_m() {
	// EVEX_Vminph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vminph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vminph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vminph_zmm_zmm_m() {
	// EVEX_Vminph_zmm_k1z_zmm_zmmm512b16_sae
	test_instr(16, |a| a.vminph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vminph_zmm_k1z_zmm_zmmm512b16_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vminps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vminps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vminps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vminps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vminps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vminps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vminps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vminps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vminps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vminps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vminps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vminps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vminps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vminps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vminps_zmm_zmm_zmm() {
	// EVEX_Vminps_zmm_k1z_zmm_zmmm512b32_sae
	test_instr(16, |a| a.vminps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vminps_zmm_k1z_zmm_zmmm512b32_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vminps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vminps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vminps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vminps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vminps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vminps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vminps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vminps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vminps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vminps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vminps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vminps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vminps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vminps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vminps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vminps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vminps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vminps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vminps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vminps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vminps_zmm_zmm_m() {
	// EVEX_Vminps_zmm_k1z_zmm_zmmm512b32_sae
	test_instr(16, |a| a.vminps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vminps_zmm_k1z_zmm_zmmm512b32_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vminsd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vminsd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vminsd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vminsd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vminsd_xmm_k1z_xmm_xmmm64_sae
		test_instr(16, |a| a.vminsd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vminsd_xmm_k1z_xmm_xmmm64_sae, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vminsd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vminsd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vminsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vminsd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vminsd_xmm_k1z_xmm_xmmm64_sae
		test_instr(16, |a| a.vminsd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vminsd_xmm_k1z_xmm_xmmm64_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vminsh_xmm_xmm_xmm() {
	// EVEX_Vminsh_xmm_k1z_xmm_xmmm16_sae
	test_instr(16, |a| a.vminsh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vminsh_xmm_k1z_xmm_xmmm16_sae, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vminsh_xmm_xmm_m() {
	// EVEX_Vminsh_xmm_k1z_xmm_xmmm16_sae
	test_instr(16, |a| a.vminsh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vminsh_xmm_k1z_xmm_xmmm16_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vminss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vminss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vminss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vminss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vminss_xmm_k1z_xmm_xmmm32_sae
		test_instr(16, |a| a.vminss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vminss_xmm_k1z_xmm_xmmm32_sae, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vminss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vminss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vminss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vminss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vminss_xmm_k1z_xmm_xmmm32_sae
		test_instr(16, |a| a.vminss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vminss_xmm_k1z_xmm_xmmm32_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmlaunch() {
	// Vmlaunch
	test_instr(16, |a| a.vmlaunch().unwrap(),
		Instruction::with(Code::Vmlaunch),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmload() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Vmloadw
		test_instr(16, |a| a.vmload().unwrap(),
			Instruction::with(Code::Vmloadw),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmmcall() {
	// Vmmcall
	test_instr(16, |a| a.vmmcall().unwrap(),
		Instruction::with(Code::Vmmcall),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovapd_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovapd_xmm_xmmm128
		test_instr(16, |a| a.vmovapd(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovapd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovapd_xmm_k1z_xmmm128
		test_instr(16, |a| a.vmovapd(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovapd_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovapd_m_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovapd_xmmm128_xmm
		test_instr(16, |a| a.vmovapd(xmmword_ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovapd_xmmm128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovapd_xmmm128_k1z_xmm
		test_instr(16, |a| a.vmovapd(xmmword_ptr(si).k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovapd_xmmm128_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovapd_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovapd_ymm_ymmm256
		test_instr(16, |a| a.vmovapd(ymm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovapd_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovapd_ymm_k1z_ymmm256
		test_instr(16, |a| a.vmovapd(ymm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovapd_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovapd_m_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovapd_ymmm256_ymm
		test_instr(16, |a| a.vmovapd(ymmword_ptr(si), ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovapd_ymmm256_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovapd_ymmm256_k1z_ymm
		test_instr(16, |a| a.vmovapd(ymmword_ptr(si).k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovapd_ymmm256_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovapd_zmm_zmm() {
	// EVEX_Vmovapd_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovapd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovapd_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovapd_m_zmm() {
	// EVEX_Vmovapd_zmmm512_k1z_zmm
	test_instr(16, |a| a.vmovapd(zmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovapd_zmmm512_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovapd_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovapd_xmm_xmmm128
		test_instr(16, |a| a.vmovapd(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovapd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovapd_xmm_k1z_xmmm128
		test_instr(16, |a| a.vmovapd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovapd_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovapd_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovapd_ymm_ymmm256
		test_instr(16, |a| a.vmovapd(ymm2, ymmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovapd_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovapd_ymm_k1z_ymmm256
		test_instr(16, |a| a.vmovapd(ymm2.k1(), ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovapd_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovapd_zmm_m() {
	// EVEX_Vmovapd_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovapd(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovapd_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovaps_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovaps_xmm_xmmm128
		test_instr(16, |a| a.vmovaps(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovaps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovaps_xmm_k1z_xmmm128
		test_instr(16, |a| a.vmovaps(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovaps_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovaps_m_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovaps_xmmm128_xmm
		test_instr(16, |a| a.vmovaps(xmmword_ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovaps_xmmm128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovaps_xmmm128_k1z_xmm
		test_instr(16, |a| a.vmovaps(xmmword_ptr(si).k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovaps_xmmm128_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovaps_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovaps_ymm_ymmm256
		test_instr(16, |a| a.vmovaps(ymm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovaps_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovaps_ymm_k1z_ymmm256
		test_instr(16, |a| a.vmovaps(ymm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovaps_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovaps_m_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovaps_ymmm256_ymm
		test_instr(16, |a| a.vmovaps(ymmword_ptr(si), ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovaps_ymmm256_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovaps_ymmm256_k1z_ymm
		test_instr(16, |a| a.vmovaps(ymmword_ptr(si).k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovaps_ymmm256_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovaps_zmm_zmm() {
	// EVEX_Vmovaps_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovaps(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovaps_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovaps_m_zmm() {
	// EVEX_Vmovaps_zmmm512_k1z_zmm
	test_instr(16, |a| a.vmovaps(zmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovaps_zmmm512_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovaps_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovaps_xmm_xmmm128
		test_instr(16, |a| a.vmovaps(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovaps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovaps_xmm_k1z_xmmm128
		test_instr(16, |a| a.vmovaps(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovaps_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovaps_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovaps_ymm_ymmm256
		test_instr(16, |a| a.vmovaps(ymm2, ymmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovaps_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovaps_ymm_k1z_ymmm256
		test_instr(16, |a| a.vmovaps(ymm2.k1(), ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovaps_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovaps_zmm_m() {
	// EVEX_Vmovaps_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovaps(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovaps_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovd_xmm_r32() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovd_xmm_rm32
		test_instr(16, |a| a.vmovd(xmm2, ebx).unwrap(),
			Instruction::with2(Code::VEX_Vmovd_xmm_rm32, Register::XMM2, Register::EBX).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovd_xmm_rm32
		test_instr(16, |a| a.vmovd(xmm2, ebx).unwrap(),
			Instruction::with2(Code::EVEX_Vmovd_xmm_rm32, Register::XMM2, Register::EBX).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovd_r32_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovd_rm32_xmm
		test_instr(16, |a| a.vmovd(edx, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovd_rm32_xmm, Register::EDX, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovd_rm32_xmm
		test_instr(16, |a| a.vmovd(edx, xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vmovd_rm32_xmm, Register::EDX, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovd_m_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovd_rm32_xmm
		test_instr(16, |a| a.vmovd(dword_ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovd_rm32_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovd_rm32_xmm
		test_instr(16, |a| a.vmovd(dword_ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vmovd_rm32_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovd_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovd_xmm_rm32
		test_instr(16, |a| a.vmovd(xmm2, dword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovd_xmm_rm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovd_xmm_rm32
		test_instr(16, |a| a.vmovd(xmm2, dword_ptr(si)).unwrap(),
			Instruction::with2(Code::EVEX_Vmovd_xmm_rm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovddup_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovddup_xmm_xmmm64
		test_instr(16, |a| a.vmovddup(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovddup_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovddup_xmm_k1z_xmmm64
		test_instr(16, |a| a.vmovddup(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovddup_xmm_k1z_xmmm64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovddup_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovddup_ymm_ymmm256
		test_instr(16, |a| a.vmovddup(ymm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovddup_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovddup_ymm_k1z_ymmm256
		test_instr(16, |a| a.vmovddup(ymm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovddup_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovddup_zmm_zmm() {
	// EVEX_Vmovddup_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovddup(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovddup_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovddup_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovddup_xmm_xmmm64
		test_instr(16, |a| a.vmovddup(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovddup_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovddup_xmm_k1z_xmmm64
		test_instr(16, |a| a.vmovddup(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovddup_xmm_k1z_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovddup_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovddup_ymm_ymmm256
		test_instr(16, |a| a.vmovddup(ymm2, ymmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovddup_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovddup_ymm_k1z_ymmm256
		test_instr(16, |a| a.vmovddup(ymm2.k1(), ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovddup_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovddup_zmm_m() {
	// EVEX_Vmovddup_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovddup(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovddup_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa_xmm_xmm() {
	// VEX_Vmovdqa_xmm_xmmm128
	test_instr(16, |a| a.vmovdqa(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::VEX_Vmovdqa_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa_m_xmm() {
	// VEX_Vmovdqa_xmmm128_xmm
	test_instr(16, |a| a.vmovdqa(xmmword_ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::VEX_Vmovdqa_xmmm128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa_ymm_ymm() {
	// VEX_Vmovdqa_ymm_ymmm256
	test_instr(16, |a| a.vmovdqa(ymm2, ymm3).unwrap(),
		Instruction::with2(Code::VEX_Vmovdqa_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa_m_ymm() {
	// VEX_Vmovdqa_ymmm256_ymm
	test_instr(16, |a| a.vmovdqa(ymmword_ptr(si), ymm3).unwrap(),
		Instruction::with2(Code::VEX_Vmovdqa_ymmm256_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa_xmm_m() {
	// VEX_Vmovdqa_xmm_xmmm128
	test_instr(16, |a| a.vmovdqa(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vmovdqa_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa_ymm_m() {
	// VEX_Vmovdqa_ymm_ymmm256
	test_instr(16, |a| a.vmovdqa(ymm2, ymmword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vmovdqa_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa32_xmm_xmm() {
	// EVEX_Vmovdqa32_xmm_k1z_xmmm128
	test_instr(16, |a| a.vmovdqa32(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa32_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa32_m_xmm() {
	// EVEX_Vmovdqa32_xmmm128_k1z_xmm
	test_instr(16, |a| a.vmovdqa32(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa32_xmmm128_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa32_ymm_ymm() {
	// EVEX_Vmovdqa32_ymm_k1z_ymmm256
	test_instr(16, |a| a.vmovdqa32(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa32_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa32_m_ymm() {
	// EVEX_Vmovdqa32_ymmm256_k1z_ymm
	test_instr(16, |a| a.vmovdqa32(ymmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa32_ymmm256_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa32_zmm_zmm() {
	// EVEX_Vmovdqa32_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovdqa32(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa32_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa32_m_zmm() {
	// EVEX_Vmovdqa32_zmmm512_k1z_zmm
	test_instr(16, |a| a.vmovdqa32(zmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa32_zmmm512_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa32_xmm_m() {
	// EVEX_Vmovdqa32_xmm_k1z_xmmm128
	test_instr(16, |a| a.vmovdqa32(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa32_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa32_ymm_m() {
	// EVEX_Vmovdqa32_ymm_k1z_ymmm256
	test_instr(16, |a| a.vmovdqa32(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa32_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa32_zmm_m() {
	// EVEX_Vmovdqa32_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovdqa32(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa32_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa64_xmm_xmm() {
	// EVEX_Vmovdqa64_xmm_k1z_xmmm128
	test_instr(16, |a| a.vmovdqa64(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa64_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa64_m_xmm() {
	// EVEX_Vmovdqa64_xmmm128_k1z_xmm
	test_instr(16, |a| a.vmovdqa64(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa64_xmmm128_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa64_ymm_ymm() {
	// EVEX_Vmovdqa64_ymm_k1z_ymmm256
	test_instr(16, |a| a.vmovdqa64(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa64_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa64_m_ymm() {
	// EVEX_Vmovdqa64_ymmm256_k1z_ymm
	test_instr(16, |a| a.vmovdqa64(ymmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa64_ymmm256_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa64_zmm_zmm() {
	// EVEX_Vmovdqa64_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovdqa64(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa64_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa64_m_zmm() {
	// EVEX_Vmovdqa64_zmmm512_k1z_zmm
	test_instr(16, |a| a.vmovdqa64(zmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa64_zmmm512_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa64_xmm_m() {
	// EVEX_Vmovdqa64_xmm_k1z_xmmm128
	test_instr(16, |a| a.vmovdqa64(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa64_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa64_ymm_m() {
	// EVEX_Vmovdqa64_ymm_k1z_ymmm256
	test_instr(16, |a| a.vmovdqa64(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa64_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqa64_zmm_m() {
	// EVEX_Vmovdqa64_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovdqa64(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqa64_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu_xmm_xmm() {
	// VEX_Vmovdqu_xmm_xmmm128
	test_instr(16, |a| a.vmovdqu(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::VEX_Vmovdqu_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu_m_xmm() {
	// VEX_Vmovdqu_xmmm128_xmm
	test_instr(16, |a| a.vmovdqu(xmmword_ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::VEX_Vmovdqu_xmmm128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu_ymm_ymm() {
	// VEX_Vmovdqu_ymm_ymmm256
	test_instr(16, |a| a.vmovdqu(ymm2, ymm3).unwrap(),
		Instruction::with2(Code::VEX_Vmovdqu_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu_m_ymm() {
	// VEX_Vmovdqu_ymmm256_ymm
	test_instr(16, |a| a.vmovdqu(ymmword_ptr(si), ymm3).unwrap(),
		Instruction::with2(Code::VEX_Vmovdqu_ymmm256_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu_xmm_m() {
	// VEX_Vmovdqu_xmm_xmmm128
	test_instr(16, |a| a.vmovdqu(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vmovdqu_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu_ymm_m() {
	// VEX_Vmovdqu_ymm_ymmm256
	test_instr(16, |a| a.vmovdqu(ymm2, ymmword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vmovdqu_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu16_xmm_xmm() {
	// EVEX_Vmovdqu16_xmm_k1z_xmmm128
	test_instr(16, |a| a.vmovdqu16(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu16_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu16_m_xmm() {
	// EVEX_Vmovdqu16_xmmm128_k1z_xmm
	test_instr(16, |a| a.vmovdqu16(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu16_xmmm128_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu16_ymm_ymm() {
	// EVEX_Vmovdqu16_ymm_k1z_ymmm256
	test_instr(16, |a| a.vmovdqu16(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu16_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu16_m_ymm() {
	// EVEX_Vmovdqu16_ymmm256_k1z_ymm
	test_instr(16, |a| a.vmovdqu16(ymmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu16_ymmm256_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu16_zmm_zmm() {
	// EVEX_Vmovdqu16_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovdqu16(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu16_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu16_m_zmm() {
	// EVEX_Vmovdqu16_zmmm512_k1z_zmm
	test_instr(16, |a| a.vmovdqu16(zmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu16_zmmm512_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu16_xmm_m() {
	// EVEX_Vmovdqu16_xmm_k1z_xmmm128
	test_instr(16, |a| a.vmovdqu16(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu16_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu16_ymm_m() {
	// EVEX_Vmovdqu16_ymm_k1z_ymmm256
	test_instr(16, |a| a.vmovdqu16(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu16_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu16_zmm_m() {
	// EVEX_Vmovdqu16_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovdqu16(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu16_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu32_xmm_xmm() {
	// EVEX_Vmovdqu32_xmm_k1z_xmmm128
	test_instr(16, |a| a.vmovdqu32(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu32_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu32_m_xmm() {
	// EVEX_Vmovdqu32_xmmm128_k1z_xmm
	test_instr(16, |a| a.vmovdqu32(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu32_xmmm128_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu32_ymm_ymm() {
	// EVEX_Vmovdqu32_ymm_k1z_ymmm256
	test_instr(16, |a| a.vmovdqu32(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu32_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu32_m_ymm() {
	// EVEX_Vmovdqu32_ymmm256_k1z_ymm
	test_instr(16, |a| a.vmovdqu32(ymmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu32_ymmm256_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu32_zmm_zmm() {
	// EVEX_Vmovdqu32_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovdqu32(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu32_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu32_m_zmm() {
	// EVEX_Vmovdqu32_zmmm512_k1z_zmm
	test_instr(16, |a| a.vmovdqu32(zmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu32_zmmm512_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu32_xmm_m() {
	// EVEX_Vmovdqu32_xmm_k1z_xmmm128
	test_instr(16, |a| a.vmovdqu32(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu32_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu32_ymm_m() {
	// EVEX_Vmovdqu32_ymm_k1z_ymmm256
	test_instr(16, |a| a.vmovdqu32(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu32_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu32_zmm_m() {
	// EVEX_Vmovdqu32_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovdqu32(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu32_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu64_xmm_xmm() {
	// EVEX_Vmovdqu64_xmm_k1z_xmmm128
	test_instr(16, |a| a.vmovdqu64(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu64_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu64_m_xmm() {
	// EVEX_Vmovdqu64_xmmm128_k1z_xmm
	test_instr(16, |a| a.vmovdqu64(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu64_xmmm128_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu64_ymm_ymm() {
	// EVEX_Vmovdqu64_ymm_k1z_ymmm256
	test_instr(16, |a| a.vmovdqu64(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu64_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu64_m_ymm() {
	// EVEX_Vmovdqu64_ymmm256_k1z_ymm
	test_instr(16, |a| a.vmovdqu64(ymmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu64_ymmm256_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu64_zmm_zmm() {
	// EVEX_Vmovdqu64_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovdqu64(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu64_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu64_m_zmm() {
	// EVEX_Vmovdqu64_zmmm512_k1z_zmm
	test_instr(16, |a| a.vmovdqu64(zmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu64_zmmm512_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu64_xmm_m() {
	// EVEX_Vmovdqu64_xmm_k1z_xmmm128
	test_instr(16, |a| a.vmovdqu64(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu64_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu64_ymm_m() {
	// EVEX_Vmovdqu64_ymm_k1z_ymmm256
	test_instr(16, |a| a.vmovdqu64(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu64_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu64_zmm_m() {
	// EVEX_Vmovdqu64_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovdqu64(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu64_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu8_xmm_xmm() {
	// EVEX_Vmovdqu8_xmm_k1z_xmmm128
	test_instr(16, |a| a.vmovdqu8(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu8_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu8_m_xmm() {
	// EVEX_Vmovdqu8_xmmm128_k1z_xmm
	test_instr(16, |a| a.vmovdqu8(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu8_xmmm128_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu8_ymm_ymm() {
	// EVEX_Vmovdqu8_ymm_k1z_ymmm256
	test_instr(16, |a| a.vmovdqu8(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu8_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu8_m_ymm() {
	// EVEX_Vmovdqu8_ymmm256_k1z_ymm
	test_instr(16, |a| a.vmovdqu8(ymmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu8_ymmm256_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu8_zmm_zmm() {
	// EVEX_Vmovdqu8_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovdqu8(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu8_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu8_m_zmm() {
	// EVEX_Vmovdqu8_zmmm512_k1z_zmm
	test_instr(16, |a| a.vmovdqu8(zmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu8_zmmm512_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu8_xmm_m() {
	// EVEX_Vmovdqu8_xmm_k1z_xmmm128
	test_instr(16, |a| a.vmovdqu8(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu8_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu8_ymm_m() {
	// EVEX_Vmovdqu8_ymm_k1z_ymmm256
	test_instr(16, |a| a.vmovdqu8(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu8_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovdqu8_zmm_m() {
	// EVEX_Vmovdqu8_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovdqu8(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovdqu8_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovhlps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovhlps_xmm_xmm_xmm
		test_instr(16, |a| a.vmovhlps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vmovhlps_xmm_xmm_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovhlps_xmm_xmm_xmm
		test_instr(16, |a| a.vmovhlps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::EVEX_Vmovhlps_xmm_xmm_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovhpd_m_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovhpd_m64_xmm
		test_instr(16, |a| a.vmovhpd(ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovhpd_m64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovhpd_m64_xmm
		test_instr(16, |a| a.vmovhpd(ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vmovhpd_m64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovhpd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovhpd_xmm_xmm_m64
		test_instr(16, |a| a.vmovhpd_3(xmm2, xmm3, ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vmovhpd_xmm_xmm_m64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovhpd_xmm_xmm_m64
		test_instr(16, |a| a.vmovhpd_3(xmm2, xmm3, ptr(si)).unwrap(),
			Instruction::with3(Code::EVEX_Vmovhpd_xmm_xmm_m64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovhps_m_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovhps_m64_xmm
		test_instr(16, |a| a.vmovhps(ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovhps_m64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovhps_m64_xmm
		test_instr(16, |a| a.vmovhps(ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vmovhps_m64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovhps_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovhps_xmm_xmm_m64
		test_instr(16, |a| a.vmovhps_3(xmm2, xmm3, ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vmovhps_xmm_xmm_m64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovhps_xmm_xmm_m64
		test_instr(16, |a| a.vmovhps_3(xmm2, xmm3, ptr(si)).unwrap(),
			Instruction::with3(Code::EVEX_Vmovhps_xmm_xmm_m64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovlhps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovlhps_xmm_xmm_xmm
		test_instr(16, |a| a.vmovlhps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vmovlhps_xmm_xmm_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovlhps_xmm_xmm_xmm
		test_instr(16, |a| a.vmovlhps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::EVEX_Vmovlhps_xmm_xmm_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovlpd_m_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovlpd_m64_xmm
		test_instr(16, |a| a.vmovlpd(ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovlpd_m64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovlpd_m64_xmm
		test_instr(16, |a| a.vmovlpd(ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vmovlpd_m64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovlpd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovlpd_xmm_xmm_m64
		test_instr(16, |a| a.vmovlpd_3(xmm2, xmm3, ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vmovlpd_xmm_xmm_m64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovlpd_xmm_xmm_m64
		test_instr(16, |a| a.vmovlpd_3(xmm2, xmm3, ptr(si)).unwrap(),
			Instruction::with3(Code::EVEX_Vmovlpd_xmm_xmm_m64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovlps_m_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovlps_m64_xmm
		test_instr(16, |a| a.vmovlps(ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovlps_m64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovlps_m64_xmm
		test_instr(16, |a| a.vmovlps(ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vmovlps_m64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovlps_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovlps_xmm_xmm_m64
		test_instr(16, |a| a.vmovlps_3(xmm2, xmm3, ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vmovlps_xmm_xmm_m64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovlps_xmm_xmm_m64
		test_instr(16, |a| a.vmovlps_3(xmm2, xmm3, ptr(si)).unwrap(),
			Instruction::with3(Code::EVEX_Vmovlps_xmm_xmm_m64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovmskpd_r32_xmm() {
	// VEX_Vmovmskpd_r32_xmm
	test_instr(16, |a| a.vmovmskpd(edx, xmm3).unwrap(),
		Instruction::with2(Code::VEX_Vmovmskpd_r32_xmm, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovmskpd_r32_ymm() {
	// VEX_Vmovmskpd_r32_ymm
	test_instr(16, |a| a.vmovmskpd(edx, ymm3).unwrap(),
		Instruction::with2(Code::VEX_Vmovmskpd_r32_ymm, Register::EDX, Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovmskps_r32_xmm() {
	// VEX_Vmovmskps_r32_xmm
	test_instr(16, |a| a.vmovmskps(edx, xmm3).unwrap(),
		Instruction::with2(Code::VEX_Vmovmskps_r32_xmm, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovmskps_r32_ymm() {
	// VEX_Vmovmskps_r32_ymm
	test_instr(16, |a| a.vmovmskps(edx, ymm3).unwrap(),
		Instruction::with2(Code::VEX_Vmovmskps_r32_ymm, Register::EDX, Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovntdq_m_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovntdq_m128_xmm
		test_instr(16, |a| a.vmovntdq(ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovntdq_m128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovntdq_m128_xmm
		test_instr(16, |a| a.vmovntdq(ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vmovntdq_m128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovntdq_m_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovntdq_m256_ymm
		test_instr(16, |a| a.vmovntdq(ptr(si), ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovntdq_m256_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovntdq_m256_ymm
		test_instr(16, |a| a.vmovntdq(ptr(si), ymm3).unwrap(),
			Instruction::with2(Code::EVEX_Vmovntdq_m256_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovntdq_m_zmm() {
	// EVEX_Vmovntdq_m512_zmm
	test_instr(16, |a| a.vmovntdq(ptr(si), zmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vmovntdq_m512_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovntdqa_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovntdqa_xmm_m128
		test_instr(16, |a| a.vmovntdqa(xmm2, ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovntdqa_xmm_m128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovntdqa_xmm_m128
		test_instr(16, |a| a.vmovntdqa(xmm2, ptr(si)).unwrap(),
			Instruction::with2(Code::EVEX_Vmovntdqa_xmm_m128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovntdqa_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovntdqa_ymm_m256
		test_instr(16, |a| a.vmovntdqa(ymm2, ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovntdqa_ymm_m256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovntdqa_ymm_m256
		test_instr(16, |a| a.vmovntdqa(ymm2, ptr(si)).unwrap(),
			Instruction::with2(Code::EVEX_Vmovntdqa_ymm_m256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovntdqa_zmm_m() {
	// EVEX_Vmovntdqa_zmm_m512
	test_instr(16, |a| a.vmovntdqa(zmm2, ptr(si)).unwrap(),
		Instruction::with2(Code::EVEX_Vmovntdqa_zmm_m512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovntpd_m_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovntpd_m128_xmm
		test_instr(16, |a| a.vmovntpd(ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovntpd_m128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovntpd_m128_xmm
		test_instr(16, |a| a.vmovntpd(ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vmovntpd_m128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovntpd_m_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovntpd_m256_ymm
		test_instr(16, |a| a.vmovntpd(ptr(si), ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovntpd_m256_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovntpd_m256_ymm
		test_instr(16, |a| a.vmovntpd(ptr(si), ymm3).unwrap(),
			Instruction::with2(Code::EVEX_Vmovntpd_m256_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovntpd_m_zmm() {
	// EVEX_Vmovntpd_m512_zmm
	test_instr(16, |a| a.vmovntpd(ptr(si), zmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vmovntpd_m512_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovntps_m_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovntps_m128_xmm
		test_instr(16, |a| a.vmovntps(ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovntps_m128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovntps_m128_xmm
		test_instr(16, |a| a.vmovntps(ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vmovntps_m128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovntps_m_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovntps_m256_ymm
		test_instr(16, |a| a.vmovntps(ptr(si), ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovntps_m256_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovntps_m256_ymm
		test_instr(16, |a| a.vmovntps(ptr(si), ymm3).unwrap(),
			Instruction::with2(Code::EVEX_Vmovntps_m256_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovntps_m_zmm() {
	// EVEX_Vmovntps_m512_zmm
	test_instr(16, |a| a.vmovntps(ptr(si), zmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vmovntps_m512_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovq_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovq_xmm_xmmm64
		test_instr(16, |a| a.vmovq(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovq_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovq_xmm_xmmm64
		test_instr(16, |a| a.vmovq(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vmovq_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovq_m_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovq_xmmm64_xmm
		test_instr(16, |a| a.vmovq(xmmword_ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovq_xmmm64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovq_xmmm64_xmm
		test_instr(16, |a| a.vmovq(xmmword_ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vmovq_xmmm64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovq_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovq_xmm_xmmm64
		test_instr(16, |a| a.vmovq(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovq_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovq_xmm_xmmm64
		test_instr(16, |a| a.vmovq(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::EVEX_Vmovq_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovsd_m_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovsd_m64_xmm
		test_instr(16, |a| a.vmovsd(ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovsd_m64_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovsd_m64_k1_xmm
		test_instr(16, |a| a.vmovsd(ptr(si).k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovsd_m64_k1_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovsd_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovsd_xmm_m64
		test_instr(16, |a| a.vmovsd(xmm2, ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovsd_xmm_m64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovsd_xmm_k1z_m64
		test_instr(16, |a| a.vmovsd(xmm2.k1(), ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovsd_xmm_k1z_m64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovsd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovsd_xmm_xmm_xmm
		test_instr(16, |a| a.vmovsd_3(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vmovsd_xmm_xmm_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovsd_xmm_k1z_xmm_xmm
		test_instr(16, |a| a.vmovsd_3(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmovsd_xmm_k1z_xmm_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovsh_m_xmm() {
	// EVEX_Vmovsh_m16_k1_xmm
	test_instr(16, |a| a.vmovsh(ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovsh_m16_k1_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovsh_xmm_m() {
	// EVEX_Vmovsh_xmm_k1z_m16
	test_instr(16, |a| a.vmovsh(xmm2.k1(), ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovsh_xmm_k1z_m16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovsh_xmm_xmm_xmm() {
	// EVEX_Vmovsh_xmm_k1z_xmm_xmm
	test_instr(16, |a| a.vmovsh_3(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmovsh_xmm_k1z_xmm_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovshdup_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovshdup_xmm_xmmm128
		test_instr(16, |a| a.vmovshdup(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovshdup_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovshdup_xmm_k1z_xmmm128
		test_instr(16, |a| a.vmovshdup(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovshdup_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovshdup_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovshdup_ymm_ymmm256
		test_instr(16, |a| a.vmovshdup(ymm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovshdup_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovshdup_ymm_k1z_ymmm256
		test_instr(16, |a| a.vmovshdup(ymm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovshdup_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovshdup_zmm_zmm() {
	// EVEX_Vmovshdup_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovshdup(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovshdup_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovshdup_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovshdup_xmm_xmmm128
		test_instr(16, |a| a.vmovshdup(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovshdup_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovshdup_xmm_k1z_xmmm128
		test_instr(16, |a| a.vmovshdup(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovshdup_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovshdup_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovshdup_ymm_ymmm256
		test_instr(16, |a| a.vmovshdup(ymm2, ymmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovshdup_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovshdup_ymm_k1z_ymmm256
		test_instr(16, |a| a.vmovshdup(ymm2.k1(), ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovshdup_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovshdup_zmm_m() {
	// EVEX_Vmovshdup_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovshdup(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovshdup_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovsldup_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovsldup_xmm_xmmm128
		test_instr(16, |a| a.vmovsldup(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovsldup_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovsldup_xmm_k1z_xmmm128
		test_instr(16, |a| a.vmovsldup(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovsldup_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovsldup_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovsldup_ymm_ymmm256
		test_instr(16, |a| a.vmovsldup(ymm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovsldup_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovsldup_ymm_k1z_ymmm256
		test_instr(16, |a| a.vmovsldup(ymm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovsldup_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovsldup_zmm_zmm() {
	// EVEX_Vmovsldup_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovsldup(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovsldup_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovsldup_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovsldup_xmm_xmmm128
		test_instr(16, |a| a.vmovsldup(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovsldup_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovsldup_xmm_k1z_xmmm128
		test_instr(16, |a| a.vmovsldup(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovsldup_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovsldup_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovsldup_ymm_ymmm256
		test_instr(16, |a| a.vmovsldup(ymm2, ymmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovsldup_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovsldup_ymm_k1z_ymmm256
		test_instr(16, |a| a.vmovsldup(ymm2.k1(), ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovsldup_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovsldup_zmm_m() {
	// EVEX_Vmovsldup_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovsldup(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovsldup_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovss_m_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovss_m32_xmm
		test_instr(16, |a| a.vmovss(ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovss_m32_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovss_m32_k1_xmm
		test_instr(16, |a| a.vmovss(ptr(si).k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovss_m32_k1_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovss_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovss_xmm_m32
		test_instr(16, |a| a.vmovss(xmm2, ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovss_xmm_m32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovss_xmm_k1z_m32
		test_instr(16, |a| a.vmovss(xmm2.k1(), ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovss_xmm_k1z_m32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovss_xmm_xmm_xmm
		test_instr(16, |a| a.vmovss_3(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vmovss_xmm_xmm_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovss_xmm_k1z_xmm_xmm
		test_instr(16, |a| a.vmovss_3(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmovss_xmm_k1z_xmm_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovupd_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovupd_xmm_xmmm128
		test_instr(16, |a| a.vmovupd(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovupd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovupd_xmm_k1z_xmmm128
		test_instr(16, |a| a.vmovupd(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovupd_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovupd_m_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovupd_xmmm128_xmm
		test_instr(16, |a| a.vmovupd(xmmword_ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovupd_xmmm128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovupd_xmmm128_k1z_xmm
		test_instr(16, |a| a.vmovupd(xmmword_ptr(si).k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovupd_xmmm128_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovupd_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovupd_ymm_ymmm256
		test_instr(16, |a| a.vmovupd(ymm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovupd_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovupd_ymm_k1z_ymmm256
		test_instr(16, |a| a.vmovupd(ymm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovupd_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovupd_m_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovupd_ymmm256_ymm
		test_instr(16, |a| a.vmovupd(ymmword_ptr(si), ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovupd_ymmm256_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovupd_ymmm256_k1z_ymm
		test_instr(16, |a| a.vmovupd(ymmword_ptr(si).k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovupd_ymmm256_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovupd_zmm_zmm() {
	// EVEX_Vmovupd_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovupd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovupd_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovupd_m_zmm() {
	// EVEX_Vmovupd_zmmm512_k1z_zmm
	test_instr(16, |a| a.vmovupd(zmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovupd_zmmm512_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovupd_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovupd_xmm_xmmm128
		test_instr(16, |a| a.vmovupd(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovupd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovupd_xmm_k1z_xmmm128
		test_instr(16, |a| a.vmovupd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovupd_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovupd_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovupd_ymm_ymmm256
		test_instr(16, |a| a.vmovupd(ymm2, ymmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovupd_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovupd_ymm_k1z_ymmm256
		test_instr(16, |a| a.vmovupd(ymm2.k1(), ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovupd_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovupd_zmm_m() {
	// EVEX_Vmovupd_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovupd(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovupd_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovups_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovups_xmm_xmmm128
		test_instr(16, |a| a.vmovups(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovups_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovups_xmm_k1z_xmmm128
		test_instr(16, |a| a.vmovups(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovups_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovups_m_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovups_xmmm128_xmm
		test_instr(16, |a| a.vmovups(xmmword_ptr(si), xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovups_xmmm128_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovups_xmmm128_k1z_xmm
		test_instr(16, |a| a.vmovups(xmmword_ptr(si).k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovups_xmmm128_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovups_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovups_ymm_ymmm256
		test_instr(16, |a| a.vmovups(ymm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovups_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovups_ymm_k1z_ymmm256
		test_instr(16, |a| a.vmovups(ymm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovups_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovups_m_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovups_ymmm256_ymm
		test_instr(16, |a| a.vmovups(ymmword_ptr(si), ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vmovups_ymmm256_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovups_ymmm256_k1z_ymm
		test_instr(16, |a| a.vmovups(ymmword_ptr(si).k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovups_ymmm256_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovups_zmm_zmm() {
	// EVEX_Vmovups_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovups(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovups_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovups_m_zmm() {
	// EVEX_Vmovups_zmmm512_k1z_zmm
	test_instr(16, |a| a.vmovups(zmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovups_zmmm512_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovups_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovups_xmm_xmmm128
		test_instr(16, |a| a.vmovups(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovups_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovups_xmm_k1z_xmmm128
		test_instr(16, |a| a.vmovups(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovups_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovups_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmovups_ymm_ymmm256
		test_instr(16, |a| a.vmovups(ymm2, ymmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vmovups_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmovups_ymm_k1z_ymmm256
		test_instr(16, |a| a.vmovups(ymm2.k1(), ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vmovups_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmovups_zmm_m() {
	// EVEX_Vmovups_zmm_k1z_zmmm512
	test_instr(16, |a| a.vmovups(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vmovups_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovw_xmm_r32() {
	// EVEX_Vmovw_xmm_r32m16
	test_instr(16, |a| a.vmovw(xmm2, ebx).unwrap(),
		Instruction::with2(Code::EVEX_Vmovw_xmm_r32m16, Register::XMM2, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovw_r32_xmm() {
	// EVEX_Vmovw_r32m16_xmm
	test_instr(16, |a| a.vmovw(edx, xmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vmovw_r32m16_xmm, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovw_m_xmm() {
	// EVEX_Vmovw_r32m16_xmm
	test_instr(16, |a| a.vmovw(dword_ptr(si), xmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vmovw_r32m16_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmovw_xmm_m() {
	// EVEX_Vmovw_xmm_r32m16
	test_instr(16, |a| a.vmovw(xmm2, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::EVEX_Vmovw_xmm_r32m16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmpsadbw_xmm_xmm_xmm_i() {
	// VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vmpsadbw(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vmpsadbw(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmpsadbw_ymm_ymm_ymm_i() {
	// VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vmpsadbw(ymm2, ymm3, ymm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vmpsadbw(ymm2, ymm3, ymm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmpsadbw_xmm_xmm_m_i() {
	// VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vmpsadbw(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vmpsadbw(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmpsadbw_ymm_ymm_m_i() {
	// VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vmpsadbw(ymm2, ymm3, ymmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vmpsadbw(ymm2, ymm3, ymmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmpsadbw_xmm_xmm_xmm_u() {
	// VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vmpsadbw(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmpsadbw_ymm_ymm_ymm_u() {
	// VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vmpsadbw(ymm2, ymm3, ymm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmpsadbw_xmm_xmm_m_u() {
	// VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vmpsadbw(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmpsadbw_ymm_ymm_m_u() {
	// VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vmpsadbw(ymm2, ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmptrld_m() {
	// Vmptrld_m64
	test_instr(16, |a| a.vmptrld(ptr(si)).unwrap(),
		Instruction::with1(Code::Vmptrld_m64, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmptrst_m() {
	// Vmptrst_m64
	test_instr(16, |a| a.vmptrst(ptr(si)).unwrap(),
		Instruction::with1(Code::Vmptrst_m64, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmread_r32_r32() {
	// Vmread_rm32_r32
	test_instr(16, |a| a.vmread(edx, ebx).unwrap(),
		Instruction::with2(Code::Vmread_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmread_m_r32() {
	// Vmread_rm32_r32
	test_instr(16, |a| a.vmread(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Vmread_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmresume() {
	// Vmresume
	test_instr(16, |a| a.vmresume().unwrap(),
		Instruction::with(Code::Vmresume),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmrun() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Vmrunw
		test_instr(16, |a| a.vmrun().unwrap(),
			Instruction::with(Code::Vmrunw),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmsave() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Vmsavew
		test_instr(16, |a| a.vmsave().unwrap(),
			Instruction::with(Code::Vmsavew),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmulpd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmulpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vmulpd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vmulpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vmulpd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmulpd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmulpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vmulpd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vmulpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vmulpd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmulpd_zmm_zmm_zmm() {
	// EVEX_Vmulpd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vmulpd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmulpd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmulpd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vmulpd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vmulpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vmulpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vmulpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vmulpd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmulpd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vmulpd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vmulpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vmulpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vmulpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vmulpd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmulpd_zmm_zmm_m() {
	// EVEX_Vmulpd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vmulpd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmulpd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmulph_xmm_xmm_xmm() {
	// EVEX_Vmulph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vmulph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmulph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmulph_ymm_ymm_ymm() {
	// EVEX_Vmulph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vmulph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmulph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmulph_zmm_zmm_zmm() {
	// EVEX_Vmulph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vmulph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmulph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmulph_xmm_xmm_m() {
	// EVEX_Vmulph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vmulph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmulph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmulph_ymm_ymm_m() {
	// EVEX_Vmulph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vmulph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmulph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmulph_zmm_zmm_m() {
	// EVEX_Vmulph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vmulph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmulph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmulps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmulps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vmulps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vmulps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vmulps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmulps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmulps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vmulps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vmulps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vmulps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmulps_zmm_zmm_zmm() {
	// EVEX_Vmulps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vmulps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmulps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmulps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vmulps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vmulps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vmulps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vmulps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vmulps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmulps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vmulps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vmulps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vmulps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vmulps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vmulps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmulps_zmm_zmm_m() {
	// EVEX_Vmulps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vmulps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmulps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmulsd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmulsd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vmulsd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vmulsd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmulsd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vmulsd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmulsd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmulsd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmulsd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vmulsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vmulsd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmulsd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vmulsd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmulsd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmulsh_xmm_xmm_xmm() {
	// EVEX_Vmulsh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vmulsh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmulsh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmulsh_xmm_xmm_m() {
	// EVEX_Vmulsh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vmulsh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vmulsh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmulss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmulss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vmulss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vmulss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmulss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vmulss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmulss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmulss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vmulss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vmulss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vmulss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vmulss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vmulss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vmulss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vmwrite_r32_r32() {
	// Vmwrite_r32_rm32
	test_instr(16, |a| a.vmwrite(edx, ebx).unwrap(),
		Instruction::with2(Code::Vmwrite_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmwrite_r32_m() {
	// Vmwrite_r32_rm32
	test_instr(16, |a| a.vmwrite(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Vmwrite_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmxoff() {
	// Vmxoff
	test_instr(16, |a| a.vmxoff().unwrap(),
		Instruction::with(Code::Vmxoff),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vmxon_m() {
	// Vmxon_m64
	test_instr(16, |a| a.vmxon(ptr(si)).unwrap(),
		Instruction::with1(Code::Vmxon_m64, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vorpd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vorpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vorpd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vorpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vorpd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vorpd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vorpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vorpd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vorpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vorpd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vorpd_zmm_zmm_zmm() {
	// EVEX_Vorpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vorpd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vorpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vorpd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vorpd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vorpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vorpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vorpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vorpd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vorpd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vorpd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vorpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vorpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vorpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vorpd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vorpd_zmm_zmm_m() {
	// EVEX_Vorpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vorpd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vorpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vorps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vorps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vorps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vorps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vorps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vorps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vorps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vorps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vorps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vorps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vorps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vorps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vorps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vorps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vorps_zmm_zmm_zmm() {
	// EVEX_Vorps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vorps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vorps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vorps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vorps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vorps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vorps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vorps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vorps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vorps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vorps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vorps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vorps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vorps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vorps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vorps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vorps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vorps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vorps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vorps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vorps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vorps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vorps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vorps_zmm_zmm_m() {
	// EVEX_Vorps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vorps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vorps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vp2intersectd_kr_xmm_xmm() {
	// EVEX_Vp2intersectd_kp1_xmm_xmmm128b32
	test_instr(16, |a| a.vp2intersectd(k2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::EVEX_Vp2intersectd_kp1_xmm_xmmm128b32, Register::K2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vp2intersectd_kr_ymm_ymm() {
	// EVEX_Vp2intersectd_kp1_ymm_ymmm256b32
	test_instr(16, |a| a.vp2intersectd(k2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::EVEX_Vp2intersectd_kp1_ymm_ymmm256b32, Register::K2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vp2intersectd_kr_zmm_zmm() {
	// EVEX_Vp2intersectd_kp1_zmm_zmmm512b32
	test_instr(16, |a| a.vp2intersectd(k2, zmm3, zmm4).unwrap(),
		Instruction::with3(Code::EVEX_Vp2intersectd_kp1_zmm_zmmm512b32, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vp2intersectd_kr_xmm_m() {
	// EVEX_Vp2intersectd_kp1_xmm_xmmm128b32
	test_instr(16, |a| a.vp2intersectd(k2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::EVEX_Vp2intersectd_kp1_xmm_xmmm128b32, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vp2intersectd_kr_ymm_m() {
	// EVEX_Vp2intersectd_kp1_ymm_ymmm256b32
	test_instr(16, |a| a.vp2intersectd(k2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::EVEX_Vp2intersectd_kp1_ymm_ymmm256b32, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vp2intersectd_kr_zmm_m() {
	// EVEX_Vp2intersectd_kp1_zmm_zmmm512b32
	test_instr(16, |a| a.vp2intersectd(k2, zmm3, zmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::EVEX_Vp2intersectd_kp1_zmm_zmmm512b32, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vp2intersectq_kr_xmm_xmm() {
	// EVEX_Vp2intersectq_kp1_xmm_xmmm128b64
	test_instr(16, |a| a.vp2intersectq(k2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::EVEX_Vp2intersectq_kp1_xmm_xmmm128b64, Register::K2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vp2intersectq_kr_ymm_ymm() {
	// EVEX_Vp2intersectq_kp1_ymm_ymmm256b64
	test_instr(16, |a| a.vp2intersectq(k2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::EVEX_Vp2intersectq_kp1_ymm_ymmm256b64, Register::K2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vp2intersectq_kr_zmm_zmm() {
	// EVEX_Vp2intersectq_kp1_zmm_zmmm512b64
	test_instr(16, |a| a.vp2intersectq(k2, zmm3, zmm4).unwrap(),
		Instruction::with3(Code::EVEX_Vp2intersectq_kp1_zmm_zmmm512b64, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vp2intersectq_kr_xmm_m() {
	// EVEX_Vp2intersectq_kp1_xmm_xmmm128b64
	test_instr(16, |a| a.vp2intersectq(k2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::EVEX_Vp2intersectq_kp1_xmm_xmmm128b64, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vp2intersectq_kr_ymm_m() {
	// EVEX_Vp2intersectq_kp1_ymm_ymmm256b64
	test_instr(16, |a| a.vp2intersectq(k2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::EVEX_Vp2intersectq_kp1_ymm_ymmm256b64, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vp2intersectq_kr_zmm_m() {
	// EVEX_Vp2intersectq_kp1_zmm_zmmm512b64
	test_instr(16, |a| a.vp2intersectq(k2, zmm3, zmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::EVEX_Vp2intersectq_kp1_zmm_zmmm512b64, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vp4dpwssd_zmm_zmm_m() {
	// EVEX_Vp4dpwssd_zmm_k1z_zmmp3_m128
	test_instr(16, |a| a.vp4dpwssd(zmm2.k1(), zmm3, ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vp4dpwssd_zmm_k1z_zmmp3_m128, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vp4dpwssds_zmm_zmm_m() {
	// EVEX_Vp4dpwssds_zmm_k1z_zmmp3_m128
	test_instr(16, |a| a.vp4dpwssds(zmm2.k1(), zmm3, ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vp4dpwssds_zmm_k1z_zmmp3_m128, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpabsb_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpabsb_xmm_xmmm128
		test_instr(16, |a| a.vpabsb(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpabsb_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpabsb_xmm_k1z_xmmm128
		test_instr(16, |a| a.vpabsb(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpabsb_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpabsb_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpabsb_ymm_ymmm256
		test_instr(16, |a| a.vpabsb(ymm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vpabsb_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpabsb_ymm_k1z_ymmm256
		test_instr(16, |a| a.vpabsb(ymm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpabsb_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpabsb_zmm_zmm() {
	// EVEX_Vpabsb_zmm_k1z_zmmm512
	test_instr(16, |a| a.vpabsb(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpabsb_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpabsb_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpabsb_xmm_xmmm128
		test_instr(16, |a| a.vpabsb(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpabsb_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpabsb_xmm_k1z_xmmm128
		test_instr(16, |a| a.vpabsb(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpabsb_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpabsb_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpabsb_ymm_ymmm256
		test_instr(16, |a| a.vpabsb(ymm2, ymmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpabsb_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpabsb_ymm_k1z_ymmm256
		test_instr(16, |a| a.vpabsb(ymm2.k1(), ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpabsb_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpabsb_zmm_m() {
	// EVEX_Vpabsb_zmm_k1z_zmmm512
	test_instr(16, |a| a.vpabsb(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpabsb_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpabsd_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpabsd_xmm_xmmm128
		test_instr(16, |a| a.vpabsd(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpabsd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpabsd_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vpabsd(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpabsd_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpabsd_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpabsd_ymm_ymmm256
		test_instr(16, |a| a.vpabsd(ymm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vpabsd_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpabsd_ymm_k1z_ymmm256b32
		test_instr(16, |a| a.vpabsd(ymm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpabsd_ymm_k1z_ymmm256b32, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpabsd_zmm_zmm() {
	// EVEX_Vpabsd_zmm_k1z_zmmm512b32
	test_instr(16, |a| a.vpabsd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpabsd_zmm_k1z_zmmm512b32, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpabsd_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpabsd_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vpabsd(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpabsd_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpabsd_xmm_xmmm128
		test_instr(16, |a| a.vpabsd(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpabsd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpabsd_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vpabsd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpabsd_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpabsd_ymm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpabsd_ymm_k1z_ymmm256b32
		test_instr(16, |a| a.vpabsd(ymm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpabsd_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpabsd_ymm_ymmm256
		test_instr(16, |a| a.vpabsd(ymm2, ymmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpabsd_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpabsd_ymm_k1z_ymmm256b32
		test_instr(16, |a| a.vpabsd(ymm2.k1(), ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpabsd_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpabsd_zmm_m() {
	// EVEX_Vpabsd_zmm_k1z_zmmm512b32
	test_instr(16, |a| a.vpabsd(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpabsd_zmm_k1z_zmmm512b32, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpabsq_xmm_xmm() {
	// EVEX_Vpabsq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vpabsq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpabsq_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpabsq_ymm_ymm() {
	// EVEX_Vpabsq_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vpabsq(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpabsq_ymm_k1z_ymmm256b64, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpabsq_zmm_zmm() {
	// EVEX_Vpabsq_zmm_k1z_zmmm512b64
	test_instr(16, |a| a.vpabsq(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpabsq_zmm_k1z_zmmm512b64, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpabsq_xmm_m() {
	// EVEX_Vpabsq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vpabsq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpabsq_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpabsq_ymm_m() {
	// EVEX_Vpabsq_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vpabsq(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpabsq_ymm_k1z_ymmm256b64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpabsq_zmm_m() {
	// EVEX_Vpabsq_zmm_k1z_zmmm512b64
	test_instr(16, |a| a.vpabsq(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpabsq_zmm_k1z_zmmm512b64, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpabsw_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpabsw_xmm_xmmm128
		test_instr(16, |a| a.vpabsw(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpabsw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpabsw_xmm_k1z_xmmm128
		test_instr(16, |a| a.vpabsw(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpabsw_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpabsw_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpabsw_ymm_ymmm256
		test_instr(16, |a| a.vpabsw(ymm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vpabsw_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpabsw_ymm_k1z_ymmm256
		test_instr(16, |a| a.vpabsw(ymm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpabsw_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpabsw_zmm_zmm() {
	// EVEX_Vpabsw_zmm_k1z_zmmm512
	test_instr(16, |a| a.vpabsw(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpabsw_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpabsw_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpabsw_xmm_xmmm128
		test_instr(16, |a| a.vpabsw(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpabsw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpabsw_xmm_k1z_xmmm128
		test_instr(16, |a| a.vpabsw(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpabsw_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpabsw_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpabsw_ymm_ymmm256
		test_instr(16, |a| a.vpabsw(ymm2, ymmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpabsw_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpabsw_ymm_k1z_ymmm256
		test_instr(16, |a| a.vpabsw(ymm2.k1(), ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpabsw_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpabsw_zmm_m() {
	// EVEX_Vpabsw_zmm_k1z_zmmm512
	test_instr(16, |a| a.vpabsw(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpabsw_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpackssdw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpackssdw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpackssdw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpackssdw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpackssdw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpackssdw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpackssdw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpackssdw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpackssdw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpackssdw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpackssdw_zmm_zmm_zmm() {
	// EVEX_Vpackssdw_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpackssdw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpackssdw_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpackssdw_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpackssdw(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpackssdw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpackssdw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpackssdw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpackssdw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpackssdw_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpackssdw(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpackssdw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpackssdw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpackssdw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpackssdw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpackssdw_zmm_zmm_m() {
	// EVEX_Vpackssdw_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpackssdw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpackssdw_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpacksswb_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpacksswb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpacksswb(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpacksswb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpacksswb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpacksswb(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpacksswb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpacksswb_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpacksswb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpacksswb(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpacksswb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpacksswb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpacksswb(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpacksswb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpacksswb_zmm_zmm_zmm() {
	// EVEX_Vpacksswb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpacksswb(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpacksswb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpacksswb_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpacksswb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpacksswb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpacksswb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpacksswb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpacksswb(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpacksswb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpacksswb_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpacksswb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpacksswb(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpacksswb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpacksswb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpacksswb(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpacksswb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpacksswb_zmm_zmm_m() {
	// EVEX_Vpacksswb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpacksswb(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpacksswb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpackusdw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpackusdw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpackusdw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpackusdw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpackusdw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpackusdw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpackusdw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpackusdw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpackusdw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpackusdw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpackusdw_zmm_zmm_zmm() {
	// EVEX_Vpackusdw_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpackusdw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpackusdw_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpackusdw_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpackusdw(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpackusdw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpackusdw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpackusdw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpackusdw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpackusdw_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpackusdw(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpackusdw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpackusdw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpackusdw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpackusdw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpackusdw_zmm_zmm_m() {
	// EVEX_Vpackusdw_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpackusdw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpackusdw_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpackuswb_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpackuswb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpackuswb(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpackuswb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpackuswb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpackuswb(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpackuswb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpackuswb_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpackuswb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpackuswb(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpackuswb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpackuswb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpackuswb(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpackuswb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpackuswb_zmm_zmm_zmm() {
	// EVEX_Vpackuswb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpackuswb(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpackuswb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpackuswb_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpackuswb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpackuswb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpackuswb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpackuswb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpackuswb(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpackuswb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpackuswb_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpackuswb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpackuswb(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpackuswb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpackuswb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpackuswb(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpackuswb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpackuswb_zmm_zmm_m() {
	// EVEX_Vpackuswb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpackuswb(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpackuswb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpaddb_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpaddb(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpaddb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpaddb(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddb_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpaddb(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpaddb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpaddb(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddb_zmm_zmm_zmm() {
	// EVEX_Vpaddb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpaddb(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpaddb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpaddb_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpaddb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpaddb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpaddb(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddb_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpaddb(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpaddb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpaddb(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddb_zmm_zmm_m() {
	// EVEX_Vpaddb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpaddb(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpaddb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpaddd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpaddd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpaddd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpaddd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpaddd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpaddd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpaddd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddd_zmm_zmm_zmm() {
	// EVEX_Vpaddd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpaddd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpaddd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpaddd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpaddd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpaddd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpaddd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpaddd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpaddd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpaddd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpaddd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpaddd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpaddd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpaddd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddd_zmm_zmm_m() {
	// EVEX_Vpaddd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpaddd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpaddd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpaddq_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpaddq(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpaddq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpaddq(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddq_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpaddq(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpaddq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpaddq(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddq_zmm_zmm_zmm() {
	// EVEX_Vpaddq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpaddq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpaddq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpaddq_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpaddq(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpaddq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpaddq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpaddq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpaddq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddq_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpaddq(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpaddq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpaddq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpaddq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpaddq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddq_zmm_zmm_m() {
	// EVEX_Vpaddq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpaddq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpaddq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpaddsb_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddsb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpaddsb(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpaddsb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddsb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpaddsb(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddsb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddsb_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddsb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpaddsb(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpaddsb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddsb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpaddsb(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddsb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddsb_zmm_zmm_zmm() {
	// EVEX_Vpaddsb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpaddsb(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpaddsb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpaddsb_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddsb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpaddsb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpaddsb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddsb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpaddsb(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddsb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddsb_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddsb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpaddsb(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpaddsb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddsb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpaddsb(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddsb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddsb_zmm_zmm_m() {
	// EVEX_Vpaddsb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpaddsb(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpaddsb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpaddsw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddsw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpaddsw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpaddsw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddsw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpaddsw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddsw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddsw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddsw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpaddsw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpaddsw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddsw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpaddsw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddsw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddsw_zmm_zmm_zmm() {
	// EVEX_Vpaddsw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpaddsw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpaddsw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpaddsw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddsw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpaddsw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpaddsw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddsw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpaddsw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddsw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddsw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddsw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpaddsw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpaddsw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddsw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpaddsw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddsw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddsw_zmm_zmm_m() {
	// EVEX_Vpaddsw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpaddsw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpaddsw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpaddusb_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddusb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpaddusb(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpaddusb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddusb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpaddusb(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddusb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddusb_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddusb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpaddusb(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpaddusb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddusb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpaddusb(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddusb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddusb_zmm_zmm_zmm() {
	// EVEX_Vpaddusb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpaddusb(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpaddusb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpaddusb_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddusb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpaddusb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpaddusb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddusb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpaddusb(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddusb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddusb_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddusb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpaddusb(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpaddusb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddusb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpaddusb(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddusb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddusb_zmm_zmm_m() {
	// EVEX_Vpaddusb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpaddusb(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpaddusb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpaddusw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddusw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpaddusw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpaddusw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddusw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpaddusw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddusw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddusw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddusw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpaddusw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpaddusw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddusw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpaddusw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddusw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddusw_zmm_zmm_zmm() {
	// EVEX_Vpaddusw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpaddusw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpaddusw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpaddusw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddusw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpaddusw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpaddusw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddusw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpaddusw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddusw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddusw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddusw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpaddusw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpaddusw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddusw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpaddusw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddusw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddusw_zmm_zmm_m() {
	// EVEX_Vpaddusw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpaddusw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpaddusw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpaddw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpaddw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpaddw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpaddw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpaddw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpaddw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpaddw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddw_zmm_zmm_zmm() {
	// EVEX_Vpaddw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpaddw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpaddw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpaddw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpaddw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpaddw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpaddw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpaddw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpaddw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpaddw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpaddw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpaddw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpaddw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpaddw_zmm_zmm_m() {
	// EVEX_Vpaddw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpaddw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpaddw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpalignr_xmm_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpalignr_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpalignr(xmm2, xmm3, xmm4, -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vpalignr_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpalignr(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpalignr_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpalignr(xmm2, xmm3, xmm4, -5).unwrap(),
			Instruction::with4(Code::VEX_Vpalignr_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpalignr(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpalignr_ymm_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpalignr_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpalignr(ymm2, ymm3, ymm4, -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vpalignr_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpalignr(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpalignr_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpalignr(ymm2, ymm3, ymm4, -5).unwrap(),
			Instruction::with4(Code::VEX_Vpalignr_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpalignr(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpalignr_zmm_zmm_zmm_i() {
	// EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpalignr(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpalignr(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpalignr_xmm_xmm_m_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpalignr_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpalignr(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vpalignr_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpalignr(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpalignr_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpalignr(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::VEX_Vpalignr_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpalignr(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpalignr_ymm_ymm_m_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpalignr_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpalignr(ymm2, ymm3, ymmword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vpalignr_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpalignr(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpalignr_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpalignr(ymm2, ymm3, ymmword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::VEX_Vpalignr_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpalignr(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpalignr_zmm_zmm_m_i() {
	// EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpalignr(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpalignr(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpalignr_xmm_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpalignr_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpalignr(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vpalignr_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpalignr(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpalignr_ymm_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpalignr_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpalignr(ymm2, ymm3, ymm4, 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vpalignr_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpalignr(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpalignr_zmm_zmm_zmm_u() {
	// EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpalignr(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpalignr_xmm_xmm_m_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpalignr_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpalignr(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vpalignr_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpalignr(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpalignr_ymm_ymm_m_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpalignr_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpalignr(ymm2, ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vpalignr_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpalignr(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpalignr_zmm_zmm_m_u() {
	// EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpalignr(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpand_xmm_xmm_xmm() {
	// VEX_Vpand_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpand(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpand_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpand_ymm_ymm_ymm() {
	// VEX_Vpand_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpand(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpand_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpand_xmm_xmm_m() {
	// VEX_Vpand_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpand(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpand_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpand_ymm_ymm_m() {
	// VEX_Vpand_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpand(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpand_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandd_xmm_xmm_xmm() {
	// EVEX_Vpandd_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpandd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandd_ymm_ymm_ymm() {
	// EVEX_Vpandd_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpandd(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandd_zmm_zmm_zmm() {
	// EVEX_Vpandd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpandd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandd_xmm_xmm_m() {
	// EVEX_Vpandd_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpandd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandd_ymm_ymm_m() {
	// EVEX_Vpandd_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpandd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandd_zmm_zmm_m() {
	// EVEX_Vpandd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpandd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandn_xmm_xmm_xmm() {
	// VEX_Vpandn_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpandn(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpandn_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandn_ymm_ymm_ymm() {
	// VEX_Vpandn_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpandn(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpandn_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandn_xmm_xmm_m() {
	// VEX_Vpandn_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpandn(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpandn_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandn_ymm_ymm_m() {
	// VEX_Vpandn_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpandn(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpandn_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandnd_xmm_xmm_xmm() {
	// EVEX_Vpandnd_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpandnd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandnd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandnd_ymm_ymm_ymm() {
	// EVEX_Vpandnd_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpandnd(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandnd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandnd_zmm_zmm_zmm() {
	// EVEX_Vpandnd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpandnd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandnd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandnd_xmm_xmm_m() {
	// EVEX_Vpandnd_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpandnd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandnd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandnd_ymm_ymm_m() {
	// EVEX_Vpandnd_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpandnd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandnd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandnd_zmm_zmm_m() {
	// EVEX_Vpandnd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpandnd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandnd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandnq_xmm_xmm_xmm() {
	// EVEX_Vpandnq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpandnq(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandnq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandnq_ymm_ymm_ymm() {
	// EVEX_Vpandnq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpandnq(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandnq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandnq_zmm_zmm_zmm() {
	// EVEX_Vpandnq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpandnq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandnq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandnq_xmm_xmm_m() {
	// EVEX_Vpandnq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpandnq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandnq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandnq_ymm_ymm_m() {
	// EVEX_Vpandnq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpandnq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandnq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandnq_zmm_zmm_m() {
	// EVEX_Vpandnq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpandnq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandnq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandq_xmm_xmm_xmm() {
	// EVEX_Vpandq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpandq(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandq_ymm_ymm_ymm() {
	// EVEX_Vpandq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpandq(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandq_zmm_zmm_zmm() {
	// EVEX_Vpandq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpandq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandq_xmm_xmm_m() {
	// EVEX_Vpandq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpandq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandq_ymm_ymm_m() {
	// EVEX_Vpandq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpandq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpandq_zmm_zmm_m() {
	// EVEX_Vpandq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpandq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpandq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpavgb_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpavgb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpavgb(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpavgb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpavgb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpavgb(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpavgb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpavgb_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpavgb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpavgb(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpavgb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpavgb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpavgb(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpavgb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpavgb_zmm_zmm_zmm() {
	// EVEX_Vpavgb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpavgb(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpavgb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpavgb_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpavgb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpavgb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpavgb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpavgb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpavgb(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpavgb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpavgb_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpavgb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpavgb(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpavgb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpavgb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpavgb(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpavgb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpavgb_zmm_zmm_m() {
	// EVEX_Vpavgb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpavgb(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpavgb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpavgw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpavgw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpavgw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpavgw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpavgw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpavgw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpavgw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpavgw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpavgw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpavgw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpavgw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpavgw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpavgw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpavgw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpavgw_zmm_zmm_zmm() {
	// EVEX_Vpavgw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpavgw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpavgw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpavgw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpavgw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpavgw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpavgw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpavgw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpavgw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpavgw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpavgw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpavgw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpavgw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpavgw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpavgw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpavgw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpavgw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpavgw_zmm_zmm_m() {
	// EVEX_Vpavgw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpavgw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpavgw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendd_xmm_xmm_xmm_i() {
	// VEX_Vpblendd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpblendd(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vpblendd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpblendd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpblendd(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vpblendd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendd_ymm_ymm_ymm_i() {
	// VEX_Vpblendd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpblendd(ymm2, ymm3, ymm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vpblendd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpblendd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpblendd(ymm2, ymm3, ymm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vpblendd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendd_xmm_xmm_m_i() {
	// VEX_Vpblendd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpblendd(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vpblendd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpblendd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpblendd(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vpblendd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendd_ymm_ymm_m_i() {
	// VEX_Vpblendd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpblendd(ymm2, ymm3, ymmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vpblendd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpblendd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpblendd(ymm2, ymm3, ymmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vpblendd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendd_xmm_xmm_xmm_u() {
	// VEX_Vpblendd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpblendd(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vpblendd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendd_ymm_ymm_ymm_u() {
	// VEX_Vpblendd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpblendd(ymm2, ymm3, ymm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vpblendd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendd_xmm_xmm_m_u() {
	// VEX_Vpblendd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpblendd(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vpblendd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendd_ymm_ymm_m_u() {
	// VEX_Vpblendd_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpblendd(ymm2, ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vpblendd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmb_xmm_xmm_xmm() {
	// EVEX_Vpblendmb_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpblendmb(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmb_ymm_ymm_ymm() {
	// EVEX_Vpblendmb_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpblendmb(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmb_zmm_zmm_zmm() {
	// EVEX_Vpblendmb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpblendmb(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmb_xmm_xmm_m() {
	// EVEX_Vpblendmb_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpblendmb(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmb_ymm_ymm_m() {
	// EVEX_Vpblendmb_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpblendmb(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmb_zmm_zmm_m() {
	// EVEX_Vpblendmb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpblendmb(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmd_xmm_xmm_xmm() {
	// EVEX_Vpblendmd_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpblendmd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmd_ymm_ymm_ymm() {
	// EVEX_Vpblendmd_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpblendmd(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmd_zmm_zmm_zmm() {
	// EVEX_Vpblendmd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpblendmd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmd_xmm_xmm_m() {
	// EVEX_Vpblendmd_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpblendmd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmd_ymm_ymm_m() {
	// EVEX_Vpblendmd_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpblendmd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmd_zmm_zmm_m() {
	// EVEX_Vpblendmd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpblendmd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmq_xmm_xmm_xmm() {
	// EVEX_Vpblendmq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpblendmq(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmq_ymm_ymm_ymm() {
	// EVEX_Vpblendmq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpblendmq(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmq_zmm_zmm_zmm() {
	// EVEX_Vpblendmq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpblendmq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmq_xmm_xmm_m() {
	// EVEX_Vpblendmq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpblendmq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmq_ymm_ymm_m() {
	// EVEX_Vpblendmq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpblendmq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmq_zmm_zmm_m() {
	// EVEX_Vpblendmq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpblendmq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmw_xmm_xmm_xmm() {
	// EVEX_Vpblendmw_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpblendmw(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmw_ymm_ymm_ymm() {
	// EVEX_Vpblendmw_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpblendmw(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmw_zmm_zmm_zmm() {
	// EVEX_Vpblendmw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpblendmw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmw_xmm_xmm_m() {
	// EVEX_Vpblendmw_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpblendmw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmw_ymm_ymm_m() {
	// EVEX_Vpblendmw_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpblendmw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendmw_zmm_zmm_m() {
	// EVEX_Vpblendmw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpblendmw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpblendmw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendvb_xmm_xmm_xmm_xmm() {
	// VEX_Vpblendvb_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpblendvb(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vpblendvb_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendvb_xmm_xmm_m_xmm() {
	// VEX_Vpblendvb_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpblendvb(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::VEX_Vpblendvb_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendvb_ymm_ymm_ymm_ymm() {
	// VEX_Vpblendvb_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vpblendvb(ymm2, ymm3, ymm4, ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vpblendvb_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendvb_ymm_ymm_m_ymm() {
	// VEX_Vpblendvb_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vpblendvb(ymm2, ymm3, ymmword_ptr(si), ymm5).unwrap(),
		Instruction::with4(Code::VEX_Vpblendvb_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendw_xmm_xmm_xmm_i() {
	// VEX_Vpblendw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpblendw(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vpblendw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpblendw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpblendw(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vpblendw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendw_ymm_ymm_ymm_i() {
	// VEX_Vpblendw_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpblendw(ymm2, ymm3, ymm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vpblendw_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpblendw_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpblendw(ymm2, ymm3, ymm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vpblendw_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendw_xmm_xmm_m_i() {
	// VEX_Vpblendw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpblendw(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vpblendw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpblendw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpblendw(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vpblendw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendw_ymm_ymm_m_i() {
	// VEX_Vpblendw_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpblendw(ymm2, ymm3, ymmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vpblendw_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpblendw_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpblendw(ymm2, ymm3, ymmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vpblendw_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendw_xmm_xmm_xmm_u() {
	// VEX_Vpblendw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpblendw(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vpblendw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendw_ymm_ymm_ymm_u() {
	// VEX_Vpblendw_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpblendw(ymm2, ymm3, ymm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vpblendw_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendw_xmm_xmm_m_u() {
	// VEX_Vpblendw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpblendw(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vpblendw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpblendw_ymm_ymm_m_u() {
	// VEX_Vpblendw_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpblendw(ymm2, ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vpblendw_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastb_xmm_r32() {
	// EVEX_Vpbroadcastb_xmm_k1z_r32
	test_instr(16, |a| a.vpbroadcastb(xmm2.k1(), ebx).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastb_xmm_k1z_r32, Register::XMM2, Register::EBX).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastb_ymm_r32() {
	// EVEX_Vpbroadcastb_ymm_k1z_r32
	test_instr(16, |a| a.vpbroadcastb(ymm2.k1(), ebx).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastb_ymm_k1z_r32, Register::YMM2, Register::EBX).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastb_zmm_r32() {
	// EVEX_Vpbroadcastb_zmm_k1z_r32
	test_instr(16, |a| a.vpbroadcastb(zmm2.k1(), ebx).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastb_zmm_k1z_r32, Register::ZMM2, Register::EBX).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastb_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpbroadcastb_xmm_xmmm8
		test_instr(16, |a| a.vpbroadcastb(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpbroadcastb_xmm_xmmm8, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpbroadcastb_xmm_k1z_xmmm8
		test_instr(16, |a| a.vpbroadcastb(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastb_xmm_k1z_xmmm8, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpbroadcastb_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpbroadcastb_ymm_xmmm8
		test_instr(16, |a| a.vpbroadcastb(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpbroadcastb_ymm_xmmm8, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpbroadcastb_ymm_k1z_xmmm8
		test_instr(16, |a| a.vpbroadcastb(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastb_ymm_k1z_xmmm8, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpbroadcastb_zmm_xmm() {
	// EVEX_Vpbroadcastb_zmm_k1z_xmmm8
	test_instr(16, |a| a.vpbroadcastb(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastb_zmm_k1z_xmmm8, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastb_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpbroadcastb_xmm_xmmm8
		test_instr(16, |a| a.vpbroadcastb(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpbroadcastb_xmm_xmmm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpbroadcastb_xmm_k1z_xmmm8
		test_instr(16, |a| a.vpbroadcastb(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastb_xmm_k1z_xmmm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpbroadcastb_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpbroadcastb_ymm_xmmm8
		test_instr(16, |a| a.vpbroadcastb(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpbroadcastb_ymm_xmmm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpbroadcastb_ymm_k1z_xmmm8
		test_instr(16, |a| a.vpbroadcastb(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastb_ymm_k1z_xmmm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpbroadcastb_zmm_m() {
	// EVEX_Vpbroadcastb_zmm_k1z_xmmm8
	test_instr(16, |a| a.vpbroadcastb(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastb_zmm_k1z_xmmm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastd_xmm_r32() {
	// EVEX_Vpbroadcastd_xmm_k1z_r32
	test_instr(16, |a| a.vpbroadcastd(xmm2.k1(), ebx).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastd_xmm_k1z_r32, Register::XMM2, Register::EBX).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastd_ymm_r32() {
	// EVEX_Vpbroadcastd_ymm_k1z_r32
	test_instr(16, |a| a.vpbroadcastd(ymm2.k1(), ebx).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastd_ymm_k1z_r32, Register::YMM2, Register::EBX).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastd_zmm_r32() {
	// EVEX_Vpbroadcastd_zmm_k1z_r32
	test_instr(16, |a| a.vpbroadcastd(zmm2.k1(), ebx).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastd_zmm_k1z_r32, Register::ZMM2, Register::EBX).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastd_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpbroadcastd_xmm_xmmm32
		test_instr(16, |a| a.vpbroadcastd(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpbroadcastd_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpbroadcastd_xmm_k1z_xmmm32
		test_instr(16, |a| a.vpbroadcastd(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastd_xmm_k1z_xmmm32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpbroadcastd_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpbroadcastd_ymm_xmmm32
		test_instr(16, |a| a.vpbroadcastd(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpbroadcastd_ymm_xmmm32, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpbroadcastd_ymm_k1z_xmmm32
		test_instr(16, |a| a.vpbroadcastd(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastd_ymm_k1z_xmmm32, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpbroadcastd_zmm_xmm() {
	// EVEX_Vpbroadcastd_zmm_k1z_xmmm32
	test_instr(16, |a| a.vpbroadcastd(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastd_zmm_k1z_xmmm32, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastd_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpbroadcastd_xmm_xmmm32
		test_instr(16, |a| a.vpbroadcastd(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpbroadcastd_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpbroadcastd_xmm_k1z_xmmm32
		test_instr(16, |a| a.vpbroadcastd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastd_xmm_k1z_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpbroadcastd_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpbroadcastd_ymm_xmmm32
		test_instr(16, |a| a.vpbroadcastd(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpbroadcastd_ymm_xmmm32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpbroadcastd_ymm_k1z_xmmm32
		test_instr(16, |a| a.vpbroadcastd(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastd_ymm_k1z_xmmm32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpbroadcastd_zmm_m() {
	// EVEX_Vpbroadcastd_zmm_k1z_xmmm32
	test_instr(16, |a| a.vpbroadcastd(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastd_zmm_k1z_xmmm32, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastmb2q_xmm_kr() {
	// EVEX_Vpbroadcastmb2q_xmm_kr
	test_instr(16, |a| a.vpbroadcastmb2q(xmm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpbroadcastmb2q_xmm_kr, Register::XMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastmb2q_ymm_kr() {
	// EVEX_Vpbroadcastmb2q_ymm_kr
	test_instr(16, |a| a.vpbroadcastmb2q(ymm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpbroadcastmb2q_ymm_kr, Register::YMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastmb2q_zmm_kr() {
	// EVEX_Vpbroadcastmb2q_zmm_kr
	test_instr(16, |a| a.vpbroadcastmb2q(zmm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpbroadcastmb2q_zmm_kr, Register::ZMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastmw2d_xmm_kr() {
	// EVEX_Vpbroadcastmw2d_xmm_kr
	test_instr(16, |a| a.vpbroadcastmw2d(xmm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpbroadcastmw2d_xmm_kr, Register::XMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastmw2d_ymm_kr() {
	// EVEX_Vpbroadcastmw2d_ymm_kr
	test_instr(16, |a| a.vpbroadcastmw2d(ymm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpbroadcastmw2d_ymm_kr, Register::YMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastmw2d_zmm_kr() {
	// EVEX_Vpbroadcastmw2d_zmm_kr
	test_instr(16, |a| a.vpbroadcastmw2d(zmm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpbroadcastmw2d_zmm_kr, Register::ZMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastq_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpbroadcastq_xmm_xmmm64
		test_instr(16, |a| a.vpbroadcastq(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpbroadcastq_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpbroadcastq_xmm_k1z_xmmm64
		test_instr(16, |a| a.vpbroadcastq(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastq_xmm_k1z_xmmm64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpbroadcastq_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpbroadcastq_ymm_xmmm64
		test_instr(16, |a| a.vpbroadcastq(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpbroadcastq_ymm_xmmm64, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpbroadcastq_ymm_k1z_xmmm64
		test_instr(16, |a| a.vpbroadcastq(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastq_ymm_k1z_xmmm64, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpbroadcastq_zmm_xmm() {
	// EVEX_Vpbroadcastq_zmm_k1z_xmmm64
	test_instr(16, |a| a.vpbroadcastq(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastq_zmm_k1z_xmmm64, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastq_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpbroadcastq_xmm_xmmm64
		test_instr(16, |a| a.vpbroadcastq(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpbroadcastq_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpbroadcastq_xmm_k1z_xmmm64
		test_instr(16, |a| a.vpbroadcastq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastq_xmm_k1z_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpbroadcastq_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpbroadcastq_ymm_xmmm64
		test_instr(16, |a| a.vpbroadcastq(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpbroadcastq_ymm_xmmm64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpbroadcastq_ymm_k1z_xmmm64
		test_instr(16, |a| a.vpbroadcastq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastq_ymm_k1z_xmmm64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpbroadcastq_zmm_m() {
	// EVEX_Vpbroadcastq_zmm_k1z_xmmm64
	test_instr(16, |a| a.vpbroadcastq(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastq_zmm_k1z_xmmm64, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastw_xmm_r32() {
	// EVEX_Vpbroadcastw_xmm_k1z_r32
	test_instr(16, |a| a.vpbroadcastw(xmm2.k1(), ebx).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastw_xmm_k1z_r32, Register::XMM2, Register::EBX).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastw_ymm_r32() {
	// EVEX_Vpbroadcastw_ymm_k1z_r32
	test_instr(16, |a| a.vpbroadcastw(ymm2.k1(), ebx).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastw_ymm_k1z_r32, Register::YMM2, Register::EBX).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastw_zmm_r32() {
	// EVEX_Vpbroadcastw_zmm_k1z_r32
	test_instr(16, |a| a.vpbroadcastw(zmm2.k1(), ebx).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastw_zmm_k1z_r32, Register::ZMM2, Register::EBX).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastw_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpbroadcastw_xmm_xmmm16
		test_instr(16, |a| a.vpbroadcastw(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpbroadcastw_xmm_xmmm16, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpbroadcastw_xmm_k1z_xmmm16
		test_instr(16, |a| a.vpbroadcastw(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastw_xmm_k1z_xmmm16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpbroadcastw_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpbroadcastw_ymm_xmmm16
		test_instr(16, |a| a.vpbroadcastw(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpbroadcastw_ymm_xmmm16, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpbroadcastw_ymm_k1z_xmmm16
		test_instr(16, |a| a.vpbroadcastw(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastw_ymm_k1z_xmmm16, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpbroadcastw_zmm_xmm() {
	// EVEX_Vpbroadcastw_zmm_k1z_xmmm16
	test_instr(16, |a| a.vpbroadcastw(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastw_zmm_k1z_xmmm16, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpbroadcastw_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpbroadcastw_xmm_xmmm16
		test_instr(16, |a| a.vpbroadcastw(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpbroadcastw_xmm_xmmm16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpbroadcastw_xmm_k1z_xmmm16
		test_instr(16, |a| a.vpbroadcastw(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastw_xmm_k1z_xmmm16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpbroadcastw_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpbroadcastw_ymm_xmmm16
		test_instr(16, |a| a.vpbroadcastw(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpbroadcastw_ymm_xmmm16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpbroadcastw_ymm_k1z_xmmm16
		test_instr(16, |a| a.vpbroadcastw(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastw_ymm_k1z_xmmm16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpbroadcastw_zmm_m() {
	// EVEX_Vpbroadcastw_zmm_k1z_xmmm16
	test_instr(16, |a| a.vpbroadcastw(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpbroadcastw_zmm_k1z_xmmm16, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmulhqhqdq_xmm_xmm_xmm() {
	// VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpclmulhqhqdq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmulhqhqdq_ymm_ymm_ymm() {
	// VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpclmulhqhqdq(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmulhqhqdq_zmm_zmm_zmm() {
	// EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpclmulhqhqdq(zmm2, zmm3, zmm4).unwrap(),
		Instruction::with4(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmulhqhqdq_xmm_xmm_m() {
	// VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpclmulhqhqdq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmulhqhqdq_ymm_ymm_m() {
	// VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpclmulhqhqdq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmulhqhqdq_zmm_zmm_m() {
	// EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpclmulhqhqdq(zmm2, zmm3, zmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x11i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmulhqlqdq_xmm_xmm_xmm() {
	// VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpclmulhqlqdq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmulhqlqdq_ymm_ymm_ymm() {
	// VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpclmulhqlqdq(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmulhqlqdq_zmm_zmm_zmm() {
	// EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpclmulhqlqdq(zmm2, zmm3, zmm4).unwrap(),
		Instruction::with4(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmulhqlqdq_xmm_xmm_m() {
	// VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpclmulhqlqdq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmulhqlqdq_ymm_ymm_m() {
	// VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpclmulhqlqdq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmulhqlqdq_zmm_zmm_m() {
	// EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpclmulhqlqdq(zmm2, zmm3, zmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmullqhqdq_xmm_xmm_xmm() {
	// VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpclmullqhqdq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmullqhqdq_ymm_ymm_ymm() {
	// VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpclmullqhqdq(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmullqhqdq_zmm_zmm_zmm() {
	// EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpclmullqhqdq(zmm2, zmm3, zmm4).unwrap(),
		Instruction::with4(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmullqhqdq_xmm_xmm_m() {
	// VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpclmullqhqdq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmullqhqdq_ymm_ymm_m() {
	// VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpclmullqhqdq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmullqhqdq_zmm_zmm_m() {
	// EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpclmullqhqdq(zmm2, zmm3, zmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x10i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmullqlqdq_xmm_xmm_xmm() {
	// VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpclmullqlqdq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmullqlqdq_ymm_ymm_ymm() {
	// VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpclmullqlqdq(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with4(Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmullqlqdq_zmm_zmm_zmm() {
	// EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpclmullqlqdq(zmm2, zmm3, zmm4).unwrap(),
		Instruction::with4(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmullqlqdq_xmm_xmm_m() {
	// VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpclmullqlqdq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmullqlqdq_ymm_ymm_m() {
	// VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpclmullqlqdq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmullqlqdq_zmm_zmm_m() {
	// EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpclmullqlqdq(zmm2, zmm3, zmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmulqdq_xmm_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpclmulqdq(xmm2, xmm3, xmm4, -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpclmulqdq(xmm2, xmm3, xmm4, -5i32).unwrap(),
			Instruction::with4(Code::EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpclmulqdq(xmm2, xmm3, xmm4, -5).unwrap(),
			Instruction::with4(Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpclmulqdq(xmm2, xmm3, xmm4, -5).unwrap(),
			Instruction::with4(Code::EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpclmulqdq_ymm_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpclmulqdq(ymm2, ymm3, ymm4, -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpclmulqdq(ymm2, ymm3, ymm4, -5i32).unwrap(),
			Instruction::with4(Code::EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpclmulqdq(ymm2, ymm3, ymm4, -5).unwrap(),
			Instruction::with4(Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpclmulqdq(ymm2, ymm3, ymm4, -5).unwrap(),
			Instruction::with4(Code::EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpclmulqdq_zmm_zmm_zmm_i() {
	// EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpclmulqdq(zmm2, zmm3, zmm4, -5i32).unwrap(),
		Instruction::with4(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpclmulqdq(zmm2, zmm3, zmm4, -5).unwrap(),
		Instruction::with4(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmulqdq_xmm_xmm_m_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpclmulqdq(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpclmulqdq(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpclmulqdq(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpclmulqdq(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpclmulqdq_ymm_ymm_m_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpclmulqdq(ymm2, ymm3, ymmword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpclmulqdq(ymm2, ymm3, ymmword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpclmulqdq(ymm2, ymm3, ymmword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpclmulqdq(ymm2, ymm3, ymmword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpclmulqdq_zmm_zmm_m_i() {
	// EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpclmulqdq(zmm2, zmm3, zmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpclmulqdq(zmm2, zmm3, zmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmulqdq_xmm_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpclmulqdq(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpclmulqdq(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
			Instruction::with4(Code::EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpclmulqdq_ymm_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpclmulqdq(ymm2, ymm3, ymm4, 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpclmulqdq(ymm2, ymm3, ymm4, 0x7Fu32).unwrap(),
			Instruction::with4(Code::EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpclmulqdq_zmm_zmm_zmm_u() {
	// EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpclmulqdq(zmm2, zmm3, zmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpclmulqdq_xmm_xmm_m_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpclmulqdq(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpclmulqdq(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpclmulqdq_ymm_ymm_m_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpclmulqdq(ymm2, ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpclmulqdq(ymm2, ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpclmulqdq_zmm_zmm_m_u() {
	// EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpclmulqdq(zmm2, zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmov_xmm_xmm_xmm_xmm() {
	// XOP_Vpcmov_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpcmov(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpcmov_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmov_xmm_xmm_m_xmm() {
	// XOP_Vpcmov_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpcmov(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpcmov_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmov_ymm_ymm_ymm_ymm() {
	// XOP_Vpcmov_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vpcmov(ymm2, ymm3, ymm4, ymm5).unwrap(),
		Instruction::with4(Code::XOP_Vpcmov_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmov_ymm_ymm_m_ymm() {
	// XOP_Vpcmov_ymm_ymm_ymmm256_ymm
	test_instr(16, |a| a.vpcmov(ymm2, ymm3, ymmword_ptr(si), ymm5).unwrap(),
		Instruction::with4(Code::XOP_Vpcmov_ymm_ymm_ymmm256_ymm, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmov_xmm_xmm_xmm_m() {
	// XOP_Vpcmov_xmm_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpcmov(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcmov_xmm_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmov_ymm_ymm_ymm_m() {
	// XOP_Vpcmov_ymm_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpcmov(ymm2, ymm3, ymm4, ymmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcmov_ymm_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpb_kr_xmm_xmm_i() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpb_kr_ymm_ymm_i() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpb_kr_zmm_zmm_i() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpb_kr_xmm_m_i() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpb_kr_ymm_m_i() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpb_kr_zmm_m_i() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpb_kr_xmm_xmm_u() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpb_kr_ymm_ymm_u() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpb_kr_zmm_zmm_u() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpb_kr_xmm_m_u() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpb_kr_ymm_m_u() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpb_kr_zmm_m_u() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpb(k2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpd_kr_xmm_xmm_i() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpd_kr_ymm_ymm_i() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpd_kr_zmm_zmm_i() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpd_kr_xmm_m_i() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpd_kr_ymm_m_i() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpd_kr_zmm_m_i() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpd_kr_xmm_xmm_u() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpd_kr_ymm_ymm_u() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpd_kr_zmm_zmm_u() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpd_kr_xmm_m_u() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpd_kr_ymm_m_u() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpd_kr_zmm_m_u() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpd(k2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqb_kr_xmm_xmm() {
	// EVEX_Vpcmpeqb_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vpcmpeqb(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqb_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqb_xmm_xmm_xmm() {
	// VEX_Vpcmpeqb_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpcmpeqb(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpeqb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqb_kr_ymm_ymm() {
	// EVEX_Vpcmpeqb_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vpcmpeqb(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqb_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqb_ymm_ymm_ymm() {
	// VEX_Vpcmpeqb_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpcmpeqb(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpeqb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqb_kr_zmm_zmm() {
	// EVEX_Vpcmpeqb_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vpcmpeqb(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqb_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqb_kr_xmm_m() {
	// EVEX_Vpcmpeqb_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vpcmpeqb(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqb_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqb_xmm_xmm_m() {
	// VEX_Vpcmpeqb_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpcmpeqb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpeqb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqb_kr_ymm_m() {
	// EVEX_Vpcmpeqb_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vpcmpeqb(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqb_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqb_ymm_ymm_m() {
	// VEX_Vpcmpeqb_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpcmpeqb(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpeqb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqb_kr_zmm_m() {
	// EVEX_Vpcmpeqb_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vpcmpeqb(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqb_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqd_kr_xmm_xmm() {
	// EVEX_Vpcmpeqd_kr_k1_xmm_xmmm128b32
	test_instr(16, |a| a.vpcmpeqd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqd_kr_k1_xmm_xmmm128b32, Register::K2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqd_xmm_xmm_xmm() {
	// VEX_Vpcmpeqd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpcmpeqd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpeqd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqd_kr_ymm_ymm() {
	// EVEX_Vpcmpeqd_kr_k1_ymm_ymmm256b32
	test_instr(16, |a| a.vpcmpeqd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqd_kr_k1_ymm_ymmm256b32, Register::K2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqd_ymm_ymm_ymm() {
	// VEX_Vpcmpeqd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpcmpeqd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpeqd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqd_kr_zmm_zmm() {
	// EVEX_Vpcmpeqd_kr_k1_zmm_zmmm512b32
	test_instr(16, |a| a.vpcmpeqd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqd_kr_k1_zmm_zmmm512b32, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqd_kr_xmm_m() {
	// EVEX_Vpcmpeqd_kr_k1_xmm_xmmm128b32
	test_instr(16, |a| a.vpcmpeqd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqd_kr_k1_xmm_xmmm128b32, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqd_xmm_xmm_m() {
	// VEX_Vpcmpeqd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpcmpeqd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpeqd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqd_kr_ymm_m() {
	// EVEX_Vpcmpeqd_kr_k1_ymm_ymmm256b32
	test_instr(16, |a| a.vpcmpeqd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqd_kr_k1_ymm_ymmm256b32, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqd_ymm_ymm_m() {
	// VEX_Vpcmpeqd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpcmpeqd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpeqd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqd_kr_zmm_m() {
	// EVEX_Vpcmpeqd_kr_k1_zmm_zmmm512b32
	test_instr(16, |a| a.vpcmpeqd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqd_kr_k1_zmm_zmmm512b32, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqq_kr_xmm_xmm() {
	// EVEX_Vpcmpeqq_kr_k1_xmm_xmmm128b64
	test_instr(16, |a| a.vpcmpeqq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqq_kr_k1_xmm_xmmm128b64, Register::K2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqq_xmm_xmm_xmm() {
	// VEX_Vpcmpeqq_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpcmpeqq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpeqq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqq_kr_ymm_ymm() {
	// EVEX_Vpcmpeqq_kr_k1_ymm_ymmm256b64
	test_instr(16, |a| a.vpcmpeqq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqq_kr_k1_ymm_ymmm256b64, Register::K2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqq_ymm_ymm_ymm() {
	// VEX_Vpcmpeqq_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpcmpeqq(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpeqq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqq_kr_zmm_zmm() {
	// EVEX_Vpcmpeqq_kr_k1_zmm_zmmm512b64
	test_instr(16, |a| a.vpcmpeqq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqq_kr_k1_zmm_zmmm512b64, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqq_kr_xmm_m() {
	// EVEX_Vpcmpeqq_kr_k1_xmm_xmmm128b64
	test_instr(16, |a| a.vpcmpeqq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqq_kr_k1_xmm_xmmm128b64, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqq_xmm_xmm_m() {
	// VEX_Vpcmpeqq_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpcmpeqq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpeqq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqq_kr_ymm_m() {
	// EVEX_Vpcmpeqq_kr_k1_ymm_ymmm256b64
	test_instr(16, |a| a.vpcmpeqq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqq_kr_k1_ymm_ymmm256b64, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqq_ymm_ymm_m() {
	// VEX_Vpcmpeqq_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpcmpeqq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpeqq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqq_kr_zmm_m() {
	// EVEX_Vpcmpeqq_kr_k1_zmm_zmmm512b64
	test_instr(16, |a| a.vpcmpeqq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqq_kr_k1_zmm_zmmm512b64, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequb_kr_xmm_xmm() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpequb(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequb_kr_ymm_ymm() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpequb(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequb_kr_zmm_zmm() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpequb(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequb_kr_xmm_m() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpequb(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequb_kr_ymm_m() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpequb(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequb_kr_zmm_m() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpequb(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequd_kr_xmm_xmm() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpequd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequd_kr_ymm_ymm() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpequd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequd_kr_zmm_zmm() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpequd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequd_kr_xmm_m() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpequd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequd_kr_ymm_m() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpequd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequd_kr_zmm_m() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpequd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequq_kr_xmm_xmm() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpequq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequq_kr_ymm_ymm() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpequq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequq_kr_zmm_zmm() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpequq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequq_kr_xmm_m() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpequq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequq_kr_ymm_m() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpequq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequq_kr_zmm_m() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpequq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequw_kr_xmm_xmm() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpequw(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequw_kr_ymm_ymm() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpequw(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequw_kr_zmm_zmm() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpequw(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequw_kr_xmm_m() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpequw(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequw_kr_ymm_m() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpequw(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpequw_kr_zmm_m() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpequw(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqw_kr_xmm_xmm() {
	// EVEX_Vpcmpeqw_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vpcmpeqw(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqw_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqw_xmm_xmm_xmm() {
	// VEX_Vpcmpeqw_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpcmpeqw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpeqw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqw_kr_ymm_ymm() {
	// EVEX_Vpcmpeqw_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vpcmpeqw(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqw_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqw_ymm_ymm_ymm() {
	// VEX_Vpcmpeqw_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpcmpeqw(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpeqw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqw_kr_zmm_zmm() {
	// EVEX_Vpcmpeqw_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vpcmpeqw(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqw_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqw_kr_xmm_m() {
	// EVEX_Vpcmpeqw_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vpcmpeqw(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqw_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqw_xmm_xmm_m() {
	// VEX_Vpcmpeqw_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpcmpeqw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpeqw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqw_kr_ymm_m() {
	// EVEX_Vpcmpeqw_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vpcmpeqw(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqw_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqw_ymm_ymm_m() {
	// VEX_Vpcmpeqw_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpcmpeqw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpeqw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpeqw_kr_zmm_m() {
	// EVEX_Vpcmpeqw_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vpcmpeqw(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpeqw_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpestri_xmm_xmm_i() {
	// VEX_Vpcmpestri_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpestri(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpestri_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpcmpestri_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpestri(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpestri_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpestri_xmm_m_i() {
	// VEX_Vpcmpestri_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpestri(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpestri_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpcmpestri_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpestri(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpestri_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpestri_xmm_xmm_u() {
	// VEX_Vpcmpestri_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpestri(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpestri_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpestri_xmm_m_u() {
	// VEX_Vpcmpestri_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpestri(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpestri_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpestrm_xmm_xmm_i() {
	// VEX_Vpcmpestrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpestrm(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpestrm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpcmpestrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpestrm(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpestrm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpestrm_xmm_m_i() {
	// VEX_Vpcmpestrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpestrm(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpestrm_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpcmpestrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpestrm(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpestrm_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpestrm_xmm_xmm_u() {
	// VEX_Vpcmpestrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpestrm(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpestrm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpestrm_xmm_m_u() {
	// VEX_Vpcmpestrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpestrm(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpestrm_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseb_kr_xmm_xmm() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpfalseb(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseb_kr_ymm_ymm() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpfalseb(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseb_kr_zmm_zmm() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpfalseb(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseb_kr_xmm_m() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpfalseb(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseb_kr_ymm_m() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpfalseb(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseb_kr_zmm_m() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpfalseb(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalsed_kr_xmm_xmm() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpfalsed(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalsed_kr_ymm_ymm() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpfalsed(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalsed_kr_zmm_zmm() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpfalsed(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalsed_kr_xmm_m() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpfalsed(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalsed_kr_ymm_m() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpfalsed(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalsed_kr_zmm_m() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpfalsed(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseq_kr_xmm_xmm() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpfalseq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseq_kr_ymm_ymm() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpfalseq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseq_kr_zmm_zmm() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpfalseq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseq_kr_xmm_m() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpfalseq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseq_kr_ymm_m() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpfalseq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseq_kr_zmm_m() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpfalseq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseub_kr_xmm_xmm() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpfalseub(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseub_kr_ymm_ymm() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpfalseub(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseub_kr_zmm_zmm() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpfalseub(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseub_kr_xmm_m() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpfalseub(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseub_kr_ymm_m() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpfalseub(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseub_kr_zmm_m() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpfalseub(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseud_kr_xmm_xmm() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpfalseud(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseud_kr_ymm_ymm() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpfalseud(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseud_kr_zmm_zmm() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpfalseud(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseud_kr_xmm_m() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpfalseud(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseud_kr_ymm_m() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpfalseud(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseud_kr_zmm_m() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpfalseud(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseuq_kr_xmm_xmm() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpfalseuq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseuq_kr_ymm_ymm() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpfalseuq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseuq_kr_zmm_zmm() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpfalseuq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseuq_kr_xmm_m() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpfalseuq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseuq_kr_ymm_m() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpfalseuq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseuq_kr_zmm_m() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpfalseuq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseuw_kr_xmm_xmm() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpfalseuw(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseuw_kr_ymm_ymm() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpfalseuw(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseuw_kr_zmm_zmm() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpfalseuw(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseuw_kr_xmm_m() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpfalseuw(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseuw_kr_ymm_m() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpfalseuw(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalseuw_kr_zmm_m() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpfalseuw(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalsew_kr_xmm_xmm() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpfalsew(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalsew_kr_ymm_ymm() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpfalsew(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalsew_kr_zmm_zmm() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpfalsew(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalsew_kr_xmm_m() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpfalsew(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalsew_kr_ymm_m() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpfalsew(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpfalsew_kr_zmm_m() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpfalsew(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtb_kr_xmm_xmm() {
	// EVEX_Vpcmpgtb_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vpcmpgtb(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtb_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtb_xmm_xmm_xmm() {
	// VEX_Vpcmpgtb_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpcmpgtb(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpgtb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtb_kr_ymm_ymm() {
	// EVEX_Vpcmpgtb_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vpcmpgtb(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtb_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtb_ymm_ymm_ymm() {
	// VEX_Vpcmpgtb_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpcmpgtb(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpgtb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtb_kr_zmm_zmm() {
	// EVEX_Vpcmpgtb_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vpcmpgtb(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtb_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtb_kr_xmm_m() {
	// EVEX_Vpcmpgtb_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vpcmpgtb(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtb_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtb_xmm_xmm_m() {
	// VEX_Vpcmpgtb_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpcmpgtb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpgtb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtb_kr_ymm_m() {
	// EVEX_Vpcmpgtb_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vpcmpgtb(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtb_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtb_ymm_ymm_m() {
	// VEX_Vpcmpgtb_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpcmpgtb(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpgtb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtb_kr_zmm_m() {
	// EVEX_Vpcmpgtb_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vpcmpgtb(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtb_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtd_kr_xmm_xmm() {
	// EVEX_Vpcmpgtd_kr_k1_xmm_xmmm128b32
	test_instr(16, |a| a.vpcmpgtd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtd_kr_k1_xmm_xmmm128b32, Register::K2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtd_xmm_xmm_xmm() {
	// VEX_Vpcmpgtd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpcmpgtd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpgtd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtd_kr_ymm_ymm() {
	// EVEX_Vpcmpgtd_kr_k1_ymm_ymmm256b32
	test_instr(16, |a| a.vpcmpgtd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtd_kr_k1_ymm_ymmm256b32, Register::K2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtd_ymm_ymm_ymm() {
	// VEX_Vpcmpgtd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpcmpgtd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpgtd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtd_kr_zmm_zmm() {
	// EVEX_Vpcmpgtd_kr_k1_zmm_zmmm512b32
	test_instr(16, |a| a.vpcmpgtd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtd_kr_k1_zmm_zmmm512b32, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtd_kr_xmm_m() {
	// EVEX_Vpcmpgtd_kr_k1_xmm_xmmm128b32
	test_instr(16, |a| a.vpcmpgtd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtd_kr_k1_xmm_xmmm128b32, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtd_xmm_xmm_m() {
	// VEX_Vpcmpgtd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpcmpgtd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpgtd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtd_kr_ymm_m() {
	// EVEX_Vpcmpgtd_kr_k1_ymm_ymmm256b32
	test_instr(16, |a| a.vpcmpgtd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtd_kr_k1_ymm_ymmm256b32, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtd_ymm_ymm_m() {
	// VEX_Vpcmpgtd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpcmpgtd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpgtd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtd_kr_zmm_m() {
	// EVEX_Vpcmpgtd_kr_k1_zmm_zmmm512b32
	test_instr(16, |a| a.vpcmpgtd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtd_kr_k1_zmm_zmmm512b32, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtq_kr_xmm_xmm() {
	// EVEX_Vpcmpgtq_kr_k1_xmm_xmmm128b64
	test_instr(16, |a| a.vpcmpgtq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtq_kr_k1_xmm_xmmm128b64, Register::K2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtq_xmm_xmm_xmm() {
	// VEX_Vpcmpgtq_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpcmpgtq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpgtq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtq_kr_ymm_ymm() {
	// EVEX_Vpcmpgtq_kr_k1_ymm_ymmm256b64
	test_instr(16, |a| a.vpcmpgtq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtq_kr_k1_ymm_ymmm256b64, Register::K2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtq_ymm_ymm_ymm() {
	// VEX_Vpcmpgtq_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpcmpgtq(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpgtq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtq_kr_zmm_zmm() {
	// EVEX_Vpcmpgtq_kr_k1_zmm_zmmm512b64
	test_instr(16, |a| a.vpcmpgtq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtq_kr_k1_zmm_zmmm512b64, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtq_kr_xmm_m() {
	// EVEX_Vpcmpgtq_kr_k1_xmm_xmmm128b64
	test_instr(16, |a| a.vpcmpgtq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtq_kr_k1_xmm_xmmm128b64, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtq_xmm_xmm_m() {
	// VEX_Vpcmpgtq_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpcmpgtq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpgtq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtq_kr_ymm_m() {
	// EVEX_Vpcmpgtq_kr_k1_ymm_ymmm256b64
	test_instr(16, |a| a.vpcmpgtq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtq_kr_k1_ymm_ymmm256b64, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtq_ymm_ymm_m() {
	// VEX_Vpcmpgtq_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpcmpgtq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpgtq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtq_kr_zmm_m() {
	// EVEX_Vpcmpgtq_kr_k1_zmm_zmmm512b64
	test_instr(16, |a| a.vpcmpgtq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtq_kr_k1_zmm_zmmm512b64, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtw_kr_xmm_xmm() {
	// EVEX_Vpcmpgtw_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vpcmpgtw(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtw_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtw_xmm_xmm_xmm() {
	// VEX_Vpcmpgtw_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpcmpgtw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpgtw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtw_kr_ymm_ymm() {
	// EVEX_Vpcmpgtw_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vpcmpgtw(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtw_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtw_ymm_ymm_ymm() {
	// VEX_Vpcmpgtw_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpcmpgtw(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpgtw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtw_kr_zmm_zmm() {
	// EVEX_Vpcmpgtw_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vpcmpgtw(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtw_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtw_kr_xmm_m() {
	// EVEX_Vpcmpgtw_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vpcmpgtw(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtw_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtw_xmm_xmm_m() {
	// VEX_Vpcmpgtw_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpcmpgtw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpgtw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtw_kr_ymm_m() {
	// EVEX_Vpcmpgtw_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vpcmpgtw(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtw_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtw_ymm_ymm_m() {
	// VEX_Vpcmpgtw_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpcmpgtw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpgtw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpgtw_kr_zmm_m() {
	// EVEX_Vpcmpgtw_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vpcmpgtw(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpcmpgtw_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpistri_xmm_xmm_i() {
	// VEX_Vpcmpistri_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpistri(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpistri_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpcmpistri_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpistri(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpistri_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpistri_xmm_m_i() {
	// VEX_Vpcmpistri_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpistri(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpistri_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpcmpistri_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpistri(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpistri_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpistri_xmm_xmm_u() {
	// VEX_Vpcmpistri_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpistri(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpistri_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpistri_xmm_m_u() {
	// VEX_Vpcmpistri_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpistri(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpistri_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpistrm_xmm_xmm_i() {
	// VEX_Vpcmpistrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpistrm(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpistrm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpcmpistrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpistrm(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpistrm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpistrm_xmm_m_i() {
	// VEX_Vpcmpistrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpistrm(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpistrm_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpcmpistrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpistrm(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpistrm_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpistrm_xmm_xmm_u() {
	// VEX_Vpcmpistrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpistrm(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpistrm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpistrm_xmm_m_u() {
	// VEX_Vpcmpistrm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpistrm(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vpcmpistrm_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleb_kr_xmm_xmm() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpleb(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleb_kr_ymm_ymm() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpleb(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleb_kr_zmm_zmm() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpleb(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleb_kr_xmm_m() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpleb(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleb_kr_ymm_m() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpleb(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleb_kr_zmm_m() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpleb(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpled_kr_xmm_xmm() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpled(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpled_kr_ymm_ymm() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpled(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpled_kr_zmm_zmm() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpled(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpled_kr_xmm_m() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpled(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpled_kr_ymm_m() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpled(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpled_kr_zmm_m() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpled(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleq_kr_xmm_xmm() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpleq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleq_kr_ymm_ymm() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpleq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleq_kr_zmm_zmm() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpleq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleq_kr_xmm_m() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpleq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleq_kr_ymm_m() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpleq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleq_kr_zmm_m() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpleq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleub_kr_xmm_xmm() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpleub(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleub_kr_ymm_ymm() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpleub(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleub_kr_zmm_zmm() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpleub(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleub_kr_xmm_m() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpleub(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleub_kr_ymm_m() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpleub(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleub_kr_zmm_m() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpleub(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleud_kr_xmm_xmm() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpleud(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleud_kr_ymm_ymm() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpleud(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleud_kr_zmm_zmm() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpleud(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleud_kr_xmm_m() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpleud(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleud_kr_ymm_m() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpleud(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleud_kr_zmm_m() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpleud(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleuq_kr_xmm_xmm() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpleuq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleuq_kr_ymm_ymm() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpleuq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleuq_kr_zmm_zmm() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpleuq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleuq_kr_xmm_m() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpleuq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleuq_kr_ymm_m() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpleuq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleuq_kr_zmm_m() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpleuq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleuw_kr_xmm_xmm() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpleuw(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleuw_kr_ymm_ymm() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpleuw(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleuw_kr_zmm_zmm() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpleuw(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleuw_kr_xmm_m() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpleuw(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleuw_kr_ymm_m() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpleuw(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpleuw_kr_zmm_m() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpleuw(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmplew_kr_xmm_xmm() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmplew(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmplew_kr_ymm_ymm() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmplew(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmplew_kr_zmm_zmm() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmplew(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmplew_kr_xmm_m() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmplew(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmplew_kr_ymm_m() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmplew(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmplew_kr_zmm_m() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmplew(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltb_kr_xmm_xmm() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpltb(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltb_kr_ymm_ymm() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpltb(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltb_kr_zmm_zmm() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpltb(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltb_kr_xmm_m() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpltb(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltb_kr_ymm_m() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpltb(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltb_kr_zmm_m() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpltb(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltd_kr_xmm_xmm() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpltd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltd_kr_ymm_ymm() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpltd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltd_kr_zmm_zmm() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpltd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltd_kr_xmm_m() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpltd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltd_kr_ymm_m() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpltd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltd_kr_zmm_m() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpltd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltq_kr_xmm_xmm() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpltq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltq_kr_ymm_ymm() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpltq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltq_kr_zmm_zmm() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpltq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltq_kr_xmm_m() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpltq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltq_kr_ymm_m() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpltq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltq_kr_zmm_m() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpltq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltub_kr_xmm_xmm() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpltub(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltub_kr_ymm_ymm() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpltub(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltub_kr_zmm_zmm() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpltub(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltub_kr_xmm_m() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpltub(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltub_kr_ymm_m() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpltub(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltub_kr_zmm_m() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpltub(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltud_kr_xmm_xmm() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpltud(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltud_kr_ymm_ymm() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpltud(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltud_kr_zmm_zmm() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpltud(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltud_kr_xmm_m() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpltud(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltud_kr_ymm_m() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpltud(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltud_kr_zmm_m() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpltud(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltuq_kr_xmm_xmm() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpltuq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltuq_kr_ymm_ymm() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpltuq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltuq_kr_zmm_zmm() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpltuq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltuq_kr_xmm_m() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpltuq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltuq_kr_ymm_m() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpltuq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltuq_kr_zmm_m() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpltuq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltuw_kr_xmm_xmm() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpltuw(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltuw_kr_ymm_ymm() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpltuw(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltuw_kr_zmm_zmm() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpltuw(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltuw_kr_xmm_m() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpltuw(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltuw_kr_ymm_m() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpltuw(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltuw_kr_zmm_m() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpltuw(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltw_kr_xmm_xmm() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpltw(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltw_kr_ymm_ymm() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpltw(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltw_kr_zmm_zmm() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpltw(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltw_kr_xmm_m() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpltw(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltw_kr_ymm_m() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpltw(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpltw_kr_zmm_m() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpltw(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqb_kr_xmm_xmm() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpneqb(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqb_kr_ymm_ymm() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpneqb(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqb_kr_zmm_zmm() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpneqb(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqb_kr_xmm_m() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpneqb(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqb_kr_ymm_m() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpneqb(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqb_kr_zmm_m() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpneqb(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqd_kr_xmm_xmm() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpneqd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqd_kr_ymm_ymm() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpneqd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqd_kr_zmm_zmm() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpneqd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqd_kr_xmm_m() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpneqd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqd_kr_ymm_m() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpneqd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqd_kr_zmm_m() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpneqd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqq_kr_xmm_xmm() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpneqq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqq_kr_ymm_ymm() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpneqq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqq_kr_zmm_zmm() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpneqq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqq_kr_xmm_m() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpneqq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqq_kr_ymm_m() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpneqq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqq_kr_zmm_m() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpneqq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequb_kr_xmm_xmm() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnequb(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequb_kr_ymm_ymm() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnequb(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequb_kr_zmm_zmm() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnequb(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequb_kr_xmm_m() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnequb(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequb_kr_ymm_m() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnequb(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequb_kr_zmm_m() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnequb(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequd_kr_xmm_xmm() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpnequd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequd_kr_ymm_ymm() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpnequd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequd_kr_zmm_zmm() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpnequd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequd_kr_xmm_m() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpnequd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequd_kr_ymm_m() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpnequd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequd_kr_zmm_m() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpnequd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequq_kr_xmm_xmm() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpnequq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequq_kr_ymm_ymm() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpnequq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequq_kr_zmm_zmm() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpnequq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequq_kr_xmm_m() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpnequq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequq_kr_ymm_m() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpnequq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequq_kr_zmm_m() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpnequq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequw_kr_xmm_xmm() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnequw(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequw_kr_ymm_ymm() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnequw(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequw_kr_zmm_zmm() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnequw(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequw_kr_xmm_m() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnequw(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequw_kr_ymm_m() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnequw(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnequw_kr_zmm_m() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnequw(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqw_kr_xmm_xmm() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpneqw(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqw_kr_ymm_ymm() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpneqw(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqw_kr_zmm_zmm() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpneqw(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqw_kr_xmm_m() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpneqw(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqw_kr_ymm_m() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpneqw(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpneqw_kr_zmm_m() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpneqw(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleb_kr_xmm_xmm() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnleb(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleb_kr_ymm_ymm() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnleb(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleb_kr_zmm_zmm() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnleb(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleb_kr_xmm_m() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnleb(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleb_kr_ymm_m() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnleb(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleb_kr_zmm_m() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnleb(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnled_kr_xmm_xmm() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpnled(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnled_kr_ymm_ymm() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpnled(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnled_kr_zmm_zmm() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpnled(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnled_kr_xmm_m() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpnled(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnled_kr_ymm_m() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpnled(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnled_kr_zmm_m() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpnled(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleq_kr_xmm_xmm() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpnleq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleq_kr_ymm_ymm() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpnleq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleq_kr_zmm_zmm() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpnleq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleq_kr_xmm_m() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpnleq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleq_kr_ymm_m() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpnleq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleq_kr_zmm_m() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpnleq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleub_kr_xmm_xmm() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnleub(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleub_kr_ymm_ymm() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnleub(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleub_kr_zmm_zmm() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnleub(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleub_kr_xmm_m() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnleub(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleub_kr_ymm_m() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnleub(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleub_kr_zmm_m() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnleub(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleud_kr_xmm_xmm() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpnleud(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleud_kr_ymm_ymm() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpnleud(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleud_kr_zmm_zmm() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpnleud(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleud_kr_xmm_m() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpnleud(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleud_kr_ymm_m() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpnleud(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleud_kr_zmm_m() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpnleud(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleuq_kr_xmm_xmm() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpnleuq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleuq_kr_ymm_ymm() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpnleuq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleuq_kr_zmm_zmm() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpnleuq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleuq_kr_xmm_m() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpnleuq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleuq_kr_ymm_m() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpnleuq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleuq_kr_zmm_m() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpnleuq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleuw_kr_xmm_xmm() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnleuw(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleuw_kr_ymm_ymm() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnleuw(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleuw_kr_zmm_zmm() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnleuw(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleuw_kr_xmm_m() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnleuw(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleuw_kr_ymm_m() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnleuw(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnleuw_kr_zmm_m() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnleuw(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnlew_kr_xmm_xmm() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnlew(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnlew_kr_ymm_ymm() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnlew(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnlew_kr_zmm_zmm() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnlew(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnlew_kr_xmm_m() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnlew(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnlew_kr_ymm_m() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnlew(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnlew_kr_zmm_m() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnlew(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltb_kr_xmm_xmm() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnltb(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltb_kr_ymm_ymm() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnltb(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltb_kr_zmm_zmm() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnltb(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltb_kr_xmm_m() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnltb(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltb_kr_ymm_m() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnltb(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltb_kr_zmm_m() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnltb(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltd_kr_xmm_xmm() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpnltd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltd_kr_ymm_ymm() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpnltd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltd_kr_zmm_zmm() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpnltd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltd_kr_xmm_m() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpnltd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltd_kr_ymm_m() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpnltd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltd_kr_zmm_m() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpnltd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltq_kr_xmm_xmm() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpnltq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltq_kr_ymm_ymm() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpnltq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltq_kr_zmm_zmm() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpnltq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltq_kr_xmm_m() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpnltq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltq_kr_ymm_m() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpnltq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltq_kr_zmm_m() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpnltq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltub_kr_xmm_xmm() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnltub(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltub_kr_ymm_ymm() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnltub(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltub_kr_zmm_zmm() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnltub(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltub_kr_xmm_m() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnltub(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltub_kr_ymm_m() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnltub(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltub_kr_zmm_m() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnltub(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltud_kr_xmm_xmm() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpnltud(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltud_kr_ymm_ymm() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpnltud(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltud_kr_zmm_zmm() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpnltud(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltud_kr_xmm_m() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpnltud(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltud_kr_ymm_m() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpnltud(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltud_kr_zmm_m() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpnltud(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltuq_kr_xmm_xmm() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpnltuq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltuq_kr_ymm_ymm() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpnltuq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltuq_kr_zmm_zmm() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpnltuq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltuq_kr_xmm_m() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpnltuq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltuq_kr_ymm_m() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpnltuq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltuq_kr_zmm_m() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpnltuq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltuw_kr_xmm_xmm() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnltuw(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltuw_kr_ymm_ymm() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnltuw(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltuw_kr_zmm_zmm() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnltuw(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltuw_kr_xmm_m() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnltuw(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltuw_kr_ymm_m() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnltuw(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltuw_kr_zmm_m() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnltuw(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltw_kr_xmm_xmm() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnltw(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltw_kr_ymm_ymm() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnltw(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltw_kr_zmm_zmm() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnltw(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltw_kr_xmm_m() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpnltw(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltw_kr_ymm_m() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpnltw(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpnltw_kr_zmm_m() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpnltw(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpq_kr_xmm_xmm_i() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpq_kr_ymm_ymm_i() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpq_kr_zmm_zmm_i() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpq_kr_xmm_m_i() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpq_kr_ymm_m_i() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpq_kr_zmm_m_i() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpq_kr_xmm_xmm_u() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpq_kr_ymm_ymm_u() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpq_kr_zmm_zmm_u() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpq_kr_xmm_m_u() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpq_kr_ymm_m_u() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpq_kr_zmm_m_u() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpq(k2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueb_kr_xmm_xmm() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmptrueb(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueb_kr_ymm_ymm() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmptrueb(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueb_kr_zmm_zmm() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmptrueb(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueb_kr_xmm_m() {
	// EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmptrueb(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueb_kr_ymm_m() {
	// EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmptrueb(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueb_kr_zmm_m() {
	// EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmptrueb(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrued_kr_xmm_xmm() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmptrued(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrued_kr_ymm_ymm() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmptrued(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrued_kr_zmm_zmm() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmptrued(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrued_kr_xmm_m() {
	// EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmptrued(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrued_kr_ymm_m() {
	// EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmptrued(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrued_kr_zmm_m() {
	// EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmptrued(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueq_kr_xmm_xmm() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmptrueq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueq_kr_ymm_ymm() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmptrueq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueq_kr_zmm_zmm() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmptrueq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueq_kr_xmm_m() {
	// EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmptrueq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueq_kr_ymm_m() {
	// EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmptrueq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueq_kr_zmm_m() {
	// EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmptrueq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueub_kr_xmm_xmm() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmptrueub(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueub_kr_ymm_ymm() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmptrueub(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueub_kr_zmm_zmm() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmptrueub(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueub_kr_xmm_m() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmptrueub(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueub_kr_ymm_m() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmptrueub(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueub_kr_zmm_m() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmptrueub(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueud_kr_xmm_xmm() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmptrueud(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueud_kr_ymm_ymm() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmptrueud(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueud_kr_zmm_zmm() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmptrueud(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueud_kr_xmm_m() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmptrueud(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueud_kr_ymm_m() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmptrueud(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueud_kr_zmm_m() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmptrueud(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueuq_kr_xmm_xmm() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmptrueuq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueuq_kr_ymm_ymm() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmptrueuq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueuq_kr_zmm_zmm() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmptrueuq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueuq_kr_xmm_m() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmptrueuq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueuq_kr_ymm_m() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmptrueuq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueuq_kr_zmm_m() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmptrueuq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueuw_kr_xmm_xmm() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmptrueuw(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueuw_kr_ymm_ymm() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmptrueuw(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueuw_kr_zmm_zmm() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmptrueuw(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueuw_kr_xmm_m() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmptrueuw(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueuw_kr_ymm_m() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmptrueuw(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptrueuw_kr_zmm_m() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmptrueuw(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptruew_kr_xmm_xmm() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmptruew(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptruew_kr_ymm_ymm() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmptruew(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptruew_kr_zmm_zmm() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmptruew(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptruew_kr_xmm_m() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmptruew(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptruew_kr_ymm_m() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmptruew(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmptruew_kr_zmm_m() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmptruew(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpub_kr_xmm_xmm_i() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpub_kr_ymm_ymm_i() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpub_kr_zmm_zmm_i() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpub_kr_xmm_m_i() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpub_kr_ymm_m_i() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpub_kr_zmm_m_i() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpub_kr_xmm_xmm_u() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpub_kr_ymm_ymm_u() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpub_kr_zmm_zmm_u() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpub_kr_xmm_m_u() {
	// EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpub_kr_ymm_m_u() {
	// EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpub_kr_zmm_m_u() {
	// EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpub(k2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpud_kr_xmm_xmm_i() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpud_kr_ymm_ymm_i() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpud_kr_zmm_zmm_i() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpud_kr_xmm_m_i() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpud_kr_ymm_m_i() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpud_kr_zmm_m_i() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpud_kr_xmm_xmm_u() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpud_kr_ymm_ymm_u() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpud_kr_zmm_zmm_u() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpud_kr_xmm_m_u() {
	// EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpud_kr_ymm_m_u() {
	// EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpud_kr_zmm_m_u() {
	// EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpcmpud(k2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuq_kr_xmm_xmm_i() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuq_kr_ymm_ymm_i() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuq_kr_zmm_zmm_i() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuq_kr_xmm_m_i() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuq_kr_ymm_m_i() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuq_kr_zmm_m_i() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuq_kr_xmm_xmm_u() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuq_kr_ymm_ymm_u() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuq_kr_zmm_zmm_u() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuq_kr_xmm_m_u() {
	// EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuq_kr_ymm_m_u() {
	// EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuq_kr_zmm_m_u() {
	// EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpcmpuq(k2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuw_kr_xmm_xmm_i() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuw_kr_ymm_ymm_i() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuw_kr_zmm_zmm_i() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuw_kr_xmm_m_i() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuw_kr_ymm_m_i() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuw_kr_zmm_m_i() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuw_kr_xmm_xmm_u() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuw_kr_ymm_ymm_u() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuw_kr_zmm_zmm_u() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuw_kr_xmm_m_u() {
	// EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuw_kr_ymm_m_u() {
	// EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpuw_kr_zmm_m_u() {
	// EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpuw(k2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpw_kr_xmm_xmm_i() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpw_kr_ymm_ymm_i() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpw_kr_zmm_zmm_i() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpw_kr_xmm_m_i() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpw_kr_ymm_m_i() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpw_kr_zmm_m_i() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpw_kr_xmm_xmm_u() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpw_kr_ymm_ymm_u() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpw_kr_zmm_zmm_u() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpw_kr_xmm_m_u() {
	// EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpw_kr_ymm_m_u() {
	// EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcmpw_kr_zmm_m_u() {
	// EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpcmpw(k2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomb_xmm_xmm_xmm_i() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomb(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomb(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomb_xmm_xmm_m_i() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomb(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomb(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomb_xmm_xmm_xmm_u() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomb(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomb_xmm_xmm_m_u() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomb(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomd_xmm_xmm_xmm_i() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomd(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomd(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomd_xmm_xmm_m_i() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomd(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomd(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomd_xmm_xmm_xmm_u() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomd(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomd_xmm_xmm_m_u() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomd(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomeqb_xmm_xmm_xmm() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomeqb(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomeqb_xmm_xmm_m() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomeqb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomeqd_xmm_xmm_xmm() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomeqd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomeqd_xmm_xmm_m() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomeqd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomeqq_xmm_xmm_xmm() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomeqq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomeqq_xmm_xmm_m() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomeqq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomequb_xmm_xmm_xmm() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomequb(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomequb_xmm_xmm_m() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomequb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomequd_xmm_xmm_xmm() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomequd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomequd_xmm_xmm_m() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomequd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomequq_xmm_xmm_xmm() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomequq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomequq_xmm_xmm_m() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomequq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomequw_xmm_xmm_xmm() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomequw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomequw_xmm_xmm_m() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomequw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomeqw_xmm_xmm_xmm() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomeqw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomeqw_xmm_xmm_m() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomeqw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 4i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomfalseb_xmm_xmm_xmm() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomfalseb(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomfalseb_xmm_xmm_m() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomfalseb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomfalsed_xmm_xmm_xmm() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomfalsed(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomfalsed_xmm_xmm_m() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomfalsed(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomfalseq_xmm_xmm_xmm() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomfalseq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomfalseq_xmm_xmm_m() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomfalseq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomfalseub_xmm_xmm_xmm() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomfalseub(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomfalseub_xmm_xmm_m() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomfalseub(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomfalseud_xmm_xmm_xmm() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomfalseud(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomfalseud_xmm_xmm_m() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomfalseud(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomfalseuq_xmm_xmm_xmm() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomfalseuq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomfalseuq_xmm_xmm_m() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomfalseuq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomfalseuw_xmm_xmm_xmm() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomfalseuw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomfalseuw_xmm_xmm_m() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomfalseuw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomfalsew_xmm_xmm_xmm() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomfalsew(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomfalsew_xmm_xmm_m() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomfalsew(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 6i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgeb_xmm_xmm_xmm() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgeb(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgeb_xmm_xmm_m() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgeb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomged_xmm_xmm_xmm() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomged(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomged_xmm_xmm_m() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomged(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgeq_xmm_xmm_xmm() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgeq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgeq_xmm_xmm_m() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgeq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgeub_xmm_xmm_xmm() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgeub(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgeub_xmm_xmm_m() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgeub(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgeud_xmm_xmm_xmm() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgeud(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgeud_xmm_xmm_m() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgeud(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgeuq_xmm_xmm_xmm() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgeuq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgeuq_xmm_xmm_m() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgeuq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgeuw_xmm_xmm_xmm() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgeuw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgeuw_xmm_xmm_m() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgeuw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgew_xmm_xmm_xmm() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgew(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgew_xmm_xmm_m() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgew(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgtb_xmm_xmm_xmm() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgtb(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgtb_xmm_xmm_m() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgtb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgtd_xmm_xmm_xmm() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgtd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgtd_xmm_xmm_m() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgtd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgtq_xmm_xmm_xmm() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgtq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgtq_xmm_xmm_m() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgtq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgtub_xmm_xmm_xmm() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgtub(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgtub_xmm_xmm_m() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgtub(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgtud_xmm_xmm_xmm() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgtud(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgtud_xmm_xmm_m() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgtud(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgtuq_xmm_xmm_xmm() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgtuq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgtuq_xmm_xmm_m() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgtuq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgtuw_xmm_xmm_xmm() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgtuw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgtuw_xmm_xmm_m() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgtuw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgtw_xmm_xmm_xmm() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgtw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomgtw_xmm_xmm_m() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomgtw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 2i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomleb_xmm_xmm_xmm() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomleb(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomleb_xmm_xmm_m() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomleb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomled_xmm_xmm_xmm() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomled(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomled_xmm_xmm_m() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomled(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomleq_xmm_xmm_xmm() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomleq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomleq_xmm_xmm_m() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomleq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomleub_xmm_xmm_xmm() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomleub(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomleub_xmm_xmm_m() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomleub(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomleud_xmm_xmm_xmm() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomleud(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomleud_xmm_xmm_m() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomleud(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomleuq_xmm_xmm_xmm() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomleuq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomleuq_xmm_xmm_m() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomleuq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomleuw_xmm_xmm_xmm() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomleuw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomleuw_xmm_xmm_m() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomleuw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomlew_xmm_xmm_xmm() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomlew(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomlew_xmm_xmm_m() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomlew(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 1i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomltb_xmm_xmm_xmm() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomltb(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomltb_xmm_xmm_m() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomltb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomltd_xmm_xmm_xmm() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomltd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomltd_xmm_xmm_m() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomltd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomltq_xmm_xmm_xmm() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomltq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomltq_xmm_xmm_m() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomltq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomltub_xmm_xmm_xmm() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomltub(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomltub_xmm_xmm_m() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomltub(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomltud_xmm_xmm_xmm() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomltud(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomltud_xmm_xmm_m() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomltud(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomltuq_xmm_xmm_xmm() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomltuq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomltuq_xmm_xmm_m() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomltuq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomltuw_xmm_xmm_xmm() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomltuw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomltuw_xmm_xmm_m() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomltuw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomltw_xmm_xmm_xmm() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomltw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomltw_xmm_xmm_m() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomltw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomneqb_xmm_xmm_xmm() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomneqb(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomneqb_xmm_xmm_m() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomneqb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomneqd_xmm_xmm_xmm() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomneqd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomneqd_xmm_xmm_m() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomneqd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomneqq_xmm_xmm_xmm() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomneqq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomneqq_xmm_xmm_m() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomneqq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomnequb_xmm_xmm_xmm() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomnequb(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomnequb_xmm_xmm_m() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomnequb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomnequd_xmm_xmm_xmm() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomnequd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomnequd_xmm_xmm_m() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomnequd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomnequq_xmm_xmm_xmm() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomnequq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomnequq_xmm_xmm_m() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomnequq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomnequw_xmm_xmm_xmm() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomnequw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomnequw_xmm_xmm_m() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomnequw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomneqw_xmm_xmm_xmm() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomneqw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomneqw_xmm_xmm_m() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomneqw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressb_xmm_xmm() {
	// EVEX_Vpcompressb_xmmm128_k1z_xmm
	test_instr(16, |a| a.vpcompressb(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressb_xmmm128_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressb_m_xmm() {
	// EVEX_Vpcompressb_xmmm128_k1z_xmm
	test_instr(16, |a| a.vpcompressb(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressb_xmmm128_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressb_ymm_ymm() {
	// EVEX_Vpcompressb_ymmm256_k1z_ymm
	test_instr(16, |a| a.vpcompressb(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressb_ymmm256_k1z_ymm, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressb_m_ymm() {
	// EVEX_Vpcompressb_ymmm256_k1z_ymm
	test_instr(16, |a| a.vpcompressb(ymmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressb_ymmm256_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressb_zmm_zmm() {
	// EVEX_Vpcompressb_zmmm512_k1z_zmm
	test_instr(16, |a| a.vpcompressb(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressb_zmmm512_k1z_zmm, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressb_m_zmm() {
	// EVEX_Vpcompressb_zmmm512_k1z_zmm
	test_instr(16, |a| a.vpcompressb(zmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressb_zmmm512_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressd_xmm_xmm() {
	// EVEX_Vpcompressd_xmmm128_k1z_xmm
	test_instr(16, |a| a.vpcompressd(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressd_xmmm128_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressd_m_xmm() {
	// EVEX_Vpcompressd_xmmm128_k1z_xmm
	test_instr(16, |a| a.vpcompressd(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressd_xmmm128_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressd_ymm_ymm() {
	// EVEX_Vpcompressd_ymmm256_k1z_ymm
	test_instr(16, |a| a.vpcompressd(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressd_ymmm256_k1z_ymm, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressd_m_ymm() {
	// EVEX_Vpcompressd_ymmm256_k1z_ymm
	test_instr(16, |a| a.vpcompressd(ymmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressd_ymmm256_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressd_zmm_zmm() {
	// EVEX_Vpcompressd_zmmm512_k1z_zmm
	test_instr(16, |a| a.vpcompressd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressd_zmmm512_k1z_zmm, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressd_m_zmm() {
	// EVEX_Vpcompressd_zmmm512_k1z_zmm
	test_instr(16, |a| a.vpcompressd(zmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressd_zmmm512_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressq_xmm_xmm() {
	// EVEX_Vpcompressq_xmmm128_k1z_xmm
	test_instr(16, |a| a.vpcompressq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressq_xmmm128_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressq_m_xmm() {
	// EVEX_Vpcompressq_xmmm128_k1z_xmm
	test_instr(16, |a| a.vpcompressq(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressq_xmmm128_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressq_ymm_ymm() {
	// EVEX_Vpcompressq_ymmm256_k1z_ymm
	test_instr(16, |a| a.vpcompressq(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressq_ymmm256_k1z_ymm, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressq_m_ymm() {
	// EVEX_Vpcompressq_ymmm256_k1z_ymm
	test_instr(16, |a| a.vpcompressq(ymmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressq_ymmm256_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressq_zmm_zmm() {
	// EVEX_Vpcompressq_zmmm512_k1z_zmm
	test_instr(16, |a| a.vpcompressq(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressq_zmmm512_k1z_zmm, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressq_m_zmm() {
	// EVEX_Vpcompressq_zmmm512_k1z_zmm
	test_instr(16, |a| a.vpcompressq(zmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressq_zmmm512_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressw_xmm_xmm() {
	// EVEX_Vpcompressw_xmmm128_k1z_xmm
	test_instr(16, |a| a.vpcompressw(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressw_xmmm128_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressw_m_xmm() {
	// EVEX_Vpcompressw_xmmm128_k1z_xmm
	test_instr(16, |a| a.vpcompressw(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressw_xmmm128_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressw_ymm_ymm() {
	// EVEX_Vpcompressw_ymmm256_k1z_ymm
	test_instr(16, |a| a.vpcompressw(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressw_ymmm256_k1z_ymm, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressw_m_ymm() {
	// EVEX_Vpcompressw_ymmm256_k1z_ymm
	test_instr(16, |a| a.vpcompressw(ymmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressw_ymmm256_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressw_zmm_zmm() {
	// EVEX_Vpcompressw_zmmm512_k1z_zmm
	test_instr(16, |a| a.vpcompressw(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressw_zmmm512_k1z_zmm, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcompressw_m_zmm() {
	// EVEX_Vpcompressw_zmmm512_k1z_zmm
	test_instr(16, |a| a.vpcompressw(zmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpcompressw_zmmm512_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomq_xmm_xmm_xmm_i() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomq(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomq(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomq_xmm_xmm_m_i() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomq(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomq(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomq_xmm_xmm_xmm_u() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomq(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomq_xmm_xmm_m_u() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomq(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomtrueb_xmm_xmm_xmm() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomtrueb(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomtrueb_xmm_xmm_m() {
	// XOP_Vpcomb_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomtrueb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomtrued_xmm_xmm_xmm() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomtrued(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomtrued_xmm_xmm_m() {
	// XOP_Vpcomd_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomtrued(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomtrueq_xmm_xmm_xmm() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomtrueq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomtrueq_xmm_xmm_m() {
	// XOP_Vpcomq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomtrueq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomtrueub_xmm_xmm_xmm() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomtrueub(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomtrueub_xmm_xmm_m() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomtrueub(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomtrueud_xmm_xmm_xmm() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomtrueud(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomtrueud_xmm_xmm_m() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomtrueud(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomtrueuq_xmm_xmm_xmm() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomtrueuq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomtrueuq_xmm_xmm_m() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomtrueuq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomtrueuw_xmm_xmm_xmm() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomtrueuw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomtrueuw_xmm_xmm_m() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomtrueuw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomtruew_xmm_xmm_xmm() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomtruew(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomtruew_xmm_xmm_m() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomtruew(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 7i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomub_xmm_xmm_xmm_i() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomub(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomub(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomub_xmm_xmm_m_i() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomub(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomub(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomub_xmm_xmm_xmm_u() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomub(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomub_xmm_xmm_m_u() {
	// XOP_Vpcomub_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomub(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomud_xmm_xmm_xmm_i() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomud(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomud(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomud_xmm_xmm_m_i() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomud(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomud(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomud_xmm_xmm_xmm_u() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomud(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomud_xmm_xmm_m_u() {
	// XOP_Vpcomud_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomud(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomuq_xmm_xmm_xmm_i() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomuq(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomuq(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomuq_xmm_xmm_m_i() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomuq(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomuq(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomuq_xmm_xmm_xmm_u() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomuq(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomuq_xmm_xmm_m_u() {
	// XOP_Vpcomuq_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomuq(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomuw_xmm_xmm_xmm_i() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomuw(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomuw(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomuw_xmm_xmm_m_i() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomuw(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomuw(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomuw_xmm_xmm_xmm_u() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomuw(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomuw_xmm_xmm_m_u() {
	// XOP_Vpcomuw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomuw(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomw_xmm_xmm_xmm_i() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomw(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomw(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomw_xmm_xmm_m_i() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomw(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomw(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomw_xmm_xmm_xmm_u() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomw(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpcomw_xmm_xmm_m_u() {
	// XOP_Vpcomw_xmm_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpcomw(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpconflictd_xmm_xmm() {
	// EVEX_Vpconflictd_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vpconflictd(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpconflictd_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpconflictd_ymm_ymm() {
	// EVEX_Vpconflictd_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vpconflictd(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpconflictd_ymm_k1z_ymmm256b32, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpconflictd_zmm_zmm() {
	// EVEX_Vpconflictd_zmm_k1z_zmmm512b32
	test_instr(16, |a| a.vpconflictd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpconflictd_zmm_k1z_zmmm512b32, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpconflictd_xmm_m() {
	// EVEX_Vpconflictd_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vpconflictd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpconflictd_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpconflictd_ymm_m() {
	// EVEX_Vpconflictd_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vpconflictd(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpconflictd_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpconflictd_zmm_m() {
	// EVEX_Vpconflictd_zmm_k1z_zmmm512b32
	test_instr(16, |a| a.vpconflictd(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpconflictd_zmm_k1z_zmmm512b32, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpconflictq_xmm_xmm() {
	// EVEX_Vpconflictq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vpconflictq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpconflictq_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpconflictq_ymm_ymm() {
	// EVEX_Vpconflictq_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vpconflictq(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpconflictq_ymm_k1z_ymmm256b64, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpconflictq_zmm_zmm() {
	// EVEX_Vpconflictq_zmm_k1z_zmmm512b64
	test_instr(16, |a| a.vpconflictq(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpconflictq_zmm_k1z_zmmm512b64, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpconflictq_xmm_m() {
	// EVEX_Vpconflictq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vpconflictq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpconflictq_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpconflictq_ymm_m() {
	// EVEX_Vpconflictq_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vpconflictq(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpconflictq_ymm_k1z_ymmm256b64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpconflictq_zmm_m() {
	// EVEX_Vpconflictq_zmm_k1z_zmmm512b64
	test_instr(16, |a| a.vpconflictq(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpconflictq_zmm_k1z_zmmm512b64, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbssd_xmm_xmm_xmm() {
	// VEX_Vpdpbssd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpdpbssd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbssd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbssd_ymm_ymm_ymm() {
	// VEX_Vpdpbssd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpdpbssd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbssd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbssd_xmm_xmm_m() {
	// VEX_Vpdpbssd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpdpbssd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbssd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbssd_ymm_ymm_m() {
	// VEX_Vpdpbssd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpdpbssd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbssd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbssds_xmm_xmm_xmm() {
	// VEX_Vpdpbssds_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpdpbssds(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbssds_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbssds_ymm_ymm_ymm() {
	// VEX_Vpdpbssds_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpdpbssds(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbssds_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbssds_xmm_xmm_m() {
	// VEX_Vpdpbssds_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpdpbssds(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbssds_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbssds_ymm_ymm_m() {
	// VEX_Vpdpbssds_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpdpbssds(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbssds_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbsud_xmm_xmm_xmm() {
	// VEX_Vpdpbsud_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpdpbsud(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbsud_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbsud_ymm_ymm_ymm() {
	// VEX_Vpdpbsud_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpdpbsud(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbsud_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbsud_xmm_xmm_m() {
	// VEX_Vpdpbsud_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpdpbsud(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbsud_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbsud_ymm_ymm_m() {
	// VEX_Vpdpbsud_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpdpbsud(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbsud_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbsuds_xmm_xmm_xmm() {
	// VEX_Vpdpbsuds_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpdpbsuds(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbsuds_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbsuds_ymm_ymm_ymm() {
	// VEX_Vpdpbsuds_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpdpbsuds(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbsuds_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbsuds_xmm_xmm_m() {
	// VEX_Vpdpbsuds_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpdpbsuds(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbsuds_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbsuds_ymm_ymm_m() {
	// VEX_Vpdpbsuds_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpdpbsuds(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbsuds_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbusd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpdpbusd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpdpbusd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpdpbusd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpdpbusd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpdpbusd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpdpbusd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpdpbusd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpdpbusd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpdpbusd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpdpbusd_zmm_zmm_zmm() {
	// EVEX_Vpdpbusd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpdpbusd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpdpbusd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbusd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpdpbusd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpdpbusd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpdpbusd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpdpbusd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpdpbusd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpdpbusd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpdpbusd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpdpbusd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpdpbusd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpdpbusd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpdpbusd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpdpbusd_zmm_zmm_m() {
	// EVEX_Vpdpbusd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpdpbusd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpdpbusd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbusds_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpdpbusds_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpdpbusds(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpdpbusds_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpdpbusds(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpdpbusds_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpdpbusds_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpdpbusds(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpdpbusds_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpdpbusds(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpdpbusds_zmm_zmm_zmm() {
	// EVEX_Vpdpbusds_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpdpbusds(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpdpbusds_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbusds_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpdpbusds(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpdpbusds_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpdpbusds(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpdpbusds_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpdpbusds(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpdpbusds_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpdpbusds(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpdpbusds_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpdpbusds(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpdpbusds_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpdpbusds(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpdpbusds_zmm_zmm_m() {
	// EVEX_Vpdpbusds_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpdpbusds(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpdpbusds_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbuud_xmm_xmm_xmm() {
	// VEX_Vpdpbuud_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpdpbuud(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbuud_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbuud_ymm_ymm_ymm() {
	// VEX_Vpdpbuud_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpdpbuud(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbuud_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbuud_xmm_xmm_m() {
	// VEX_Vpdpbuud_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpdpbuud(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbuud_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbuud_ymm_ymm_m() {
	// VEX_Vpdpbuud_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpdpbuud(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbuud_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbuuds_xmm_xmm_xmm() {
	// VEX_Vpdpbuuds_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpdpbuuds(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbuuds_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbuuds_ymm_ymm_ymm() {
	// VEX_Vpdpbuuds_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpdpbuuds(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbuuds_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbuuds_xmm_xmm_m() {
	// VEX_Vpdpbuuds_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpdpbuuds(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbuuds_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpbuuds_ymm_ymm_m() {
	// VEX_Vpdpbuuds_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpdpbuuds(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpdpbuuds_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpwssd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpdpwssd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpdpwssd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpdpwssd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpdpwssd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpdpwssd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpdpwssd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpdpwssd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpdpwssd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpdpwssd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpdpwssd_zmm_zmm_zmm() {
	// EVEX_Vpdpwssd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpdpwssd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpdpwssd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpwssd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpdpwssd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpdpwssd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpdpwssd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpdpwssd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpdpwssd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpdpwssd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpdpwssd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpdpwssd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpdpwssd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpdpwssd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpdpwssd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpdpwssd_zmm_zmm_m() {
	// EVEX_Vpdpwssd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpdpwssd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpdpwssd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpwssds_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpdpwssds_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpdpwssds(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpdpwssds_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpdpwssds(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpdpwssds_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpdpwssds_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpdpwssds(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpdpwssds_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpdpwssds(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpdpwssds_zmm_zmm_zmm() {
	// EVEX_Vpdpwssds_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpdpwssds(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpdpwssds_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpdpwssds_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpdpwssds(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpdpwssds_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpdpwssds(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpdpwssds_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpdpwssds(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpdpwssds_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpdpwssds(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpdpwssds_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpdpwssds(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpdpwssds_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpdpwssds(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpdpwssds_zmm_zmm_m() {
	// EVEX_Vpdpwssds_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpdpwssds(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpdpwssds_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vperm2f128_ymm_ymm_ymm_i() {
	// VEX_Vperm2f128_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vperm2f128(ymm2, ymm3, ymm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vperm2f128_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vperm2f128(ymm2, ymm3, ymm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vperm2f128_ymm_ymm_m_i() {
	// VEX_Vperm2f128_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vperm2f128(ymm2, ymm3, ymmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vperm2f128_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vperm2f128(ymm2, ymm3, ymmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vperm2f128_ymm_ymm_ymm_u() {
	// VEX_Vperm2f128_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vperm2f128(ymm2, ymm3, ymm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vperm2f128_ymm_ymm_m_u() {
	// VEX_Vperm2f128_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vperm2f128(ymm2, ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vperm2i128_ymm_ymm_ymm_i() {
	// VEX_Vperm2i128_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vperm2i128(ymm2, ymm3, ymm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vperm2i128_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vperm2i128(ymm2, ymm3, ymm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vperm2i128_ymm_ymm_m_i() {
	// VEX_Vperm2i128_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vperm2i128(ymm2, ymm3, ymmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vperm2i128_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vperm2i128(ymm2, ymm3, ymmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vperm2i128_ymm_ymm_ymm_u() {
	// VEX_Vperm2i128_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vperm2i128(ymm2, ymm3, ymm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vperm2i128_ymm_ymm_m_u() {
	// VEX_Vperm2i128_ymm_ymm_ymmm256_imm8
	test_instr(16, |a| a.vperm2i128(ymm2, ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermb_xmm_xmm_xmm() {
	// EVEX_Vpermb_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpermb(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermb_ymm_ymm_ymm() {
	// EVEX_Vpermb_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpermb(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermb_zmm_zmm_zmm() {
	// EVEX_Vpermb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpermb(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermb_xmm_xmm_m() {
	// EVEX_Vpermb_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpermb(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermb_ymm_ymm_m() {
	// EVEX_Vpermb_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpermb(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermb_zmm_zmm_m() {
	// EVEX_Vpermb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpermb(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpermd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpermd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpermd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermd_zmm_zmm_zmm() {
	// EVEX_Vpermd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpermd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpermd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpermd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpermd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpermd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermd_zmm_zmm_m() {
	// EVEX_Vpermd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpermd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2b_xmm_xmm_xmm() {
	// EVEX_Vpermi2b_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpermi2b(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2b_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2b_ymm_ymm_ymm() {
	// EVEX_Vpermi2b_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpermi2b(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2b_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2b_zmm_zmm_zmm() {
	// EVEX_Vpermi2b_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpermi2b(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2b_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2b_xmm_xmm_m() {
	// EVEX_Vpermi2b_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpermi2b(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2b_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2b_ymm_ymm_m() {
	// EVEX_Vpermi2b_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpermi2b(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2b_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2b_zmm_zmm_m() {
	// EVEX_Vpermi2b_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpermi2b(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2b_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2d_xmm_xmm_xmm() {
	// EVEX_Vpermi2d_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpermi2d(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2d_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2d_ymm_ymm_ymm() {
	// EVEX_Vpermi2d_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpermi2d(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2d_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2d_zmm_zmm_zmm() {
	// EVEX_Vpermi2d_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpermi2d(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2d_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2d_xmm_xmm_m() {
	// EVEX_Vpermi2d_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpermi2d(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2d_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2d_ymm_ymm_m() {
	// EVEX_Vpermi2d_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpermi2d(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2d_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2d_zmm_zmm_m() {
	// EVEX_Vpermi2d_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpermi2d(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2d_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2pd_xmm_xmm_xmm() {
	// EVEX_Vpermi2pd_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpermi2pd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2pd_ymm_ymm_ymm() {
	// EVEX_Vpermi2pd_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpermi2pd(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2pd_zmm_zmm_zmm() {
	// EVEX_Vpermi2pd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpermi2pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2pd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2pd_xmm_xmm_m() {
	// EVEX_Vpermi2pd_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpermi2pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2pd_ymm_ymm_m() {
	// EVEX_Vpermi2pd_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpermi2pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2pd_zmm_zmm_m() {
	// EVEX_Vpermi2pd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpermi2pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2pd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2ps_xmm_xmm_xmm() {
	// EVEX_Vpermi2ps_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpermi2ps(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2ps_ymm_ymm_ymm() {
	// EVEX_Vpermi2ps_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpermi2ps(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2ps_zmm_zmm_zmm() {
	// EVEX_Vpermi2ps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpermi2ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2ps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2ps_xmm_xmm_m() {
	// EVEX_Vpermi2ps_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpermi2ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2ps_ymm_ymm_m() {
	// EVEX_Vpermi2ps_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpermi2ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2ps_zmm_zmm_m() {
	// EVEX_Vpermi2ps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpermi2ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2ps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2q_xmm_xmm_xmm() {
	// EVEX_Vpermi2q_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpermi2q(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2q_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2q_ymm_ymm_ymm() {
	// EVEX_Vpermi2q_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpermi2q(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2q_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2q_zmm_zmm_zmm() {
	// EVEX_Vpermi2q_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpermi2q(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2q_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2q_xmm_xmm_m() {
	// EVEX_Vpermi2q_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpermi2q(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2q_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2q_ymm_ymm_m() {
	// EVEX_Vpermi2q_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpermi2q(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2q_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2q_zmm_zmm_m() {
	// EVEX_Vpermi2q_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpermi2q(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2q_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2w_xmm_xmm_xmm() {
	// EVEX_Vpermi2w_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpermi2w(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2w_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2w_ymm_ymm_ymm() {
	// EVEX_Vpermi2w_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpermi2w(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2w_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2w_zmm_zmm_zmm() {
	// EVEX_Vpermi2w_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpermi2w(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2w_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2w_xmm_xmm_m() {
	// EVEX_Vpermi2w_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpermi2w(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2w_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2w_ymm_ymm_m() {
	// EVEX_Vpermi2w_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpermi2w(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2w_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermi2w_zmm_zmm_m() {
	// EVEX_Vpermi2w_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpermi2w(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermi2w_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2pd_xmm_xmm_xmm_xmm_i() {
	// VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4
	test_instr(16, |a| a.vpermil2pd(xmm2, xmm3, xmm4, xmm5, 3i32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4
	test_instr(16, |a| a.vpermil2pd(xmm2, xmm3, xmm4, xmm5, 3).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2pd_xmm_xmm_m_xmm_i() {
	// VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4
	test_instr(16, |a| a.vpermil2pd(xmm2, xmm3, xmmword_ptr(si), xmm5, 3i32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4
	test_instr(16, |a| a.vpermil2pd(xmm2, xmm3, xmmword_ptr(si), xmm5, 3).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2pd_ymm_ymm_ymm_ymm_i() {
	// VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4
	test_instr(16, |a| a.vpermil2pd(ymm2, ymm3, ymm4, ymm5, 3i32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4
	test_instr(16, |a| a.vpermil2pd(ymm2, ymm3, ymm4, ymm5, 3).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2pd_ymm_ymm_m_ymm_i() {
	// VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4
	test_instr(16, |a| a.vpermil2pd(ymm2, ymm3, ymmword_ptr(si), ymm5, 3i32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4
	test_instr(16, |a| a.vpermil2pd(ymm2, ymm3, ymmword_ptr(si), ymm5, 3).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2pd_xmm_xmm_xmm_m_i() {
	// VEX_Vpermil2pd_xmm_xmm_xmm_xmmm128_imm4
	test_instr(16, |a| a.vpermil2pd(xmm2, xmm3, xmm4, xmmword_ptr(si), 3i32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_xmm_xmm_xmm_xmmm128_imm4, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpermil2pd_xmm_xmm_xmm_xmmm128_imm4
	test_instr(16, |a| a.vpermil2pd(xmm2, xmm3, xmm4, xmmword_ptr(si), 3).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_xmm_xmm_xmm_xmmm128_imm4, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2pd_ymm_ymm_ymm_m_i() {
	// VEX_Vpermil2pd_ymm_ymm_ymm_ymmm256_imm4
	test_instr(16, |a| a.vpermil2pd(ymm2, ymm3, ymm4, ymmword_ptr(si), 3i32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_ymm_ymm_ymm_ymmm256_imm4, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpermil2pd_ymm_ymm_ymm_ymmm256_imm4
	test_instr(16, |a| a.vpermil2pd(ymm2, ymm3, ymm4, ymmword_ptr(si), 3).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_ymm_ymm_ymm_ymmm256_imm4, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2pd_xmm_xmm_xmm_xmm_u() {
	// VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4
	test_instr(16, |a| a.vpermil2pd(xmm2, xmm3, xmm4, xmm5, 3u32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5, 3u32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2pd_xmm_xmm_m_xmm_u() {
	// VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4
	test_instr(16, |a| a.vpermil2pd(xmm2, xmm3, xmmword_ptr(si), xmm5, 3u32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5, 3u32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2pd_ymm_ymm_ymm_ymm_u() {
	// VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4
	test_instr(16, |a| a.vpermil2pd(ymm2, ymm3, ymm4, ymm5, 3u32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5, 3u32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2pd_ymm_ymm_m_ymm_u() {
	// VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4
	test_instr(16, |a| a.vpermil2pd(ymm2, ymm3, ymmword_ptr(si), ymm5, 3u32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5, 3u32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2pd_xmm_xmm_xmm_m_u() {
	// VEX_Vpermil2pd_xmm_xmm_xmm_xmmm128_imm4
	test_instr(16, |a| a.vpermil2pd(xmm2, xmm3, xmm4, xmmword_ptr(si), 3u32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_xmm_xmm_xmm_xmmm128_imm4, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3u32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2pd_ymm_ymm_ymm_m_u() {
	// VEX_Vpermil2pd_ymm_ymm_ymm_ymmm256_imm4
	test_instr(16, |a| a.vpermil2pd(ymm2, ymm3, ymm4, ymmword_ptr(si), 3u32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2pd_ymm_ymm_ymm_ymmm256_imm4, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3u32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2ps_xmm_xmm_xmm_xmm_i() {
	// VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4
	test_instr(16, |a| a.vpermil2ps(xmm2, xmm3, xmm4, xmm5, 3i32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4
	test_instr(16, |a| a.vpermil2ps(xmm2, xmm3, xmm4, xmm5, 3).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2ps_xmm_xmm_m_xmm_i() {
	// VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4
	test_instr(16, |a| a.vpermil2ps(xmm2, xmm3, xmmword_ptr(si), xmm5, 3i32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4
	test_instr(16, |a| a.vpermil2ps(xmm2, xmm3, xmmword_ptr(si), xmm5, 3).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2ps_ymm_ymm_ymm_ymm_i() {
	// VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4
	test_instr(16, |a| a.vpermil2ps(ymm2, ymm3, ymm4, ymm5, 3i32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4
	test_instr(16, |a| a.vpermil2ps(ymm2, ymm3, ymm4, ymm5, 3).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2ps_ymm_ymm_m_ymm_i() {
	// VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4
	test_instr(16, |a| a.vpermil2ps(ymm2, ymm3, ymmword_ptr(si), ymm5, 3i32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4
	test_instr(16, |a| a.vpermil2ps(ymm2, ymm3, ymmword_ptr(si), ymm5, 3).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5, 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2ps_xmm_xmm_xmm_m_i() {
	// VEX_Vpermil2ps_xmm_xmm_xmm_xmmm128_imm4
	test_instr(16, |a| a.vpermil2ps(xmm2, xmm3, xmm4, xmmword_ptr(si), 3i32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_xmm_xmm_xmm_xmmm128_imm4, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpermil2ps_xmm_xmm_xmm_xmmm128_imm4
	test_instr(16, |a| a.vpermil2ps(xmm2, xmm3, xmm4, xmmword_ptr(si), 3).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_xmm_xmm_xmm_xmmm128_imm4, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2ps_ymm_ymm_ymm_m_i() {
	// VEX_Vpermil2ps_ymm_ymm_ymm_ymmm256_imm4
	test_instr(16, |a| a.vpermil2ps(ymm2, ymm3, ymm4, ymmword_ptr(si), 3i32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_ymm_ymm_ymm_ymmm256_imm4, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vpermil2ps_ymm_ymm_ymm_ymmm256_imm4
	test_instr(16, |a| a.vpermil2ps(ymm2, ymm3, ymm4, ymmword_ptr(si), 3).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_ymm_ymm_ymm_ymmm256_imm4, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2ps_xmm_xmm_xmm_xmm_u() {
	// VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4
	test_instr(16, |a| a.vpermil2ps(xmm2, xmm3, xmm4, xmm5, 3u32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5, 3u32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2ps_xmm_xmm_m_xmm_u() {
	// VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4
	test_instr(16, |a| a.vpermil2ps(xmm2, xmm3, xmmword_ptr(si), xmm5, 3u32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5, 3u32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2ps_ymm_ymm_ymm_ymm_u() {
	// VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4
	test_instr(16, |a| a.vpermil2ps(ymm2, ymm3, ymm4, ymm5, 3u32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, Register::YMM2, Register::YMM3, Register::YMM4, Register::YMM5, 3u32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2ps_ymm_ymm_m_ymm_u() {
	// VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4
	test_instr(16, |a| a.vpermil2ps(ymm2, ymm3, ymmword_ptr(si), ymm5, 3u32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM5, 3u32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2ps_xmm_xmm_xmm_m_u() {
	// VEX_Vpermil2ps_xmm_xmm_xmm_xmmm128_imm4
	test_instr(16, |a| a.vpermil2ps(xmm2, xmm3, xmm4, xmmword_ptr(si), 3u32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_xmm_xmm_xmm_xmmm128_imm4, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3u32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermil2ps_ymm_ymm_ymm_m_u() {
	// VEX_Vpermil2ps_ymm_ymm_ymm_ymmm256_imm4
	test_instr(16, |a| a.vpermil2ps(ymm2, ymm3, ymm4, ymmword_ptr(si), 3u32).unwrap(),
		Instruction::with5(Code::VEX_Vpermil2ps_ymm_ymm_ymm_ymmm256_imm4, Register::YMM2, Register::YMM3, Register::YMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 3u32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermilpd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermilpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpermilpd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpermilpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpermilpd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilpd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermilpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpermilpd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpermilpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpermilpd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilpd_zmm_zmm_zmm() {
	// EVEX_Vpermilpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpermilpd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermilpd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpermilpd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermilpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpermilpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpermilpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpermilpd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilpd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpermilpd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermilpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpermilpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpermilpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpermilpd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilpd_zmm_zmm_m() {
	// EVEX_Vpermilpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpermilpd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermilpd_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermilpd_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpermilpd(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpermilpd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8
		test_instr(16, |a| a.vpermilpd(xmm2.k1(), xmm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermilpd_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpermilpd(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpermilpd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8
		test_instr(16, |a| a.vpermilpd(xmm2.k1(), xmm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilpd_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermilpd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermilpd(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpermilpd_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermilpd(ymm2.k1(), ymm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermilpd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermilpd(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpermilpd_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermilpd(ymm2.k1(), ymm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilpd_zmm_zmm_i() {
	// EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermilpd(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermilpd(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermilpd_xmm_m_i() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8
		test_instr(16, |a| a.vpermilpd(xmm2.k1(), dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermilpd_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpermilpd(xmm2, xmmword_ptr(si), -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpermilpd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8
		test_instr(16, |a| a.vpermilpd(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8
		test_instr(16, |a| a.vpermilpd(xmm2.k1(), dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermilpd_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpermilpd(xmm2, xmmword_ptr(si), -5).unwrap(),
			Instruction::with3(Code::VEX_Vpermilpd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8
		test_instr(16, |a| a.vpermilpd(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilpd_ymm_m_i() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermilpd(ymm2.k1(), dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermilpd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermilpd(ymm2, ymmword_ptr(si), -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpermilpd_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermilpd(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermilpd(ymm2.k1(), dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermilpd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermilpd(ymm2, ymmword_ptr(si), -5).unwrap(),
			Instruction::with3(Code::VEX_Vpermilpd_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermilpd(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilpd_zmm_m_i() {
	// EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermilpd(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermilpd(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermilpd_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermilpd_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpermilpd(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpermilpd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8
		test_instr(16, |a| a.vpermilpd(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilpd_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermilpd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermilpd(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpermilpd_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermilpd(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilpd_zmm_zmm_u() {
	// EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermilpd(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermilpd_xmm_m_u() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8
		test_instr(16, |a| a.vpermilpd(xmm2.k1(), dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermilpd_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpermilpd(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpermilpd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8
		test_instr(16, |a| a.vpermilpd(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilpd_ymm_m_u() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermilpd(ymm2.k1(), dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermilpd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermilpd(ymm2, ymmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpermilpd_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermilpd(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilpd_zmm_m_u() {
	// EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermilpd(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermilps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermilps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpermilps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpermilps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpermilps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermilps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpermilps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpermilps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpermilps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilps_zmm_zmm_zmm() {
	// EVEX_Vpermilps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpermilps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermilps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpermilps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermilps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpermilps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpermilps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpermilps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpermilps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermilps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpermilps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpermilps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpermilps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilps_zmm_zmm_m() {
	// EVEX_Vpermilps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpermilps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermilps_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermilps_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpermilps(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpermilps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpermilps(xmm2.k1(), xmm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermilps_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpermilps(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpermilps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpermilps(xmm2.k1(), xmm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilps_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermilps_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermilps(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpermilps_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpermilps(ymm2.k1(), ymm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermilps_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermilps(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpermilps_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpermilps(ymm2.k1(), ymm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilps_zmm_zmm_i() {
	// EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpermilps(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpermilps(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermilps_xmm_m_i() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpermilps(xmm2.k1(), dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermilps_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpermilps(xmm2, xmmword_ptr(si), -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpermilps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpermilps(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpermilps(xmm2.k1(), dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermilps_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpermilps(xmm2, xmmword_ptr(si), -5).unwrap(),
			Instruction::with3(Code::VEX_Vpermilps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpermilps(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilps_ymm_m_i() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpermilps(ymm2.k1(), dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermilps_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermilps(ymm2, ymmword_ptr(si), -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpermilps_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpermilps(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpermilps(ymm2.k1(), dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermilps_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermilps(ymm2, ymmword_ptr(si), -5).unwrap(),
			Instruction::with3(Code::VEX_Vpermilps_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpermilps(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilps_zmm_m_i() {
	// EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpermilps(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpermilps(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermilps_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermilps_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpermilps(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpermilps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpermilps(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilps_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermilps_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermilps(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpermilps_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpermilps(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilps_zmm_zmm_u() {
	// EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpermilps(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermilps_xmm_m_u() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpermilps(xmm2.k1(), dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermilps_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpermilps(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpermilps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpermilps(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilps_ymm_m_u() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpermilps(ymm2.k1(), dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermilps_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermilps(ymm2, ymmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpermilps_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpermilps(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermilps_zmm_m_u() {
	// EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpermilps(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermpd_ymm_ymm_ymm() {
	// EVEX_Vpermpd_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpermpd(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermpd_zmm_zmm_zmm() {
	// EVEX_Vpermpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpermpd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermpd_ymm_ymm_m() {
	// EVEX_Vpermpd_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpermpd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermpd_zmm_zmm_m() {
	// EVEX_Vpermpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpermpd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermpd_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermpd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermpd(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpermpd_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermpd(ymm2.k1(), ymm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermpd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermpd(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpermpd_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermpd(ymm2.k1(), ymm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermpd_zmm_zmm_i() {
	// EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermpd(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermpd(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermpd_ymm_m_i() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermpd(ymm2.k1(), dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermpd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermpd(ymm2, ymmword_ptr(si), -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpermpd_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermpd(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermpd(ymm2.k1(), dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermpd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermpd(ymm2, ymmword_ptr(si), -5).unwrap(),
			Instruction::with3(Code::VEX_Vpermpd_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermpd(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermpd_zmm_m_i() {
	// EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermpd(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermpd(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermpd_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermpd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermpd(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpermpd_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermpd(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermpd_zmm_zmm_u() {
	// EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermpd(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermpd_ymm_m_u() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermpd(ymm2.k1(), dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermpd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermpd(ymm2, ymmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpermpd_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermpd(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermpd_zmm_m_u() {
	// EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermpd(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpermps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpermps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpermps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermps_zmm_zmm_zmm() {
	// EVEX_Vpermps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpermps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpermps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpermps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpermps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpermps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermps_zmm_zmm_m() {
	// EVEX_Vpermps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpermps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermq_ymm_ymm_ymm() {
	// EVEX_Vpermq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpermq(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermq_zmm_zmm_zmm() {
	// EVEX_Vpermq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpermq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermq_ymm_ymm_m() {
	// EVEX_Vpermq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpermq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermq_zmm_zmm_m() {
	// EVEX_Vpermq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpermq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermq_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermq_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermq(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpermq_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermq(ymm2.k1(), ymm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermq_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermq(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpermq_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermq(ymm2.k1(), ymm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermq_zmm_zmm_i() {
	// EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermq(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermq(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermq_ymm_m_i() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermq(ymm2.k1(), dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermq_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermq(ymm2, ymmword_ptr(si), -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpermq_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermq(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermq(ymm2.k1(), dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermq_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermq(ymm2, ymmword_ptr(si), -5).unwrap(),
			Instruction::with3(Code::VEX_Vpermq_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermq(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermq_zmm_m_i() {
	// EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermq(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermq(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermq_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpermq_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermq(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpermq_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermq(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermq_zmm_zmm_u() {
	// EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermq(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermq_ymm_m_u() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermq(ymm2.k1(), dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpermq_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpermq(ymm2, ymmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpermq_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpermq(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpermq_zmm_m_u() {
	// EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpermq(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2b_xmm_xmm_xmm() {
	// EVEX_Vpermt2b_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpermt2b(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2b_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2b_ymm_ymm_ymm() {
	// EVEX_Vpermt2b_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpermt2b(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2b_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2b_zmm_zmm_zmm() {
	// EVEX_Vpermt2b_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpermt2b(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2b_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2b_xmm_xmm_m() {
	// EVEX_Vpermt2b_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpermt2b(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2b_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2b_ymm_ymm_m() {
	// EVEX_Vpermt2b_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpermt2b(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2b_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2b_zmm_zmm_m() {
	// EVEX_Vpermt2b_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpermt2b(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2b_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2d_xmm_xmm_xmm() {
	// EVEX_Vpermt2d_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpermt2d(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2d_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2d_ymm_ymm_ymm() {
	// EVEX_Vpermt2d_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpermt2d(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2d_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2d_zmm_zmm_zmm() {
	// EVEX_Vpermt2d_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpermt2d(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2d_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2d_xmm_xmm_m() {
	// EVEX_Vpermt2d_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpermt2d(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2d_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2d_ymm_ymm_m() {
	// EVEX_Vpermt2d_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpermt2d(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2d_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2d_zmm_zmm_m() {
	// EVEX_Vpermt2d_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpermt2d(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2d_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2pd_xmm_xmm_xmm() {
	// EVEX_Vpermt2pd_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpermt2pd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2pd_ymm_ymm_ymm() {
	// EVEX_Vpermt2pd_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpermt2pd(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2pd_zmm_zmm_zmm() {
	// EVEX_Vpermt2pd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpermt2pd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2pd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2pd_xmm_xmm_m() {
	// EVEX_Vpermt2pd_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpermt2pd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2pd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2pd_ymm_ymm_m() {
	// EVEX_Vpermt2pd_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpermt2pd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2pd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2pd_zmm_zmm_m() {
	// EVEX_Vpermt2pd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpermt2pd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2pd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2ps_xmm_xmm_xmm() {
	// EVEX_Vpermt2ps_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpermt2ps(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2ps_ymm_ymm_ymm() {
	// EVEX_Vpermt2ps_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpermt2ps(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2ps_zmm_zmm_zmm() {
	// EVEX_Vpermt2ps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpermt2ps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2ps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2ps_xmm_xmm_m() {
	// EVEX_Vpermt2ps_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpermt2ps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2ps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2ps_ymm_ymm_m() {
	// EVEX_Vpermt2ps_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpermt2ps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2ps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2ps_zmm_zmm_m() {
	// EVEX_Vpermt2ps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpermt2ps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2ps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2q_xmm_xmm_xmm() {
	// EVEX_Vpermt2q_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpermt2q(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2q_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2q_ymm_ymm_ymm() {
	// EVEX_Vpermt2q_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpermt2q(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2q_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2q_zmm_zmm_zmm() {
	// EVEX_Vpermt2q_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpermt2q(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2q_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2q_xmm_xmm_m() {
	// EVEX_Vpermt2q_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpermt2q(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2q_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2q_ymm_ymm_m() {
	// EVEX_Vpermt2q_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpermt2q(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2q_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2q_zmm_zmm_m() {
	// EVEX_Vpermt2q_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpermt2q(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2q_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2w_xmm_xmm_xmm() {
	// EVEX_Vpermt2w_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpermt2w(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2w_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2w_ymm_ymm_ymm() {
	// EVEX_Vpermt2w_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpermt2w(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2w_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2w_zmm_zmm_zmm() {
	// EVEX_Vpermt2w_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpermt2w(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2w_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2w_xmm_xmm_m() {
	// EVEX_Vpermt2w_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpermt2w(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2w_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2w_ymm_ymm_m() {
	// EVEX_Vpermt2w_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpermt2w(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2w_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermt2w_zmm_zmm_m() {
	// EVEX_Vpermt2w_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpermt2w(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermt2w_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermw_xmm_xmm_xmm() {
	// EVEX_Vpermw_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpermw(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermw_ymm_ymm_ymm() {
	// EVEX_Vpermw_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpermw(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermw_zmm_zmm_zmm() {
	// EVEX_Vpermw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpermw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermw_xmm_xmm_m() {
	// EVEX_Vpermw_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpermw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermw_ymm_ymm_m() {
	// EVEX_Vpermw_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpermw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpermw_zmm_zmm_m() {
	// EVEX_Vpermw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpermw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpermw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandb_xmm_xmm() {
	// EVEX_Vpexpandb_xmm_k1z_xmmm128
	test_instr(16, |a| a.vpexpandb(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandb_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandb_ymm_ymm() {
	// EVEX_Vpexpandb_ymm_k1z_ymmm256
	test_instr(16, |a| a.vpexpandb(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandb_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandb_zmm_zmm() {
	// EVEX_Vpexpandb_zmm_k1z_zmmm512
	test_instr(16, |a| a.vpexpandb(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandb_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandb_xmm_m() {
	// EVEX_Vpexpandb_xmm_k1z_xmmm128
	test_instr(16, |a| a.vpexpandb(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandb_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandb_ymm_m() {
	// EVEX_Vpexpandb_ymm_k1z_ymmm256
	test_instr(16, |a| a.vpexpandb(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandb_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandb_zmm_m() {
	// EVEX_Vpexpandb_zmm_k1z_zmmm512
	test_instr(16, |a| a.vpexpandb(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandb_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandd_xmm_xmm() {
	// EVEX_Vpexpandd_xmm_k1z_xmmm128
	test_instr(16, |a| a.vpexpandd(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandd_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandd_ymm_ymm() {
	// EVEX_Vpexpandd_ymm_k1z_ymmm256
	test_instr(16, |a| a.vpexpandd(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandd_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandd_zmm_zmm() {
	// EVEX_Vpexpandd_zmm_k1z_zmmm512
	test_instr(16, |a| a.vpexpandd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandd_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandd_xmm_m() {
	// EVEX_Vpexpandd_xmm_k1z_xmmm128
	test_instr(16, |a| a.vpexpandd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandd_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandd_ymm_m() {
	// EVEX_Vpexpandd_ymm_k1z_ymmm256
	test_instr(16, |a| a.vpexpandd(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandd_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandd_zmm_m() {
	// EVEX_Vpexpandd_zmm_k1z_zmmm512
	test_instr(16, |a| a.vpexpandd(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandd_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandq_xmm_xmm() {
	// EVEX_Vpexpandq_xmm_k1z_xmmm128
	test_instr(16, |a| a.vpexpandq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandq_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandq_ymm_ymm() {
	// EVEX_Vpexpandq_ymm_k1z_ymmm256
	test_instr(16, |a| a.vpexpandq(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandq_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandq_zmm_zmm() {
	// EVEX_Vpexpandq_zmm_k1z_zmmm512
	test_instr(16, |a| a.vpexpandq(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandq_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandq_xmm_m() {
	// EVEX_Vpexpandq_xmm_k1z_xmmm128
	test_instr(16, |a| a.vpexpandq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandq_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandq_ymm_m() {
	// EVEX_Vpexpandq_ymm_k1z_ymmm256
	test_instr(16, |a| a.vpexpandq(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandq_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandq_zmm_m() {
	// EVEX_Vpexpandq_zmm_k1z_zmmm512
	test_instr(16, |a| a.vpexpandq(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandq_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandw_xmm_xmm() {
	// EVEX_Vpexpandw_xmm_k1z_xmmm128
	test_instr(16, |a| a.vpexpandw(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandw_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandw_ymm_ymm() {
	// EVEX_Vpexpandw_ymm_k1z_ymmm256
	test_instr(16, |a| a.vpexpandw(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandw_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandw_zmm_zmm() {
	// EVEX_Vpexpandw_zmm_k1z_zmmm512
	test_instr(16, |a| a.vpexpandw(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandw_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandw_xmm_m() {
	// EVEX_Vpexpandw_xmm_k1z_xmmm128
	test_instr(16, |a| a.vpexpandw(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandw_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandw_ymm_m() {
	// EVEX_Vpexpandw_ymm_k1z_ymmm256
	test_instr(16, |a| a.vpexpandw(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandw_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpexpandw_zmm_m() {
	// EVEX_Vpexpandw_zmm_k1z_zmmm512
	test_instr(16, |a| a.vpexpandw(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpexpandw_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpextrb_r32_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrb_r32m8_xmm_imm8
		test_instr(16, |a| a.vpextrb(edx, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpextrb_r32m8_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrb_r32m8_xmm_imm8
		test_instr(16, |a| a.vpextrb(edx, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrb_r32m8_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrb_r32m8_xmm_imm8
		test_instr(16, |a| a.vpextrb(edx, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpextrb_r32m8_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrb_r32m8_xmm_imm8
		test_instr(16, |a| a.vpextrb(edx, xmm3, -5).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrb_r32m8_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpextrb_m_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrb_r32m8_xmm_imm8
		test_instr(16, |a| a.vpextrb(dword_ptr(si), xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpextrb_r32m8_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrb_r32m8_xmm_imm8
		test_instr(16, |a| a.vpextrb(dword_ptr(si), xmm3, -5i32).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrb_r32m8_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrb_r32m8_xmm_imm8
		test_instr(16, |a| a.vpextrb(dword_ptr(si), xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpextrb_r32m8_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrb_r32m8_xmm_imm8
		test_instr(16, |a| a.vpextrb(dword_ptr(si), xmm3, -5).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrb_r32m8_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpextrb_r32_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrb_r32m8_xmm_imm8
		test_instr(16, |a| a.vpextrb(edx, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpextrb_r32m8_xmm_imm8, Register::EDX, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrb_r32m8_xmm_imm8
		test_instr(16, |a| a.vpextrb(edx, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrb_r32m8_xmm_imm8, Register::EDX, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpextrb_m_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrb_r32m8_xmm_imm8
		test_instr(16, |a| a.vpextrb(dword_ptr(si), xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpextrb_r32m8_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrb_r32m8_xmm_imm8
		test_instr(16, |a| a.vpextrb(dword_ptr(si), xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrb_r32m8_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpextrd_r32_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrd_rm32_xmm_imm8
		test_instr(16, |a| a.vpextrd(edx, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpextrd_rm32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrd_rm32_xmm_imm8
		test_instr(16, |a| a.vpextrd(edx, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrd_rm32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrd_rm32_xmm_imm8
		test_instr(16, |a| a.vpextrd(edx, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpextrd_rm32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrd_rm32_xmm_imm8
		test_instr(16, |a| a.vpextrd(edx, xmm3, -5).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrd_rm32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpextrd_m_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrd_rm32_xmm_imm8
		test_instr(16, |a| a.vpextrd(dword_ptr(si), xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpextrd_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrd_rm32_xmm_imm8
		test_instr(16, |a| a.vpextrd(dword_ptr(si), xmm3, -5i32).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrd_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrd_rm32_xmm_imm8
		test_instr(16, |a| a.vpextrd(dword_ptr(si), xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpextrd_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrd_rm32_xmm_imm8
		test_instr(16, |a| a.vpextrd(dword_ptr(si), xmm3, -5).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrd_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpextrd_r32_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrd_rm32_xmm_imm8
		test_instr(16, |a| a.vpextrd(edx, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpextrd_rm32_xmm_imm8, Register::EDX, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrd_rm32_xmm_imm8
		test_instr(16, |a| a.vpextrd(edx, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrd_rm32_xmm_imm8, Register::EDX, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpextrd_m_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrd_rm32_xmm_imm8
		test_instr(16, |a| a.vpextrd(dword_ptr(si), xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpextrd_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrd_rm32_xmm_imm8
		test_instr(16, |a| a.vpextrd(dword_ptr(si), xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrd_rm32_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpextrw_r32_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrw_r32_xmm_imm8
		test_instr(16, |a| a.vpextrw(edx, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpextrw_r32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrw_r32_xmm_imm8
		test_instr(16, |a| a.vpextrw(edx, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrw_r32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrw_r32_xmm_imm8
		test_instr(16, |a| a.vpextrw(edx, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpextrw_r32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrw_r32_xmm_imm8
		test_instr(16, |a| a.vpextrw(edx, xmm3, -5).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrw_r32_xmm_imm8, Register::EDX, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpextrw_m_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrw_r32m16_xmm_imm8
		test_instr(16, |a| a.vpextrw(dword_ptr(si), xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpextrw_r32m16_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrw_r32m16_xmm_imm8
		test_instr(16, |a| a.vpextrw(dword_ptr(si), xmm3, -5i32).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrw_r32m16_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrw_r32m16_xmm_imm8
		test_instr(16, |a| a.vpextrw(dword_ptr(si), xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpextrw_r32m16_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrw_r32m16_xmm_imm8
		test_instr(16, |a| a.vpextrw(dword_ptr(si), xmm3, -5).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrw_r32m16_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpextrw_r32_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrw_r32_xmm_imm8
		test_instr(16, |a| a.vpextrw(edx, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpextrw_r32_xmm_imm8, Register::EDX, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrw_r32_xmm_imm8
		test_instr(16, |a| a.vpextrw(edx, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrw_r32_xmm_imm8, Register::EDX, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpextrw_m_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpextrw_r32m16_xmm_imm8
		test_instr(16, |a| a.vpextrw(dword_ptr(si), xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpextrw_r32m16_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpextrw_r32m16_xmm_imm8
		test_instr(16, |a| a.vpextrw(dword_ptr(si), xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::EVEX_Vpextrw_r32m16_xmm_imm8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpgatherdd_xmm_m() {
	// EVEX_Vpgatherdd_xmm_k1_vm32x
	test_instr(16, |a| a.vpgatherdd(xmm2.k1(), ptr(edx+xmm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpgatherdd_xmm_k1_vm32x, Register::XMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpgatherdd_ymm_m() {
	// EVEX_Vpgatherdd_ymm_k1_vm32y
	test_instr(16, |a| a.vpgatherdd(ymm2.k1(), ptr(edx+ymm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpgatherdd_ymm_k1_vm32y, Register::YMM2, MemoryOperand::new(Register::EDX, Register::YMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpgatherdd_zmm_m() {
	// EVEX_Vpgatherdd_zmm_k1_vm32z
	test_instr(16, |a| a.vpgatherdd(zmm2.k1(), ptr(edx+zmm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpgatherdd_zmm_k1_vm32z, Register::ZMM2, MemoryOperand::new(Register::EDX, Register::ZMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpgatherdd_xmm_m_xmm() {
	// VEX_Vpgatherdd_xmm_vm32x_xmm
	test_instr(16, |a| a.vpgatherdd_3(xmm2, ptr(edx+xmm3), xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpgatherdd_xmm_vm32x_xmm, Register::XMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpgatherdd_ymm_m_ymm() {
	// VEX_Vpgatherdd_ymm_vm32y_ymm
	test_instr(16, |a| a.vpgatherdd_3(ymm2, ptr(edx+ymm3), ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpgatherdd_ymm_vm32y_ymm, Register::YMM2, MemoryOperand::new(Register::EDX, Register::YMM3, 1, 0x0i64, 0, false, Register::None), Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpgatherdq_xmm_m() {
	// EVEX_Vpgatherdq_xmm_k1_vm32x
	test_instr(16, |a| a.vpgatherdq(xmm2.k1(), ptr(edx+xmm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpgatherdq_xmm_k1_vm32x, Register::XMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpgatherdq_ymm_m() {
	// EVEX_Vpgatherdq_ymm_k1_vm32x
	test_instr(16, |a| a.vpgatherdq(ymm2.k1(), ptr(edx+xmm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpgatherdq_ymm_k1_vm32x, Register::YMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpgatherdq_zmm_m() {
	// EVEX_Vpgatherdq_zmm_k1_vm32y
	test_instr(16, |a| a.vpgatherdq(zmm2.k1(), ptr(edx+ymm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpgatherdq_zmm_k1_vm32y, Register::ZMM2, MemoryOperand::new(Register::EDX, Register::YMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpgatherdq_xmm_m_xmm() {
	// VEX_Vpgatherdq_xmm_vm32x_xmm
	test_instr(16, |a| a.vpgatherdq_3(xmm2, ptr(edx+xmm3), xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpgatherdq_xmm_vm32x_xmm, Register::XMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpgatherdq_ymm_m_ymm() {
	// VEX_Vpgatherdq_ymm_vm32x_ymm
	test_instr(16, |a| a.vpgatherdq_3(ymm2, ptr(edx+xmm3), ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpgatherdq_ymm_vm32x_ymm, Register::YMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None), Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpgatherqd_xmm_m() {
	/* if op1.index().is_xmm() */ {
		// EVEX_Vpgatherqd_xmm_k1_vm64x
		test_instr(16, |a| a.vpgatherqd(xmm2.k1(), ptr(edx+xmm3)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpgatherqd_xmm_k1_vm64x, Register::XMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.index().is_ymm() */ {
		// EVEX_Vpgatherqd_xmm_k1_vm64y
		test_instr(16, |a| a.vpgatherqd(xmm2.k1(), ptr(edx+ymm3)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpgatherqd_xmm_k1_vm64y, Register::XMM2, MemoryOperand::new(Register::EDX, Register::YMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpgatherqd_xmm_k1_vm64y
		test_invalid_instr(16, |a| assert!(a.vpgatherqd(xmm2.k1(), ptr(edx+zmm1)).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpgatherqd_ymm_m() {
	// EVEX_Vpgatherqd_ymm_k1_vm64z
	test_instr(16, |a| a.vpgatherqd(ymm2.k1(), ptr(edx+zmm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpgatherqd_ymm_k1_vm64z, Register::YMM2, MemoryOperand::new(Register::EDX, Register::ZMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpgatherqd_xmm_m_xmm() {
	/* if op1.index().is_xmm() */ {
		// VEX_Vpgatherqd_xmm_vm64x_xmm
		test_instr(16, |a| a.vpgatherqd_3(xmm2, ptr(edx+xmm3), xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpgatherqd_xmm_vm64x_xmm, Register::XMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1.index().is_ymm() */ {
		// VEX_Vpgatherqd_xmm_vm64y_xmm
		test_instr(16, |a| a.vpgatherqd_3(xmm2, ptr(edx+ymm3), xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpgatherqd_xmm_vm64y_xmm, Register::XMM2, MemoryOperand::new(Register::EDX, Register::YMM3, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// VEX_Vpgatherqd_xmm_vm64y_xmm
		test_invalid_instr(16, |a| assert!(a.vpgatherqd_3(xmm2, ptr(edx+zmm1), xmm4).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpgatherqq_xmm_m() {
	// EVEX_Vpgatherqq_xmm_k1_vm64x
	test_instr(16, |a| a.vpgatherqq(xmm2.k1(), ptr(edx+xmm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpgatherqq_xmm_k1_vm64x, Register::XMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpgatherqq_ymm_m() {
	// EVEX_Vpgatherqq_ymm_k1_vm64y
	test_instr(16, |a| a.vpgatherqq(ymm2.k1(), ptr(edx+ymm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpgatherqq_ymm_k1_vm64y, Register::YMM2, MemoryOperand::new(Register::EDX, Register::YMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpgatherqq_zmm_m() {
	// EVEX_Vpgatherqq_zmm_k1_vm64z
	test_instr(16, |a| a.vpgatherqq(zmm2.k1(), ptr(edx+zmm3)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpgatherqq_zmm_k1_vm64z, Register::ZMM2, MemoryOperand::new(Register::EDX, Register::ZMM3, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpgatherqq_xmm_m_xmm() {
	// VEX_Vpgatherqq_xmm_vm64x_xmm
	test_instr(16, |a| a.vpgatherqq_3(xmm2, ptr(edx+xmm3), xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpgatherqq_xmm_vm64x_xmm, Register::XMM2, MemoryOperand::new(Register::EDX, Register::XMM3, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpgatherqq_ymm_m_ymm() {
	// VEX_Vpgatherqq_ymm_vm64y_ymm
	test_instr(16, |a| a.vpgatherqq_3(ymm2, ptr(edx+ymm3), ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpgatherqq_ymm_vm64y_ymm, Register::YMM2, MemoryOperand::new(Register::EDX, Register::YMM3, 1, 0x0i64, 0, false, Register::None), Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddbd_xmm_xmm() {
	// XOP_Vphaddbd_xmm_xmmm128
	test_instr(16, |a| a.vphaddbd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vphaddbd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddbd_xmm_m() {
	// XOP_Vphaddbd_xmm_xmmm128
	test_instr(16, |a| a.vphaddbd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vphaddbd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddbq_xmm_xmm() {
	// XOP_Vphaddbq_xmm_xmmm128
	test_instr(16, |a| a.vphaddbq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vphaddbq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddbq_xmm_m() {
	// XOP_Vphaddbq_xmm_xmmm128
	test_instr(16, |a| a.vphaddbq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vphaddbq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddbw_xmm_xmm() {
	// XOP_Vphaddbw_xmm_xmmm128
	test_instr(16, |a| a.vphaddbw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vphaddbw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddbw_xmm_m() {
	// XOP_Vphaddbw_xmm_xmmm128
	test_instr(16, |a| a.vphaddbw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vphaddbw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddd_xmm_xmm_xmm() {
	// VEX_Vphaddd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vphaddd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vphaddd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddd_ymm_ymm_ymm() {
	// VEX_Vphaddd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vphaddd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vphaddd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddd_xmm_xmm_m() {
	// VEX_Vphaddd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vphaddd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vphaddd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddd_ymm_ymm_m() {
	// VEX_Vphaddd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vphaddd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vphaddd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphadddq_xmm_xmm() {
	// XOP_Vphadddq_xmm_xmmm128
	test_instr(16, |a| a.vphadddq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vphadddq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphadddq_xmm_m() {
	// XOP_Vphadddq_xmm_xmmm128
	test_instr(16, |a| a.vphadddq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vphadddq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddsw_xmm_xmm_xmm() {
	// VEX_Vphaddsw_xmm_xmm_xmmm128
	test_instr(16, |a| a.vphaddsw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vphaddsw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddsw_ymm_ymm_ymm() {
	// VEX_Vphaddsw_ymm_ymm_ymmm256
	test_instr(16, |a| a.vphaddsw(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vphaddsw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddsw_xmm_xmm_m() {
	// VEX_Vphaddsw_xmm_xmm_xmmm128
	test_instr(16, |a| a.vphaddsw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vphaddsw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddsw_ymm_ymm_m() {
	// VEX_Vphaddsw_ymm_ymm_ymmm256
	test_instr(16, |a| a.vphaddsw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vphaddsw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddubd_xmm_xmm() {
	// XOP_Vphaddubd_xmm_xmmm128
	test_instr(16, |a| a.vphaddubd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vphaddubd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddubd_xmm_m() {
	// XOP_Vphaddubd_xmm_xmmm128
	test_instr(16, |a| a.vphaddubd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vphaddubd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddubq_xmm_xmm() {
	// XOP_Vphaddubq_xmm_xmmm128
	test_instr(16, |a| a.vphaddubq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vphaddubq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddubq_xmm_m() {
	// XOP_Vphaddubq_xmm_xmmm128
	test_instr(16, |a| a.vphaddubq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vphaddubq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddubw_xmm_xmm() {
	// XOP_Vphaddubw_xmm_xmmm128
	test_instr(16, |a| a.vphaddubw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vphaddubw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddubw_xmm_m() {
	// XOP_Vphaddubw_xmm_xmmm128
	test_instr(16, |a| a.vphaddubw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vphaddubw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddudq_xmm_xmm() {
	// XOP_Vphaddudq_xmm_xmmm128
	test_instr(16, |a| a.vphaddudq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vphaddudq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddudq_xmm_m() {
	// XOP_Vphaddudq_xmm_xmmm128
	test_instr(16, |a| a.vphaddudq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vphaddudq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphadduwd_xmm_xmm() {
	// XOP_Vphadduwd_xmm_xmmm128
	test_instr(16, |a| a.vphadduwd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vphadduwd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphadduwd_xmm_m() {
	// XOP_Vphadduwd_xmm_xmmm128
	test_instr(16, |a| a.vphadduwd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vphadduwd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphadduwq_xmm_xmm() {
	// XOP_Vphadduwq_xmm_xmmm128
	test_instr(16, |a| a.vphadduwq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vphadduwq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphadduwq_xmm_m() {
	// XOP_Vphadduwq_xmm_xmmm128
	test_instr(16, |a| a.vphadduwq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vphadduwq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddw_xmm_xmm_xmm() {
	// VEX_Vphaddw_xmm_xmm_xmmm128
	test_instr(16, |a| a.vphaddw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vphaddw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddw_ymm_ymm_ymm() {
	// VEX_Vphaddw_ymm_ymm_ymmm256
	test_instr(16, |a| a.vphaddw(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vphaddw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddw_xmm_xmm_m() {
	// VEX_Vphaddw_xmm_xmm_xmmm128
	test_instr(16, |a| a.vphaddw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vphaddw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddw_ymm_ymm_m() {
	// VEX_Vphaddw_ymm_ymm_ymmm256
	test_instr(16, |a| a.vphaddw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vphaddw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddwd_xmm_xmm() {
	// XOP_Vphaddwd_xmm_xmmm128
	test_instr(16, |a| a.vphaddwd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vphaddwd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddwd_xmm_m() {
	// XOP_Vphaddwd_xmm_xmmm128
	test_instr(16, |a| a.vphaddwd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vphaddwd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddwq_xmm_xmm() {
	// XOP_Vphaddwq_xmm_xmmm128
	test_instr(16, |a| a.vphaddwq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vphaddwq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphaddwq_xmm_m() {
	// XOP_Vphaddwq_xmm_xmmm128
	test_instr(16, |a| a.vphaddwq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vphaddwq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphminposuw_xmm_xmm() {
	// VEX_Vphminposuw_xmm_xmmm128
	test_instr(16, |a| a.vphminposuw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::VEX_Vphminposuw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphminposuw_xmm_m() {
	// VEX_Vphminposuw_xmm_xmmm128
	test_instr(16, |a| a.vphminposuw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vphminposuw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubbw_xmm_xmm() {
	// XOP_Vphsubbw_xmm_xmmm128
	test_instr(16, |a| a.vphsubbw(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vphsubbw_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubbw_xmm_m() {
	// XOP_Vphsubbw_xmm_xmmm128
	test_instr(16, |a| a.vphsubbw(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vphsubbw_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubd_xmm_xmm_xmm() {
	// VEX_Vphsubd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vphsubd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vphsubd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubd_ymm_ymm_ymm() {
	// VEX_Vphsubd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vphsubd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vphsubd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubd_xmm_xmm_m() {
	// VEX_Vphsubd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vphsubd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vphsubd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubd_ymm_ymm_m() {
	// VEX_Vphsubd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vphsubd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vphsubd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubdq_xmm_xmm() {
	// XOP_Vphsubdq_xmm_xmmm128
	test_instr(16, |a| a.vphsubdq(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vphsubdq_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubdq_xmm_m() {
	// XOP_Vphsubdq_xmm_xmmm128
	test_instr(16, |a| a.vphsubdq(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vphsubdq_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubsw_xmm_xmm_xmm() {
	// VEX_Vphsubsw_xmm_xmm_xmmm128
	test_instr(16, |a| a.vphsubsw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vphsubsw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubsw_ymm_ymm_ymm() {
	// VEX_Vphsubsw_ymm_ymm_ymmm256
	test_instr(16, |a| a.vphsubsw(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vphsubsw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubsw_xmm_xmm_m() {
	// VEX_Vphsubsw_xmm_xmm_xmmm128
	test_instr(16, |a| a.vphsubsw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vphsubsw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubsw_ymm_ymm_m() {
	// VEX_Vphsubsw_ymm_ymm_ymmm256
	test_instr(16, |a| a.vphsubsw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vphsubsw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubw_xmm_xmm_xmm() {
	// VEX_Vphsubw_xmm_xmm_xmmm128
	test_instr(16, |a| a.vphsubw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vphsubw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubw_ymm_ymm_ymm() {
	// VEX_Vphsubw_ymm_ymm_ymmm256
	test_instr(16, |a| a.vphsubw(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vphsubw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubw_xmm_xmm_m() {
	// VEX_Vphsubw_xmm_xmm_xmmm128
	test_instr(16, |a| a.vphsubw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vphsubw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubw_ymm_ymm_m() {
	// VEX_Vphsubw_ymm_ymm_ymmm256
	test_instr(16, |a| a.vphsubw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vphsubw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubwd_xmm_xmm() {
	// XOP_Vphsubwd_xmm_xmmm128
	test_instr(16, |a| a.vphsubwd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::XOP_Vphsubwd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vphsubwd_xmm_m() {
	// XOP_Vphsubwd_xmm_xmmm128
	test_instr(16, |a| a.vphsubwd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::XOP_Vphsubwd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpinsrb_xmm_xmm_r32_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrb_xmm_xmm_r32m8_imm8
		test_instr(16, |a| a.vpinsrb(xmm2, xmm3, esp, -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register::XMM2, Register::XMM3, Register::ESP, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrb_xmm_xmm_r32m8_imm8
		test_instr(16, |a| a.vpinsrb(xmm2, xmm3, esp, -5i32).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register::XMM2, Register::XMM3, Register::ESP, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrb_xmm_xmm_r32m8_imm8
		test_instr(16, |a| a.vpinsrb(xmm2, xmm3, esp, -5).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register::XMM2, Register::XMM3, Register::ESP, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrb_xmm_xmm_r32m8_imm8
		test_instr(16, |a| a.vpinsrb(xmm2, xmm3, esp, -5).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register::XMM2, Register::XMM3, Register::ESP, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpinsrb_xmm_xmm_m_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrb_xmm_xmm_r32m8_imm8
		test_instr(16, |a| a.vpinsrb(xmm2, xmm3, dword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrb_xmm_xmm_r32m8_imm8
		test_instr(16, |a| a.vpinsrb(xmm2, xmm3, dword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrb_xmm_xmm_r32m8_imm8
		test_instr(16, |a| a.vpinsrb(xmm2, xmm3, dword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrb_xmm_xmm_r32m8_imm8
		test_instr(16, |a| a.vpinsrb(xmm2, xmm3, dword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpinsrb_xmm_xmm_r32_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrb_xmm_xmm_r32m8_imm8
		test_instr(16, |a| a.vpinsrb(xmm2, xmm3, esp, 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register::XMM2, Register::XMM3, Register::ESP, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrb_xmm_xmm_r32m8_imm8
		test_instr(16, |a| a.vpinsrb(xmm2, xmm3, esp, 0x7Fu32).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register::XMM2, Register::XMM3, Register::ESP, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpinsrb_xmm_xmm_m_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrb_xmm_xmm_r32m8_imm8
		test_instr(16, |a| a.vpinsrb(xmm2, xmm3, dword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrb_xmm_xmm_r32m8_imm8
		test_instr(16, |a| a.vpinsrb(xmm2, xmm3, dword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpinsrd_xmm_xmm_r32_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrd_xmm_xmm_rm32_imm8
		test_instr(16, |a| a.vpinsrd(xmm2, xmm3, esp, -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrd_xmm_xmm_rm32_imm8, Register::XMM2, Register::XMM3, Register::ESP, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrd_xmm_xmm_rm32_imm8
		test_instr(16, |a| a.vpinsrd(xmm2, xmm3, esp, -5i32).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrd_xmm_xmm_rm32_imm8, Register::XMM2, Register::XMM3, Register::ESP, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrd_xmm_xmm_rm32_imm8
		test_instr(16, |a| a.vpinsrd(xmm2, xmm3, esp, -5).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrd_xmm_xmm_rm32_imm8, Register::XMM2, Register::XMM3, Register::ESP, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrd_xmm_xmm_rm32_imm8
		test_instr(16, |a| a.vpinsrd(xmm2, xmm3, esp, -5).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrd_xmm_xmm_rm32_imm8, Register::XMM2, Register::XMM3, Register::ESP, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpinsrd_xmm_xmm_m_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrd_xmm_xmm_rm32_imm8
		test_instr(16, |a| a.vpinsrd(xmm2, xmm3, dword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrd_xmm_xmm_rm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrd_xmm_xmm_rm32_imm8
		test_instr(16, |a| a.vpinsrd(xmm2, xmm3, dword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrd_xmm_xmm_rm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrd_xmm_xmm_rm32_imm8
		test_instr(16, |a| a.vpinsrd(xmm2, xmm3, dword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrd_xmm_xmm_rm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrd_xmm_xmm_rm32_imm8
		test_instr(16, |a| a.vpinsrd(xmm2, xmm3, dword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrd_xmm_xmm_rm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpinsrd_xmm_xmm_r32_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrd_xmm_xmm_rm32_imm8
		test_instr(16, |a| a.vpinsrd(xmm2, xmm3, esp, 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrd_xmm_xmm_rm32_imm8, Register::XMM2, Register::XMM3, Register::ESP, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrd_xmm_xmm_rm32_imm8
		test_instr(16, |a| a.vpinsrd(xmm2, xmm3, esp, 0x7Fu32).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrd_xmm_xmm_rm32_imm8, Register::XMM2, Register::XMM3, Register::ESP, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpinsrd_xmm_xmm_m_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrd_xmm_xmm_rm32_imm8
		test_instr(16, |a| a.vpinsrd(xmm2, xmm3, dword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrd_xmm_xmm_rm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrd_xmm_xmm_rm32_imm8
		test_instr(16, |a| a.vpinsrd(xmm2, xmm3, dword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrd_xmm_xmm_rm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpinsrw_xmm_xmm_r32_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrw_xmm_xmm_r32m16_imm8
		test_instr(16, |a| a.vpinsrw(xmm2, xmm3, esp, -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register::XMM2, Register::XMM3, Register::ESP, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrw_xmm_xmm_r32m16_imm8
		test_instr(16, |a| a.vpinsrw(xmm2, xmm3, esp, -5i32).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register::XMM2, Register::XMM3, Register::ESP, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrw_xmm_xmm_r32m16_imm8
		test_instr(16, |a| a.vpinsrw(xmm2, xmm3, esp, -5).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register::XMM2, Register::XMM3, Register::ESP, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrw_xmm_xmm_r32m16_imm8
		test_instr(16, |a| a.vpinsrw(xmm2, xmm3, esp, -5).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register::XMM2, Register::XMM3, Register::ESP, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpinsrw_xmm_xmm_m_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrw_xmm_xmm_r32m16_imm8
		test_instr(16, |a| a.vpinsrw(xmm2, xmm3, dword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrw_xmm_xmm_r32m16_imm8
		test_instr(16, |a| a.vpinsrw(xmm2, xmm3, dword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrw_xmm_xmm_r32m16_imm8
		test_instr(16, |a| a.vpinsrw(xmm2, xmm3, dword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrw_xmm_xmm_r32m16_imm8
		test_instr(16, |a| a.vpinsrw(xmm2, xmm3, dword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpinsrw_xmm_xmm_r32_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrw_xmm_xmm_r32m16_imm8
		test_instr(16, |a| a.vpinsrw(xmm2, xmm3, esp, 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register::XMM2, Register::XMM3, Register::ESP, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrw_xmm_xmm_r32m16_imm8
		test_instr(16, |a| a.vpinsrw(xmm2, xmm3, esp, 0x7Fu32).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register::XMM2, Register::XMM3, Register::ESP, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpinsrw_xmm_xmm_m_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpinsrw_xmm_xmm_r32m16_imm8
		test_instr(16, |a| a.vpinsrw(xmm2, xmm3, dword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpinsrw_xmm_xmm_r32m16_imm8
		test_instr(16, |a| a.vpinsrw(xmm2, xmm3, dword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::EVEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vplzcntd_xmm_xmm() {
	// EVEX_Vplzcntd_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vplzcntd(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vplzcntd_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vplzcntd_ymm_ymm() {
	// EVEX_Vplzcntd_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vplzcntd(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vplzcntd_ymm_k1z_ymmm256b32, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vplzcntd_zmm_zmm() {
	// EVEX_Vplzcntd_zmm_k1z_zmmm512b32
	test_instr(16, |a| a.vplzcntd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vplzcntd_zmm_k1z_zmmm512b32, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vplzcntd_xmm_m() {
	// EVEX_Vplzcntd_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vplzcntd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vplzcntd_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vplzcntd_ymm_m() {
	// EVEX_Vplzcntd_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vplzcntd(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vplzcntd_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vplzcntd_zmm_m() {
	// EVEX_Vplzcntd_zmm_k1z_zmmm512b32
	test_instr(16, |a| a.vplzcntd(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vplzcntd_zmm_k1z_zmmm512b32, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vplzcntq_xmm_xmm() {
	// EVEX_Vplzcntq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vplzcntq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vplzcntq_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vplzcntq_ymm_ymm() {
	// EVEX_Vplzcntq_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vplzcntq(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vplzcntq_ymm_k1z_ymmm256b64, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vplzcntq_zmm_zmm() {
	// EVEX_Vplzcntq_zmm_k1z_zmmm512b64
	test_instr(16, |a| a.vplzcntq(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vplzcntq_zmm_k1z_zmmm512b64, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vplzcntq_xmm_m() {
	// EVEX_Vplzcntq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vplzcntq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vplzcntq_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vplzcntq_ymm_m() {
	// EVEX_Vplzcntq_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vplzcntq(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vplzcntq_ymm_k1z_ymmm256b64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vplzcntq_zmm_m() {
	// EVEX_Vplzcntq_zmm_k1z_zmmm512b64
	test_instr(16, |a| a.vplzcntq(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vplzcntq_zmm_k1z_zmmm512b64, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacsdd_xmm_xmm_xmm_xmm() {
	// XOP_Vpmacsdd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacsdd(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacsdd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacsdd_xmm_xmm_m_xmm() {
	// XOP_Vpmacsdd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacsdd(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacsdd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacsdqh_xmm_xmm_xmm_xmm() {
	// XOP_Vpmacsdqh_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacsdqh(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacsdqh_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacsdqh_xmm_xmm_m_xmm() {
	// XOP_Vpmacsdqh_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacsdqh(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacsdqh_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacsdql_xmm_xmm_xmm_xmm() {
	// XOP_Vpmacsdql_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacsdql(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacsdql_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacsdql_xmm_xmm_m_xmm() {
	// XOP_Vpmacsdql_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacsdql(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacsdql_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacssdd_xmm_xmm_xmm_xmm() {
	// XOP_Vpmacssdd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacssdd(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacssdd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacssdd_xmm_xmm_m_xmm() {
	// XOP_Vpmacssdd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacssdd(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacssdd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacssdqh_xmm_xmm_xmm_xmm() {
	// XOP_Vpmacssdqh_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacssdqh(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacssdqh_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacssdqh_xmm_xmm_m_xmm() {
	// XOP_Vpmacssdqh_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacssdqh(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacssdqh_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacssdql_xmm_xmm_xmm_xmm() {
	// XOP_Vpmacssdql_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacssdql(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacssdql_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacssdql_xmm_xmm_m_xmm() {
	// XOP_Vpmacssdql_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacssdql(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacssdql_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacsswd_xmm_xmm_xmm_xmm() {
	// XOP_Vpmacsswd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacsswd(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacsswd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacsswd_xmm_xmm_m_xmm() {
	// XOP_Vpmacsswd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacsswd(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacsswd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacssww_xmm_xmm_xmm_xmm() {
	// XOP_Vpmacssww_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacssww(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacssww_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacssww_xmm_xmm_m_xmm() {
	// XOP_Vpmacssww_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacssww(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacssww_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacswd_xmm_xmm_xmm_xmm() {
	// XOP_Vpmacswd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacswd(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacswd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacswd_xmm_xmm_m_xmm() {
	// XOP_Vpmacswd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacswd(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacswd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacsww_xmm_xmm_xmm_xmm() {
	// XOP_Vpmacsww_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacsww(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacsww_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmacsww_xmm_xmm_m_xmm() {
	// XOP_Vpmacsww_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmacsww(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmacsww_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmadcsswd_xmm_xmm_xmm_xmm() {
	// XOP_Vpmadcsswd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmadcsswd(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmadcsswd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmadcsswd_xmm_xmm_m_xmm() {
	// XOP_Vpmadcsswd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmadcsswd(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmadcsswd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmadcswd_xmm_xmm_xmm_xmm() {
	// XOP_Vpmadcswd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmadcswd(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmadcswd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmadcswd_xmm_xmm_m_xmm() {
	// XOP_Vpmadcswd_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpmadcswd(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpmadcswd_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmadd52huq_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmadd52huq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmadd52huq(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmadd52huq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmadd52huq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpmadd52huq(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmadd52huq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmadd52huq_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmadd52huq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmadd52huq(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmadd52huq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmadd52huq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpmadd52huq(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmadd52huq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmadd52huq_zmm_zmm_zmm() {
	// EVEX_Vpmadd52huq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpmadd52huq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmadd52huq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmadd52huq_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpmadd52huq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpmadd52huq(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmadd52huq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpmadd52huq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmadd52huq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmadd52huq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmadd52huq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpmadd52huq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmadd52huq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmadd52huq_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpmadd52huq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpmadd52huq(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmadd52huq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpmadd52huq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmadd52huq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmadd52huq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmadd52huq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpmadd52huq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmadd52huq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmadd52huq_zmm_zmm_m() {
	// EVEX_Vpmadd52huq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpmadd52huq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmadd52huq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmadd52luq_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmadd52luq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmadd52luq(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmadd52luq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmadd52luq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpmadd52luq(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmadd52luq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmadd52luq_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmadd52luq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmadd52luq(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmadd52luq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmadd52luq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpmadd52luq(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmadd52luq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmadd52luq_zmm_zmm_zmm() {
	// EVEX_Vpmadd52luq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpmadd52luq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmadd52luq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmadd52luq_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpmadd52luq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpmadd52luq(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmadd52luq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpmadd52luq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmadd52luq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmadd52luq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmadd52luq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpmadd52luq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmadd52luq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmadd52luq_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpmadd52luq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpmadd52luq(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmadd52luq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpmadd52luq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmadd52luq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmadd52luq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmadd52luq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpmadd52luq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmadd52luq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmadd52luq_zmm_zmm_m() {
	// EVEX_Vpmadd52luq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpmadd52luq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmadd52luq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaddubsw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaddubsw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmaddubsw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmaddubsw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaddubsw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmaddubsw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaddubsw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaddubsw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaddubsw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmaddubsw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmaddubsw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaddubsw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmaddubsw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaddubsw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaddubsw_zmm_zmm_zmm() {
	// EVEX_Vpmaddubsw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmaddubsw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaddubsw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaddubsw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaddubsw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmaddubsw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmaddubsw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaddubsw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmaddubsw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaddubsw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaddubsw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaddubsw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmaddubsw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmaddubsw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaddubsw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmaddubsw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaddubsw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaddubsw_zmm_zmm_m() {
	// EVEX_Vpmaddubsw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmaddubsw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaddubsw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaddwd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaddwd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmaddwd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmaddwd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaddwd_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmaddwd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaddwd_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaddwd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaddwd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmaddwd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmaddwd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaddwd_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmaddwd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaddwd_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaddwd_zmm_zmm_zmm() {
	// EVEX_Vpmaddwd_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmaddwd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaddwd_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaddwd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaddwd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmaddwd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmaddwd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaddwd_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmaddwd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaddwd_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaddwd_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaddwd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmaddwd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmaddwd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaddwd_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmaddwd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaddwd_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaddwd_zmm_zmm_m() {
	// EVEX_Vpmaddwd_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmaddwd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaddwd_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaskmovd_m_xmm_xmm() {
	// VEX_Vpmaskmovd_m128_xmm_xmm
	test_instr(16, |a| a.vpmaskmovd(ptr(si), xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpmaskmovd_m128_xmm_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaskmovd_m_ymm_ymm() {
	// VEX_Vpmaskmovd_m256_ymm_ymm
	test_instr(16, |a| a.vpmaskmovd(ptr(si), ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpmaskmovd_m256_ymm_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaskmovd_xmm_xmm_m() {
	// VEX_Vpmaskmovd_xmm_xmm_m128
	test_instr(16, |a| a.vpmaskmovd(xmm2, xmm3, ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpmaskmovd_xmm_xmm_m128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaskmovd_ymm_ymm_m() {
	// VEX_Vpmaskmovd_ymm_ymm_m256
	test_instr(16, |a| a.vpmaskmovd(ymm2, ymm3, ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpmaskmovd_ymm_ymm_m256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaskmovq_m_xmm_xmm() {
	// VEX_Vpmaskmovq_m128_xmm_xmm
	test_instr(16, |a| a.vpmaskmovq(ptr(si), xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpmaskmovq_m128_xmm_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaskmovq_m_ymm_ymm() {
	// VEX_Vpmaskmovq_m256_ymm_ymm
	test_instr(16, |a| a.vpmaskmovq(ptr(si), ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpmaskmovq_m256_ymm_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaskmovq_xmm_xmm_m() {
	// VEX_Vpmaskmovq_xmm_xmm_m128
	test_instr(16, |a| a.vpmaskmovq(xmm2, xmm3, ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpmaskmovq_xmm_xmm_m128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaskmovq_ymm_ymm_m() {
	// VEX_Vpmaskmovq_ymm_ymm_m256
	test_instr(16, |a| a.vpmaskmovq(ymm2, ymm3, ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpmaskmovq_ymm_ymm_m256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxsb_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxsb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmaxsb(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxsb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxsb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmaxsb(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxsb_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxsb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmaxsb(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxsb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxsb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmaxsb(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxsb_zmm_zmm_zmm() {
	// EVEX_Vpmaxsb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmaxsb(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxsb_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxsb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmaxsb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxsb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxsb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmaxsb(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxsb_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxsb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmaxsb(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxsb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxsb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmaxsb(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxsb_zmm_zmm_m() {
	// EVEX_Vpmaxsb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmaxsb(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxsd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxsd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmaxsd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxsd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpmaxsd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxsd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxsd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmaxsd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxsd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpmaxsd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxsd_zmm_zmm_zmm() {
	// EVEX_Vpmaxsd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpmaxsd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxsd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpmaxsd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxsd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmaxsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxsd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpmaxsd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxsd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpmaxsd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxsd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmaxsd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxsd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpmaxsd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxsd_zmm_zmm_m() {
	// EVEX_Vpmaxsd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpmaxsd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxsq_xmm_xmm_xmm() {
	// EVEX_Vpmaxsq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpmaxsq(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxsq_ymm_ymm_ymm() {
	// EVEX_Vpmaxsq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpmaxsq(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxsq_zmm_zmm_zmm() {
	// EVEX_Vpmaxsq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpmaxsq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxsq_xmm_xmm_m() {
	// EVEX_Vpmaxsq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpmaxsq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxsq_ymm_ymm_m() {
	// EVEX_Vpmaxsq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpmaxsq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxsq_zmm_zmm_m() {
	// EVEX_Vpmaxsq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpmaxsq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxsw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxsw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmaxsw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxsw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxsw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmaxsw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxsw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxsw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmaxsw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxsw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxsw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmaxsw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxsw_zmm_zmm_zmm() {
	// EVEX_Vpmaxsw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmaxsw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxsw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxsw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmaxsw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxsw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxsw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmaxsw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxsw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxsw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmaxsw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxsw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxsw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmaxsw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxsw_zmm_zmm_m() {
	// EVEX_Vpmaxsw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmaxsw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxsw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxub_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxub_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmaxub(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxub_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxub_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmaxub(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxub_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxub_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxub_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmaxub(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxub_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxub_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmaxub(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxub_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxub_zmm_zmm_zmm() {
	// EVEX_Vpmaxub_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmaxub(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxub_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxub_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxub_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmaxub(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxub_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxub_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmaxub(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxub_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxub_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxub_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmaxub(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxub_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxub_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmaxub(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxub_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxub_zmm_zmm_m() {
	// EVEX_Vpmaxub_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmaxub(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxub_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxud_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxud_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmaxud(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxud_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpmaxud(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxud_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxud_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmaxud(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxud_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpmaxud(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxud_zmm_zmm_zmm() {
	// EVEX_Vpmaxud_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpmaxud(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxud_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxud_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpmaxud(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxud_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmaxud(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxud_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpmaxud(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxud_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpmaxud(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxud_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmaxud(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxud_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpmaxud(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxud_zmm_zmm_m() {
	// EVEX_Vpmaxud_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpmaxud(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxud_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxuq_xmm_xmm_xmm() {
	// EVEX_Vpmaxuq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpmaxuq(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxuq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxuq_ymm_ymm_ymm() {
	// EVEX_Vpmaxuq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpmaxuq(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxuq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxuq_zmm_zmm_zmm() {
	// EVEX_Vpmaxuq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpmaxuq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxuq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxuq_xmm_xmm_m() {
	// EVEX_Vpmaxuq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpmaxuq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxuq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxuq_ymm_ymm_m() {
	// EVEX_Vpmaxuq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpmaxuq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxuq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxuq_zmm_zmm_m() {
	// EVEX_Vpmaxuq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpmaxuq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxuq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxuw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxuw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmaxuw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxuw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxuw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmaxuw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxuw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxuw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxuw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmaxuw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxuw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxuw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmaxuw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxuw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxuw_zmm_zmm_zmm() {
	// EVEX_Vpmaxuw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmaxuw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxuw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmaxuw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxuw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmaxuw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxuw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxuw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmaxuw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxuw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxuw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmaxuw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmaxuw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmaxuw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmaxuw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmaxuw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmaxuw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmaxuw_zmm_zmm_m() {
	// EVEX_Vpmaxuw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmaxuw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmaxuw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminsb_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminsb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpminsb(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpminsb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminsb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpminsb(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminsb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminsb_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminsb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpminsb(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpminsb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminsb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpminsb(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminsb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminsb_zmm_zmm_zmm() {
	// EVEX_Vpminsb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpminsb(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminsb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminsb_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminsb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpminsb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpminsb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminsb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpminsb(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminsb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminsb_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminsb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpminsb(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpminsb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminsb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpminsb(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminsb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminsb_zmm_zmm_m() {
	// EVEX_Vpminsb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpminsb(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminsb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminsd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminsd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpminsd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpminsd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpminsd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminsd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminsd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpminsd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpminsd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpminsd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminsd_zmm_zmm_zmm() {
	// EVEX_Vpminsd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpminsd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminsd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminsd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpminsd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpminsd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpminsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpminsd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpminsd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminsd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpminsd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpminsd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpminsd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpminsd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpminsd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminsd_zmm_zmm_m() {
	// EVEX_Vpminsd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpminsd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminsd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminsq_xmm_xmm_xmm() {
	// EVEX_Vpminsq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpminsq(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminsq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminsq_ymm_ymm_ymm() {
	// EVEX_Vpminsq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpminsq(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminsq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminsq_zmm_zmm_zmm() {
	// EVEX_Vpminsq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpminsq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminsq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminsq_xmm_xmm_m() {
	// EVEX_Vpminsq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpminsq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminsq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminsq_ymm_ymm_m() {
	// EVEX_Vpminsq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpminsq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminsq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminsq_zmm_zmm_m() {
	// EVEX_Vpminsq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpminsq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminsq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminsw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminsw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpminsw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpminsw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminsw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpminsw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminsw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminsw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminsw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpminsw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpminsw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminsw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpminsw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminsw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminsw_zmm_zmm_zmm() {
	// EVEX_Vpminsw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpminsw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminsw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminsw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminsw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpminsw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpminsw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminsw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpminsw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminsw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminsw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminsw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpminsw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpminsw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminsw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpminsw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminsw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminsw_zmm_zmm_m() {
	// EVEX_Vpminsw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpminsw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminsw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminub_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminub_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpminub(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpminub_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminub_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpminub(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminub_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminub_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminub_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpminub(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpminub_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminub_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpminub(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminub_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminub_zmm_zmm_zmm() {
	// EVEX_Vpminub_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpminub(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminub_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminub_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminub_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpminub(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpminub_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminub_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpminub(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminub_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminub_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminub_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpminub(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpminub_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminub_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpminub(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminub_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminub_zmm_zmm_m() {
	// EVEX_Vpminub_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpminub(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminub_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminud_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminud_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpminud(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpminud_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpminud(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminud_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminud_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpminud(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpminud_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpminud(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminud_zmm_zmm_zmm() {
	// EVEX_Vpminud_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpminud(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminud_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminud_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpminud(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpminud_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpminud(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpminud_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpminud(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminud_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpminud(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpminud_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpminud(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpminud_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpminud(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminud_zmm_zmm_m() {
	// EVEX_Vpminud_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpminud(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminud_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminuq_xmm_xmm_xmm() {
	// EVEX_Vpminuq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpminuq(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminuq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminuq_ymm_ymm_ymm() {
	// EVEX_Vpminuq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpminuq(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminuq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminuq_zmm_zmm_zmm() {
	// EVEX_Vpminuq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpminuq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminuq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminuq_xmm_xmm_m() {
	// EVEX_Vpminuq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpminuq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminuq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminuq_ymm_ymm_m() {
	// EVEX_Vpminuq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpminuq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminuq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminuq_zmm_zmm_m() {
	// EVEX_Vpminuq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpminuq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminuq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminuw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminuw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpminuw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpminuw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminuw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpminuw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminuw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminuw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminuw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpminuw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpminuw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminuw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpminuw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminuw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminuw_zmm_zmm_zmm() {
	// EVEX_Vpminuw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpminuw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminuw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpminuw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminuw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpminuw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpminuw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminuw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpminuw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminuw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminuw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpminuw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpminuw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpminuw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpminuw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpminuw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpminuw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpminuw_zmm_zmm_m() {
	// EVEX_Vpminuw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpminuw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpminuw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovb2m_kr_xmm() {
	// EVEX_Vpmovb2m_kr_xmm
	test_instr(16, |a| a.vpmovb2m(k2, xmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovb2m_kr_xmm, Register::K2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovb2m_kr_ymm() {
	// EVEX_Vpmovb2m_kr_ymm
	test_instr(16, |a| a.vpmovb2m(k2, ymm3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovb2m_kr_ymm, Register::K2, Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovb2m_kr_zmm() {
	// EVEX_Vpmovb2m_kr_zmm
	test_instr(16, |a| a.vpmovb2m(k2, zmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovb2m_kr_zmm, Register::K2, Register::ZMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovd2m_kr_xmm() {
	// EVEX_Vpmovd2m_kr_xmm
	test_instr(16, |a| a.vpmovd2m(k2, xmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovd2m_kr_xmm, Register::K2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovd2m_kr_ymm() {
	// EVEX_Vpmovd2m_kr_ymm
	test_instr(16, |a| a.vpmovd2m(k2, ymm3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovd2m_kr_ymm, Register::K2, Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovd2m_kr_zmm() {
	// EVEX_Vpmovd2m_kr_zmm
	test_instr(16, |a| a.vpmovd2m(k2, zmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovd2m_kr_zmm, Register::K2, Register::ZMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovdb_xmm_xmm() {
	// EVEX_Vpmovdb_xmmm32_k1z_xmm
	test_instr(16, |a| a.vpmovdb(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovdb_xmmm32_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovdb_m_xmm() {
	// EVEX_Vpmovdb_xmmm32_k1z_xmm
	test_instr(16, |a| a.vpmovdb(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovdb_xmmm32_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovdb_xmm_ymm() {
	// EVEX_Vpmovdb_xmmm64_k1z_ymm
	test_instr(16, |a| a.vpmovdb(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovdb_xmmm64_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovdb_m_ymm() {
	// EVEX_Vpmovdb_xmmm64_k1z_ymm
	test_instr(16, |a| a.vpmovdb(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovdb_xmmm64_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovdb_xmm_zmm() {
	// EVEX_Vpmovdb_xmmm128_k1z_zmm
	test_instr(16, |a| a.vpmovdb(xmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovdb_xmmm128_k1z_zmm, Register::XMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovdb_m_zmm() {
	// EVEX_Vpmovdb_xmmm128_k1z_zmm
	test_instr(16, |a| a.vpmovdb(xmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovdb_xmmm128_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovdw_xmm_xmm() {
	// EVEX_Vpmovdw_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovdw(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovdw_xmmm64_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovdw_m_xmm() {
	// EVEX_Vpmovdw_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovdw(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovdw_xmmm64_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovdw_xmm_ymm() {
	// EVEX_Vpmovdw_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovdw(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovdw_xmmm128_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovdw_m_ymm() {
	// EVEX_Vpmovdw_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovdw(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovdw_xmmm128_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovdw_ymm_zmm() {
	// EVEX_Vpmovdw_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovdw(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovdw_ymmm256_k1z_zmm, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovdw_m_zmm() {
	// EVEX_Vpmovdw_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovdw(ymmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovdw_ymmm256_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovm2b_xmm_kr() {
	// EVEX_Vpmovm2b_xmm_kr
	test_instr(16, |a| a.vpmovm2b(xmm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovm2b_xmm_kr, Register::XMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovm2b_ymm_kr() {
	// EVEX_Vpmovm2b_ymm_kr
	test_instr(16, |a| a.vpmovm2b(ymm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovm2b_ymm_kr, Register::YMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovm2b_zmm_kr() {
	// EVEX_Vpmovm2b_zmm_kr
	test_instr(16, |a| a.vpmovm2b(zmm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovm2b_zmm_kr, Register::ZMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovm2d_xmm_kr() {
	// EVEX_Vpmovm2d_xmm_kr
	test_instr(16, |a| a.vpmovm2d(xmm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovm2d_xmm_kr, Register::XMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovm2d_ymm_kr() {
	// EVEX_Vpmovm2d_ymm_kr
	test_instr(16, |a| a.vpmovm2d(ymm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovm2d_ymm_kr, Register::YMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovm2d_zmm_kr() {
	// EVEX_Vpmovm2d_zmm_kr
	test_instr(16, |a| a.vpmovm2d(zmm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovm2d_zmm_kr, Register::ZMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovm2q_xmm_kr() {
	// EVEX_Vpmovm2q_xmm_kr
	test_instr(16, |a| a.vpmovm2q(xmm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovm2q_xmm_kr, Register::XMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovm2q_ymm_kr() {
	// EVEX_Vpmovm2q_ymm_kr
	test_instr(16, |a| a.vpmovm2q(ymm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovm2q_ymm_kr, Register::YMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovm2q_zmm_kr() {
	// EVEX_Vpmovm2q_zmm_kr
	test_instr(16, |a| a.vpmovm2q(zmm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovm2q_zmm_kr, Register::ZMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovm2w_xmm_kr() {
	// EVEX_Vpmovm2w_xmm_kr
	test_instr(16, |a| a.vpmovm2w(xmm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovm2w_xmm_kr, Register::XMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovm2w_ymm_kr() {
	// EVEX_Vpmovm2w_ymm_kr
	test_instr(16, |a| a.vpmovm2w(ymm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovm2w_ymm_kr, Register::YMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovm2w_zmm_kr() {
	// EVEX_Vpmovm2w_zmm_kr
	test_instr(16, |a| a.vpmovm2w(zmm2, k3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovm2w_zmm_kr, Register::ZMM2, Register::K3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovmskb_r32_xmm() {
	// VEX_Vpmovmskb_r32_xmm
	test_instr(16, |a| a.vpmovmskb(edx, xmm3).unwrap(),
		Instruction::with2(Code::VEX_Vpmovmskb_r32_xmm, Register::EDX, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovmskb_r32_ymm() {
	// VEX_Vpmovmskb_r32_ymm
	test_instr(16, |a| a.vpmovmskb(edx, ymm3).unwrap(),
		Instruction::with2(Code::VEX_Vpmovmskb_r32_ymm, Register::EDX, Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovq2m_kr_xmm() {
	// EVEX_Vpmovq2m_kr_xmm
	test_instr(16, |a| a.vpmovq2m(k2, xmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovq2m_kr_xmm, Register::K2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovq2m_kr_ymm() {
	// EVEX_Vpmovq2m_kr_ymm
	test_instr(16, |a| a.vpmovq2m(k2, ymm3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovq2m_kr_ymm, Register::K2, Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovq2m_kr_zmm() {
	// EVEX_Vpmovq2m_kr_zmm
	test_instr(16, |a| a.vpmovq2m(k2, zmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovq2m_kr_zmm, Register::K2, Register::ZMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqb_xmm_xmm() {
	// EVEX_Vpmovqb_xmmm16_k1z_xmm
	test_instr(16, |a| a.vpmovqb(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqb_xmmm16_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqb_m_xmm() {
	// EVEX_Vpmovqb_xmmm16_k1z_xmm
	test_instr(16, |a| a.vpmovqb(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqb_xmmm16_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqb_xmm_ymm() {
	// EVEX_Vpmovqb_xmmm32_k1z_ymm
	test_instr(16, |a| a.vpmovqb(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqb_xmmm32_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqb_m_ymm() {
	// EVEX_Vpmovqb_xmmm32_k1z_ymm
	test_instr(16, |a| a.vpmovqb(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqb_xmmm32_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqb_xmm_zmm() {
	// EVEX_Vpmovqb_xmmm64_k1z_zmm
	test_instr(16, |a| a.vpmovqb(xmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqb_xmmm64_k1z_zmm, Register::XMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqb_m_zmm() {
	// EVEX_Vpmovqb_xmmm64_k1z_zmm
	test_instr(16, |a| a.vpmovqb(xmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqb_xmmm64_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqd_xmm_xmm() {
	// EVEX_Vpmovqd_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovqd(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqd_xmmm64_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqd_m_xmm() {
	// EVEX_Vpmovqd_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovqd(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqd_xmmm64_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqd_xmm_ymm() {
	// EVEX_Vpmovqd_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovqd(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqd_xmmm128_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqd_m_ymm() {
	// EVEX_Vpmovqd_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovqd(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqd_xmmm128_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqd_ymm_zmm() {
	// EVEX_Vpmovqd_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovqd(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqd_ymmm256_k1z_zmm, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqd_m_zmm() {
	// EVEX_Vpmovqd_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovqd(ymmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqd_ymmm256_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqw_xmm_xmm() {
	// EVEX_Vpmovqw_xmmm32_k1z_xmm
	test_instr(16, |a| a.vpmovqw(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqw_xmmm32_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqw_m_xmm() {
	// EVEX_Vpmovqw_xmmm32_k1z_xmm
	test_instr(16, |a| a.vpmovqw(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqw_xmmm32_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqw_xmm_ymm() {
	// EVEX_Vpmovqw_xmmm64_k1z_ymm
	test_instr(16, |a| a.vpmovqw(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqw_xmmm64_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqw_m_ymm() {
	// EVEX_Vpmovqw_xmmm64_k1z_ymm
	test_instr(16, |a| a.vpmovqw(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqw_xmmm64_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqw_xmm_zmm() {
	// EVEX_Vpmovqw_xmmm128_k1z_zmm
	test_instr(16, |a| a.vpmovqw(xmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqw_xmmm128_k1z_zmm, Register::XMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovqw_m_zmm() {
	// EVEX_Vpmovqw_xmmm128_k1z_zmm
	test_instr(16, |a| a.vpmovqw(xmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovqw_xmmm128_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsdb_xmm_xmm() {
	// EVEX_Vpmovsdb_xmmm32_k1z_xmm
	test_instr(16, |a| a.vpmovsdb(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsdb_xmmm32_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsdb_m_xmm() {
	// EVEX_Vpmovsdb_xmmm32_k1z_xmm
	test_instr(16, |a| a.vpmovsdb(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsdb_xmmm32_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsdb_xmm_ymm() {
	// EVEX_Vpmovsdb_xmmm64_k1z_ymm
	test_instr(16, |a| a.vpmovsdb(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsdb_xmmm64_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsdb_m_ymm() {
	// EVEX_Vpmovsdb_xmmm64_k1z_ymm
	test_instr(16, |a| a.vpmovsdb(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsdb_xmmm64_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsdb_xmm_zmm() {
	// EVEX_Vpmovsdb_xmmm128_k1z_zmm
	test_instr(16, |a| a.vpmovsdb(xmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsdb_xmmm128_k1z_zmm, Register::XMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsdb_m_zmm() {
	// EVEX_Vpmovsdb_xmmm128_k1z_zmm
	test_instr(16, |a| a.vpmovsdb(xmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsdb_xmmm128_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsdw_xmm_xmm() {
	// EVEX_Vpmovsdw_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovsdw(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsdw_xmmm64_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsdw_m_xmm() {
	// EVEX_Vpmovsdw_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovsdw(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsdw_xmmm64_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsdw_xmm_ymm() {
	// EVEX_Vpmovsdw_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovsdw(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsdw_xmmm128_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsdw_m_ymm() {
	// EVEX_Vpmovsdw_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovsdw(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsdw_xmmm128_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsdw_ymm_zmm() {
	// EVEX_Vpmovsdw_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovsdw(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsdw_ymmm256_k1z_zmm, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsdw_m_zmm() {
	// EVEX_Vpmovsdw_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovsdw(ymmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsdw_ymmm256_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqb_xmm_xmm() {
	// EVEX_Vpmovsqb_xmmm16_k1z_xmm
	test_instr(16, |a| a.vpmovsqb(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqb_xmmm16_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqb_m_xmm() {
	// EVEX_Vpmovsqb_xmmm16_k1z_xmm
	test_instr(16, |a| a.vpmovsqb(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqb_xmmm16_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqb_xmm_ymm() {
	// EVEX_Vpmovsqb_xmmm32_k1z_ymm
	test_instr(16, |a| a.vpmovsqb(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqb_xmmm32_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqb_m_ymm() {
	// EVEX_Vpmovsqb_xmmm32_k1z_ymm
	test_instr(16, |a| a.vpmovsqb(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqb_xmmm32_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqb_xmm_zmm() {
	// EVEX_Vpmovsqb_xmmm64_k1z_zmm
	test_instr(16, |a| a.vpmovsqb(xmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqb_xmmm64_k1z_zmm, Register::XMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqb_m_zmm() {
	// EVEX_Vpmovsqb_xmmm64_k1z_zmm
	test_instr(16, |a| a.vpmovsqb(xmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqb_xmmm64_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqd_xmm_xmm() {
	// EVEX_Vpmovsqd_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovsqd(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqd_xmmm64_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqd_m_xmm() {
	// EVEX_Vpmovsqd_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovsqd(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqd_xmmm64_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqd_xmm_ymm() {
	// EVEX_Vpmovsqd_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovsqd(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqd_xmmm128_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqd_m_ymm() {
	// EVEX_Vpmovsqd_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovsqd(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqd_xmmm128_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqd_ymm_zmm() {
	// EVEX_Vpmovsqd_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovsqd(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqd_ymmm256_k1z_zmm, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqd_m_zmm() {
	// EVEX_Vpmovsqd_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovsqd(ymmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqd_ymmm256_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqw_xmm_xmm() {
	// EVEX_Vpmovsqw_xmmm32_k1z_xmm
	test_instr(16, |a| a.vpmovsqw(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqw_xmmm32_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqw_m_xmm() {
	// EVEX_Vpmovsqw_xmmm32_k1z_xmm
	test_instr(16, |a| a.vpmovsqw(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqw_xmmm32_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqw_xmm_ymm() {
	// EVEX_Vpmovsqw_xmmm64_k1z_ymm
	test_instr(16, |a| a.vpmovsqw(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqw_xmmm64_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqw_m_ymm() {
	// EVEX_Vpmovsqw_xmmm64_k1z_ymm
	test_instr(16, |a| a.vpmovsqw(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqw_xmmm64_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqw_xmm_zmm() {
	// EVEX_Vpmovsqw_xmmm128_k1z_zmm
	test_instr(16, |a| a.vpmovsqw(xmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqw_xmmm128_k1z_zmm, Register::XMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsqw_m_zmm() {
	// EVEX_Vpmovsqw_xmmm128_k1z_zmm
	test_instr(16, |a| a.vpmovsqw(xmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsqw_xmmm128_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovswb_xmm_xmm() {
	// EVEX_Vpmovswb_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovswb(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovswb_xmmm64_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovswb_m_xmm() {
	// EVEX_Vpmovswb_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovswb(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovswb_xmmm64_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovswb_xmm_ymm() {
	// EVEX_Vpmovswb_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovswb(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovswb_xmmm128_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovswb_m_ymm() {
	// EVEX_Vpmovswb_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovswb(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovswb_xmmm128_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovswb_ymm_zmm() {
	// EVEX_Vpmovswb_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovswb(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovswb_ymmm256_k1z_zmm, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovswb_m_zmm() {
	// EVEX_Vpmovswb_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovswb(ymmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovswb_ymmm256_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsxbd_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxbd_xmm_xmmm32
		test_instr(16, |a| a.vpmovsxbd(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxbd_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxbd_xmm_k1z_xmmm32
		test_instr(16, |a| a.vpmovsxbd(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbd_xmm_k1z_xmmm32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxbd_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxbd_ymm_xmmm64
		test_instr(16, |a| a.vpmovsxbd(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxbd_ymm_xmmm64, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxbd_ymm_k1z_xmmm64
		test_instr(16, |a| a.vpmovsxbd(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbd_ymm_k1z_xmmm64, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxbd_zmm_xmm() {
	// EVEX_Vpmovsxbd_zmm_k1z_xmmm128
	test_instr(16, |a| a.vpmovsxbd(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbd_zmm_k1z_xmmm128, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsxbd_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxbd_xmm_xmmm32
		test_instr(16, |a| a.vpmovsxbd(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxbd_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxbd_xmm_k1z_xmmm32
		test_instr(16, |a| a.vpmovsxbd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbd_xmm_k1z_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxbd_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxbd_ymm_xmmm64
		test_instr(16, |a| a.vpmovsxbd(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxbd_ymm_xmmm64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxbd_ymm_k1z_xmmm64
		test_instr(16, |a| a.vpmovsxbd(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbd_ymm_k1z_xmmm64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxbd_zmm_m() {
	// EVEX_Vpmovsxbd_zmm_k1z_xmmm128
	test_instr(16, |a| a.vpmovsxbd(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbd_zmm_k1z_xmmm128, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsxbq_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxbq_xmm_xmmm16
		test_instr(16, |a| a.vpmovsxbq(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxbq_xmm_xmmm16, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxbq_xmm_k1z_xmmm16
		test_instr(16, |a| a.vpmovsxbq(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbq_xmm_k1z_xmmm16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxbq_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxbq_ymm_xmmm32
		test_instr(16, |a| a.vpmovsxbq(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxbq_ymm_xmmm32, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxbq_ymm_k1z_xmmm32
		test_instr(16, |a| a.vpmovsxbq(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbq_ymm_k1z_xmmm32, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxbq_zmm_xmm() {
	// EVEX_Vpmovsxbq_zmm_k1z_xmmm64
	test_instr(16, |a| a.vpmovsxbq(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbq_zmm_k1z_xmmm64, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsxbq_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxbq_xmm_xmmm16
		test_instr(16, |a| a.vpmovsxbq(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxbq_xmm_xmmm16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxbq_xmm_k1z_xmmm16
		test_instr(16, |a| a.vpmovsxbq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbq_xmm_k1z_xmmm16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxbq_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxbq_ymm_xmmm32
		test_instr(16, |a| a.vpmovsxbq(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxbq_ymm_xmmm32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxbq_ymm_k1z_xmmm32
		test_instr(16, |a| a.vpmovsxbq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbq_ymm_k1z_xmmm32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxbq_zmm_m() {
	// EVEX_Vpmovsxbq_zmm_k1z_xmmm64
	test_instr(16, |a| a.vpmovsxbq(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbq_zmm_k1z_xmmm64, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsxbw_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxbw_xmm_xmmm64
		test_instr(16, |a| a.vpmovsxbw(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxbw_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxbw_xmm_k1z_xmmm64
		test_instr(16, |a| a.vpmovsxbw(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbw_xmm_k1z_xmmm64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxbw_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxbw_ymm_xmmm128
		test_instr(16, |a| a.vpmovsxbw(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxbw_ymm_xmmm128, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxbw_ymm_k1z_xmmm128
		test_instr(16, |a| a.vpmovsxbw(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbw_ymm_k1z_xmmm128, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxbw_zmm_ymm() {
	// EVEX_Vpmovsxbw_zmm_k1z_ymmm256
	test_instr(16, |a| a.vpmovsxbw(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbw_zmm_k1z_ymmm256, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsxbw_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxbw_xmm_xmmm64
		test_instr(16, |a| a.vpmovsxbw(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxbw_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxbw_xmm_k1z_xmmm64
		test_instr(16, |a| a.vpmovsxbw(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbw_xmm_k1z_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxbw_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxbw_ymm_xmmm128
		test_instr(16, |a| a.vpmovsxbw(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxbw_ymm_xmmm128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxbw_ymm_k1z_xmmm128
		test_instr(16, |a| a.vpmovsxbw(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbw_ymm_k1z_xmmm128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxbw_zmm_m() {
	// EVEX_Vpmovsxbw_zmm_k1z_ymmm256
	test_instr(16, |a| a.vpmovsxbw(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxbw_zmm_k1z_ymmm256, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsxdq_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxdq_xmm_xmmm64
		test_instr(16, |a| a.vpmovsxdq(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxdq_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxdq_xmm_k1z_xmmm64
		test_instr(16, |a| a.vpmovsxdq(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxdq_xmm_k1z_xmmm64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxdq_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxdq_ymm_xmmm128
		test_instr(16, |a| a.vpmovsxdq(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxdq_ymm_xmmm128, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxdq_ymm_k1z_xmmm128
		test_instr(16, |a| a.vpmovsxdq(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxdq_ymm_k1z_xmmm128, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxdq_zmm_ymm() {
	// EVEX_Vpmovsxdq_zmm_k1z_ymmm256
	test_instr(16, |a| a.vpmovsxdq(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxdq_zmm_k1z_ymmm256, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsxdq_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxdq_xmm_xmmm64
		test_instr(16, |a| a.vpmovsxdq(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxdq_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxdq_xmm_k1z_xmmm64
		test_instr(16, |a| a.vpmovsxdq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxdq_xmm_k1z_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxdq_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxdq_ymm_xmmm128
		test_instr(16, |a| a.vpmovsxdq(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxdq_ymm_xmmm128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxdq_ymm_k1z_xmmm128
		test_instr(16, |a| a.vpmovsxdq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxdq_ymm_k1z_xmmm128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxdq_zmm_m() {
	// EVEX_Vpmovsxdq_zmm_k1z_ymmm256
	test_instr(16, |a| a.vpmovsxdq(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxdq_zmm_k1z_ymmm256, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsxwd_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxwd_xmm_xmmm64
		test_instr(16, |a| a.vpmovsxwd(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxwd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxwd_xmm_k1z_xmmm64
		test_instr(16, |a| a.vpmovsxwd(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxwd_xmm_k1z_xmmm64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxwd_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxwd_ymm_xmmm128
		test_instr(16, |a| a.vpmovsxwd(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxwd_ymm_xmmm128, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxwd_ymm_k1z_xmmm128
		test_instr(16, |a| a.vpmovsxwd(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxwd_ymm_k1z_xmmm128, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxwd_zmm_ymm() {
	// EVEX_Vpmovsxwd_zmm_k1z_ymmm256
	test_instr(16, |a| a.vpmovsxwd(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxwd_zmm_k1z_ymmm256, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsxwd_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxwd_xmm_xmmm64
		test_instr(16, |a| a.vpmovsxwd(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxwd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxwd_xmm_k1z_xmmm64
		test_instr(16, |a| a.vpmovsxwd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxwd_xmm_k1z_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxwd_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxwd_ymm_xmmm128
		test_instr(16, |a| a.vpmovsxwd(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxwd_ymm_xmmm128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxwd_ymm_k1z_xmmm128
		test_instr(16, |a| a.vpmovsxwd(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxwd_ymm_k1z_xmmm128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxwd_zmm_m() {
	// EVEX_Vpmovsxwd_zmm_k1z_ymmm256
	test_instr(16, |a| a.vpmovsxwd(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxwd_zmm_k1z_ymmm256, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsxwq_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxwq_xmm_xmmm32
		test_instr(16, |a| a.vpmovsxwq(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxwq_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxwq_xmm_k1z_xmmm32
		test_instr(16, |a| a.vpmovsxwq(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxwq_xmm_k1z_xmmm32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxwq_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxwq_ymm_xmmm64
		test_instr(16, |a| a.vpmovsxwq(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxwq_ymm_xmmm64, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxwq_ymm_k1z_xmmm64
		test_instr(16, |a| a.vpmovsxwq(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxwq_ymm_k1z_xmmm64, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxwq_zmm_xmm() {
	// EVEX_Vpmovsxwq_zmm_k1z_xmmm128
	test_instr(16, |a| a.vpmovsxwq(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxwq_zmm_k1z_xmmm128, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovsxwq_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxwq_xmm_xmmm32
		test_instr(16, |a| a.vpmovsxwq(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxwq_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxwq_xmm_k1z_xmmm32
		test_instr(16, |a| a.vpmovsxwq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxwq_xmm_k1z_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxwq_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovsxwq_ymm_xmmm64
		test_instr(16, |a| a.vpmovsxwq(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovsxwq_ymm_xmmm64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovsxwq_ymm_k1z_xmmm64
		test_instr(16, |a| a.vpmovsxwq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxwq_ymm_k1z_xmmm64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovsxwq_zmm_m() {
	// EVEX_Vpmovsxwq_zmm_k1z_xmmm128
	test_instr(16, |a| a.vpmovsxwq(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovsxwq_zmm_k1z_xmmm128, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusdb_xmm_xmm() {
	// EVEX_Vpmovusdb_xmmm32_k1z_xmm
	test_instr(16, |a| a.vpmovusdb(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusdb_xmmm32_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusdb_m_xmm() {
	// EVEX_Vpmovusdb_xmmm32_k1z_xmm
	test_instr(16, |a| a.vpmovusdb(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusdb_xmmm32_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusdb_xmm_ymm() {
	// EVEX_Vpmovusdb_xmmm64_k1z_ymm
	test_instr(16, |a| a.vpmovusdb(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusdb_xmmm64_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusdb_m_ymm() {
	// EVEX_Vpmovusdb_xmmm64_k1z_ymm
	test_instr(16, |a| a.vpmovusdb(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusdb_xmmm64_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusdb_xmm_zmm() {
	// EVEX_Vpmovusdb_xmmm128_k1z_zmm
	test_instr(16, |a| a.vpmovusdb(xmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusdb_xmmm128_k1z_zmm, Register::XMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusdb_m_zmm() {
	// EVEX_Vpmovusdb_xmmm128_k1z_zmm
	test_instr(16, |a| a.vpmovusdb(xmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusdb_xmmm128_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusdw_xmm_xmm() {
	// EVEX_Vpmovusdw_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovusdw(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusdw_xmmm64_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusdw_m_xmm() {
	// EVEX_Vpmovusdw_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovusdw(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusdw_xmmm64_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusdw_xmm_ymm() {
	// EVEX_Vpmovusdw_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovusdw(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusdw_xmmm128_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusdw_m_ymm() {
	// EVEX_Vpmovusdw_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovusdw(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusdw_xmmm128_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusdw_ymm_zmm() {
	// EVEX_Vpmovusdw_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovusdw(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusdw_ymmm256_k1z_zmm, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusdw_m_zmm() {
	// EVEX_Vpmovusdw_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovusdw(ymmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusdw_ymmm256_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqb_xmm_xmm() {
	// EVEX_Vpmovusqb_xmmm16_k1z_xmm
	test_instr(16, |a| a.vpmovusqb(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqb_xmmm16_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqb_m_xmm() {
	// EVEX_Vpmovusqb_xmmm16_k1z_xmm
	test_instr(16, |a| a.vpmovusqb(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqb_xmmm16_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqb_xmm_ymm() {
	// EVEX_Vpmovusqb_xmmm32_k1z_ymm
	test_instr(16, |a| a.vpmovusqb(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqb_xmmm32_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqb_m_ymm() {
	// EVEX_Vpmovusqb_xmmm32_k1z_ymm
	test_instr(16, |a| a.vpmovusqb(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqb_xmmm32_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqb_xmm_zmm() {
	// EVEX_Vpmovusqb_xmmm64_k1z_zmm
	test_instr(16, |a| a.vpmovusqb(xmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqb_xmmm64_k1z_zmm, Register::XMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqb_m_zmm() {
	// EVEX_Vpmovusqb_xmmm64_k1z_zmm
	test_instr(16, |a| a.vpmovusqb(xmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqb_xmmm64_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqd_xmm_xmm() {
	// EVEX_Vpmovusqd_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovusqd(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqd_xmmm64_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqd_m_xmm() {
	// EVEX_Vpmovusqd_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovusqd(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqd_xmmm64_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqd_xmm_ymm() {
	// EVEX_Vpmovusqd_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovusqd(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqd_xmmm128_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqd_m_ymm() {
	// EVEX_Vpmovusqd_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovusqd(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqd_xmmm128_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqd_ymm_zmm() {
	// EVEX_Vpmovusqd_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovusqd(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqd_ymmm256_k1z_zmm, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqd_m_zmm() {
	// EVEX_Vpmovusqd_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovusqd(ymmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqd_ymmm256_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqw_xmm_xmm() {
	// EVEX_Vpmovusqw_xmmm32_k1z_xmm
	test_instr(16, |a| a.vpmovusqw(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqw_xmmm32_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqw_m_xmm() {
	// EVEX_Vpmovusqw_xmmm32_k1z_xmm
	test_instr(16, |a| a.vpmovusqw(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqw_xmmm32_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqw_xmm_ymm() {
	// EVEX_Vpmovusqw_xmmm64_k1z_ymm
	test_instr(16, |a| a.vpmovusqw(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqw_xmmm64_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqw_m_ymm() {
	// EVEX_Vpmovusqw_xmmm64_k1z_ymm
	test_instr(16, |a| a.vpmovusqw(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqw_xmmm64_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqw_xmm_zmm() {
	// EVEX_Vpmovusqw_xmmm128_k1z_zmm
	test_instr(16, |a| a.vpmovusqw(xmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqw_xmmm128_k1z_zmm, Register::XMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovusqw_m_zmm() {
	// EVEX_Vpmovusqw_xmmm128_k1z_zmm
	test_instr(16, |a| a.vpmovusqw(xmmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovusqw_xmmm128_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovuswb_xmm_xmm() {
	// EVEX_Vpmovuswb_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovuswb(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovuswb_xmmm64_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovuswb_m_xmm() {
	// EVEX_Vpmovuswb_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovuswb(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovuswb_xmmm64_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovuswb_xmm_ymm() {
	// EVEX_Vpmovuswb_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovuswb(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovuswb_xmmm128_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovuswb_m_ymm() {
	// EVEX_Vpmovuswb_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovuswb(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovuswb_xmmm128_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovuswb_ymm_zmm() {
	// EVEX_Vpmovuswb_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovuswb(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovuswb_ymmm256_k1z_zmm, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovuswb_m_zmm() {
	// EVEX_Vpmovuswb_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovuswb(ymmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovuswb_ymmm256_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovw2m_kr_xmm() {
	// EVEX_Vpmovw2m_kr_xmm
	test_instr(16, |a| a.vpmovw2m(k2, xmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovw2m_kr_xmm, Register::K2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovw2m_kr_ymm() {
	// EVEX_Vpmovw2m_kr_ymm
	test_instr(16, |a| a.vpmovw2m(k2, ymm3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovw2m_kr_ymm, Register::K2, Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovw2m_kr_zmm() {
	// EVEX_Vpmovw2m_kr_zmm
	test_instr(16, |a| a.vpmovw2m(k2, zmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vpmovw2m_kr_zmm, Register::K2, Register::ZMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovwb_xmm_xmm() {
	// EVEX_Vpmovwb_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovwb(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovwb_xmmm64_k1z_xmm, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovwb_m_xmm() {
	// EVEX_Vpmovwb_xmmm64_k1z_xmm
	test_instr(16, |a| a.vpmovwb(xmmword_ptr(si).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovwb_xmmm64_k1z_xmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovwb_xmm_ymm() {
	// EVEX_Vpmovwb_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovwb(xmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovwb_xmmm128_k1z_ymm, Register::XMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovwb_m_ymm() {
	// EVEX_Vpmovwb_xmmm128_k1z_ymm
	test_instr(16, |a| a.vpmovwb(xmmword_ptr(si).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovwb_xmmm128_k1z_ymm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovwb_ymm_zmm() {
	// EVEX_Vpmovwb_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovwb(ymm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovwb_ymmm256_k1z_zmm, Register::YMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovwb_m_zmm() {
	// EVEX_Vpmovwb_ymmm256_k1z_zmm
	test_instr(16, |a| a.vpmovwb(ymmword_ptr(si).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovwb_ymmm256_k1z_zmm, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovzxbd_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxbd_xmm_xmmm32
		test_instr(16, |a| a.vpmovzxbd(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxbd_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxbd_xmm_k1z_xmmm32
		test_instr(16, |a| a.vpmovzxbd(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbd_xmm_k1z_xmmm32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxbd_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxbd_ymm_xmmm64
		test_instr(16, |a| a.vpmovzxbd(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxbd_ymm_xmmm64, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxbd_ymm_k1z_xmmm64
		test_instr(16, |a| a.vpmovzxbd(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbd_ymm_k1z_xmmm64, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxbd_zmm_xmm() {
	// EVEX_Vpmovzxbd_zmm_k1z_xmmm128
	test_instr(16, |a| a.vpmovzxbd(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbd_zmm_k1z_xmmm128, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovzxbd_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxbd_xmm_xmmm32
		test_instr(16, |a| a.vpmovzxbd(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxbd_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxbd_xmm_k1z_xmmm32
		test_instr(16, |a| a.vpmovzxbd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbd_xmm_k1z_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxbd_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxbd_ymm_xmmm64
		test_instr(16, |a| a.vpmovzxbd(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxbd_ymm_xmmm64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxbd_ymm_k1z_xmmm64
		test_instr(16, |a| a.vpmovzxbd(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbd_ymm_k1z_xmmm64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxbd_zmm_m() {
	// EVEX_Vpmovzxbd_zmm_k1z_xmmm128
	test_instr(16, |a| a.vpmovzxbd(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbd_zmm_k1z_xmmm128, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovzxbq_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxbq_xmm_xmmm16
		test_instr(16, |a| a.vpmovzxbq(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxbq_xmm_xmmm16, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxbq_xmm_k1z_xmmm16
		test_instr(16, |a| a.vpmovzxbq(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbq_xmm_k1z_xmmm16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxbq_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxbq_ymm_xmmm32
		test_instr(16, |a| a.vpmovzxbq(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxbq_ymm_xmmm32, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxbq_ymm_k1z_xmmm32
		test_instr(16, |a| a.vpmovzxbq(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbq_ymm_k1z_xmmm32, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxbq_zmm_xmm() {
	// EVEX_Vpmovzxbq_zmm_k1z_xmmm64
	test_instr(16, |a| a.vpmovzxbq(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbq_zmm_k1z_xmmm64, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovzxbq_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxbq_xmm_xmmm16
		test_instr(16, |a| a.vpmovzxbq(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxbq_xmm_xmmm16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxbq_xmm_k1z_xmmm16
		test_instr(16, |a| a.vpmovzxbq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbq_xmm_k1z_xmmm16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxbq_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxbq_ymm_xmmm32
		test_instr(16, |a| a.vpmovzxbq(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxbq_ymm_xmmm32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxbq_ymm_k1z_xmmm32
		test_instr(16, |a| a.vpmovzxbq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbq_ymm_k1z_xmmm32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxbq_zmm_m() {
	// EVEX_Vpmovzxbq_zmm_k1z_xmmm64
	test_instr(16, |a| a.vpmovzxbq(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbq_zmm_k1z_xmmm64, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovzxbw_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxbw_xmm_xmmm64
		test_instr(16, |a| a.vpmovzxbw(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxbw_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxbw_xmm_k1z_xmmm64
		test_instr(16, |a| a.vpmovzxbw(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbw_xmm_k1z_xmmm64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxbw_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxbw_ymm_xmmm128
		test_instr(16, |a| a.vpmovzxbw(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxbw_ymm_xmmm128, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxbw_ymm_k1z_xmmm128
		test_instr(16, |a| a.vpmovzxbw(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbw_ymm_k1z_xmmm128, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxbw_zmm_ymm() {
	// EVEX_Vpmovzxbw_zmm_k1z_ymmm256
	test_instr(16, |a| a.vpmovzxbw(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbw_zmm_k1z_ymmm256, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovzxbw_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxbw_xmm_xmmm64
		test_instr(16, |a| a.vpmovzxbw(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxbw_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxbw_xmm_k1z_xmmm64
		test_instr(16, |a| a.vpmovzxbw(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbw_xmm_k1z_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxbw_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxbw_ymm_xmmm128
		test_instr(16, |a| a.vpmovzxbw(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxbw_ymm_xmmm128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxbw_ymm_k1z_xmmm128
		test_instr(16, |a| a.vpmovzxbw(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbw_ymm_k1z_xmmm128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxbw_zmm_m() {
	// EVEX_Vpmovzxbw_zmm_k1z_ymmm256
	test_instr(16, |a| a.vpmovzxbw(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxbw_zmm_k1z_ymmm256, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovzxdq_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxdq_xmm_xmmm64
		test_instr(16, |a| a.vpmovzxdq(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxdq_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxdq_xmm_k1z_xmmm64
		test_instr(16, |a| a.vpmovzxdq(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxdq_xmm_k1z_xmmm64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxdq_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxdq_ymm_xmmm128
		test_instr(16, |a| a.vpmovzxdq(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxdq_ymm_xmmm128, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxdq_ymm_k1z_xmmm128
		test_instr(16, |a| a.vpmovzxdq(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxdq_ymm_k1z_xmmm128, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxdq_zmm_ymm() {
	// EVEX_Vpmovzxdq_zmm_k1z_ymmm256
	test_instr(16, |a| a.vpmovzxdq(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxdq_zmm_k1z_ymmm256, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovzxdq_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxdq_xmm_xmmm64
		test_instr(16, |a| a.vpmovzxdq(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxdq_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxdq_xmm_k1z_xmmm64
		test_instr(16, |a| a.vpmovzxdq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxdq_xmm_k1z_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxdq_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxdq_ymm_xmmm128
		test_instr(16, |a| a.vpmovzxdq(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxdq_ymm_xmmm128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxdq_ymm_k1z_xmmm128
		test_instr(16, |a| a.vpmovzxdq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxdq_ymm_k1z_xmmm128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxdq_zmm_m() {
	// EVEX_Vpmovzxdq_zmm_k1z_ymmm256
	test_instr(16, |a| a.vpmovzxdq(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxdq_zmm_k1z_ymmm256, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovzxwd_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxwd_xmm_xmmm64
		test_instr(16, |a| a.vpmovzxwd(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxwd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxwd_xmm_k1z_xmmm64
		test_instr(16, |a| a.vpmovzxwd(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxwd_xmm_k1z_xmmm64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxwd_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxwd_ymm_xmmm128
		test_instr(16, |a| a.vpmovzxwd(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxwd_ymm_xmmm128, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxwd_ymm_k1z_xmmm128
		test_instr(16, |a| a.vpmovzxwd(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxwd_ymm_k1z_xmmm128, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxwd_zmm_ymm() {
	// EVEX_Vpmovzxwd_zmm_k1z_ymmm256
	test_instr(16, |a| a.vpmovzxwd(zmm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxwd_zmm_k1z_ymmm256, Register::ZMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovzxwd_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxwd_xmm_xmmm64
		test_instr(16, |a| a.vpmovzxwd(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxwd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxwd_xmm_k1z_xmmm64
		test_instr(16, |a| a.vpmovzxwd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxwd_xmm_k1z_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxwd_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxwd_ymm_xmmm128
		test_instr(16, |a| a.vpmovzxwd(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxwd_ymm_xmmm128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxwd_ymm_k1z_xmmm128
		test_instr(16, |a| a.vpmovzxwd(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxwd_ymm_k1z_xmmm128, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxwd_zmm_m() {
	// EVEX_Vpmovzxwd_zmm_k1z_ymmm256
	test_instr(16, |a| a.vpmovzxwd(zmm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxwd_zmm_k1z_ymmm256, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovzxwq_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxwq_xmm_xmmm32
		test_instr(16, |a| a.vpmovzxwq(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxwq_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxwq_xmm_k1z_xmmm32
		test_instr(16, |a| a.vpmovzxwq(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxwq_xmm_k1z_xmmm32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxwq_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxwq_ymm_xmmm64
		test_instr(16, |a| a.vpmovzxwq(ymm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxwq_ymm_xmmm64, Register::YMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxwq_ymm_k1z_xmmm64
		test_instr(16, |a| a.vpmovzxwq(ymm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxwq_ymm_k1z_xmmm64, Register::YMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxwq_zmm_xmm() {
	// EVEX_Vpmovzxwq_zmm_k1z_xmmm128
	test_instr(16, |a| a.vpmovzxwq(zmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxwq_zmm_k1z_xmmm128, Register::ZMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmovzxwq_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxwq_xmm_xmmm32
		test_instr(16, |a| a.vpmovzxwq(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxwq_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxwq_xmm_k1z_xmmm32
		test_instr(16, |a| a.vpmovzxwq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxwq_xmm_k1z_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxwq_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmovzxwq_ymm_xmmm64
		test_instr(16, |a| a.vpmovzxwq(ymm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vpmovzxwq_ymm_xmmm64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmovzxwq_ymm_k1z_xmmm64
		test_instr(16, |a| a.vpmovzxwq(ymm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxwq_ymm_k1z_xmmm64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmovzxwq_zmm_m() {
	// EVEX_Vpmovzxwq_zmm_k1z_xmmm128
	test_instr(16, |a| a.vpmovzxwq(zmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpmovzxwq_zmm_k1z_xmmm128, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmuldq_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmuldq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmuldq(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmuldq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpmuldq(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmuldq_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmuldq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmuldq(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmuldq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpmuldq(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmuldq_zmm_zmm_zmm() {
	// EVEX_Vpmuldq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpmuldq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmuldq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmuldq_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpmuldq(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpmuldq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmuldq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmuldq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpmuldq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmuldq_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpmuldq(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpmuldq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmuldq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmuldq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpmuldq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmuldq_zmm_zmm_m() {
	// EVEX_Vpmuldq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpmuldq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmuldq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmulhrsw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmulhrsw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmulhrsw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmulhrsw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmulhrsw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmulhrsw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulhrsw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmulhrsw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmulhrsw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmulhrsw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmulhrsw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmulhrsw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmulhrsw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulhrsw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmulhrsw_zmm_zmm_zmm() {
	// EVEX_Vpmulhrsw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmulhrsw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmulhrsw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmulhrsw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmulhrsw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmulhrsw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmulhrsw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmulhrsw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmulhrsw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulhrsw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmulhrsw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmulhrsw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmulhrsw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmulhrsw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmulhrsw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmulhrsw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulhrsw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmulhrsw_zmm_zmm_m() {
	// EVEX_Vpmulhrsw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmulhrsw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmulhrsw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmulhuw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmulhuw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmulhuw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmulhuw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmulhuw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmulhuw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulhuw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmulhuw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmulhuw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmulhuw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmulhuw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmulhuw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmulhuw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulhuw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmulhuw_zmm_zmm_zmm() {
	// EVEX_Vpmulhuw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmulhuw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmulhuw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmulhuw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmulhuw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmulhuw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmulhuw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmulhuw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmulhuw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulhuw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmulhuw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmulhuw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmulhuw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmulhuw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmulhuw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmulhuw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulhuw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmulhuw_zmm_zmm_m() {
	// EVEX_Vpmulhuw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmulhuw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmulhuw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmulhw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmulhw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmulhw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmulhw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmulhw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmulhw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulhw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmulhw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmulhw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmulhw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmulhw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmulhw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmulhw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulhw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmulhw_zmm_zmm_zmm() {
	// EVEX_Vpmulhw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmulhw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmulhw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmulhw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmulhw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmulhw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmulhw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmulhw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmulhw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulhw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmulhw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmulhw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmulhw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmulhw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmulhw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmulhw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulhw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmulhw_zmm_zmm_m() {
	// EVEX_Vpmulhw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmulhw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmulhw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmulld_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmulld_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmulld(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmulld_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpmulld(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmulld_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmulld_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmulld(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmulld_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpmulld(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmulld_zmm_zmm_zmm() {
	// EVEX_Vpmulld_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpmulld(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmulld_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmulld_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpmulld(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpmulld_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmulld(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmulld_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpmulld(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmulld_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpmulld(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpmulld_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmulld(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmulld_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpmulld(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmulld_zmm_zmm_m() {
	// EVEX_Vpmulld_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpmulld(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmulld_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmullq_xmm_xmm_xmm() {
	// EVEX_Vpmullq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpmullq(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmullq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmullq_ymm_ymm_ymm() {
	// EVEX_Vpmullq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpmullq(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmullq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmullq_zmm_zmm_zmm() {
	// EVEX_Vpmullq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpmullq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmullq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmullq_xmm_xmm_m() {
	// EVEX_Vpmullq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpmullq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmullq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmullq_ymm_ymm_m() {
	// EVEX_Vpmullq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpmullq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmullq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmullq_zmm_zmm_m() {
	// EVEX_Vpmullq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpmullq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmullq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmullw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmullw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmullw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmullw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmullw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmullw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmullw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmullw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmullw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmullw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmullw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmullw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmullw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmullw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmullw_zmm_zmm_zmm() {
	// EVEX_Vpmullw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmullw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmullw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmullw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmullw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmullw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmullw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmullw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpmullw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmullw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmullw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmullw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmullw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmullw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmullw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpmullw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmullw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmullw_zmm_zmm_m() {
	// EVEX_Vpmullw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpmullw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmullw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmultishiftqb_xmm_xmm_xmm() {
	// EVEX_Vpmultishiftqb_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpmultishiftqb(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmultishiftqb_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmultishiftqb_ymm_ymm_ymm() {
	// EVEX_Vpmultishiftqb_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpmultishiftqb(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmultishiftqb_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmultishiftqb_zmm_zmm_zmm() {
	// EVEX_Vpmultishiftqb_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpmultishiftqb(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmultishiftqb_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmultishiftqb_xmm_xmm_m() {
	// EVEX_Vpmultishiftqb_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpmultishiftqb(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmultishiftqb_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmultishiftqb_ymm_ymm_m() {
	// EVEX_Vpmultishiftqb_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpmultishiftqb(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmultishiftqb_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmultishiftqb_zmm_zmm_m() {
	// EVEX_Vpmultishiftqb_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpmultishiftqb(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmultishiftqb_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmuludq_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmuludq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmuludq(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmuludq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpmuludq(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmuludq_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpmuludq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmuludq(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpmuludq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpmuludq(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmuludq_zmm_zmm_zmm() {
	// EVEX_Vpmuludq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpmuludq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmuludq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpmuludq_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpmuludq(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpmuludq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpmuludq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmuludq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpmuludq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmuludq_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpmuludq(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpmuludq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpmuludq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpmuludq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpmuludq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpmuludq_zmm_zmm_m() {
	// EVEX_Vpmuludq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpmuludq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpmuludq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntb_xmm_xmm() {
	// EVEX_Vpopcntb_xmm_k1z_xmmm128
	test_instr(16, |a| a.vpopcntb(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntb_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntb_ymm_ymm() {
	// EVEX_Vpopcntb_ymm_k1z_ymmm256
	test_instr(16, |a| a.vpopcntb(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntb_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntb_zmm_zmm() {
	// EVEX_Vpopcntb_zmm_k1z_zmmm512
	test_instr(16, |a| a.vpopcntb(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntb_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntb_xmm_m() {
	// EVEX_Vpopcntb_xmm_k1z_xmmm128
	test_instr(16, |a| a.vpopcntb(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntb_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntb_ymm_m() {
	// EVEX_Vpopcntb_ymm_k1z_ymmm256
	test_instr(16, |a| a.vpopcntb(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntb_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntb_zmm_m() {
	// EVEX_Vpopcntb_zmm_k1z_zmmm512
	test_instr(16, |a| a.vpopcntb(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntb_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntd_xmm_xmm() {
	// EVEX_Vpopcntd_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vpopcntd(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntd_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntd_ymm_ymm() {
	// EVEX_Vpopcntd_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vpopcntd(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntd_ymm_k1z_ymmm256b32, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntd_zmm_zmm() {
	// EVEX_Vpopcntd_zmm_k1z_zmmm512b32
	test_instr(16, |a| a.vpopcntd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntd_zmm_k1z_zmmm512b32, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntd_xmm_m() {
	// EVEX_Vpopcntd_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vpopcntd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntd_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntd_ymm_m() {
	// EVEX_Vpopcntd_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vpopcntd(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntd_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntd_zmm_m() {
	// EVEX_Vpopcntd_zmm_k1z_zmmm512b32
	test_instr(16, |a| a.vpopcntd(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntd_zmm_k1z_zmmm512b32, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntq_xmm_xmm() {
	// EVEX_Vpopcntq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vpopcntq(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntq_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntq_ymm_ymm() {
	// EVEX_Vpopcntq_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vpopcntq(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntq_ymm_k1z_ymmm256b64, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntq_zmm_zmm() {
	// EVEX_Vpopcntq_zmm_k1z_zmmm512b64
	test_instr(16, |a| a.vpopcntq(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntq_zmm_k1z_zmmm512b64, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntq_xmm_m() {
	// EVEX_Vpopcntq_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vpopcntq(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntq_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntq_ymm_m() {
	// EVEX_Vpopcntq_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vpopcntq(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntq_ymm_k1z_ymmm256b64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntq_zmm_m() {
	// EVEX_Vpopcntq_zmm_k1z_zmmm512b64
	test_instr(16, |a| a.vpopcntq(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntq_zmm_k1z_zmmm512b64, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntw_xmm_xmm() {
	// EVEX_Vpopcntw_xmm_k1z_xmmm128
	test_instr(16, |a| a.vpopcntw(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntw_xmm_k1z_xmmm128, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntw_ymm_ymm() {
	// EVEX_Vpopcntw_ymm_k1z_ymmm256
	test_instr(16, |a| a.vpopcntw(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntw_ymm_k1z_ymmm256, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntw_zmm_zmm() {
	// EVEX_Vpopcntw_zmm_k1z_zmmm512
	test_instr(16, |a| a.vpopcntw(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntw_zmm_k1z_zmmm512, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntw_xmm_m() {
	// EVEX_Vpopcntw_xmm_k1z_xmmm128
	test_instr(16, |a| a.vpopcntw(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntw_xmm_k1z_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntw_ymm_m() {
	// EVEX_Vpopcntw_ymm_k1z_ymmm256
	test_instr(16, |a| a.vpopcntw(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntw_ymm_k1z_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpopcntw_zmm_m() {
	// EVEX_Vpopcntw_zmm_k1z_zmmm512
	test_instr(16, |a| a.vpopcntw(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpopcntw_zmm_k1z_zmmm512, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpor_xmm_xmm_xmm() {
	// VEX_Vpor_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpor(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpor_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpor_ymm_ymm_ymm() {
	// VEX_Vpor_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpor(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpor_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpor_xmm_xmm_m() {
	// VEX_Vpor_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpor(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpor_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpor_ymm_ymm_m() {
	// VEX_Vpor_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpor(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpor_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpord_xmm_xmm_xmm() {
	// EVEX_Vpord_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpord(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpord_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpord_ymm_ymm_ymm() {
	// EVEX_Vpord_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpord(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpord_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpord_zmm_zmm_zmm() {
	// EVEX_Vpord_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpord(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpord_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpord_xmm_xmm_m() {
	// EVEX_Vpord_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpord(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpord_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpord_ymm_ymm_m() {
	// EVEX_Vpord_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpord(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpord_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpord_zmm_zmm_m() {
	// EVEX_Vpord_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpord(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpord_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vporq_xmm_xmm_xmm() {
	// EVEX_Vporq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vporq(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vporq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vporq_ymm_ymm_ymm() {
	// EVEX_Vporq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vporq(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vporq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vporq_zmm_zmm_zmm() {
	// EVEX_Vporq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vporq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vporq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vporq_xmm_xmm_m() {
	// EVEX_Vporq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vporq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vporq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vporq_ymm_ymm_m() {
	// EVEX_Vporq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vporq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vporq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vporq_zmm_zmm_m() {
	// EVEX_Vporq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vporq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vporq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpperm_xmm_xmm_xmm_xmm() {
	// XOP_Vpperm_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpperm(xmm2, xmm3, xmm4, xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpperm_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4, Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpperm_xmm_xmm_m_xmm() {
	// XOP_Vpperm_xmm_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpperm(xmm2, xmm3, xmmword_ptr(si), xmm5).unwrap(),
		Instruction::with4(Code::XOP_Vpperm_xmm_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM5).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpperm_xmm_xmm_xmm_m() {
	// XOP_Vpperm_xmm_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpperm(xmm2, xmm3, xmm4, xmmword_ptr(si)).unwrap(),
		Instruction::with4(Code::XOP_Vpperm_xmm_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprold_xmm_xmm_i() {
	// EVEX_Vprold_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vprold(xmm2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprold_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vprold(xmm2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprold_ymm_ymm_i() {
	// EVEX_Vprold_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vprold(ymm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprold_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vprold(ymm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprold_zmm_zmm_i() {
	// EVEX_Vprold_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vprold(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprold_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vprold(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprold_xmm_m_i() {
	// EVEX_Vprold_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vprold(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprold_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vprold(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprold_ymm_m_i() {
	// EVEX_Vprold_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vprold(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprold_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vprold(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprold_zmm_m_i() {
	// EVEX_Vprold_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vprold(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprold_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vprold(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprold_xmm_xmm_u() {
	// EVEX_Vprold_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vprold(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprold_ymm_ymm_u() {
	// EVEX_Vprold_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vprold(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprold_zmm_zmm_u() {
	// EVEX_Vprold_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vprold(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprold_xmm_m_u() {
	// EVEX_Vprold_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vprold(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprold_ymm_m_u() {
	// EVEX_Vprold_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vprold(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprold_zmm_m_u() {
	// EVEX_Vprold_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vprold(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolq_xmm_xmm_i() {
	// EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vprolq(xmm2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vprolq(xmm2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolq_ymm_ymm_i() {
	// EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vprolq(ymm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vprolq(ymm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolq_zmm_zmm_i() {
	// EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vprolq(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vprolq(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolq_xmm_m_i() {
	// EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vprolq(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vprolq(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolq_ymm_m_i() {
	// EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vprolq(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vprolq(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolq_zmm_m_i() {
	// EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vprolq(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vprolq(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolq_xmm_xmm_u() {
	// EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vprolq(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolq_ymm_ymm_u() {
	// EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vprolq(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolq_zmm_zmm_u() {
	// EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vprolq(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolq_xmm_m_u() {
	// EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vprolq(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolq_ymm_m_u() {
	// EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vprolq(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolq_zmm_m_u() {
	// EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vprolq(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolvd_xmm_xmm_xmm() {
	// EVEX_Vprolvd_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vprolvd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolvd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolvd_ymm_ymm_ymm() {
	// EVEX_Vprolvd_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vprolvd(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolvd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolvd_zmm_zmm_zmm() {
	// EVEX_Vprolvd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vprolvd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolvd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolvd_xmm_xmm_m() {
	// EVEX_Vprolvd_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vprolvd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolvd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolvd_ymm_ymm_m() {
	// EVEX_Vprolvd_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vprolvd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolvd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolvd_zmm_zmm_m() {
	// EVEX_Vprolvd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vprolvd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolvd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolvq_xmm_xmm_xmm() {
	// EVEX_Vprolvq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vprolvq(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolvq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolvq_ymm_ymm_ymm() {
	// EVEX_Vprolvq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vprolvq(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolvq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolvq_zmm_zmm_zmm() {
	// EVEX_Vprolvq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vprolvq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolvq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolvq_xmm_xmm_m() {
	// EVEX_Vprolvq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vprolvq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolvq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolvq_ymm_ymm_m() {
	// EVEX_Vprolvq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vprolvq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolvq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprolvq_zmm_zmm_m() {
	// EVEX_Vprolvq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vprolvq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprolvq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprord_xmm_xmm_i() {
	// EVEX_Vprord_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vprord(xmm2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprord_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vprord(xmm2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprord_ymm_ymm_i() {
	// EVEX_Vprord_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vprord(ymm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprord_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vprord(ymm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprord_zmm_zmm_i() {
	// EVEX_Vprord_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vprord(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprord_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vprord(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprord_xmm_m_i() {
	// EVEX_Vprord_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vprord(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprord_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vprord(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprord_ymm_m_i() {
	// EVEX_Vprord_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vprord(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprord_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vprord(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprord_zmm_m_i() {
	// EVEX_Vprord_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vprord(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprord_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vprord(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprord_xmm_xmm_u() {
	// EVEX_Vprord_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vprord(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprord_ymm_ymm_u() {
	// EVEX_Vprord_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vprord(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprord_zmm_zmm_u() {
	// EVEX_Vprord_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vprord(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprord_xmm_m_u() {
	// EVEX_Vprord_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vprord(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprord_ymm_m_u() {
	// EVEX_Vprord_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vprord(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprord_zmm_m_u() {
	// EVEX_Vprord_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vprord(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorq_xmm_xmm_i() {
	// EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vprorq(xmm2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vprorq(xmm2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorq_ymm_ymm_i() {
	// EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vprorq(ymm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vprorq(ymm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorq_zmm_zmm_i() {
	// EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vprorq(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vprorq(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorq_xmm_m_i() {
	// EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vprorq(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vprorq(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorq_ymm_m_i() {
	// EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vprorq(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vprorq(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorq_zmm_m_i() {
	// EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vprorq(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vprorq(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorq_xmm_xmm_u() {
	// EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vprorq(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorq_ymm_ymm_u() {
	// EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vprorq(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorq_zmm_zmm_u() {
	// EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vprorq(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorq_xmm_m_u() {
	// EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vprorq(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorq_ymm_m_u() {
	// EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vprorq(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorq_zmm_m_u() {
	// EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vprorq(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorvd_xmm_xmm_xmm() {
	// EVEX_Vprorvd_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vprorvd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorvd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorvd_ymm_ymm_ymm() {
	// EVEX_Vprorvd_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vprorvd(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorvd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorvd_zmm_zmm_zmm() {
	// EVEX_Vprorvd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vprorvd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorvd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorvd_xmm_xmm_m() {
	// EVEX_Vprorvd_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vprorvd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorvd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorvd_ymm_ymm_m() {
	// EVEX_Vprorvd_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vprorvd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorvd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorvd_zmm_zmm_m() {
	// EVEX_Vprorvd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vprorvd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorvd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorvq_xmm_xmm_xmm() {
	// EVEX_Vprorvq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vprorvq(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorvq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorvq_ymm_ymm_ymm() {
	// EVEX_Vprorvq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vprorvq(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorvq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorvq_zmm_zmm_zmm() {
	// EVEX_Vprorvq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vprorvq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorvq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorvq_xmm_xmm_m() {
	// EVEX_Vprorvq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vprorvq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorvq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorvq_ymm_ymm_m() {
	// EVEX_Vprorvq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vprorvq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorvq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprorvq_zmm_zmm_m() {
	// EVEX_Vprorvq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vprorvq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vprorvq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotb_xmm_xmm_xmm() {
	// XOP_Vprotb_xmm_xmmm128_xmm
	test_instr(16, |a| a.vprotb(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vprotb_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotb_xmm_m_xmm() {
	// XOP_Vprotb_xmm_xmmm128_xmm
	test_instr(16, |a| a.vprotb(xmm2, xmmword_ptr(si), xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vprotb_xmm_xmmm128_xmm, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotb_xmm_xmm_m() {
	// XOP_Vprotb_xmm_xmm_xmmm128
	test_instr(16, |a| a.vprotb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::XOP_Vprotb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotb_xmm_xmm_i() {
	// XOP_Vprotb_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotb(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::XOP_Vprotb_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vprotb_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotb(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::XOP_Vprotb_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotb_xmm_m_i() {
	// XOP_Vprotb_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotb(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::XOP_Vprotb_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vprotb_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotb(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::XOP_Vprotb_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotb_xmm_xmm_u() {
	// XOP_Vprotb_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotb(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::XOP_Vprotb_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotb_xmm_m_u() {
	// XOP_Vprotb_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotb(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::XOP_Vprotb_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotd_xmm_xmm_xmm() {
	// XOP_Vprotd_xmm_xmmm128_xmm
	test_instr(16, |a| a.vprotd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vprotd_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotd_xmm_m_xmm() {
	// XOP_Vprotd_xmm_xmmm128_xmm
	test_instr(16, |a| a.vprotd(xmm2, xmmword_ptr(si), xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vprotd_xmm_xmmm128_xmm, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotd_xmm_xmm_m() {
	// XOP_Vprotd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vprotd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::XOP_Vprotd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotd_xmm_xmm_i() {
	// XOP_Vprotd_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotd(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::XOP_Vprotd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vprotd_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotd(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::XOP_Vprotd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotd_xmm_m_i() {
	// XOP_Vprotd_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotd(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::XOP_Vprotd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vprotd_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotd(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::XOP_Vprotd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotd_xmm_xmm_u() {
	// XOP_Vprotd_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotd(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::XOP_Vprotd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotd_xmm_m_u() {
	// XOP_Vprotd_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotd(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::XOP_Vprotd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotq_xmm_xmm_xmm() {
	// XOP_Vprotq_xmm_xmmm128_xmm
	test_instr(16, |a| a.vprotq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vprotq_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotq_xmm_m_xmm() {
	// XOP_Vprotq_xmm_xmmm128_xmm
	test_instr(16, |a| a.vprotq(xmm2, xmmword_ptr(si), xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vprotq_xmm_xmmm128_xmm, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotq_xmm_xmm_m() {
	// XOP_Vprotq_xmm_xmm_xmmm128
	test_instr(16, |a| a.vprotq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::XOP_Vprotq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotq_xmm_xmm_i() {
	// XOP_Vprotq_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotq(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::XOP_Vprotq_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vprotq_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotq(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::XOP_Vprotq_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotq_xmm_m_i() {
	// XOP_Vprotq_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotq(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::XOP_Vprotq_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vprotq_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotq(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::XOP_Vprotq_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotq_xmm_xmm_u() {
	// XOP_Vprotq_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotq(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::XOP_Vprotq_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotq_xmm_m_u() {
	// XOP_Vprotq_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotq(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::XOP_Vprotq_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotw_xmm_xmm_xmm() {
	// XOP_Vprotw_xmm_xmmm128_xmm
	test_instr(16, |a| a.vprotw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vprotw_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotw_xmm_m_xmm() {
	// XOP_Vprotw_xmm_xmmm128_xmm
	test_instr(16, |a| a.vprotw(xmm2, xmmword_ptr(si), xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vprotw_xmm_xmmm128_xmm, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotw_xmm_xmm_m() {
	// XOP_Vprotw_xmm_xmm_xmmm128
	test_instr(16, |a| a.vprotw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::XOP_Vprotw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotw_xmm_xmm_i() {
	// XOP_Vprotw_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotw(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::XOP_Vprotw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vprotw_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotw(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::XOP_Vprotw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotw_xmm_m_i() {
	// XOP_Vprotw_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotw(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::XOP_Vprotw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// XOP_Vprotw_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotw(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::XOP_Vprotw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotw_xmm_xmm_u() {
	// XOP_Vprotw_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotw(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::XOP_Vprotw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vprotw_xmm_m_u() {
	// XOP_Vprotw_xmm_xmmm128_imm8
	test_instr(16, |a| a.vprotw(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::XOP_Vprotw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsadbw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsadbw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsadbw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsadbw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsadbw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsadbw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::EVEX_Vpsadbw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsadbw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsadbw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsadbw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsadbw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsadbw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsadbw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::EVEX_Vpsadbw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsadbw_zmm_zmm_zmm() {
	// EVEX_Vpsadbw_zmm_zmm_zmmm512
	test_instr(16, |a| a.vpsadbw(zmm2, zmm3, zmm4).unwrap(),
		Instruction::with3(Code::EVEX_Vpsadbw_zmm_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsadbw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsadbw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsadbw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsadbw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsadbw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsadbw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::EVEX_Vpsadbw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsadbw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsadbw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsadbw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsadbw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsadbw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsadbw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::EVEX_Vpsadbw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsadbw_zmm_zmm_m() {
	// EVEX_Vpsadbw_zmm_zmm_zmmm512
	test_instr(16, |a| a.vpsadbw(zmm2, zmm3, zmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::EVEX_Vpsadbw_zmm_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpscatterdd_m_xmm() {
	// EVEX_Vpscatterdd_vm32x_k1_xmm
	test_instr(16, |a| a.vpscatterdd(ptr(edx+xmm2).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpscatterdd_vm32x_k1_xmm, MemoryOperand::new(Register::EDX, Register::XMM2, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpscatterdd_m_ymm() {
	// EVEX_Vpscatterdd_vm32y_k1_ymm
	test_instr(16, |a| a.vpscatterdd(ptr(edx+ymm2).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpscatterdd_vm32y_k1_ymm, MemoryOperand::new(Register::EDX, Register::YMM2, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpscatterdd_m_zmm() {
	// EVEX_Vpscatterdd_vm32z_k1_zmm
	test_instr(16, |a| a.vpscatterdd(ptr(edx+zmm2).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpscatterdd_vm32z_k1_zmm, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpscatterdq_m_xmm() {
	// EVEX_Vpscatterdq_vm32x_k1_xmm
	test_instr(16, |a| a.vpscatterdq(ptr(edx+xmm2).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpscatterdq_vm32x_k1_xmm, MemoryOperand::new(Register::EDX, Register::XMM2, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpscatterdq_m_ymm() {
	// EVEX_Vpscatterdq_vm32x_k1_ymm
	test_instr(16, |a| a.vpscatterdq(ptr(edx+xmm2).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpscatterdq_vm32x_k1_ymm, MemoryOperand::new(Register::EDX, Register::XMM2, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpscatterdq_m_zmm() {
	// EVEX_Vpscatterdq_vm32y_k1_zmm
	test_instr(16, |a| a.vpscatterdq(ptr(edx+ymm2).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpscatterdq_vm32y_k1_zmm, MemoryOperand::new(Register::EDX, Register::YMM2, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpscatterqd_m_xmm() {
	/* if op0.index().is_xmm() */ {
		// EVEX_Vpscatterqd_vm64x_k1_xmm
		test_instr(16, |a| a.vpscatterqd(ptr(edx+xmm2).k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpscatterqd_vm64x_k1_xmm, MemoryOperand::new(Register::EDX, Register::XMM2, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.index().is_ymm() */ {
		// EVEX_Vpscatterqd_vm64y_k1_xmm
		test_instr(16, |a| a.vpscatterqd(ptr(edx+ymm2).k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vpscatterqd_vm64y_k1_xmm, MemoryOperand::new(Register::EDX, Register::YMM2, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpscatterqd_vm64y_k1_xmm
		test_invalid_instr(16, |a| assert!(a.vpscatterqd(ptr(edx+zmm0).k1(), xmm3).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpscatterqd_m_ymm() {
	// EVEX_Vpscatterqd_vm64z_k1_ymm
	test_instr(16, |a| a.vpscatterqd(ptr(edx+zmm2).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpscatterqd_vm64z_k1_ymm, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpscatterqq_m_xmm() {
	// EVEX_Vpscatterqq_vm64x_k1_xmm
	test_instr(16, |a| a.vpscatterqq(ptr(edx+xmm2).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpscatterqq_vm64x_k1_xmm, MemoryOperand::new(Register::EDX, Register::XMM2, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpscatterqq_m_ymm() {
	// EVEX_Vpscatterqq_vm64y_k1_ymm
	test_instr(16, |a| a.vpscatterqq(ptr(edx+ymm2).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpscatterqq_vm64y_k1_ymm, MemoryOperand::new(Register::EDX, Register::YMM2, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpscatterqq_m_zmm() {
	// EVEX_Vpscatterqq_vm64z_k1_zmm
	test_instr(16, |a| a.vpscatterqq(ptr(edx+zmm2).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vpscatterqq_vm64z_k1_zmm, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshab_xmm_xmm_xmm() {
	// XOP_Vpshab_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpshab(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vpshab_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshab_xmm_m_xmm() {
	// XOP_Vpshab_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpshab(xmm2, xmmword_ptr(si), xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vpshab_xmm_xmmm128_xmm, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshab_xmm_xmm_m() {
	// XOP_Vpshab_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpshab(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::XOP_Vpshab_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshad_xmm_xmm_xmm() {
	// XOP_Vpshad_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpshad(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vpshad_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshad_xmm_m_xmm() {
	// XOP_Vpshad_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpshad(xmm2, xmmword_ptr(si), xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vpshad_xmm_xmmm128_xmm, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshad_xmm_xmm_m() {
	// XOP_Vpshad_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpshad(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::XOP_Vpshad_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshaq_xmm_xmm_xmm() {
	// XOP_Vpshaq_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpshaq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vpshaq_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshaq_xmm_m_xmm() {
	// XOP_Vpshaq_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpshaq(xmm2, xmmword_ptr(si), xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vpshaq_xmm_xmmm128_xmm, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshaq_xmm_xmm_m() {
	// XOP_Vpshaq_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpshaq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::XOP_Vpshaq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshaw_xmm_xmm_xmm() {
	// XOP_Vpshaw_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpshaw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vpshaw_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshaw_xmm_m_xmm() {
	// XOP_Vpshaw_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpshaw(xmm2, xmmword_ptr(si), xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vpshaw_xmm_xmmm128_xmm, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshaw_xmm_xmm_m() {
	// XOP_Vpshaw_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpshaw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::XOP_Vpshaw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshlb_xmm_xmm_xmm() {
	// XOP_Vpshlb_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpshlb(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vpshlb_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshlb_xmm_m_xmm() {
	// XOP_Vpshlb_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpshlb(xmm2, xmmword_ptr(si), xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vpshlb_xmm_xmmm128_xmm, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshlb_xmm_xmm_m() {
	// XOP_Vpshlb_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpshlb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::XOP_Vpshlb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshld_xmm_xmm_xmm() {
	// XOP_Vpshld_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpshld(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vpshld_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshld_xmm_m_xmm() {
	// XOP_Vpshld_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpshld(xmm2, xmmword_ptr(si), xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vpshld_xmm_xmmm128_xmm, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshld_xmm_xmm_m() {
	// XOP_Vpshld_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpshld(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::XOP_Vpshld_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldd_xmm_xmm_xmm_i() {
	// EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpshldd(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpshldd(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldd_ymm_ymm_ymm_i() {
	// EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpshldd(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpshldd(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldd_zmm_zmm_zmm_i() {
	// EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpshldd(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpshldd(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldd_xmm_xmm_m_i() {
	// EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpshldd(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpshldd(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldd_ymm_ymm_m_i() {
	// EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpshldd(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpshldd(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldd_zmm_zmm_m_i() {
	// EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpshldd(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpshldd(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldd_xmm_xmm_xmm_u() {
	// EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpshldd(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldd_ymm_ymm_ymm_u() {
	// EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpshldd(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldd_zmm_zmm_zmm_u() {
	// EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpshldd(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldd_xmm_xmm_m_u() {
	// EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpshldd(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldd_ymm_ymm_m_u() {
	// EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpshldd(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldd_zmm_zmm_m_u() {
	// EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpshldd(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldq_xmm_xmm_xmm_i() {
	// EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpshldq(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpshldq(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldq_ymm_ymm_ymm_i() {
	// EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpshldq(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpshldq(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldq_zmm_zmm_zmm_i() {
	// EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpshldq(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpshldq(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldq_xmm_xmm_m_i() {
	// EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpshldq(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpshldq(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldq_ymm_ymm_m_i() {
	// EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpshldq(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpshldq(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldq_zmm_zmm_m_i() {
	// EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpshldq(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpshldq(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldq_xmm_xmm_xmm_u() {
	// EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpshldq(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldq_ymm_ymm_ymm_u() {
	// EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpshldq(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldq_zmm_zmm_zmm_u() {
	// EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpshldq(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldq_xmm_xmm_m_u() {
	// EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpshldq(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldq_ymm_ymm_m_u() {
	// EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpshldq(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldq_zmm_zmm_m_u() {
	// EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpshldq(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvd_xmm_xmm_xmm() {
	// EVEX_Vpshldvd_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpshldvd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvd_ymm_ymm_ymm() {
	// EVEX_Vpshldvd_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpshldvd(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvd_zmm_zmm_zmm() {
	// EVEX_Vpshldvd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpshldvd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvd_xmm_xmm_m() {
	// EVEX_Vpshldvd_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpshldvd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvd_ymm_ymm_m() {
	// EVEX_Vpshldvd_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpshldvd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvd_zmm_zmm_m() {
	// EVEX_Vpshldvd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpshldvd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvq_xmm_xmm_xmm() {
	// EVEX_Vpshldvq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpshldvq(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvq_ymm_ymm_ymm() {
	// EVEX_Vpshldvq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpshldvq(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvq_zmm_zmm_zmm() {
	// EVEX_Vpshldvq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpshldvq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvq_xmm_xmm_m() {
	// EVEX_Vpshldvq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpshldvq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvq_ymm_ymm_m() {
	// EVEX_Vpshldvq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpshldvq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvq_zmm_zmm_m() {
	// EVEX_Vpshldvq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpshldvq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvw_xmm_xmm_xmm() {
	// EVEX_Vpshldvw_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpshldvw(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvw_ymm_ymm_ymm() {
	// EVEX_Vpshldvw_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpshldvw(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvw_zmm_zmm_zmm() {
	// EVEX_Vpshldvw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpshldvw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvw_xmm_xmm_m() {
	// EVEX_Vpshldvw_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpshldvw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvw_ymm_ymm_m() {
	// EVEX_Vpshldvw_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpshldvw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldvw_zmm_zmm_m() {
	// EVEX_Vpshldvw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpshldvw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshldvw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldw_xmm_xmm_xmm_i() {
	// EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpshldw(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpshldw(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldw_ymm_ymm_ymm_i() {
	// EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpshldw(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpshldw(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldw_zmm_zmm_zmm_i() {
	// EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpshldw(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpshldw(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldw_xmm_xmm_m_i() {
	// EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpshldw(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpshldw(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldw_ymm_ymm_m_i() {
	// EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpshldw(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpshldw(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldw_zmm_zmm_m_i() {
	// EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpshldw(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpshldw(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldw_xmm_xmm_xmm_u() {
	// EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpshldw(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldw_ymm_ymm_ymm_u() {
	// EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpshldw(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldw_zmm_zmm_zmm_u() {
	// EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpshldw(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldw_xmm_xmm_m_u() {
	// EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpshldw(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldw_ymm_ymm_m_u() {
	// EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpshldw(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshldw_zmm_zmm_m_u() {
	// EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpshldw(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshlq_xmm_xmm_xmm() {
	// XOP_Vpshlq_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpshlq(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vpshlq_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshlq_xmm_m_xmm() {
	// XOP_Vpshlq_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpshlq(xmm2, xmmword_ptr(si), xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vpshlq_xmm_xmmm128_xmm, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshlq_xmm_xmm_m() {
	// XOP_Vpshlq_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpshlq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::XOP_Vpshlq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshlw_xmm_xmm_xmm() {
	// XOP_Vpshlw_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpshlw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vpshlw_xmm_xmmm128_xmm, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshlw_xmm_m_xmm() {
	// XOP_Vpshlw_xmm_xmmm128_xmm
	test_instr(16, |a| a.vpshlw(xmm2, xmmword_ptr(si), xmm4).unwrap(),
		Instruction::with3(Code::XOP_Vpshlw_xmm_xmmm128_xmm, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshlw_xmm_xmm_m() {
	// XOP_Vpshlw_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpshlw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::XOP_Vpshlw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdd_xmm_xmm_xmm_i() {
	// EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpshrdd(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpshrdd(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdd_ymm_ymm_ymm_i() {
	// EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpshrdd(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpshrdd(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdd_zmm_zmm_zmm_i() {
	// EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpshrdd(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpshrdd(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdd_xmm_xmm_m_i() {
	// EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpshrdd(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpshrdd(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdd_ymm_ymm_m_i() {
	// EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpshrdd(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpshrdd(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdd_zmm_zmm_m_i() {
	// EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpshrdd(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpshrdd(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdd_xmm_xmm_xmm_u() {
	// EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpshrdd(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdd_ymm_ymm_ymm_u() {
	// EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpshrdd(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdd_zmm_zmm_zmm_u() {
	// EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpshrdd(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdd_xmm_xmm_m_u() {
	// EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpshrdd(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdd_ymm_ymm_m_u() {
	// EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpshrdd(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdd_zmm_zmm_m_u() {
	// EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpshrdd(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdq_xmm_xmm_xmm_i() {
	// EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpshrdq(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpshrdq(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdq_ymm_ymm_ymm_i() {
	// EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpshrdq(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpshrdq(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdq_zmm_zmm_zmm_i() {
	// EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpshrdq(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpshrdq(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdq_xmm_xmm_m_i() {
	// EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpshrdq(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpshrdq(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdq_ymm_ymm_m_i() {
	// EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpshrdq(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpshrdq(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdq_zmm_zmm_m_i() {
	// EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpshrdq(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpshrdq(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdq_xmm_xmm_xmm_u() {
	// EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpshrdq(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdq_ymm_ymm_ymm_u() {
	// EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpshrdq(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdq_zmm_zmm_zmm_u() {
	// EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpshrdq(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdq_xmm_xmm_m_u() {
	// EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpshrdq(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdq_ymm_ymm_m_u() {
	// EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpshrdq(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdq_zmm_zmm_m_u() {
	// EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpshrdq(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvd_xmm_xmm_xmm() {
	// EVEX_Vpshrdvd_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpshrdvd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvd_ymm_ymm_ymm() {
	// EVEX_Vpshrdvd_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpshrdvd(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvd_zmm_zmm_zmm() {
	// EVEX_Vpshrdvd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpshrdvd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvd_xmm_xmm_m() {
	// EVEX_Vpshrdvd_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpshrdvd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvd_ymm_ymm_m() {
	// EVEX_Vpshrdvd_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpshrdvd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvd_zmm_zmm_m() {
	// EVEX_Vpshrdvd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpshrdvd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvq_xmm_xmm_xmm() {
	// EVEX_Vpshrdvq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpshrdvq(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvq_ymm_ymm_ymm() {
	// EVEX_Vpshrdvq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpshrdvq(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvq_zmm_zmm_zmm() {
	// EVEX_Vpshrdvq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpshrdvq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvq_xmm_xmm_m() {
	// EVEX_Vpshrdvq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpshrdvq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvq_ymm_ymm_m() {
	// EVEX_Vpshrdvq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpshrdvq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvq_zmm_zmm_m() {
	// EVEX_Vpshrdvq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpshrdvq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvw_xmm_xmm_xmm() {
	// EVEX_Vpshrdvw_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpshrdvw(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvw_ymm_ymm_ymm() {
	// EVEX_Vpshrdvw_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpshrdvw(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvw_zmm_zmm_zmm() {
	// EVEX_Vpshrdvw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpshrdvw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvw_xmm_xmm_m() {
	// EVEX_Vpshrdvw_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpshrdvw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvw_ymm_ymm_m() {
	// EVEX_Vpshrdvw_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpshrdvw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdvw_zmm_zmm_m() {
	// EVEX_Vpshrdvw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpshrdvw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshrdvw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdw_xmm_xmm_xmm_i() {
	// EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpshrdw(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpshrdw(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdw_ymm_ymm_ymm_i() {
	// EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpshrdw(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpshrdw(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdw_zmm_zmm_zmm_i() {
	// EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpshrdw(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpshrdw(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdw_xmm_xmm_m_i() {
	// EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpshrdw(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpshrdw(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdw_ymm_ymm_m_i() {
	// EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpshrdw(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpshrdw(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdw_zmm_zmm_m_i() {
	// EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpshrdw(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpshrdw(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdw_xmm_xmm_xmm_u() {
	// EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpshrdw(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdw_ymm_ymm_ymm_u() {
	// EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpshrdw(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdw_zmm_zmm_zmm_u() {
	// EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpshrdw(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdw_xmm_xmm_m_u() {
	// EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpshrdw(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdw_ymm_ymm_m_u() {
	// EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpshrdw(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshrdw_zmm_zmm_m_u() {
	// EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpshrdw(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshufb_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpshufb(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpshufb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpshufb(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufb_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpshufb(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpshufb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpshufb(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufb_zmm_zmm_zmm() {
	// EVEX_Vpshufb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpshufb(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshufb_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpshufb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpshufb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpshufb(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufb_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpshufb(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpshufb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpshufb(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufb_zmm_zmm_m() {
	// EVEX_Vpshufb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpshufb(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshufbitqmb_kr_xmm_xmm() {
	// EVEX_Vpshufbitqmb_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vpshufbitqmb(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufbitqmb_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshufbitqmb_kr_ymm_ymm() {
	// EVEX_Vpshufbitqmb_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vpshufbitqmb(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufbitqmb_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshufbitqmb_kr_zmm_zmm() {
	// EVEX_Vpshufbitqmb_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vpshufbitqmb(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufbitqmb_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshufbitqmb_kr_xmm_m() {
	// EVEX_Vpshufbitqmb_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vpshufbitqmb(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufbitqmb_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshufbitqmb_kr_ymm_m() {
	// EVEX_Vpshufbitqmb_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vpshufbitqmb(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufbitqmb_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshufbitqmb_kr_zmm_m() {
	// EVEX_Vpshufbitqmb_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vpshufbitqmb(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufbitqmb_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshufd_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufd_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshufd(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpshufd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpshufd(xmm2.k1(), xmm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufd_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshufd(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpshufd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpshufd(xmm2.k1(), xmm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufd_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshufd(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpshufd_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpshufd(ymm2.k1(), ymm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshufd(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpshufd_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpshufd(ymm2.k1(), ymm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufd_zmm_zmm_i() {
	// EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpshufd(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpshufd(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshufd_xmm_m_i() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpshufd(xmm2.k1(), dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpshufd_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshufd(xmm2, xmmword_ptr(si), -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpshufd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpshufd(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if op1.is_broadcast() */ {
		// EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpshufd(xmm2.k1(), dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpshufd_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshufd(xmm2, xmmword_ptr(si), -5).unwrap(),
			Instruction::with3(Code::VEX_Vpshufd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpshufd(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufd_ymm_m_i() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpshufd(ymm2.k1(), dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpshufd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshufd(ymm2, ymmword_ptr(si), -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpshufd_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpshufd(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if op1.is_broadcast() */ {
		// EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpshufd(ymm2.k1(), dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpshufd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshufd(ymm2, ymmword_ptr(si), -5).unwrap(),
			Instruction::with3(Code::VEX_Vpshufd_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpshufd(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufd_zmm_m_i() {
	// EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpshufd(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpshufd(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshufd_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufd_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshufd(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpshufd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpshufd(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufd_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshufd(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpshufd_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpshufd(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufd_zmm_zmm_u() {
	// EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpshufd(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshufd_xmm_m_u() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpshufd(xmm2.k1(), dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpshufd_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshufd(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpshufd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpshufd(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufd_ymm_m_u() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpshufd(ymm2.k1(), dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpshufd_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshufd(ymm2, ymmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpshufd_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpshufd(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufd_zmm_m_u() {
	// EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpshufd(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshufhw_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufhw_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshufhw(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpshufhw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpshufhw(xmm2.k1(), xmm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufhw_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshufhw(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpshufhw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpshufhw(xmm2.k1(), xmm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufhw_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufhw_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshufhw(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpshufhw_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpshufhw(ymm2.k1(), ymm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufhw_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshufhw(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpshufhw_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpshufhw(ymm2.k1(), ymm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufhw_zmm_zmm_i() {
	// EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpshufhw(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpshufhw(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshufhw_xmm_m_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufhw_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshufhw(xmm2, xmmword_ptr(si), -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpshufhw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpshufhw(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufhw_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshufhw(xmm2, xmmword_ptr(si), -5).unwrap(),
			Instruction::with3(Code::VEX_Vpshufhw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpshufhw(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufhw_ymm_m_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufhw_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshufhw(ymm2, ymmword_ptr(si), -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpshufhw_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpshufhw(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufhw_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshufhw(ymm2, ymmword_ptr(si), -5).unwrap(),
			Instruction::with3(Code::VEX_Vpshufhw_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpshufhw(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufhw_zmm_m_i() {
	// EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpshufhw(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpshufhw(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshufhw_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufhw_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshufhw(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpshufhw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpshufhw(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufhw_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufhw_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshufhw(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpshufhw_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpshufhw(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufhw_zmm_zmm_u() {
	// EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpshufhw(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshufhw_xmm_m_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufhw_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshufhw(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpshufhw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpshufhw(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufhw_ymm_m_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshufhw_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshufhw(ymm2, ymmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpshufhw_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpshufhw(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshufhw_zmm_m_u() {
	// EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpshufhw(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshuflw_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshuflw_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshuflw(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpshuflw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpshuflw(xmm2.k1(), xmm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshuflw_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshuflw(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpshuflw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpshuflw(xmm2.k1(), xmm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshuflw_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshuflw_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshuflw(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpshuflw_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpshuflw(ymm2.k1(), ymm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshuflw_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshuflw(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpshuflw_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpshuflw(ymm2.k1(), ymm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshuflw_zmm_zmm_i() {
	// EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpshuflw(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpshuflw(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshuflw_xmm_m_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshuflw_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshuflw(xmm2, xmmword_ptr(si), -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpshuflw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpshuflw(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshuflw_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshuflw(xmm2, xmmword_ptr(si), -5).unwrap(),
			Instruction::with3(Code::VEX_Vpshuflw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpshuflw(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshuflw_ymm_m_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshuflw_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshuflw(ymm2, ymmword_ptr(si), -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpshuflw_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpshuflw(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshuflw_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshuflw(ymm2, ymmword_ptr(si), -5).unwrap(),
			Instruction::with3(Code::VEX_Vpshuflw_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpshuflw(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshuflw_zmm_m_i() {
	// EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpshuflw(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpshuflw(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshuflw_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshuflw_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshuflw(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpshuflw_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpshuflw(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshuflw_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshuflw_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshuflw(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpshuflw_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpshuflw(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshuflw_zmm_zmm_u() {
	// EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpshuflw(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpshuflw_xmm_m_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshuflw_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpshuflw(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpshuflw_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpshuflw(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshuflw_ymm_m_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpshuflw_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpshuflw(ymm2, ymmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpshuflw_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpshuflw(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpshuflw_zmm_m_u() {
	// EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpshuflw(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsignb_xmm_xmm_xmm() {
	// VEX_Vpsignb_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpsignb(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpsignb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsignb_ymm_ymm_ymm() {
	// VEX_Vpsignb_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpsignb(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpsignb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsignb_xmm_xmm_m() {
	// VEX_Vpsignb_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpsignb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpsignb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsignb_ymm_ymm_m() {
	// VEX_Vpsignb_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpsignb(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpsignb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsignd_xmm_xmm_xmm() {
	// VEX_Vpsignd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpsignd(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpsignd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsignd_ymm_ymm_ymm() {
	// VEX_Vpsignd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpsignd(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpsignd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsignd_xmm_xmm_m() {
	// VEX_Vpsignd_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpsignd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpsignd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsignd_ymm_ymm_m() {
	// VEX_Vpsignd_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpsignd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpsignd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsignw_xmm_xmm_xmm() {
	// VEX_Vpsignw_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpsignw(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpsignw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsignw_ymm_ymm_ymm() {
	// VEX_Vpsignw_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpsignw(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpsignw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsignw_xmm_xmm_m() {
	// VEX_Vpsignw_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpsignw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpsignw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsignw_ymm_ymm_m() {
	// VEX_Vpsignw_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpsignw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpsignw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslld_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpslld_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpslld(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpslld_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpslld_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpslld(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpslld_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpslld_ymm_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpslld_ymm_ymm_xmmm128
		test_instr(16, |a| a.vpslld(ymm2, ymm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpslld_ymm_ymm_xmmm128, Register::YMM2, Register::YMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpslld_ymm_k1z_ymm_xmmm128
		test_instr(16, |a| a.vpslld(ymm2.k1(), ymm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpslld_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpslld_zmm_zmm_xmm() {
	// EVEX_Vpslld_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpslld(zmm2.k1(), zmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpslld_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslld_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpslld_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpslld(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpslld_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpslld_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpslld(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpslld_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpslld_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpslld_ymm_ymm_xmmm128
		test_instr(16, |a| a.vpslld(ymm2, ymm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpslld_ymm_ymm_xmmm128, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpslld_ymm_k1z_ymm_xmmm128
		test_instr(16, |a| a.vpslld(ymm2.k1(), ymm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpslld_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpslld_zmm_zmm_m() {
	// EVEX_Vpslld_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpslld(zmm2.k1(), zmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpslld_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslld_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpslld_xmm_xmm_imm8
		test_instr(16, |a| a.vpslld(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpslld_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpslld(xmm2.k1(), xmm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpslld_xmm_xmm_imm8
		test_instr(16, |a| a.vpslld(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpslld_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpslld(xmm2.k1(), xmm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpslld_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpslld_ymm_ymm_imm8
		test_instr(16, |a| a.vpslld(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpslld_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpslld(ymm2.k1(), ymm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpslld_ymm_ymm_imm8
		test_instr(16, |a| a.vpslld(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpslld_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpslld(ymm2.k1(), ymm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpslld_zmm_zmm_i() {
	// EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpslld(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpslld(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslld_xmm_m_i() {
	// EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vpslld(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vpslld(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslld_ymm_m_i() {
	// EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vpslld(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vpslld(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslld_zmm_m_i() {
	// EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpslld(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpslld(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslld_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpslld_xmm_xmm_imm8
		test_instr(16, |a| a.vpslld(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpslld_xmm_xmm_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpslld(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpslld_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpslld_ymm_ymm_imm8
		test_instr(16, |a| a.vpslld(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpslld_ymm_ymm_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpslld(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpslld_zmm_zmm_u() {
	// EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpslld(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslld_xmm_m_u() {
	// EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vpslld(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslld_ymm_m_u() {
	// EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vpslld(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslld_zmm_m_u() {
	// EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpslld(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslldq_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpslldq_xmm_xmm_imm8
		test_instr(16, |a| a.vpslldq(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpslldq_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpslldq_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpslldq(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::EVEX_Vpslldq_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpslldq_xmm_xmm_imm8
		test_instr(16, |a| a.vpslldq(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpslldq_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpslldq_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpslldq(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::EVEX_Vpslldq_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpslldq_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpslldq_ymm_ymm_imm8
		test_instr(16, |a| a.vpslldq(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpslldq_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpslldq_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpslldq(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::EVEX_Vpslldq_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpslldq_ymm_ymm_imm8
		test_instr(16, |a| a.vpslldq(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpslldq_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpslldq_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpslldq(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::EVEX_Vpslldq_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpslldq_zmm_zmm_i() {
	// EVEX_Vpslldq_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpslldq(zmm2, zmm3, -5i32).unwrap(),
		Instruction::with3(Code::EVEX_Vpslldq_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpslldq_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpslldq(zmm2, zmm3, -5).unwrap(),
		Instruction::with3(Code::EVEX_Vpslldq_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslldq_xmm_m_i() {
	// EVEX_Vpslldq_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpslldq(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::EVEX_Vpslldq_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpslldq_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpslldq(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::EVEX_Vpslldq_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslldq_ymm_m_i() {
	// EVEX_Vpslldq_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpslldq(ymm2, ymmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::EVEX_Vpslldq_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpslldq_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpslldq(ymm2, ymmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::EVEX_Vpslldq_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslldq_zmm_m_i() {
	// EVEX_Vpslldq_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpslldq(zmm2, zmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::EVEX_Vpslldq_zmm_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpslldq_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpslldq(zmm2, zmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::EVEX_Vpslldq_zmm_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslldq_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpslldq_xmm_xmm_imm8
		test_instr(16, |a| a.vpslldq(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpslldq_xmm_xmm_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpslldq_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpslldq(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::EVEX_Vpslldq_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpslldq_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpslldq_ymm_ymm_imm8
		test_instr(16, |a| a.vpslldq(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpslldq_ymm_ymm_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpslldq_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpslldq(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::EVEX_Vpslldq_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpslldq_zmm_zmm_u() {
	// EVEX_Vpslldq_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpslldq(zmm2, zmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::EVEX_Vpslldq_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslldq_xmm_m_u() {
	// EVEX_Vpslldq_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpslldq(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::EVEX_Vpslldq_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslldq_ymm_m_u() {
	// EVEX_Vpslldq_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpslldq(ymm2, ymmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::EVEX_Vpslldq_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpslldq_zmm_m_u() {
	// EVEX_Vpslldq_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpslldq(zmm2, zmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::EVEX_Vpslldq_zmm_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllq_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsllq(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsllq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllq_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsllq(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllq_ymm_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllq_ymm_ymm_xmmm128
		test_instr(16, |a| a.vpsllq(ymm2, ymm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsllq_ymm_ymm_xmmm128, Register::YMM2, Register::YMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllq_ymm_k1z_ymm_xmmm128
		test_instr(16, |a| a.vpsllq(ymm2.k1(), ymm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllq_zmm_zmm_xmm() {
	// EVEX_Vpsllq_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpsllq(zmm2.k1(), zmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllq_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsllq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsllq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllq_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsllq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllq_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllq_ymm_ymm_xmmm128
		test_instr(16, |a| a.vpsllq(ymm2, ymm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsllq_ymm_ymm_xmmm128, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllq_ymm_k1z_ymm_xmmm128
		test_instr(16, |a| a.vpsllq(ymm2.k1(), ymm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllq_zmm_zmm_m() {
	// EVEX_Vpsllq_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpsllq(zmm2.k1(), zmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllq_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllq_xmm_xmm_imm8
		test_instr(16, |a| a.vpsllq(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpsllq_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8
		test_instr(16, |a| a.vpsllq(xmm2.k1(), xmm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllq_xmm_xmm_imm8
		test_instr(16, |a| a.vpsllq(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpsllq_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8
		test_instr(16, |a| a.vpsllq(xmm2.k1(), xmm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllq_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllq_ymm_ymm_imm8
		test_instr(16, |a| a.vpsllq(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpsllq_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpsllq(ymm2.k1(), ymm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllq_ymm_ymm_imm8
		test_instr(16, |a| a.vpsllq(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpsllq_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpsllq(ymm2.k1(), ymm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllq_zmm_zmm_i() {
	// EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsllq(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsllq(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllq_xmm_m_i() {
	// EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vpsllq(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vpsllq(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllq_ymm_m_i() {
	// EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vpsllq(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vpsllq(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllq_zmm_m_i() {
	// EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsllq(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsllq(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllq_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllq_xmm_xmm_imm8
		test_instr(16, |a| a.vpsllq(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpsllq_xmm_xmm_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8
		test_instr(16, |a| a.vpsllq(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllq_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllq_ymm_ymm_imm8
		test_instr(16, |a| a.vpsllq(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpsllq_ymm_ymm_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpsllq(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllq_zmm_zmm_u() {
	// EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsllq(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllq_xmm_m_u() {
	// EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vpsllq(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllq_ymm_m_u() {
	// EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vpsllq(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllq_zmm_m_u() {
	// EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsllq(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllvd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllvd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsllvd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsllvd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpsllvd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllvd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllvd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsllvd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsllvd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpsllvd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllvd_zmm_zmm_zmm() {
	// EVEX_Vpsllvd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpsllvd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllvd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllvd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpsllvd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpsllvd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsllvd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsllvd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpsllvd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllvd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpsllvd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpsllvd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsllvd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsllvd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpsllvd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllvd_zmm_zmm_m() {
	// EVEX_Vpsllvd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpsllvd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllvd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllvq_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllvq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsllvq(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsllvq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpsllvq(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllvq_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllvq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsllvq(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsllvq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpsllvq(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllvq_zmm_zmm_zmm() {
	// EVEX_Vpsllvq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpsllvq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllvq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllvq_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpsllvq(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpsllvq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsllvq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsllvq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpsllvq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllvq_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpsllvq(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpsllvq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsllvq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsllvq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpsllvq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllvq_zmm_zmm_m() {
	// EVEX_Vpsllvq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpsllvq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllvq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllvw_xmm_xmm_xmm() {
	// EVEX_Vpsllvw_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpsllvw(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllvw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllvw_ymm_ymm_ymm() {
	// EVEX_Vpsllvw_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpsllvw(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllvw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllvw_zmm_zmm_zmm() {
	// EVEX_Vpsllvw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsllvw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllvw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllvw_xmm_xmm_m() {
	// EVEX_Vpsllvw_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpsllvw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllvw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllvw_ymm_ymm_m() {
	// EVEX_Vpsllvw_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpsllvw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllvw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllvw_zmm_zmm_m() {
	// EVEX_Vpsllvw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsllvw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllvw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsllw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsllw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsllw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllw_ymm_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllw_ymm_ymm_xmmm128
		test_instr(16, |a| a.vpsllw(ymm2, ymm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsllw_ymm_ymm_xmmm128, Register::YMM2, Register::YMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllw_ymm_k1z_ymm_xmmm128
		test_instr(16, |a| a.vpsllw(ymm2.k1(), ymm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllw_zmm_zmm_xmm() {
	// EVEX_Vpsllw_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpsllw(zmm2.k1(), zmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsllw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsllw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsllw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllw_ymm_ymm_xmmm128
		test_instr(16, |a| a.vpsllw(ymm2, ymm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsllw_ymm_ymm_xmmm128, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllw_ymm_k1z_ymm_xmmm128
		test_instr(16, |a| a.vpsllw(ymm2.k1(), ymm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllw_zmm_zmm_m() {
	// EVEX_Vpsllw_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpsllw(zmm2.k1(), zmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllw_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllw_xmm_xmm_imm8
		test_instr(16, |a| a.vpsllw(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpsllw_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpsllw(xmm2.k1(), xmm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_xmm_k1z_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllw_xmm_xmm_imm8
		test_instr(16, |a| a.vpsllw(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpsllw_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpsllw(xmm2.k1(), xmm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_xmm_k1z_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllw_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllw_ymm_ymm_imm8
		test_instr(16, |a| a.vpsllw(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpsllw_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpsllw(ymm2.k1(), ymm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_ymm_k1z_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllw_ymm_ymm_imm8
		test_instr(16, |a| a.vpsllw(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpsllw_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpsllw(ymm2.k1(), ymm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_ymm_k1z_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllw_zmm_zmm_i() {
	// EVEX_Vpsllw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsllw(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsllw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsllw(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllw_xmm_m_i() {
	// EVEX_Vpsllw_xmm_k1z_xmmm128_imm8
	test_instr(16, |a| a.vpsllw(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_xmm_k1z_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsllw_xmm_k1z_xmmm128_imm8
	test_instr(16, |a| a.vpsllw(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_xmm_k1z_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllw_ymm_m_i() {
	// EVEX_Vpsllw_ymm_k1z_ymmm256_imm8
	test_instr(16, |a| a.vpsllw(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_ymm_k1z_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsllw_ymm_k1z_ymmm256_imm8
	test_instr(16, |a| a.vpsllw(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_ymm_k1z_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllw_zmm_m_i() {
	// EVEX_Vpsllw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsllw(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsllw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsllw(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllw_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllw_xmm_xmm_imm8
		test_instr(16, |a| a.vpsllw(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpsllw_xmm_xmm_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpsllw(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_xmm_k1z_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllw_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsllw_ymm_ymm_imm8
		test_instr(16, |a| a.vpsllw(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpsllw_ymm_ymm_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsllw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpsllw(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_ymm_k1z_ymmm256_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsllw_zmm_zmm_u() {
	// EVEX_Vpsllw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsllw(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllw_xmm_m_u() {
	// EVEX_Vpsllw_xmm_k1z_xmmm128_imm8
	test_instr(16, |a| a.vpsllw(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_xmm_k1z_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllw_ymm_m_u() {
	// EVEX_Vpsllw_ymm_k1z_ymmm256_imm8
	test_instr(16, |a| a.vpsllw(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_ymm_k1z_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsllw_zmm_m_u() {
	// EVEX_Vpsllw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsllw(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrad_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrad_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsrad(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsrad_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrad_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsrad(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrad_ymm_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrad_ymm_ymm_xmmm128
		test_instr(16, |a| a.vpsrad(ymm2, ymm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsrad_ymm_ymm_xmmm128, Register::YMM2, Register::YMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrad_ymm_k1z_ymm_xmmm128
		test_instr(16, |a| a.vpsrad(ymm2.k1(), ymm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrad_zmm_zmm_xmm() {
	// EVEX_Vpsrad_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpsrad(zmm2.k1(), zmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrad_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrad_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsrad(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsrad_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrad_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsrad(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrad_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrad_ymm_ymm_xmmm128
		test_instr(16, |a| a.vpsrad(ymm2, ymm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsrad_ymm_ymm_xmmm128, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrad_ymm_k1z_ymm_xmmm128
		test_instr(16, |a| a.vpsrad(ymm2.k1(), ymm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrad_zmm_zmm_m() {
	// EVEX_Vpsrad_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpsrad(zmm2.k1(), zmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrad_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrad_xmm_xmm_imm8
		test_instr(16, |a| a.vpsrad(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrad_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpsrad(xmm2.k1(), xmm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrad_xmm_xmm_imm8
		test_instr(16, |a| a.vpsrad(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpsrad_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpsrad(xmm2.k1(), xmm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrad_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrad_ymm_ymm_imm8
		test_instr(16, |a| a.vpsrad(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrad_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpsrad(ymm2.k1(), ymm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrad_ymm_ymm_imm8
		test_instr(16, |a| a.vpsrad(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpsrad_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpsrad(ymm2.k1(), ymm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrad_zmm_zmm_i() {
	// EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpsrad(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpsrad(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrad_xmm_m_i() {
	// EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vpsrad(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vpsrad(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrad_ymm_m_i() {
	// EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vpsrad(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vpsrad(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrad_zmm_m_i() {
	// EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpsrad(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpsrad(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrad_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrad_xmm_xmm_imm8
		test_instr(16, |a| a.vpsrad(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrad_xmm_xmm_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpsrad(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrad_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrad_ymm_ymm_imm8
		test_instr(16, |a| a.vpsrad(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrad_ymm_ymm_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpsrad(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrad_zmm_zmm_u() {
	// EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpsrad(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrad_xmm_m_u() {
	// EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vpsrad(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrad_ymm_m_u() {
	// EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vpsrad(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrad_zmm_m_u() {
	// EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpsrad(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_xmm_xmm_xmm() {
	// EVEX_Vpsraq_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpsraq(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_ymm_ymm_xmm() {
	// EVEX_Vpsraq_ymm_k1z_ymm_xmmm128
	test_instr(16, |a| a.vpsraq(ymm2.k1(), ymm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_zmm_zmm_xmm() {
	// EVEX_Vpsraq_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpsraq(zmm2.k1(), zmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_xmm_xmm_m() {
	// EVEX_Vpsraq_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpsraq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_ymm_ymm_m() {
	// EVEX_Vpsraq_ymm_k1z_ymm_xmmm128
	test_instr(16, |a| a.vpsraq(ymm2.k1(), ymm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_zmm_zmm_m() {
	// EVEX_Vpsraq_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpsraq(zmm2.k1(), zmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_xmm_xmm_i() {
	// EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vpsraq(xmm2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vpsraq(xmm2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_ymm_ymm_i() {
	// EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vpsraq(ymm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vpsraq(ymm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_zmm_zmm_i() {
	// EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsraq(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsraq(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_xmm_m_i() {
	// EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vpsraq(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vpsraq(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_ymm_m_i() {
	// EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vpsraq(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vpsraq(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_zmm_m_i() {
	// EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsraq(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsraq(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_xmm_xmm_u() {
	// EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vpsraq(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_ymm_ymm_u() {
	// EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vpsraq(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_zmm_zmm_u() {
	// EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsraq(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_xmm_m_u() {
	// EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vpsraq(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_ymm_m_u() {
	// EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vpsraq(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraq_zmm_m_u() {
	// EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsraq(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsravd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsravd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsravd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsravd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpsravd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsravd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsravd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsravd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsravd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpsravd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsravd_zmm_zmm_zmm() {
	// EVEX_Vpsravd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpsravd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsravd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsravd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpsravd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpsravd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsravd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsravd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpsravd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsravd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpsravd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpsravd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsravd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsravd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpsravd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsravd_zmm_zmm_m() {
	// EVEX_Vpsravd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpsravd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsravd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsravq_xmm_xmm_xmm() {
	// EVEX_Vpsravq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpsravq(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsravq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsravq_ymm_ymm_ymm() {
	// EVEX_Vpsravq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpsravq(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsravq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsravq_zmm_zmm_zmm() {
	// EVEX_Vpsravq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpsravq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsravq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsravq_xmm_xmm_m() {
	// EVEX_Vpsravq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpsravq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsravq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsravq_ymm_ymm_m() {
	// EVEX_Vpsravq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpsravq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsravq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsravq_zmm_zmm_m() {
	// EVEX_Vpsravq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpsravq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsravq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsravw_xmm_xmm_xmm() {
	// EVEX_Vpsravw_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpsravw(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsravw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsravw_ymm_ymm_ymm() {
	// EVEX_Vpsravw_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpsravw(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsravw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsravw_zmm_zmm_zmm() {
	// EVEX_Vpsravw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsravw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsravw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsravw_xmm_xmm_m() {
	// EVEX_Vpsravw_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpsravw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsravw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsravw_ymm_ymm_m() {
	// EVEX_Vpsravw_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpsravw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsravw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsravw_zmm_zmm_m() {
	// EVEX_Vpsravw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsravw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsravw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsraw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsraw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsraw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsraw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsraw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsraw_ymm_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsraw_ymm_ymm_xmmm128
		test_instr(16, |a| a.vpsraw(ymm2, ymm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsraw_ymm_ymm_xmmm128, Register::YMM2, Register::YMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsraw_ymm_k1z_ymm_xmmm128
		test_instr(16, |a| a.vpsraw(ymm2.k1(), ymm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsraw_zmm_zmm_xmm() {
	// EVEX_Vpsraw_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpsraw(zmm2.k1(), zmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsraw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsraw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsraw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsraw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsraw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsraw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsraw_ymm_ymm_xmmm128
		test_instr(16, |a| a.vpsraw(ymm2, ymm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsraw_ymm_ymm_xmmm128, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsraw_ymm_k1z_ymm_xmmm128
		test_instr(16, |a| a.vpsraw(ymm2.k1(), ymm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsraw_zmm_zmm_m() {
	// EVEX_Vpsraw_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpsraw(zmm2.k1(), zmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraw_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsraw_xmm_xmm_imm8
		test_instr(16, |a| a.vpsraw(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpsraw_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsraw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpsraw(xmm2.k1(), xmm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_xmm_k1z_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsraw_xmm_xmm_imm8
		test_instr(16, |a| a.vpsraw(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpsraw_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsraw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpsraw(xmm2.k1(), xmm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_xmm_k1z_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsraw_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsraw_ymm_ymm_imm8
		test_instr(16, |a| a.vpsraw(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpsraw_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsraw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpsraw(ymm2.k1(), ymm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_ymm_k1z_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsraw_ymm_ymm_imm8
		test_instr(16, |a| a.vpsraw(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpsraw_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsraw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpsraw(ymm2.k1(), ymm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_ymm_k1z_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsraw_zmm_zmm_i() {
	// EVEX_Vpsraw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsraw(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsraw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsraw(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraw_xmm_m_i() {
	// EVEX_Vpsraw_xmm_k1z_xmmm128_imm8
	test_instr(16, |a| a.vpsraw(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_xmm_k1z_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsraw_xmm_k1z_xmmm128_imm8
	test_instr(16, |a| a.vpsraw(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_xmm_k1z_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraw_ymm_m_i() {
	// EVEX_Vpsraw_ymm_k1z_ymmm256_imm8
	test_instr(16, |a| a.vpsraw(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_ymm_k1z_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsraw_ymm_k1z_ymmm256_imm8
	test_instr(16, |a| a.vpsraw(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_ymm_k1z_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraw_zmm_m_i() {
	// EVEX_Vpsraw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsraw(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsraw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsraw(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraw_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsraw_xmm_xmm_imm8
		test_instr(16, |a| a.vpsraw(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpsraw_xmm_xmm_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsraw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpsraw(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_xmm_k1z_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsraw_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsraw_ymm_ymm_imm8
		test_instr(16, |a| a.vpsraw(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpsraw_ymm_ymm_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsraw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpsraw(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_ymm_k1z_ymmm256_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsraw_zmm_zmm_u() {
	// EVEX_Vpsraw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsraw(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraw_xmm_m_u() {
	// EVEX_Vpsraw_xmm_k1z_xmmm128_imm8
	test_instr(16, |a| a.vpsraw(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_xmm_k1z_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraw_ymm_m_u() {
	// EVEX_Vpsraw_ymm_k1z_ymmm256_imm8
	test_instr(16, |a| a.vpsraw(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_ymm_k1z_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsraw_zmm_m_u() {
	// EVEX_Vpsraw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsraw(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrld_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrld_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsrld(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsrld_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrld_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsrld(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrld_ymm_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrld_ymm_ymm_xmmm128
		test_instr(16, |a| a.vpsrld(ymm2, ymm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsrld_ymm_ymm_xmmm128, Register::YMM2, Register::YMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrld_ymm_k1z_ymm_xmmm128
		test_instr(16, |a| a.vpsrld(ymm2.k1(), ymm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrld_zmm_zmm_xmm() {
	// EVEX_Vpsrld_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpsrld(zmm2.k1(), zmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrld_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrld_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsrld(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsrld_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrld_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsrld(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrld_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrld_ymm_ymm_xmmm128
		test_instr(16, |a| a.vpsrld(ymm2, ymm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsrld_ymm_ymm_xmmm128, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrld_ymm_k1z_ymm_xmmm128
		test_instr(16, |a| a.vpsrld(ymm2.k1(), ymm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrld_zmm_zmm_m() {
	// EVEX_Vpsrld_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpsrld(zmm2.k1(), zmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrld_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrld_xmm_xmm_imm8
		test_instr(16, |a| a.vpsrld(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrld_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpsrld(xmm2.k1(), xmm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrld_xmm_xmm_imm8
		test_instr(16, |a| a.vpsrld(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpsrld_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpsrld(xmm2.k1(), xmm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrld_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrld_ymm_ymm_imm8
		test_instr(16, |a| a.vpsrld(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrld_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpsrld(ymm2.k1(), ymm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrld_ymm_ymm_imm8
		test_instr(16, |a| a.vpsrld(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpsrld_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpsrld(ymm2.k1(), ymm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrld_zmm_zmm_i() {
	// EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpsrld(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpsrld(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrld_xmm_m_i() {
	// EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vpsrld(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vpsrld(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrld_ymm_m_i() {
	// EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vpsrld(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vpsrld(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrld_zmm_m_i() {
	// EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpsrld(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpsrld(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrld_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrld_xmm_xmm_imm8
		test_instr(16, |a| a.vpsrld(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrld_xmm_xmm_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8
		test_instr(16, |a| a.vpsrld(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrld_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrld_ymm_ymm_imm8
		test_instr(16, |a| a.vpsrld(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrld_ymm_ymm_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8
		test_instr(16, |a| a.vpsrld(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrld_zmm_zmm_u() {
	// EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpsrld(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrld_xmm_m_u() {
	// EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vpsrld(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrld_ymm_m_u() {
	// EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vpsrld(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrld_zmm_m_u() {
	// EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8
	test_instr(16, |a| a.vpsrld(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrldq_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrldq_xmm_xmm_imm8
		test_instr(16, |a| a.vpsrldq(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrldq_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrldq_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpsrldq(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::EVEX_Vpsrldq_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrldq_xmm_xmm_imm8
		test_instr(16, |a| a.vpsrldq(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpsrldq_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrldq_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpsrldq(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::EVEX_Vpsrldq_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrldq_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrldq_ymm_ymm_imm8
		test_instr(16, |a| a.vpsrldq(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrldq_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrldq_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpsrldq(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::EVEX_Vpsrldq_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrldq_ymm_ymm_imm8
		test_instr(16, |a| a.vpsrldq(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpsrldq_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrldq_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpsrldq(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::EVEX_Vpsrldq_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrldq_zmm_zmm_i() {
	// EVEX_Vpsrldq_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpsrldq(zmm2, zmm3, -5i32).unwrap(),
		Instruction::with3(Code::EVEX_Vpsrldq_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrldq_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpsrldq(zmm2, zmm3, -5).unwrap(),
		Instruction::with3(Code::EVEX_Vpsrldq_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrldq_xmm_m_i() {
	// EVEX_Vpsrldq_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpsrldq(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::EVEX_Vpsrldq_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrldq_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpsrldq(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::EVEX_Vpsrldq_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrldq_ymm_m_i() {
	// EVEX_Vpsrldq_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpsrldq(ymm2, ymmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::EVEX_Vpsrldq_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrldq_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpsrldq(ymm2, ymmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::EVEX_Vpsrldq_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrldq_zmm_m_i() {
	// EVEX_Vpsrldq_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpsrldq(zmm2, zmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::EVEX_Vpsrldq_zmm_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrldq_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpsrldq(zmm2, zmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::EVEX_Vpsrldq_zmm_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrldq_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrldq_xmm_xmm_imm8
		test_instr(16, |a| a.vpsrldq(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrldq_xmm_xmm_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrldq_xmm_xmmm128_imm8
		test_instr(16, |a| a.vpsrldq(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::EVEX_Vpsrldq_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrldq_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrldq_ymm_ymm_imm8
		test_instr(16, |a| a.vpsrldq(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrldq_ymm_ymm_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrldq_ymm_ymmm256_imm8
		test_instr(16, |a| a.vpsrldq(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::EVEX_Vpsrldq_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrldq_zmm_zmm_u() {
	// EVEX_Vpsrldq_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpsrldq(zmm2, zmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::EVEX_Vpsrldq_zmm_zmmm512_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrldq_xmm_m_u() {
	// EVEX_Vpsrldq_xmm_xmmm128_imm8
	test_instr(16, |a| a.vpsrldq(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::EVEX_Vpsrldq_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrldq_ymm_m_u() {
	// EVEX_Vpsrldq_ymm_ymmm256_imm8
	test_instr(16, |a| a.vpsrldq(ymm2, ymmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::EVEX_Vpsrldq_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrldq_zmm_m_u() {
	// EVEX_Vpsrldq_zmm_zmmm512_imm8
	test_instr(16, |a| a.vpsrldq(zmm2, zmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::EVEX_Vpsrldq_zmm_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlq_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsrlq(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlq_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsrlq(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlq_ymm_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlq_ymm_ymm_xmmm128
		test_instr(16, |a| a.vpsrlq(ymm2, ymm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlq_ymm_ymm_xmmm128, Register::YMM2, Register::YMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlq_ymm_k1z_ymm_xmmm128
		test_instr(16, |a| a.vpsrlq(ymm2.k1(), ymm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlq_zmm_zmm_xmm() {
	// EVEX_Vpsrlq_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpsrlq(zmm2.k1(), zmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlq_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsrlq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlq_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsrlq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlq_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlq_ymm_ymm_xmmm128
		test_instr(16, |a| a.vpsrlq(ymm2, ymm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlq_ymm_ymm_xmmm128, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlq_ymm_k1z_ymm_xmmm128
		test_instr(16, |a| a.vpsrlq(ymm2.k1(), ymm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlq_zmm_zmm_m() {
	// EVEX_Vpsrlq_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpsrlq(zmm2.k1(), zmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlq_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlq_xmm_xmm_imm8
		test_instr(16, |a| a.vpsrlq(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlq_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8
		test_instr(16, |a| a.vpsrlq(xmm2.k1(), xmm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlq_xmm_xmm_imm8
		test_instr(16, |a| a.vpsrlq(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlq_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8
		test_instr(16, |a| a.vpsrlq(xmm2.k1(), xmm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlq_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlq_ymm_ymm_imm8
		test_instr(16, |a| a.vpsrlq(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlq_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpsrlq(ymm2.k1(), ymm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlq_ymm_ymm_imm8
		test_instr(16, |a| a.vpsrlq(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlq_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpsrlq(ymm2.k1(), ymm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlq_zmm_zmm_i() {
	// EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsrlq(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsrlq(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlq_xmm_m_i() {
	// EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vpsrlq(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vpsrlq(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlq_ymm_m_i() {
	// EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vpsrlq(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vpsrlq(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlq_zmm_m_i() {
	// EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsrlq(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsrlq(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlq_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlq_xmm_xmm_imm8
		test_instr(16, |a| a.vpsrlq(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlq_xmm_xmm_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8
		test_instr(16, |a| a.vpsrlq(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlq_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlq_ymm_ymm_imm8
		test_instr(16, |a| a.vpsrlq(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlq_ymm_ymm_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8
		test_instr(16, |a| a.vpsrlq(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlq_zmm_zmm_u() {
	// EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsrlq(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlq_xmm_m_u() {
	// EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vpsrlq(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlq_ymm_m_u() {
	// EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vpsrlq(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlq_zmm_m_u() {
	// EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8
	test_instr(16, |a| a.vpsrlq(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlvd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlvd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsrlvd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlvd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpsrlvd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlvd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlvd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsrlvd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlvd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpsrlvd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlvd_zmm_zmm_zmm() {
	// EVEX_Vpsrlvd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpsrlvd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlvd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpsrlvd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlvd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsrlvd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlvd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpsrlvd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlvd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpsrlvd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlvd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsrlvd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlvd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpsrlvd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlvd_zmm_zmm_m() {
	// EVEX_Vpsrlvd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpsrlvd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlvq_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlvq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsrlvq(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlvq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpsrlvq(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlvq_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlvq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsrlvq(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlvq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpsrlvq(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlvq_zmm_zmm_zmm() {
	// EVEX_Vpsrlvq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpsrlvq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlvq_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpsrlvq(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlvq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsrlvq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlvq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpsrlvq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlvq_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpsrlvq(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlvq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsrlvq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlvq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpsrlvq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlvq_zmm_zmm_m() {
	// EVEX_Vpsrlvq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpsrlvq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlvw_xmm_xmm_xmm() {
	// EVEX_Vpsrlvw_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpsrlvw(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlvw_ymm_ymm_ymm() {
	// EVEX_Vpsrlvw_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpsrlvw(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlvw_zmm_zmm_zmm() {
	// EVEX_Vpsrlvw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsrlvw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlvw_xmm_xmm_m() {
	// EVEX_Vpsrlvw_xmm_k1z_xmm_xmmm128
	test_instr(16, |a| a.vpsrlvw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlvw_ymm_ymm_m() {
	// EVEX_Vpsrlvw_ymm_k1z_ymm_ymmm256
	test_instr(16, |a| a.vpsrlvw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlvw_zmm_zmm_m() {
	// EVEX_Vpsrlvw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsrlvw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlvw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsrlw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsrlw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlw_ymm_ymm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlw_ymm_ymm_xmmm128
		test_instr(16, |a| a.vpsrlw(ymm2, ymm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlw_ymm_ymm_xmmm128, Register::YMM2, Register::YMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlw_ymm_k1z_ymm_xmmm128
		test_instr(16, |a| a.vpsrlw(ymm2.k1(), ymm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlw_zmm_zmm_xmm() {
	// EVEX_Vpsrlw_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpsrlw(zmm2.k1(), zmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsrlw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsrlw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlw_ymm_ymm_xmmm128
		test_instr(16, |a| a.vpsrlw(ymm2, ymm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlw_ymm_ymm_xmmm128, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlw_ymm_k1z_ymm_xmmm128
		test_instr(16, |a| a.vpsrlw(ymm2.k1(), ymm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_ymm_k1z_ymm_xmmm128, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlw_zmm_zmm_m() {
	// EVEX_Vpsrlw_zmm_k1z_zmm_xmmm128
	test_instr(16, |a| a.vpsrlw(zmm2.k1(), zmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_zmm_k1z_zmm_xmmm128, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlw_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlw_xmm_xmm_imm8
		test_instr(16, |a| a.vpsrlw(xmm2, xmm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlw_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpsrlw(xmm2.k1(), xmm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlw_xmm_xmm_imm8
		test_instr(16, |a| a.vpsrlw(xmm2, xmm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlw_xmm_xmm_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpsrlw(xmm2.k1(), xmm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlw_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlw_ymm_ymm_imm8
		test_instr(16, |a| a.vpsrlw(ymm2, ymm3, -5i32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlw_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpsrlw(ymm2.k1(), ymm3, -5i32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlw_ymm_ymm_imm8
		test_instr(16, |a| a.vpsrlw(ymm2, ymm3, -5).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlw_ymm_ymm_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpsrlw(ymm2.k1(), ymm3, -5).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlw_zmm_zmm_i() {
	// EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsrlw(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsrlw(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlw_xmm_m_i() {
	// EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8
	test_instr(16, |a| a.vpsrlw(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8
	test_instr(16, |a| a.vpsrlw(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlw_ymm_m_i() {
	// EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8
	test_instr(16, |a| a.vpsrlw(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8
	test_instr(16, |a| a.vpsrlw(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlw_zmm_m_i() {
	// EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsrlw(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsrlw(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlw_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlw_xmm_xmm_imm8
		test_instr(16, |a| a.vpsrlw(xmm2, xmm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlw_xmm_xmm_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8
		test_instr(16, |a| a.vpsrlw(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlw_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsrlw_ymm_ymm_imm8
		test_instr(16, |a| a.vpsrlw(ymm2, ymm3, 0x7Fu32).unwrap(),
			Instruction::with3(Code::VEX_Vpsrlw_ymm_ymm_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8
		test_instr(16, |a| a.vpsrlw(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsrlw_zmm_zmm_u() {
	// EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsrlw(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlw_xmm_m_u() {
	// EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8
	test_instr(16, |a| a.vpsrlw(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlw_ymm_m_u() {
	// EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8
	test_instr(16, |a| a.vpsrlw(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsrlw_zmm_m_u() {
	// EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8
	test_instr(16, |a| a.vpsrlw(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsubb_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsubb(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsubb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsubb(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubb_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsubb(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsubb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpsubb(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubb_zmm_zmm_zmm() {
	// EVEX_Vpsubb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsubb(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsubb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsubb_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsubb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsubb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsubb(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubb_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsubb(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsubb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpsubb(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubb_zmm_zmm_m() {
	// EVEX_Vpsubb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsubb(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsubb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsubd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsubd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsubd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpsubd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsubd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsubd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpsubd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubd_zmm_zmm_zmm() {
	// EVEX_Vpsubd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpsubd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsubd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsubd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpsubd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpsubd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsubd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsubd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpsubd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpsubd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpsubd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsubd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsubd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpsubd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubd_zmm_zmm_m() {
	// EVEX_Vpsubd_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpsubd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsubd_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsubq_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsubq(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsubq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpsubq(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubq_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsubq(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsubq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpsubq(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubq_zmm_zmm_zmm() {
	// EVEX_Vpsubq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpsubq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsubq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsubq_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpsubq(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpsubq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsubq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsubq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpsubq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubq_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpsubq(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpsubq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsubq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsubq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpsubq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubq_zmm_zmm_m() {
	// EVEX_Vpsubq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpsubq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsubq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsubsb_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubsb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsubsb(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsubsb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubsb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsubsb(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubsb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubsb_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubsb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsubsb(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsubsb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubsb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpsubsb(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubsb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubsb_zmm_zmm_zmm() {
	// EVEX_Vpsubsb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsubsb(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsubsb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsubsb_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubsb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsubsb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsubsb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubsb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsubsb(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubsb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubsb_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubsb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsubsb(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsubsb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubsb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpsubsb(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubsb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubsb_zmm_zmm_m() {
	// EVEX_Vpsubsb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsubsb(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsubsb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsubsw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubsw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsubsw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsubsw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubsw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsubsw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubsw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubsw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubsw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsubsw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsubsw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubsw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpsubsw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubsw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubsw_zmm_zmm_zmm() {
	// EVEX_Vpsubsw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsubsw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsubsw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsubsw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubsw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsubsw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsubsw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubsw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsubsw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubsw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubsw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubsw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsubsw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsubsw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubsw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpsubsw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubsw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubsw_zmm_zmm_m() {
	// EVEX_Vpsubsw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsubsw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsubsw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsubusb_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubusb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsubusb(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsubusb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubusb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsubusb(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubusb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubusb_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubusb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsubusb(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsubusb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubusb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpsubusb(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubusb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubusb_zmm_zmm_zmm() {
	// EVEX_Vpsubusb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsubusb(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsubusb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsubusb_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubusb_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsubusb(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsubusb_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubusb_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsubusb(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubusb_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubusb_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubusb_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsubusb(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsubusb_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubusb_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpsubusb(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubusb_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubusb_zmm_zmm_m() {
	// EVEX_Vpsubusb_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsubusb(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsubusb_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsubusw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubusw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsubusw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsubusw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubusw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsubusw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubusw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubusw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubusw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsubusw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsubusw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubusw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpsubusw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubusw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubusw_zmm_zmm_zmm() {
	// EVEX_Vpsubusw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsubusw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsubusw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsubusw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubusw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsubusw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsubusw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubusw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsubusw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubusw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubusw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubusw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsubusw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsubusw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubusw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpsubusw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubusw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubusw_zmm_zmm_m() {
	// EVEX_Vpsubusw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsubusw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsubusw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsubw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsubw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsubw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsubw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsubw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpsubw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpsubw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubw_zmm_zmm_zmm() {
	// EVEX_Vpsubw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsubw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsubw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpsubw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpsubw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsubw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpsubw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpsubw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpsubw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpsubw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpsubw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpsubw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpsubw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpsubw_zmm_zmm_m() {
	// EVEX_Vpsubw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpsubw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpsubw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogd_xmm_xmm_xmm_i() {
	// EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpternlogd(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpternlogd(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogd_ymm_ymm_ymm_i() {
	// EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpternlogd(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpternlogd(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogd_zmm_zmm_zmm_i() {
	// EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpternlogd(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpternlogd(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogd_xmm_xmm_m_i() {
	// EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpternlogd(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpternlogd(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogd_ymm_ymm_m_i() {
	// EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpternlogd(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpternlogd(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogd_zmm_zmm_m_i() {
	// EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpternlogd(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpternlogd(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogd_xmm_xmm_xmm_u() {
	// EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpternlogd(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogd_ymm_ymm_ymm_u() {
	// EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpternlogd(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogd_zmm_zmm_zmm_u() {
	// EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpternlogd(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogd_xmm_xmm_m_u() {
	// EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vpternlogd(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogd_ymm_ymm_m_u() {
	// EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vpternlogd(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogd_zmm_zmm_m_u() {
	// EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vpternlogd(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogq_xmm_xmm_xmm_i() {
	// EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpternlogq(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpternlogq(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogq_ymm_ymm_ymm_i() {
	// EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpternlogq(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpternlogq(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogq_zmm_zmm_zmm_i() {
	// EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpternlogq(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpternlogq(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogq_xmm_xmm_m_i() {
	// EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpternlogq(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpternlogq(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogq_ymm_ymm_m_i() {
	// EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpternlogq(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpternlogq(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogq_zmm_zmm_m_i() {
	// EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpternlogq(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpternlogq(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogq_xmm_xmm_xmm_u() {
	// EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpternlogq(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogq_ymm_ymm_ymm_u() {
	// EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpternlogq(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogq_zmm_zmm_zmm_u() {
	// EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpternlogq(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogq_xmm_xmm_m_u() {
	// EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vpternlogq(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogq_ymm_ymm_m_u() {
	// EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vpternlogq(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpternlogq_zmm_zmm_m_u() {
	// EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vpternlogq(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptest_xmm_xmm() {
	// VEX_Vptest_xmm_xmmm128
	test_instr(16, |a| a.vptest(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::VEX_Vptest_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptest_ymm_ymm() {
	// VEX_Vptest_ymm_ymmm256
	test_instr(16, |a| a.vptest(ymm2, ymm3).unwrap(),
		Instruction::with2(Code::VEX_Vptest_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptest_xmm_m() {
	// VEX_Vptest_xmm_xmmm128
	test_instr(16, |a| a.vptest(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vptest_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptest_ymm_m() {
	// VEX_Vptest_ymm_ymmm256
	test_instr(16, |a| a.vptest(ymm2, ymmword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vptest_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmb_kr_xmm_xmm() {
	// EVEX_Vptestmb_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vptestmb(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmb_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmb_kr_ymm_ymm() {
	// EVEX_Vptestmb_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vptestmb(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmb_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmb_kr_zmm_zmm() {
	// EVEX_Vptestmb_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vptestmb(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmb_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmb_kr_xmm_m() {
	// EVEX_Vptestmb_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vptestmb(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmb_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmb_kr_ymm_m() {
	// EVEX_Vptestmb_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vptestmb(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmb_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmb_kr_zmm_m() {
	// EVEX_Vptestmb_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vptestmb(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmb_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmd_kr_xmm_xmm() {
	// EVEX_Vptestmd_kr_k1_xmm_xmmm128b32
	test_instr(16, |a| a.vptestmd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmd_kr_k1_xmm_xmmm128b32, Register::K2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmd_kr_ymm_ymm() {
	// EVEX_Vptestmd_kr_k1_ymm_ymmm256b32
	test_instr(16, |a| a.vptestmd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmd_kr_k1_ymm_ymmm256b32, Register::K2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmd_kr_zmm_zmm() {
	// EVEX_Vptestmd_kr_k1_zmm_zmmm512b32
	test_instr(16, |a| a.vptestmd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmd_kr_k1_zmm_zmmm512b32, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmd_kr_xmm_m() {
	// EVEX_Vptestmd_kr_k1_xmm_xmmm128b32
	test_instr(16, |a| a.vptestmd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmd_kr_k1_xmm_xmmm128b32, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmd_kr_ymm_m() {
	// EVEX_Vptestmd_kr_k1_ymm_ymmm256b32
	test_instr(16, |a| a.vptestmd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmd_kr_k1_ymm_ymmm256b32, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmd_kr_zmm_m() {
	// EVEX_Vptestmd_kr_k1_zmm_zmmm512b32
	test_instr(16, |a| a.vptestmd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmd_kr_k1_zmm_zmmm512b32, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmq_kr_xmm_xmm() {
	// EVEX_Vptestmq_kr_k1_xmm_xmmm128b64
	test_instr(16, |a| a.vptestmq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmq_kr_k1_xmm_xmmm128b64, Register::K2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmq_kr_ymm_ymm() {
	// EVEX_Vptestmq_kr_k1_ymm_ymmm256b64
	test_instr(16, |a| a.vptestmq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmq_kr_k1_ymm_ymmm256b64, Register::K2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmq_kr_zmm_zmm() {
	// EVEX_Vptestmq_kr_k1_zmm_zmmm512b64
	test_instr(16, |a| a.vptestmq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmq_kr_k1_zmm_zmmm512b64, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmq_kr_xmm_m() {
	// EVEX_Vptestmq_kr_k1_xmm_xmmm128b64
	test_instr(16, |a| a.vptestmq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmq_kr_k1_xmm_xmmm128b64, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmq_kr_ymm_m() {
	// EVEX_Vptestmq_kr_k1_ymm_ymmm256b64
	test_instr(16, |a| a.vptestmq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmq_kr_k1_ymm_ymmm256b64, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmq_kr_zmm_m() {
	// EVEX_Vptestmq_kr_k1_zmm_zmmm512b64
	test_instr(16, |a| a.vptestmq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmq_kr_k1_zmm_zmmm512b64, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmw_kr_xmm_xmm() {
	// EVEX_Vptestmw_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vptestmw(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmw_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmw_kr_ymm_ymm() {
	// EVEX_Vptestmw_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vptestmw(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmw_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmw_kr_zmm_zmm() {
	// EVEX_Vptestmw_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vptestmw(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmw_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmw_kr_xmm_m() {
	// EVEX_Vptestmw_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vptestmw(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmw_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmw_kr_ymm_m() {
	// EVEX_Vptestmw_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vptestmw(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmw_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestmw_kr_zmm_m() {
	// EVEX_Vptestmw_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vptestmw(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestmw_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmb_kr_xmm_xmm() {
	// EVEX_Vptestnmb_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vptestnmb(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmb_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmb_kr_ymm_ymm() {
	// EVEX_Vptestnmb_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vptestnmb(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmb_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmb_kr_zmm_zmm() {
	// EVEX_Vptestnmb_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vptestnmb(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmb_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmb_kr_xmm_m() {
	// EVEX_Vptestnmb_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vptestnmb(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmb_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmb_kr_ymm_m() {
	// EVEX_Vptestnmb_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vptestnmb(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmb_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmb_kr_zmm_m() {
	// EVEX_Vptestnmb_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vptestnmb(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmb_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmd_kr_xmm_xmm() {
	// EVEX_Vptestnmd_kr_k1_xmm_xmmm128b32
	test_instr(16, |a| a.vptestnmd(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmd_kr_k1_xmm_xmmm128b32, Register::K2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmd_kr_ymm_ymm() {
	// EVEX_Vptestnmd_kr_k1_ymm_ymmm256b32
	test_instr(16, |a| a.vptestnmd(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmd_kr_k1_ymm_ymmm256b32, Register::K2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmd_kr_zmm_zmm() {
	// EVEX_Vptestnmd_kr_k1_zmm_zmmm512b32
	test_instr(16, |a| a.vptestnmd(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmd_kr_k1_zmm_zmmm512b32, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmd_kr_xmm_m() {
	// EVEX_Vptestnmd_kr_k1_xmm_xmmm128b32
	test_instr(16, |a| a.vptestnmd(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmd_kr_k1_xmm_xmmm128b32, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmd_kr_ymm_m() {
	// EVEX_Vptestnmd_kr_k1_ymm_ymmm256b32
	test_instr(16, |a| a.vptestnmd(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmd_kr_k1_ymm_ymmm256b32, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmd_kr_zmm_m() {
	// EVEX_Vptestnmd_kr_k1_zmm_zmmm512b32
	test_instr(16, |a| a.vptestnmd(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmd_kr_k1_zmm_zmmm512b32, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmq_kr_xmm_xmm() {
	// EVEX_Vptestnmq_kr_k1_xmm_xmmm128b64
	test_instr(16, |a| a.vptestnmq(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmq_kr_k1_xmm_xmmm128b64, Register::K2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmq_kr_ymm_ymm() {
	// EVEX_Vptestnmq_kr_k1_ymm_ymmm256b64
	test_instr(16, |a| a.vptestnmq(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmq_kr_k1_ymm_ymmm256b64, Register::K2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmq_kr_zmm_zmm() {
	// EVEX_Vptestnmq_kr_k1_zmm_zmmm512b64
	test_instr(16, |a| a.vptestnmq(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmq_kr_k1_zmm_zmmm512b64, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmq_kr_xmm_m() {
	// EVEX_Vptestnmq_kr_k1_xmm_xmmm128b64
	test_instr(16, |a| a.vptestnmq(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmq_kr_k1_xmm_xmmm128b64, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmq_kr_ymm_m() {
	// EVEX_Vptestnmq_kr_k1_ymm_ymmm256b64
	test_instr(16, |a| a.vptestnmq(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmq_kr_k1_ymm_ymmm256b64, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmq_kr_zmm_m() {
	// EVEX_Vptestnmq_kr_k1_zmm_zmmm512b64
	test_instr(16, |a| a.vptestnmq(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmq_kr_k1_zmm_zmmm512b64, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmw_kr_xmm_xmm() {
	// EVEX_Vptestnmw_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vptestnmw(k2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmw_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmw_kr_ymm_ymm() {
	// EVEX_Vptestnmw_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vptestnmw(k2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmw_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmw_kr_zmm_zmm() {
	// EVEX_Vptestnmw_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vptestnmw(k2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmw_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmw_kr_xmm_m() {
	// EVEX_Vptestnmw_kr_k1_xmm_xmmm128
	test_instr(16, |a| a.vptestnmw(k2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmw_kr_k1_xmm_xmmm128, Register::K2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmw_kr_ymm_m() {
	// EVEX_Vptestnmw_kr_k1_ymm_ymmm256
	test_instr(16, |a| a.vptestnmw(k2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmw_kr_k1_ymm_ymmm256, Register::K2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vptestnmw_kr_zmm_m() {
	// EVEX_Vptestnmw_kr_k1_zmm_zmmm512
	test_instr(16, |a| a.vptestnmw(k2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vptestnmw_kr_k1_zmm_zmmm512, Register::K2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpunpckhbw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckhbw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpunpckhbw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckhbw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckhbw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpunpckhbw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhbw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckhbw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckhbw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpunpckhbw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckhbw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckhbw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpunpckhbw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhbw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckhbw_zmm_zmm_zmm() {
	// EVEX_Vpunpckhbw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpunpckhbw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhbw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpunpckhbw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckhbw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpunpckhbw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckhbw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckhbw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpunpckhbw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhbw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckhbw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckhbw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpunpckhbw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckhbw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckhbw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpunpckhbw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhbw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckhbw_zmm_zmm_m() {
	// EVEX_Vpunpckhbw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpunpckhbw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhbw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpunpckhdq_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckhdq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpunpckhdq(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckhdq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpunpckhdq(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckhdq_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckhdq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpunpckhdq(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckhdq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpunpckhdq(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckhdq_zmm_zmm_zmm() {
	// EVEX_Vpunpckhdq_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpunpckhdq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhdq_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpunpckhdq_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpunpckhdq(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckhdq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpunpckhdq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckhdq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpunpckhdq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckhdq_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpunpckhdq(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckhdq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpunpckhdq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckhdq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpunpckhdq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckhdq_zmm_zmm_m() {
	// EVEX_Vpunpckhdq_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpunpckhdq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhdq_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpunpckhqdq_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckhqdq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpunpckhqdq(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckhqdq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpunpckhqdq(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckhqdq_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckhqdq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpunpckhqdq(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckhqdq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpunpckhqdq(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckhqdq_zmm_zmm_zmm() {
	// EVEX_Vpunpckhqdq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpunpckhqdq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhqdq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpunpckhqdq_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpunpckhqdq(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckhqdq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpunpckhqdq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckhqdq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpunpckhqdq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckhqdq_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpunpckhqdq(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckhqdq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpunpckhqdq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckhqdq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpunpckhqdq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckhqdq_zmm_zmm_m() {
	// EVEX_Vpunpckhqdq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpunpckhqdq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhqdq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpunpckhwd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckhwd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpunpckhwd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckhwd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckhwd_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpunpckhwd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhwd_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckhwd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckhwd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpunpckhwd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckhwd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckhwd_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpunpckhwd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhwd_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckhwd_zmm_zmm_zmm() {
	// EVEX_Vpunpckhwd_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpunpckhwd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhwd_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpunpckhwd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckhwd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpunpckhwd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckhwd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckhwd_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpunpckhwd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhwd_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckhwd_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckhwd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpunpckhwd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckhwd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckhwd_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpunpckhwd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhwd_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckhwd_zmm_zmm_m() {
	// EVEX_Vpunpckhwd_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpunpckhwd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpunpckhwd_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpunpcklbw_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpcklbw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpunpcklbw(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpunpcklbw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpcklbw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpunpcklbw(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklbw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpcklbw_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpcklbw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpunpcklbw(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpunpcklbw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpcklbw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpunpcklbw(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklbw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpcklbw_zmm_zmm_zmm() {
	// EVEX_Vpunpcklbw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpunpcklbw(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklbw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpunpcklbw_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpcklbw_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpunpcklbw(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpunpcklbw_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpcklbw_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpunpcklbw(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklbw_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpcklbw_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpcklbw_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpunpcklbw(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpunpcklbw_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpcklbw_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpunpcklbw(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklbw_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpcklbw_zmm_zmm_m() {
	// EVEX_Vpunpcklbw_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpunpcklbw(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklbw_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpunpckldq_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckldq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpunpckldq(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckldq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpunpckldq(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckldq_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckldq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpunpckldq(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckldq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpunpckldq(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckldq_zmm_zmm_zmm() {
	// EVEX_Vpunpckldq_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpunpckldq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpunpckldq_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpunpckldq_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpunpckldq(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckldq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpunpckldq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckldq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vpunpckldq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckldq_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpunpckldq(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpunpckldq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpunpckldq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpunpckldq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vpunpckldq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpckldq_zmm_zmm_m() {
	// EVEX_Vpunpckldq_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpunpckldq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpunpckldq_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpunpcklqdq_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpcklqdq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpunpcklqdq(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpunpcklqdq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpunpcklqdq(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpcklqdq_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpcklqdq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpunpcklqdq(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpunpcklqdq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpunpcklqdq(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpcklqdq_zmm_zmm_zmm() {
	// EVEX_Vpunpcklqdq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpunpcklqdq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklqdq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpunpcklqdq_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpunpcklqdq(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpunpcklqdq_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpunpcklqdq(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpunpcklqdq_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vpunpcklqdq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpcklqdq_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpunpcklqdq(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vpunpcklqdq_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpunpcklqdq(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpunpcklqdq_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vpunpcklqdq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpcklqdq_zmm_zmm_m() {
	// EVEX_Vpunpcklqdq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpunpcklqdq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklqdq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpunpcklwd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpcklwd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpunpcklwd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vpunpcklwd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpcklwd_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpunpcklwd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklwd_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpcklwd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpcklwd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpunpcklwd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vpunpcklwd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpcklwd_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpunpcklwd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklwd_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpcklwd_zmm_zmm_zmm() {
	// EVEX_Vpunpcklwd_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpunpcklwd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklwd_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpunpcklwd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpcklwd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vpunpcklwd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpunpcklwd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpcklwd_xmm_k1z_xmm_xmmm128
		test_instr(16, |a| a.vpunpcklwd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklwd_xmm_k1z_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpcklwd_ymm_ymm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vpunpcklwd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vpunpcklwd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vpunpcklwd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vpunpcklwd_ymm_k1z_ymm_ymmm256
		test_instr(16, |a| a.vpunpcklwd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklwd_ymm_k1z_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vpunpcklwd_zmm_zmm_m() {
	// EVEX_Vpunpcklwd_zmm_k1z_zmm_zmmm512
	test_instr(16, |a| a.vpunpcklwd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpunpcklwd_zmm_k1z_zmm_zmmm512, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpxor_xmm_xmm_xmm() {
	// VEX_Vpxor_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpxor(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vpxor_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpxor_ymm_ymm_ymm() {
	// VEX_Vpxor_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpxor(ymm2, ymm3, ymm4).unwrap(),
		Instruction::with3(Code::VEX_Vpxor_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpxor_xmm_xmm_m() {
	// VEX_Vpxor_xmm_xmm_xmmm128
	test_instr(16, |a| a.vpxor(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpxor_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpxor_ymm_ymm_m() {
	// VEX_Vpxor_ymm_ymm_ymmm256
	test_instr(16, |a| a.vpxor(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vpxor_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpxord_xmm_xmm_xmm() {
	// EVEX_Vpxord_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpxord(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpxord_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpxord_ymm_ymm_ymm() {
	// EVEX_Vpxord_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpxord(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpxord_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpxord_zmm_zmm_zmm() {
	// EVEX_Vpxord_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpxord(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpxord_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpxord_xmm_xmm_m() {
	// EVEX_Vpxord_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vpxord(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpxord_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpxord_ymm_ymm_m() {
	// EVEX_Vpxord_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vpxord(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpxord_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpxord_zmm_zmm_m() {
	// EVEX_Vpxord_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vpxord(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpxord_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpxorq_xmm_xmm_xmm() {
	// EVEX_Vpxorq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpxorq(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpxorq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpxorq_ymm_ymm_ymm() {
	// EVEX_Vpxorq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpxorq(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpxorq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpxorq_zmm_zmm_zmm() {
	// EVEX_Vpxorq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpxorq(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpxorq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpxorq_xmm_xmm_m() {
	// EVEX_Vpxorq_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vpxorq(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpxorq_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpxorq_ymm_ymm_m() {
	// EVEX_Vpxorq_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vpxorq(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpxorq_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vpxorq_zmm_zmm_m() {
	// EVEX_Vpxorq_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vpxorq(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vpxorq_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangepd_xmm_xmm_xmm_i() {
	// EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vrangepd(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vrangepd(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangepd_ymm_ymm_ymm_i() {
	// EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vrangepd(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vrangepd(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangepd_zmm_zmm_zmm_i() {
	// EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vrangepd(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vrangepd(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangepd_xmm_xmm_m_i() {
	// EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vrangepd(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vrangepd(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangepd_ymm_ymm_m_i() {
	// EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vrangepd(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vrangepd(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangepd_zmm_zmm_m_i() {
	// EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vrangepd(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vrangepd(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangepd_xmm_xmm_xmm_u() {
	// EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vrangepd(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangepd_ymm_ymm_ymm_u() {
	// EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vrangepd(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangepd_zmm_zmm_zmm_u() {
	// EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vrangepd(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangepd_xmm_xmm_m_u() {
	// EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8
	test_instr(16, |a| a.vrangepd(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangepd_ymm_ymm_m_u() {
	// EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vrangepd(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangepd_zmm_zmm_m_u() {
	// EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vrangepd(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangeps_xmm_xmm_xmm_i() {
	// EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vrangeps(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vrangeps(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangeps_ymm_ymm_ymm_i() {
	// EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vrangeps(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vrangeps(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangeps_zmm_zmm_zmm_i() {
	// EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vrangeps(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vrangeps(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangeps_xmm_xmm_m_i() {
	// EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vrangeps(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vrangeps(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangeps_ymm_ymm_m_i() {
	// EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vrangeps(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vrangeps(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangeps_zmm_zmm_m_i() {
	// EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vrangeps(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vrangeps(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangeps_xmm_xmm_xmm_u() {
	// EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vrangeps(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangeps_ymm_ymm_ymm_u() {
	// EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vrangeps(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangeps_zmm_zmm_zmm_u() {
	// EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vrangeps(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangeps_xmm_xmm_m_u() {
	// EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8
	test_instr(16, |a| a.vrangeps(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangeps_ymm_ymm_m_u() {
	// EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vrangeps(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangeps_zmm_zmm_m_u() {
	// EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vrangeps(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangesd_xmm_xmm_xmm_i() {
	// EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vrangesd(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vrangesd(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangesd_xmm_xmm_m_i() {
	// EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vrangesd(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vrangesd(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangesd_xmm_xmm_xmm_u() {
	// EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vrangesd(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangesd_xmm_xmm_m_u() {
	// EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vrangesd(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangess_xmm_xmm_xmm_i() {
	// EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vrangess(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vrangess(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangess_xmm_xmm_m_i() {
	// EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vrangess(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vrangess(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangess_xmm_xmm_xmm_u() {
	// EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vrangess(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrangess_xmm_xmm_m_u() {
	// EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vrangess(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp14pd_xmm_xmm() {
	// EVEX_Vrcp14pd_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vrcp14pd(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcp14pd_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp14pd_ymm_ymm() {
	// EVEX_Vrcp14pd_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vrcp14pd(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcp14pd_ymm_k1z_ymmm256b64, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp14pd_zmm_zmm() {
	// EVEX_Vrcp14pd_zmm_k1z_zmmm512b64
	test_instr(16, |a| a.vrcp14pd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcp14pd_zmm_k1z_zmmm512b64, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp14pd_xmm_m() {
	// EVEX_Vrcp14pd_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vrcp14pd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcp14pd_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp14pd_ymm_m() {
	// EVEX_Vrcp14pd_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vrcp14pd(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcp14pd_ymm_k1z_ymmm256b64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp14pd_zmm_m() {
	// EVEX_Vrcp14pd_zmm_k1z_zmmm512b64
	test_instr(16, |a| a.vrcp14pd(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcp14pd_zmm_k1z_zmmm512b64, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp14ps_xmm_xmm() {
	// EVEX_Vrcp14ps_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vrcp14ps(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcp14ps_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp14ps_ymm_ymm() {
	// EVEX_Vrcp14ps_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vrcp14ps(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcp14ps_ymm_k1z_ymmm256b32, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp14ps_zmm_zmm() {
	// EVEX_Vrcp14ps_zmm_k1z_zmmm512b32
	test_instr(16, |a| a.vrcp14ps(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcp14ps_zmm_k1z_zmmm512b32, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp14ps_xmm_m() {
	// EVEX_Vrcp14ps_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vrcp14ps(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcp14ps_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp14ps_ymm_m() {
	// EVEX_Vrcp14ps_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vrcp14ps(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcp14ps_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp14ps_zmm_m() {
	// EVEX_Vrcp14ps_zmm_k1z_zmmm512b32
	test_instr(16, |a| a.vrcp14ps(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcp14ps_zmm_k1z_zmmm512b32, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp14sd_xmm_xmm_xmm() {
	// EVEX_Vrcp14sd_xmm_k1z_xmm_xmmm64
	test_instr(16, |a| a.vrcp14sd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrcp14sd_xmm_k1z_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp14sd_xmm_xmm_m() {
	// EVEX_Vrcp14sd_xmm_k1z_xmm_xmmm64
	test_instr(16, |a| a.vrcp14sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrcp14sd_xmm_k1z_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp14ss_xmm_xmm_xmm() {
	// EVEX_Vrcp14ss_xmm_k1z_xmm_xmmm32
	test_instr(16, |a| a.vrcp14ss(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrcp14ss_xmm_k1z_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp14ss_xmm_xmm_m() {
	// EVEX_Vrcp14ss_xmm_k1z_xmm_xmmm32
	test_instr(16, |a| a.vrcp14ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrcp14ss_xmm_k1z_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp28pd_zmm_zmm() {
	// EVEX_Vrcp28pd_zmm_k1z_zmmm512b64_sae
	test_instr(16, |a| a.vrcp28pd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcp28pd_zmm_k1z_zmmm512b64_sae, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp28pd_zmm_m() {
	// EVEX_Vrcp28pd_zmm_k1z_zmmm512b64_sae
	test_instr(16, |a| a.vrcp28pd(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcp28pd_zmm_k1z_zmmm512b64_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp28ps_zmm_zmm() {
	// EVEX_Vrcp28ps_zmm_k1z_zmmm512b32_sae
	test_instr(16, |a| a.vrcp28ps(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcp28ps_zmm_k1z_zmmm512b32_sae, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp28ps_zmm_m() {
	// EVEX_Vrcp28ps_zmm_k1z_zmmm512b32_sae
	test_instr(16, |a| a.vrcp28ps(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcp28ps_zmm_k1z_zmmm512b32_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp28sd_xmm_xmm_xmm() {
	// EVEX_Vrcp28sd_xmm_k1z_xmm_xmmm64_sae
	test_instr(16, |a| a.vrcp28sd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrcp28sd_xmm_k1z_xmm_xmmm64_sae, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp28sd_xmm_xmm_m() {
	// EVEX_Vrcp28sd_xmm_k1z_xmm_xmmm64_sae
	test_instr(16, |a| a.vrcp28sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrcp28sd_xmm_k1z_xmm_xmmm64_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp28ss_xmm_xmm_xmm() {
	// EVEX_Vrcp28ss_xmm_k1z_xmm_xmmm32_sae
	test_instr(16, |a| a.vrcp28ss(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrcp28ss_xmm_k1z_xmm_xmmm32_sae, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcp28ss_xmm_xmm_m() {
	// EVEX_Vrcp28ss_xmm_k1z_xmm_xmmm32_sae
	test_instr(16, |a| a.vrcp28ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrcp28ss_xmm_k1z_xmm_xmmm32_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcpph_xmm_xmm() {
	// EVEX_Vrcpph_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vrcpph(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcpph_xmm_k1z_xmmm128b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcpph_ymm_ymm() {
	// EVEX_Vrcpph_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vrcpph(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcpph_ymm_k1z_ymmm256b16, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcpph_zmm_zmm() {
	// EVEX_Vrcpph_zmm_k1z_zmmm512b16
	test_instr(16, |a| a.vrcpph(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcpph_zmm_k1z_zmmm512b16, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcpph_xmm_m() {
	// EVEX_Vrcpph_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vrcpph(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcpph_xmm_k1z_xmmm128b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcpph_ymm_m() {
	// EVEX_Vrcpph_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vrcpph(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcpph_ymm_k1z_ymmm256b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcpph_zmm_m() {
	// EVEX_Vrcpph_zmm_k1z_zmmm512b16
	test_instr(16, |a| a.vrcpph(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrcpph_zmm_k1z_zmmm512b16, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcpps_xmm_xmm() {
	// VEX_Vrcpps_xmm_xmmm128
	test_instr(16, |a| a.vrcpps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::VEX_Vrcpps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcpps_ymm_ymm() {
	// VEX_Vrcpps_ymm_ymmm256
	test_instr(16, |a| a.vrcpps(ymm2, ymm3).unwrap(),
		Instruction::with2(Code::VEX_Vrcpps_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcpps_xmm_m() {
	// VEX_Vrcpps_xmm_xmmm128
	test_instr(16, |a| a.vrcpps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vrcpps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcpps_ymm_m() {
	// VEX_Vrcpps_ymm_ymmm256
	test_instr(16, |a| a.vrcpps(ymm2, ymmword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vrcpps_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcpsh_xmm_xmm_xmm() {
	// EVEX_Vrcpsh_xmm_k1z_xmm_xmmm16
	test_instr(16, |a| a.vrcpsh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrcpsh_xmm_k1z_xmm_xmmm16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcpsh_xmm_xmm_m() {
	// EVEX_Vrcpsh_xmm_k1z_xmm_xmmm16
	test_instr(16, |a| a.vrcpsh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrcpsh_xmm_k1z_xmm_xmmm16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcpss_xmm_xmm_xmm() {
	// VEX_Vrcpss_xmm_xmm_xmmm32
	test_instr(16, |a| a.vrcpss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vrcpss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrcpss_xmm_xmm_m() {
	// VEX_Vrcpss_xmm_xmm_xmmm32
	test_instr(16, |a| a.vrcpss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vrcpss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducepd_xmm_xmm_i() {
	// EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vreducepd(xmm2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vreducepd(xmm2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducepd_ymm_ymm_i() {
	// EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vreducepd(ymm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vreducepd(ymm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducepd_zmm_zmm_i() {
	// EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vreducepd(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vreducepd(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducepd_xmm_m_i() {
	// EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vreducepd(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vreducepd(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducepd_ymm_m_i() {
	// EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vreducepd(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vreducepd(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducepd_zmm_m_i() {
	// EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vreducepd(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vreducepd(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducepd_xmm_xmm_u() {
	// EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vreducepd(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducepd_ymm_ymm_u() {
	// EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vreducepd(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducepd_zmm_zmm_u() {
	// EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vreducepd(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducepd_xmm_m_u() {
	// EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vreducepd(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducepd_ymm_m_u() {
	// EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vreducepd(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducepd_zmm_m_u() {
	// EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vreducepd(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceph_xmm_xmm_i() {
	// EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vreduceph(xmm2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vreduceph(xmm2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceph_ymm_ymm_i() {
	// EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vreduceph(ymm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vreduceph(ymm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceph_zmm_zmm_i() {
	// EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vreduceph(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vreduceph(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceph_xmm_m_i() {
	// EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vreduceph(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vreduceph(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceph_ymm_m_i() {
	// EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vreduceph(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vreduceph(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceph_zmm_m_i() {
	// EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vreduceph(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vreduceph(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceph_xmm_xmm_u() {
	// EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vreduceph(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceph_ymm_ymm_u() {
	// EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vreduceph(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceph_zmm_zmm_u() {
	// EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vreduceph(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceph_xmm_m_u() {
	// EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vreduceph(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceph_ymm_m_u() {
	// EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vreduceph(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceph_zmm_m_u() {
	// EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vreduceph(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceps_xmm_xmm_i() {
	// EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vreduceps(xmm2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vreduceps(xmm2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceps_ymm_ymm_i() {
	// EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vreduceps(ymm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vreduceps(ymm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceps_zmm_zmm_i() {
	// EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vreduceps(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vreduceps(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceps_xmm_m_i() {
	// EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vreduceps(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vreduceps(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceps_ymm_m_i() {
	// EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vreduceps(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vreduceps(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceps_zmm_m_i() {
	// EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vreduceps(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vreduceps(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceps_xmm_xmm_u() {
	// EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vreduceps(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceps_ymm_ymm_u() {
	// EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vreduceps(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceps_zmm_zmm_u() {
	// EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vreduceps(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceps_xmm_m_u() {
	// EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vreduceps(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceps_ymm_m_u() {
	// EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vreduceps(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreduceps_zmm_m_u() {
	// EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vreduceps(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducesd_xmm_xmm_xmm_i() {
	// EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vreducesd(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vreducesd(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducesd_xmm_xmm_m_i() {
	// EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vreducesd(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vreducesd(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducesd_xmm_xmm_xmm_u() {
	// EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vreducesd(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducesd_xmm_xmm_m_u() {
	// EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vreducesd(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducesh_xmm_xmm_xmm_i() {
	// EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vreducesh(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vreducesh(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducesh_xmm_xmm_m_i() {
	// EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vreducesh(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vreducesh(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducesh_xmm_xmm_xmm_u() {
	// EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vreducesh(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducesh_xmm_xmm_m_u() {
	// EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vreducesh(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducess_xmm_xmm_xmm_i() {
	// EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vreducess(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vreducess(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducess_xmm_xmm_m_i() {
	// EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vreducess(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vreducess(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducess_xmm_xmm_xmm_u() {
	// EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vreducess(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vreducess_xmm_xmm_m_u() {
	// EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vreducess(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalepd_xmm_xmm_i() {
	// EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vrndscalepd(xmm2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vrndscalepd(xmm2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalepd_ymm_ymm_i() {
	// EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vrndscalepd(ymm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vrndscalepd(ymm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalepd_zmm_zmm_i() {
	// EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vrndscalepd(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vrndscalepd(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalepd_xmm_m_i() {
	// EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vrndscalepd(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vrndscalepd(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalepd_ymm_m_i() {
	// EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vrndscalepd(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vrndscalepd(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalepd_zmm_m_i() {
	// EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vrndscalepd(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vrndscalepd(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalepd_xmm_xmm_u() {
	// EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vrndscalepd(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalepd_ymm_ymm_u() {
	// EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vrndscalepd(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalepd_zmm_zmm_u() {
	// EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vrndscalepd(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalepd_xmm_m_u() {
	// EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8
	test_instr(16, |a| a.vrndscalepd(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalepd_ymm_m_u() {
	// EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8
	test_instr(16, |a| a.vrndscalepd(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalepd_zmm_m_u() {
	// EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae
	test_instr(16, |a| a.vrndscalepd(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleph_xmm_xmm_i() {
	// EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vrndscaleph(xmm2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vrndscaleph(xmm2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleph_ymm_ymm_i() {
	// EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vrndscaleph(ymm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vrndscaleph(ymm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleph_zmm_zmm_i() {
	// EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vrndscaleph(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vrndscaleph(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleph_xmm_m_i() {
	// EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vrndscaleph(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vrndscaleph(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleph_ymm_m_i() {
	// EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vrndscaleph(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vrndscaleph(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleph_zmm_m_i() {
	// EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vrndscaleph(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vrndscaleph(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleph_xmm_xmm_u() {
	// EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vrndscaleph(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleph_ymm_ymm_u() {
	// EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vrndscaleph(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleph_zmm_zmm_u() {
	// EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vrndscaleph(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleph_xmm_m_u() {
	// EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8
	test_instr(16, |a| a.vrndscaleph(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleph_ymm_m_u() {
	// EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8
	test_instr(16, |a| a.vrndscaleph(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleph_zmm_m_u() {
	// EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae
	test_instr(16, |a| a.vrndscaleph(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleps_xmm_xmm_i() {
	// EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vrndscaleps(xmm2.k1(), xmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vrndscaleps(xmm2.k1(), xmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleps_ymm_ymm_i() {
	// EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vrndscaleps(ymm2.k1(), ymm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vrndscaleps(ymm2.k1(), ymm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleps_zmm_zmm_i() {
	// EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vrndscaleps(zmm2.k1(), zmm3, -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vrndscaleps(zmm2.k1(), zmm3, -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleps_xmm_m_i() {
	// EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vrndscaleps(xmm2.k1(), xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vrndscaleps(xmm2.k1(), xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleps_ymm_m_i() {
	// EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vrndscaleps(ymm2.k1(), ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vrndscaleps(ymm2.k1(), ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleps_zmm_m_i() {
	// EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vrndscaleps(zmm2.k1(), zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vrndscaleps(zmm2.k1(), zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleps_xmm_xmm_u() {
	// EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vrndscaleps(xmm2.k1(), xmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleps_ymm_ymm_u() {
	// EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vrndscaleps(ymm2.k1(), ymm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleps_zmm_zmm_u() {
	// EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vrndscaleps(zmm2.k1(), zmm3, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, Register::ZMM3, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleps_xmm_m_u() {
	// EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8
	test_instr(16, |a| a.vrndscaleps(xmm2.k1(), xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleps_ymm_m_u() {
	// EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8
	test_instr(16, |a| a.vrndscaleps(ymm2.k1(), ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaleps_zmm_m_u() {
	// EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae
	test_instr(16, |a| a.vrndscaleps(zmm2.k1(), zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalesd_xmm_xmm_xmm_i() {
	// EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vrndscalesd(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vrndscalesd(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalesd_xmm_xmm_m_i() {
	// EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vrndscalesd(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vrndscalesd(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalesd_xmm_xmm_xmm_u() {
	// EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vrndscalesd(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalesd_xmm_xmm_m_u() {
	// EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae
	test_instr(16, |a| a.vrndscalesd(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalesh_xmm_xmm_xmm_i() {
	// EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vrndscalesh(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vrndscalesh(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalesh_xmm_xmm_m_i() {
	// EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vrndscalesh(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vrndscalesh(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalesh_xmm_xmm_xmm_u() {
	// EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vrndscalesh(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscalesh_xmm_xmm_m_u() {
	// EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae
	test_instr(16, |a| a.vrndscalesh(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaless_xmm_xmm_xmm_i() {
	// EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vrndscaless(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vrndscaless(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaless_xmm_xmm_m_i() {
	// EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vrndscaless(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vrndscaless(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaless_xmm_xmm_xmm_u() {
	// EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vrndscaless(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrndscaless_xmm_xmm_m_u() {
	// EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae
	test_instr(16, |a| a.vrndscaless(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundpd_xmm_xmm_i() {
	// VEX_Vroundpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.vroundpd(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vroundpd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vroundpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.vroundpd(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::VEX_Vroundpd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundpd_ymm_ymm_i() {
	// VEX_Vroundpd_ymm_ymmm256_imm8
	test_instr(16, |a| a.vroundpd(ymm2, ymm3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vroundpd_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vroundpd_ymm_ymmm256_imm8
	test_instr(16, |a| a.vroundpd(ymm2, ymm3, -5).unwrap(),
		Instruction::with3(Code::VEX_Vroundpd_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundpd_xmm_m_i() {
	// VEX_Vroundpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.vroundpd(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vroundpd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vroundpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.vroundpd(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::VEX_Vroundpd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundpd_ymm_m_i() {
	// VEX_Vroundpd_ymm_ymmm256_imm8
	test_instr(16, |a| a.vroundpd(ymm2, ymmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vroundpd_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vroundpd_ymm_ymmm256_imm8
	test_instr(16, |a| a.vroundpd(ymm2, ymmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::VEX_Vroundpd_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundpd_xmm_xmm_u() {
	// VEX_Vroundpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.vroundpd(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vroundpd_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundpd_ymm_ymm_u() {
	// VEX_Vroundpd_ymm_ymmm256_imm8
	test_instr(16, |a| a.vroundpd(ymm2, ymm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vroundpd_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundpd_xmm_m_u() {
	// VEX_Vroundpd_xmm_xmmm128_imm8
	test_instr(16, |a| a.vroundpd(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vroundpd_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundpd_ymm_m_u() {
	// VEX_Vroundpd_ymm_ymmm256_imm8
	test_instr(16, |a| a.vroundpd(ymm2, ymmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vroundpd_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundps_xmm_xmm_i() {
	// VEX_Vroundps_xmm_xmmm128_imm8
	test_instr(16, |a| a.vroundps(xmm2, xmm3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vroundps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vroundps_xmm_xmmm128_imm8
	test_instr(16, |a| a.vroundps(xmm2, xmm3, -5).unwrap(),
		Instruction::with3(Code::VEX_Vroundps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundps_ymm_ymm_i() {
	// VEX_Vroundps_ymm_ymmm256_imm8
	test_instr(16, |a| a.vroundps(ymm2, ymm3, -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vroundps_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vroundps_ymm_ymmm256_imm8
	test_instr(16, |a| a.vroundps(ymm2, ymm3, -5).unwrap(),
		Instruction::with3(Code::VEX_Vroundps_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundps_xmm_m_i() {
	// VEX_Vroundps_xmm_xmmm128_imm8
	test_instr(16, |a| a.vroundps(xmm2, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vroundps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vroundps_xmm_xmmm128_imm8
	test_instr(16, |a| a.vroundps(xmm2, xmmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::VEX_Vroundps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundps_ymm_m_i() {
	// VEX_Vroundps_ymm_ymmm256_imm8
	test_instr(16, |a| a.vroundps(ymm2, ymmword_ptr(si), -5i32).unwrap(),
		Instruction::with3(Code::VEX_Vroundps_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vroundps_ymm_ymmm256_imm8
	test_instr(16, |a| a.vroundps(ymm2, ymmword_ptr(si), -5).unwrap(),
		Instruction::with3(Code::VEX_Vroundps_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundps_xmm_xmm_u() {
	// VEX_Vroundps_xmm_xmmm128_imm8
	test_instr(16, |a| a.vroundps(xmm2, xmm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vroundps_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundps_ymm_ymm_u() {
	// VEX_Vroundps_ymm_ymmm256_imm8
	test_instr(16, |a| a.vroundps(ymm2, ymm3, 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vroundps_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundps_xmm_m_u() {
	// VEX_Vroundps_xmm_xmmm128_imm8
	test_instr(16, |a| a.vroundps(xmm2, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vroundps_xmm_xmmm128_imm8, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundps_ymm_m_u() {
	// VEX_Vroundps_ymm_ymmm256_imm8
	test_instr(16, |a| a.vroundps(ymm2, ymmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with3(Code::VEX_Vroundps_ymm_ymmm256_imm8, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundsd_xmm_xmm_xmm_i() {
	// VEX_Vroundsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vroundsd(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vroundsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vroundsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vroundsd(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vroundsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundsd_xmm_xmm_m_i() {
	// VEX_Vroundsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vroundsd(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vroundsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vroundsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vroundsd(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vroundsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundsd_xmm_xmm_xmm_u() {
	// VEX_Vroundsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vroundsd(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vroundsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundsd_xmm_xmm_m_u() {
	// VEX_Vroundsd_xmm_xmm_xmmm64_imm8
	test_instr(16, |a| a.vroundsd(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vroundsd_xmm_xmm_xmmm64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundss_xmm_xmm_xmm_i() {
	// VEX_Vroundss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vroundss(xmm2, xmm3, xmm4, -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vroundss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vroundss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vroundss(xmm2, xmm3, xmm4, -5).unwrap(),
		Instruction::with4(Code::VEX_Vroundss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundss_xmm_xmm_m_i() {
	// VEX_Vroundss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vroundss(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
		Instruction::with4(Code::VEX_Vroundss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// VEX_Vroundss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vroundss(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
		Instruction::with4(Code::VEX_Vroundss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundss_xmm_xmm_xmm_u() {
	// VEX_Vroundss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vroundss(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vroundss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vroundss_xmm_xmm_m_u() {
	// VEX_Vroundss_xmm_xmm_xmmm32_imm8
	test_instr(16, |a| a.vroundss(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
		Instruction::with4(Code::VEX_Vroundss_xmm_xmm_xmmm32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt14pd_xmm_xmm() {
	// EVEX_Vrsqrt14pd_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vrsqrt14pd(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrt14pd_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt14pd_ymm_ymm() {
	// EVEX_Vrsqrt14pd_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vrsqrt14pd(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrt14pd_ymm_k1z_ymmm256b64, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt14pd_zmm_zmm() {
	// EVEX_Vrsqrt14pd_zmm_k1z_zmmm512b64
	test_instr(16, |a| a.vrsqrt14pd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrt14pd_zmm_k1z_zmmm512b64, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt14pd_xmm_m() {
	// EVEX_Vrsqrt14pd_xmm_k1z_xmmm128b64
	test_instr(16, |a| a.vrsqrt14pd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrt14pd_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt14pd_ymm_m() {
	// EVEX_Vrsqrt14pd_ymm_k1z_ymmm256b64
	test_instr(16, |a| a.vrsqrt14pd(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrt14pd_ymm_k1z_ymmm256b64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt14pd_zmm_m() {
	// EVEX_Vrsqrt14pd_zmm_k1z_zmmm512b64
	test_instr(16, |a| a.vrsqrt14pd(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrt14pd_zmm_k1z_zmmm512b64, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt14ps_xmm_xmm() {
	// EVEX_Vrsqrt14ps_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vrsqrt14ps(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrt14ps_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt14ps_ymm_ymm() {
	// EVEX_Vrsqrt14ps_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vrsqrt14ps(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrt14ps_ymm_k1z_ymmm256b32, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt14ps_zmm_zmm() {
	// EVEX_Vrsqrt14ps_zmm_k1z_zmmm512b32
	test_instr(16, |a| a.vrsqrt14ps(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrt14ps_zmm_k1z_zmmm512b32, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt14ps_xmm_m() {
	// EVEX_Vrsqrt14ps_xmm_k1z_xmmm128b32
	test_instr(16, |a| a.vrsqrt14ps(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrt14ps_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt14ps_ymm_m() {
	// EVEX_Vrsqrt14ps_ymm_k1z_ymmm256b32
	test_instr(16, |a| a.vrsqrt14ps(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrt14ps_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt14ps_zmm_m() {
	// EVEX_Vrsqrt14ps_zmm_k1z_zmmm512b32
	test_instr(16, |a| a.vrsqrt14ps(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrt14ps_zmm_k1z_zmmm512b32, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt14sd_xmm_xmm_xmm() {
	// EVEX_Vrsqrt14sd_xmm_k1z_xmm_xmmm64
	test_instr(16, |a| a.vrsqrt14sd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrsqrt14sd_xmm_k1z_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt14sd_xmm_xmm_m() {
	// EVEX_Vrsqrt14sd_xmm_k1z_xmm_xmmm64
	test_instr(16, |a| a.vrsqrt14sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrsqrt14sd_xmm_k1z_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt14ss_xmm_xmm_xmm() {
	// EVEX_Vrsqrt14ss_xmm_k1z_xmm_xmmm32
	test_instr(16, |a| a.vrsqrt14ss(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrsqrt14ss_xmm_k1z_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt14ss_xmm_xmm_m() {
	// EVEX_Vrsqrt14ss_xmm_k1z_xmm_xmmm32
	test_instr(16, |a| a.vrsqrt14ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrsqrt14ss_xmm_k1z_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt28pd_zmm_zmm() {
	// EVEX_Vrsqrt28pd_zmm_k1z_zmmm512b64_sae
	test_instr(16, |a| a.vrsqrt28pd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrt28pd_zmm_k1z_zmmm512b64_sae, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt28pd_zmm_m() {
	// EVEX_Vrsqrt28pd_zmm_k1z_zmmm512b64_sae
	test_instr(16, |a| a.vrsqrt28pd(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrt28pd_zmm_k1z_zmmm512b64_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt28ps_zmm_zmm() {
	// EVEX_Vrsqrt28ps_zmm_k1z_zmmm512b32_sae
	test_instr(16, |a| a.vrsqrt28ps(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrt28ps_zmm_k1z_zmmm512b32_sae, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt28ps_zmm_m() {
	// EVEX_Vrsqrt28ps_zmm_k1z_zmmm512b32_sae
	test_instr(16, |a| a.vrsqrt28ps(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrt28ps_zmm_k1z_zmmm512b32_sae, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt28sd_xmm_xmm_xmm() {
	// EVEX_Vrsqrt28sd_xmm_k1z_xmm_xmmm64_sae
	test_instr(16, |a| a.vrsqrt28sd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrsqrt28sd_xmm_k1z_xmm_xmmm64_sae, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt28sd_xmm_xmm_m() {
	// EVEX_Vrsqrt28sd_xmm_k1z_xmm_xmmm64_sae
	test_instr(16, |a| a.vrsqrt28sd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrsqrt28sd_xmm_k1z_xmm_xmmm64_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt28ss_xmm_xmm_xmm() {
	// EVEX_Vrsqrt28ss_xmm_k1z_xmm_xmmm32_sae
	test_instr(16, |a| a.vrsqrt28ss(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrsqrt28ss_xmm_k1z_xmm_xmmm32_sae, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrt28ss_xmm_xmm_m() {
	// EVEX_Vrsqrt28ss_xmm_k1z_xmm_xmmm32_sae
	test_instr(16, |a| a.vrsqrt28ss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrsqrt28ss_xmm_k1z_xmm_xmmm32_sae, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrtph_xmm_xmm() {
	// EVEX_Vrsqrtph_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vrsqrtph(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrtph_xmm_k1z_xmmm128b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrtph_ymm_ymm() {
	// EVEX_Vrsqrtph_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vrsqrtph(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrtph_ymm_k1z_ymmm256b16, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrtph_zmm_zmm() {
	// EVEX_Vrsqrtph_zmm_k1z_zmmm512b16
	test_instr(16, |a| a.vrsqrtph(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrtph_zmm_k1z_zmmm512b16, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrtph_xmm_m() {
	// EVEX_Vrsqrtph_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vrsqrtph(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrtph_xmm_k1z_xmmm128b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrtph_ymm_m() {
	// EVEX_Vrsqrtph_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vrsqrtph(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrtph_ymm_k1z_ymmm256b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrtph_zmm_m() {
	// EVEX_Vrsqrtph_zmm_k1z_zmmm512b16
	test_instr(16, |a| a.vrsqrtph(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vrsqrtph_zmm_k1z_zmmm512b16, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrtps_xmm_xmm() {
	// VEX_Vrsqrtps_xmm_xmmm128
	test_instr(16, |a| a.vrsqrtps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::VEX_Vrsqrtps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrtps_ymm_ymm() {
	// VEX_Vrsqrtps_ymm_ymmm256
	test_instr(16, |a| a.vrsqrtps(ymm2, ymm3).unwrap(),
		Instruction::with2(Code::VEX_Vrsqrtps_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrtps_xmm_m() {
	// VEX_Vrsqrtps_xmm_xmmm128
	test_instr(16, |a| a.vrsqrtps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vrsqrtps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrtps_ymm_m() {
	// VEX_Vrsqrtps_ymm_ymmm256
	test_instr(16, |a| a.vrsqrtps(ymm2, ymmword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vrsqrtps_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrtsh_xmm_xmm_xmm() {
	// EVEX_Vrsqrtsh_xmm_k1z_xmm_xmmm16
	test_instr(16, |a| a.vrsqrtsh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrsqrtsh_xmm_k1z_xmm_xmmm16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrtsh_xmm_xmm_m() {
	// EVEX_Vrsqrtsh_xmm_k1z_xmm_xmmm16
	test_instr(16, |a| a.vrsqrtsh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vrsqrtsh_xmm_k1z_xmm_xmmm16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrtss_xmm_xmm_xmm() {
	// VEX_Vrsqrtss_xmm_xmm_xmmm32
	test_instr(16, |a| a.vrsqrtss(xmm2, xmm3, xmm4).unwrap(),
		Instruction::with3(Code::VEX_Vrsqrtss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vrsqrtss_xmm_xmm_m() {
	// VEX_Vrsqrtss_xmm_xmm_xmmm32
	test_instr(16, |a| a.vrsqrtss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
		Instruction::with3(Code::VEX_Vrsqrtss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefpd_xmm_xmm_xmm() {
	// EVEX_Vscalefpd_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vscalefpd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefpd_ymm_ymm_ymm() {
	// EVEX_Vscalefpd_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vscalefpd(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefpd_zmm_zmm_zmm() {
	// EVEX_Vscalefpd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vscalefpd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefpd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefpd_xmm_xmm_m() {
	// EVEX_Vscalefpd_xmm_k1z_xmm_xmmm128b64
	test_instr(16, |a| a.vscalefpd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefpd_ymm_ymm_m() {
	// EVEX_Vscalefpd_ymm_k1z_ymm_ymmm256b64
	test_instr(16, |a| a.vscalefpd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefpd_zmm_zmm_m() {
	// EVEX_Vscalefpd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vscalefpd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefpd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefph_xmm_xmm_xmm() {
	// EVEX_Vscalefph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vscalefph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefph_ymm_ymm_ymm() {
	// EVEX_Vscalefph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vscalefph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefph_zmm_zmm_zmm() {
	// EVEX_Vscalefph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vscalefph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefph_xmm_xmm_m() {
	// EVEX_Vscalefph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vscalefph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefph_ymm_ymm_m() {
	// EVEX_Vscalefph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vscalefph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefph_zmm_zmm_m() {
	// EVEX_Vscalefph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vscalefph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefps_xmm_xmm_xmm() {
	// EVEX_Vscalefps_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vscalefps(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefps_ymm_ymm_ymm() {
	// EVEX_Vscalefps_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vscalefps(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefps_zmm_zmm_zmm() {
	// EVEX_Vscalefps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vscalefps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefps_xmm_xmm_m() {
	// EVEX_Vscalefps_xmm_k1z_xmm_xmmm128b32
	test_instr(16, |a| a.vscalefps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefps_ymm_ymm_m() {
	// EVEX_Vscalefps_ymm_k1z_ymm_ymmm256b32
	test_instr(16, |a| a.vscalefps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefps_zmm_zmm_m() {
	// EVEX_Vscalefps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vscalefps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefsd_xmm_xmm_xmm() {
	// EVEX_Vscalefsd_xmm_k1z_xmm_xmmm64_er
	test_instr(16, |a| a.vscalefsd(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefsd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefsd_xmm_xmm_m() {
	// EVEX_Vscalefsd_xmm_k1z_xmm_xmmm64_er
	test_instr(16, |a| a.vscalefsd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefsd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefsh_xmm_xmm_xmm() {
	// EVEX_Vscalefsh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vscalefsh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefsh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefsh_xmm_xmm_m() {
	// EVEX_Vscalefsh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vscalefsh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefsh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefss_xmm_xmm_xmm() {
	// EVEX_Vscalefss_xmm_k1z_xmm_xmmm32_er
	test_instr(16, |a| a.vscalefss(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscalefss_xmm_xmm_m() {
	// EVEX_Vscalefss_xmm_k1z_xmm_xmmm32_er
	test_instr(16, |a| a.vscalefss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vscalefss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterdpd_m_xmm() {
	// EVEX_Vscatterdpd_vm32x_k1_xmm
	test_instr(16, |a| a.vscatterdpd(ptr(edx+xmm2).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vscatterdpd_vm32x_k1_xmm, MemoryOperand::new(Register::EDX, Register::XMM2, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterdpd_m_ymm() {
	// EVEX_Vscatterdpd_vm32x_k1_ymm
	test_instr(16, |a| a.vscatterdpd(ptr(edx+xmm2).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vscatterdpd_vm32x_k1_ymm, MemoryOperand::new(Register::EDX, Register::XMM2, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterdpd_m_zmm() {
	// EVEX_Vscatterdpd_vm32y_k1_zmm
	test_instr(16, |a| a.vscatterdpd(ptr(edx+ymm2).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vscatterdpd_vm32y_k1_zmm, MemoryOperand::new(Register::EDX, Register::YMM2, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterdps_m_xmm() {
	// EVEX_Vscatterdps_vm32x_k1_xmm
	test_instr(16, |a| a.vscatterdps(ptr(edx+xmm2).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vscatterdps_vm32x_k1_xmm, MemoryOperand::new(Register::EDX, Register::XMM2, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterdps_m_ymm() {
	// EVEX_Vscatterdps_vm32y_k1_ymm
	test_instr(16, |a| a.vscatterdps(ptr(edx+ymm2).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vscatterdps_vm32y_k1_ymm, MemoryOperand::new(Register::EDX, Register::YMM2, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterdps_m_zmm() {
	// EVEX_Vscatterdps_vm32z_k1_zmm
	test_instr(16, |a| a.vscatterdps(ptr(edx+zmm2).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vscatterdps_vm32z_k1_zmm, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterpf0dpd_m() {
	// EVEX_Vscatterpf0dpd_vm32y_k1
	test_instr(16, |a| a.vscatterpf0dpd(ptr(edx+ymm2).k1()).unwrap(),
		add_op_mask(Instruction::with1(Code::EVEX_Vscatterpf0dpd_vm32y_k1, MemoryOperand::new(Register::EDX, Register::YMM2, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterpf0dps_m() {
	// EVEX_Vscatterpf0dps_vm32z_k1
	test_instr(16, |a| a.vscatterpf0dps(ptr(edx+zmm2).k1()).unwrap(),
		add_op_mask(Instruction::with1(Code::EVEX_Vscatterpf0dps_vm32z_k1, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterpf0qpd_m() {
	// EVEX_Vscatterpf0qpd_vm64z_k1
	test_instr(16, |a| a.vscatterpf0qpd(ptr(edx+zmm2).k1()).unwrap(),
		add_op_mask(Instruction::with1(Code::EVEX_Vscatterpf0qpd_vm64z_k1, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterpf0qps_m() {
	// EVEX_Vscatterpf0qps_vm64z_k1
	test_instr(16, |a| a.vscatterpf0qps(ptr(edx+zmm2).k1()).unwrap(),
		add_op_mask(Instruction::with1(Code::EVEX_Vscatterpf0qps_vm64z_k1, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterpf1dpd_m() {
	// EVEX_Vscatterpf1dpd_vm32y_k1
	test_instr(16, |a| a.vscatterpf1dpd(ptr(edx+ymm2).k1()).unwrap(),
		add_op_mask(Instruction::with1(Code::EVEX_Vscatterpf1dpd_vm32y_k1, MemoryOperand::new(Register::EDX, Register::YMM2, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterpf1dps_m() {
	// EVEX_Vscatterpf1dps_vm32z_k1
	test_instr(16, |a| a.vscatterpf1dps(ptr(edx+zmm2).k1()).unwrap(),
		add_op_mask(Instruction::with1(Code::EVEX_Vscatterpf1dps_vm32z_k1, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterpf1qpd_m() {
	// EVEX_Vscatterpf1qpd_vm64z_k1
	test_instr(16, |a| a.vscatterpf1qpd(ptr(edx+zmm2).k1()).unwrap(),
		add_op_mask(Instruction::with1(Code::EVEX_Vscatterpf1qpd_vm64z_k1, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterpf1qps_m() {
	// EVEX_Vscatterpf1qps_vm64z_k1
	test_instr(16, |a| a.vscatterpf1qps(ptr(edx+zmm2).k1()).unwrap(),
		add_op_mask(Instruction::with1(Code::EVEX_Vscatterpf1qps_vm64z_k1, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterqpd_m_xmm() {
	// EVEX_Vscatterqpd_vm64x_k1_xmm
	test_instr(16, |a| a.vscatterqpd(ptr(edx+xmm2).k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vscatterqpd_vm64x_k1_xmm, MemoryOperand::new(Register::EDX, Register::XMM2, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterqpd_m_ymm() {
	// EVEX_Vscatterqpd_vm64y_k1_ymm
	test_instr(16, |a| a.vscatterqpd(ptr(edx+ymm2).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vscatterqpd_vm64y_k1_ymm, MemoryOperand::new(Register::EDX, Register::YMM2, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterqpd_m_zmm() {
	// EVEX_Vscatterqpd_vm64z_k1_zmm
	test_instr(16, |a| a.vscatterqpd(ptr(edx+zmm2).k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vscatterqpd_vm64z_k1_zmm, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None), Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vscatterqps_m_xmm() {
	/* if op0.index().is_xmm() */ {
		// EVEX_Vscatterqps_vm64x_k1_xmm
		test_instr(16, |a| a.vscatterqps(ptr(edx+xmm2).k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vscatterqps_vm64x_k1_xmm, MemoryOperand::new(Register::EDX, Register::XMM2, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op0.index().is_ymm() */ {
		// EVEX_Vscatterqps_vm64y_k1_xmm
		test_instr(16, |a| a.vscatterqps(ptr(edx+ymm2).k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vscatterqps_vm64y_k1_xmm, MemoryOperand::new(Register::EDX, Register::YMM2, 1, 0x0i64, 0, false, Register::None), Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vscatterqps_vm64y_k1_xmm
		test_invalid_instr(16, |a| assert!(a.vscatterqps(ptr(edx+zmm0).k1(), xmm3).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vscatterqps_m_ymm() {
	// EVEX_Vscatterqps_vm64z_k1_ymm
	test_instr(16, |a| a.vscatterqps(ptr(edx+zmm2).k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vscatterqps_vm64z_k1_ymm, MemoryOperand::new(Register::EDX, Register::ZMM2, 1, 0x0i64, 0, false, Register::None), Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshuff32x4_ymm_ymm_ymm_i() {
	// EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vshuff32x4(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vshuff32x4(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshuff32x4_zmm_zmm_zmm_i() {
	// EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshuff32x4(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshuff32x4(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshuff32x4_ymm_ymm_m_i() {
	// EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vshuff32x4(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vshuff32x4(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshuff32x4_zmm_zmm_m_i() {
	// EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshuff32x4(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshuff32x4(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshuff32x4_ymm_ymm_ymm_u() {
	// EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vshuff32x4(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshuff32x4_zmm_zmm_zmm_u() {
	// EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshuff32x4(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshuff32x4_ymm_ymm_m_u() {
	// EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vshuff32x4(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshuff32x4_zmm_zmm_m_u() {
	// EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshuff32x4(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshuff64x2_ymm_ymm_ymm_i() {
	// EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vshuff64x2(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vshuff64x2(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshuff64x2_zmm_zmm_zmm_i() {
	// EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshuff64x2(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshuff64x2(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshuff64x2_ymm_ymm_m_i() {
	// EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vshuff64x2(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vshuff64x2(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshuff64x2_zmm_zmm_m_i() {
	// EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshuff64x2(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshuff64x2(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshuff64x2_ymm_ymm_ymm_u() {
	// EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vshuff64x2(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshuff64x2_zmm_zmm_zmm_u() {
	// EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshuff64x2(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshuff64x2_ymm_ymm_m_u() {
	// EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vshuff64x2(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshuff64x2_zmm_zmm_m_u() {
	// EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshuff64x2(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufi32x4_ymm_ymm_ymm_i() {
	// EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vshufi32x4(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vshufi32x4(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufi32x4_zmm_zmm_zmm_i() {
	// EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshufi32x4(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshufi32x4(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufi32x4_ymm_ymm_m_i() {
	// EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vshufi32x4(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vshufi32x4(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufi32x4_zmm_zmm_m_i() {
	// EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshufi32x4(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshufi32x4(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufi32x4_ymm_ymm_ymm_u() {
	// EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vshufi32x4(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufi32x4_zmm_zmm_zmm_u() {
	// EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshufi32x4(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufi32x4_ymm_ymm_m_u() {
	// EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8
	test_instr(16, |a| a.vshufi32x4(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufi32x4_zmm_zmm_m_u() {
	// EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshufi32x4(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufi64x2_ymm_ymm_ymm_i() {
	// EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vshufi64x2(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vshufi64x2(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufi64x2_zmm_zmm_zmm_i() {
	// EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshufi64x2(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshufi64x2(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufi64x2_ymm_ymm_m_i() {
	// EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vshufi64x2(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vshufi64x2(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufi64x2_zmm_zmm_m_i() {
	// EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshufi64x2(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshufi64x2(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufi64x2_ymm_ymm_ymm_u() {
	// EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vshufi64x2(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufi64x2_zmm_zmm_zmm_u() {
	// EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshufi64x2(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufi64x2_ymm_ymm_m_u() {
	// EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8
	test_instr(16, |a| a.vshufi64x2(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufi64x2_zmm_zmm_m_u() {
	// EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshufi64x2(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufpd_xmm_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vshufpd_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vshufpd(xmm2, xmm3, xmm4, -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vshufpd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vshufpd(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vshufpd_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vshufpd(xmm2, xmm3, xmm4, -5).unwrap(),
			Instruction::with4(Code::VEX_Vshufpd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vshufpd(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vshufpd_ymm_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vshufpd_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vshufpd(ymm2, ymm3, ymm4, -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vshufpd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vshufpd(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vshufpd_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vshufpd(ymm2, ymm3, ymm4, -5).unwrap(),
			Instruction::with4(Code::VEX_Vshufpd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vshufpd(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vshufpd_zmm_zmm_zmm_i() {
	// EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshufpd(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshufpd(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufpd_xmm_xmm_m_i() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vshufpd(xmm2.k1(), xmm3, dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vshufpd_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vshufpd(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vshufpd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vshufpd(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if op2.is_broadcast() */ {
		// EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vshufpd(xmm2.k1(), xmm3, dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vshufpd_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vshufpd(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::VEX_Vshufpd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vshufpd(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vshufpd_ymm_ymm_m_i() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vshufpd(ymm2.k1(), ymm3, dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vshufpd_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vshufpd(ymm2, ymm3, ymmword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vshufpd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vshufpd(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if op2.is_broadcast() */ {
		// EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vshufpd(ymm2.k1(), ymm3, dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vshufpd_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vshufpd(ymm2, ymm3, ymmword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::VEX_Vshufpd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vshufpd(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vshufpd_zmm_zmm_m_i() {
	// EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshufpd(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshufpd(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufpd_xmm_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vshufpd_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vshufpd(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vshufpd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vshufpd(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vshufpd_ymm_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vshufpd_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vshufpd(ymm2, ymm3, ymm4, 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vshufpd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vshufpd(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vshufpd_zmm_zmm_zmm_u() {
	// EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshufpd(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufpd_xmm_xmm_m_u() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vshufpd(xmm2.k1(), xmm3, dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vshufpd_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vshufpd(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vshufpd_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8
		test_instr(16, |a| a.vshufpd(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vshufpd_ymm_ymm_m_u() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vshufpd(ymm2.k1(), ymm3, dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vshufpd_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vshufpd(ymm2, ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vshufpd_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8
		test_instr(16, |a| a.vshufpd(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vshufpd_zmm_zmm_m_u() {
	// EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8
	test_instr(16, |a| a.vshufpd(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufps_xmm_xmm_xmm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vshufps_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vshufps(xmm2, xmm3, xmm4, -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vshufps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8
		test_instr(16, |a| a.vshufps(xmm2.k1(), xmm3, xmm4, -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vshufps_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vshufps(xmm2, xmm3, xmm4, -5).unwrap(),
			Instruction::with4(Code::VEX_Vshufps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8
		test_instr(16, |a| a.vshufps(xmm2.k1(), xmm3, xmm4, -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vshufps_ymm_ymm_ymm_i() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vshufps_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vshufps(ymm2, ymm3, ymm4, -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vshufps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8
		test_instr(16, |a| a.vshufps(ymm2.k1(), ymm3, ymm4, -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vshufps_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vshufps(ymm2, ymm3, ymm4, -5).unwrap(),
			Instruction::with4(Code::VEX_Vshufps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8
		test_instr(16, |a| a.vshufps(ymm2.k1(), ymm3, ymm4, -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vshufps_zmm_zmm_zmm_i() {
	// EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshufps(zmm2.k1(), zmm3, zmm4, -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshufps(zmm2.k1(), zmm3, zmm4, -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufps_xmm_xmm_m_i() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8
		test_instr(16, |a| a.vshufps(xmm2.k1(), xmm3, dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vshufps_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vshufps(xmm2, xmm3, xmmword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vshufps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8
		test_instr(16, |a| a.vshufps(xmm2.k1(), xmm3, xmmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if op2.is_broadcast() */ {
		// EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8
		test_instr(16, |a| a.vshufps(xmm2.k1(), xmm3, dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vshufps_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vshufps(xmm2, xmm3, xmmword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::VEX_Vshufps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8
		test_instr(16, |a| a.vshufps(xmm2.k1(), xmm3, xmmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vshufps_ymm_ymm_m_i() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8
		test_instr(16, |a| a.vshufps(ymm2.k1(), ymm3, dword_bcst(di), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vshufps_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vshufps(ymm2, ymm3, ymmword_ptr(si), -5i32).unwrap(),
			Instruction::with4(Code::VEX_Vshufps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8
		test_instr(16, |a| a.vshufps(ymm2.k1(), ymm3, ymmword_ptr(si), -5i32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
	/* if op2.is_broadcast() */ {
		// EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8
		test_instr(16, |a| a.vshufps(ymm2.k1(), ymm3, dword_bcst(di), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vshufps_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vshufps(ymm2, ymm3, ymmword_ptr(si), -5).unwrap(),
			Instruction::with4(Code::VEX_Vshufps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8
		test_instr(16, |a| a.vshufps(ymm2.k1(), ymm3, ymmword_ptr(si), -5).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vshufps_zmm_zmm_m_i() {
	// EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshufps(zmm2.k1(), zmm3, zmmword_ptr(si), -5i32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshufps(zmm2.k1(), zmm3, zmmword_ptr(si), -5).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufps_xmm_xmm_xmm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vshufps_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vshufps(xmm2, xmm3, xmm4, 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vshufps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8
		test_instr(16, |a| a.vshufps(xmm2.k1(), xmm3, xmm4, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, Register::XMM4, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vshufps_ymm_ymm_ymm_u() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vshufps_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vshufps(ymm2, ymm3, ymm4, 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vshufps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8
		test_instr(16, |a| a.vshufps(ymm2.k1(), ymm3, ymm4, 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, Register::YMM4, 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vshufps_zmm_zmm_zmm_u() {
	// EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshufps(zmm2.k1(), zmm3, zmm4, 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, Register::ZMM4, 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vshufps_xmm_xmm_m_u() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8
		test_instr(16, |a| a.vshufps(xmm2.k1(), xmm3, dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vshufps_xmm_xmm_xmmm128_imm8
		test_instr(16, |a| a.vshufps(xmm2, xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vshufps_xmm_xmm_xmmm128_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8
		test_instr(16, |a| a.vshufps(xmm2.k1(), xmm3, xmmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vshufps_ymm_ymm_m_u() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8
		test_instr(16, |a| a.vshufps(ymm2.k1(), ymm3, dword_bcst(di), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vshufps_ymm_ymm_ymmm256_imm8
		test_instr(16, |a| a.vshufps(ymm2, ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
			Instruction::with4(Code::VEX_Vshufps_ymm_ymm_ymmm256_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8
		test_instr(16, |a| a.vshufps(ymm2.k1(), ymm3, ymmword_ptr(si), 0x7Fu32).unwrap(),
			add_op_mask(Instruction::with4(Code::EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vshufps_zmm_zmm_m_u() {
	// EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8
	test_instr(16, |a| a.vshufps(zmm2.k1(), zmm3, zmmword_ptr(si), 0x7Fu32).unwrap(),
		add_op_mask(Instruction::with4(Code::EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsqrtpd_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vsqrtpd_xmm_xmmm128
		test_instr(16, |a| a.vsqrtpd(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vsqrtpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsqrtpd_xmm_k1z_xmmm128b64
		test_instr(16, |a| a.vsqrtpd(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vsqrtpd_xmm_k1z_xmmm128b64, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsqrtpd_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vsqrtpd_ymm_ymmm256
		test_instr(16, |a| a.vsqrtpd(ymm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vsqrtpd_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsqrtpd_ymm_k1z_ymmm256b64
		test_instr(16, |a| a.vsqrtpd(ymm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vsqrtpd_ymm_k1z_ymmm256b64, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsqrtpd_zmm_zmm() {
	// EVEX_Vsqrtpd_zmm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vsqrtpd(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vsqrtpd_zmm_k1z_zmmm512b64_er, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsqrtpd_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vsqrtpd_xmm_k1z_xmmm128b64
		test_instr(16, |a| a.vsqrtpd(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vsqrtpd_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vsqrtpd_xmm_xmmm128
		test_instr(16, |a| a.vsqrtpd(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vsqrtpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsqrtpd_xmm_k1z_xmmm128b64
		test_instr(16, |a| a.vsqrtpd(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vsqrtpd_xmm_k1z_xmmm128b64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsqrtpd_ymm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vsqrtpd_ymm_k1z_ymmm256b64
		test_instr(16, |a| a.vsqrtpd(ymm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vsqrtpd_ymm_k1z_ymmm256b64, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vsqrtpd_ymm_ymmm256
		test_instr(16, |a| a.vsqrtpd(ymm2, ymmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vsqrtpd_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsqrtpd_ymm_k1z_ymmm256b64
		test_instr(16, |a| a.vsqrtpd(ymm2.k1(), ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vsqrtpd_ymm_k1z_ymmm256b64, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsqrtpd_zmm_m() {
	// EVEX_Vsqrtpd_zmm_k1z_zmmm512b64_er
	test_instr(16, |a| a.vsqrtpd(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vsqrtpd_zmm_k1z_zmmm512b64_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsqrtph_xmm_xmm() {
	// EVEX_Vsqrtph_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vsqrtph(xmm2.k1(), xmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vsqrtph_xmm_k1z_xmmm128b16, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsqrtph_ymm_ymm() {
	// EVEX_Vsqrtph_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vsqrtph(ymm2.k1(), ymm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vsqrtph_ymm_k1z_ymmm256b16, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsqrtph_zmm_zmm() {
	// EVEX_Vsqrtph_zmm_k1z_zmmm512b16_er
	test_instr(16, |a| a.vsqrtph(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vsqrtph_zmm_k1z_zmmm512b16_er, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsqrtph_xmm_m() {
	// EVEX_Vsqrtph_xmm_k1z_xmmm128b16
	test_instr(16, |a| a.vsqrtph(xmm2.k1(), xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vsqrtph_xmm_k1z_xmmm128b16, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsqrtph_ymm_m() {
	// EVEX_Vsqrtph_ymm_k1z_ymmm256b16
	test_instr(16, |a| a.vsqrtph(ymm2.k1(), ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vsqrtph_ymm_k1z_ymmm256b16, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsqrtph_zmm_m() {
	// EVEX_Vsqrtph_zmm_k1z_zmmm512b16_er
	test_instr(16, |a| a.vsqrtph(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vsqrtph_zmm_k1z_zmmm512b16_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsqrtps_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vsqrtps_xmm_xmmm128
		test_instr(16, |a| a.vsqrtps(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vsqrtps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsqrtps_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vsqrtps(xmm2.k1(), xmm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vsqrtps_xmm_k1z_xmmm128b32, Register::XMM2, Register::XMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsqrtps_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vsqrtps_ymm_ymmm256
		test_instr(16, |a| a.vsqrtps(ymm2, ymm3).unwrap(),
			Instruction::with2(Code::VEX_Vsqrtps_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsqrtps_ymm_k1z_ymmm256b32
		test_instr(16, |a| a.vsqrtps(ymm2.k1(), ymm3).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vsqrtps_ymm_k1z_ymmm256b32, Register::YMM2, Register::YMM3).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsqrtps_zmm_zmm() {
	// EVEX_Vsqrtps_zmm_k1z_zmmm512b32_er
	test_instr(16, |a| a.vsqrtps(zmm2.k1(), zmm3).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vsqrtps_zmm_k1z_zmmm512b32_er, Register::ZMM2, Register::ZMM3).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsqrtps_xmm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vsqrtps_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vsqrtps(xmm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vsqrtps_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vsqrtps_xmm_xmmm128
		test_instr(16, |a| a.vsqrtps(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vsqrtps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsqrtps_xmm_k1z_xmmm128b32
		test_instr(16, |a| a.vsqrtps(xmm2.k1(), xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vsqrtps_xmm_k1z_xmmm128b32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsqrtps_ymm_m() {
	/* if op1.is_broadcast() */ {
		// EVEX_Vsqrtps_ymm_k1z_ymmm256b32
		test_instr(16, |a| a.vsqrtps(ymm2.k1(), dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vsqrtps_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vsqrtps_ymm_ymmm256
		test_instr(16, |a| a.vsqrtps(ymm2, ymmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vsqrtps_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsqrtps_ymm_k1z_ymmm256b32
		test_instr(16, |a| a.vsqrtps(ymm2.k1(), ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with2(Code::EVEX_Vsqrtps_ymm_k1z_ymmm256b32, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsqrtps_zmm_m() {
	// EVEX_Vsqrtps_zmm_k1z_zmmm512b32_er
	test_instr(16, |a| a.vsqrtps(zmm2.k1(), zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with2(Code::EVEX_Vsqrtps_zmm_k1z_zmmm512b32_er, Register::ZMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsqrtsd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vsqrtsd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vsqrtsd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vsqrtsd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsqrtsd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vsqrtsd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsqrtsd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsqrtsd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vsqrtsd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vsqrtsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vsqrtsd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsqrtsd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vsqrtsd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsqrtsd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsqrtsh_xmm_xmm_xmm() {
	// EVEX_Vsqrtsh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vsqrtsh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vsqrtsh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsqrtsh_xmm_xmm_m() {
	// EVEX_Vsqrtsh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vsqrtsh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vsqrtsh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsqrtss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vsqrtss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vsqrtss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vsqrtss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsqrtss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vsqrtss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsqrtss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsqrtss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vsqrtss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vsqrtss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vsqrtss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsqrtss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vsqrtss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsqrtss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vstmxcsr_m() {
	// VEX_Vstmxcsr_m32
	test_instr(16, |a| a.vstmxcsr(ptr(si)).unwrap(),
		Instruction::with1(Code::VEX_Vstmxcsr_m32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsubpd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vsubpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vsubpd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vsubpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vsubpd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsubpd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vsubpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vsubpd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vsubpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vsubpd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsubpd_zmm_zmm_zmm() {
	// EVEX_Vsubpd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vsubpd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vsubpd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsubpd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vsubpd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vsubpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vsubpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vsubpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vsubpd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsubpd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vsubpd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vsubpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vsubpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vsubpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vsubpd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsubpd_zmm_zmm_m() {
	// EVEX_Vsubpd_zmm_k1z_zmm_zmmm512b64_er
	test_instr(16, |a| a.vsubpd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vsubpd_zmm_k1z_zmm_zmmm512b64_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsubph_xmm_xmm_xmm() {
	// EVEX_Vsubph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vsubph(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vsubph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsubph_ymm_ymm_ymm() {
	// EVEX_Vsubph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vsubph(ymm2.k1(), ymm3, ymm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vsubph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsubph_zmm_zmm_zmm() {
	// EVEX_Vsubph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vsubph(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vsubph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsubph_xmm_xmm_m() {
	// EVEX_Vsubph_xmm_k1z_xmm_xmmm128b16
	test_instr(16, |a| a.vsubph(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vsubph_xmm_k1z_xmm_xmmm128b16, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsubph_ymm_ymm_m() {
	// EVEX_Vsubph_ymm_k1z_ymm_ymmm256b16
	test_instr(16, |a| a.vsubph(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vsubph_ymm_k1z_ymm_ymmm256b16, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsubph_zmm_zmm_m() {
	// EVEX_Vsubph_zmm_k1z_zmm_zmmm512b16_er
	test_instr(16, |a| a.vsubph(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vsubph_zmm_k1z_zmm_zmmm512b16_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsubps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vsubps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vsubps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vsubps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vsubps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsubps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vsubps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vsubps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vsubps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vsubps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsubps_zmm_zmm_zmm() {
	// EVEX_Vsubps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vsubps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vsubps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsubps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vsubps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vsubps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vsubps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vsubps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vsubps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsubps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vsubps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vsubps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vsubps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vsubps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vsubps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsubps_zmm_zmm_m() {
	// EVEX_Vsubps_zmm_k1z_zmm_zmmm512b32_er
	test_instr(16, |a| a.vsubps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vsubps_zmm_k1z_zmm_zmmm512b32_er, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsubsd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vsubsd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vsubsd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vsubsd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsubsd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vsubsd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsubsd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsubsd_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vsubsd_xmm_xmm_xmmm64
		test_instr(16, |a| a.vsubsd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vsubsd_xmm_xmm_xmmm64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsubsd_xmm_k1z_xmm_xmmm64_er
		test_instr(16, |a| a.vsubsd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsubsd_xmm_k1z_xmm_xmmm64_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsubsh_xmm_xmm_xmm() {
	// EVEX_Vsubsh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vsubsh(xmm2.k1(), xmm3, xmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vsubsh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsubsh_xmm_xmm_m() {
	// EVEX_Vsubsh_xmm_k1z_xmm_xmmm16_er
	test_instr(16, |a| a.vsubsh(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vsubsh_xmm_k1z_xmm_xmmm16_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vsubss_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vsubss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vsubss(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vsubss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsubss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vsubss(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsubss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vsubss_xmm_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vsubss_xmm_xmm_xmmm32
		test_instr(16, |a| a.vsubss(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vsubss_xmm_xmm_xmmm32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vsubss_xmm_k1z_xmm_xmmm32_er
		test_instr(16, |a| a.vsubss(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vsubss_xmm_k1z_xmm_xmmm32_er, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vtestpd_xmm_xmm() {
	// VEX_Vtestpd_xmm_xmmm128
	test_instr(16, |a| a.vtestpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::VEX_Vtestpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vtestpd_ymm_ymm() {
	// VEX_Vtestpd_ymm_ymmm256
	test_instr(16, |a| a.vtestpd(ymm2, ymm3).unwrap(),
		Instruction::with2(Code::VEX_Vtestpd_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vtestpd_xmm_m() {
	// VEX_Vtestpd_xmm_xmmm128
	test_instr(16, |a| a.vtestpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vtestpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vtestpd_ymm_m() {
	// VEX_Vtestpd_ymm_ymmm256
	test_instr(16, |a| a.vtestpd(ymm2, ymmword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vtestpd_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vtestps_xmm_xmm() {
	// VEX_Vtestps_xmm_xmmm128
	test_instr(16, |a| a.vtestps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::VEX_Vtestps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vtestps_ymm_ymm() {
	// VEX_Vtestps_ymm_ymmm256
	test_instr(16, |a| a.vtestps(ymm2, ymm3).unwrap(),
		Instruction::with2(Code::VEX_Vtestps_ymm_ymmm256, Register::YMM2, Register::YMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vtestps_xmm_m() {
	// VEX_Vtestps_xmm_xmmm128
	test_instr(16, |a| a.vtestps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vtestps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vtestps_ymm_m() {
	// VEX_Vtestps_ymm_ymmm256
	test_instr(16, |a| a.vtestps(ymm2, ymmword_ptr(si)).unwrap(),
		Instruction::with2(Code::VEX_Vtestps_ymm_ymmm256, Register::YMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vucomisd_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vucomisd_xmm_xmmm64
		test_instr(16, |a| a.vucomisd(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vucomisd_xmm_xmmm64, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vucomisd_xmm_xmmm64_sae
		test_instr(16, |a| a.vucomisd(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vucomisd_xmm_xmmm64_sae, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vucomisd_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vucomisd_xmm_xmmm64
		test_instr(16, |a| a.vucomisd(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vucomisd_xmm_xmmm64, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vucomisd_xmm_xmmm64_sae
		test_instr(16, |a| a.vucomisd(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::EVEX_Vucomisd_xmm_xmmm64_sae, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vucomish_xmm_xmm() {
	// EVEX_Vucomish_xmm_xmmm16_sae
	test_instr(16, |a| a.vucomish(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::EVEX_Vucomish_xmm_xmmm16_sae, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vucomish_xmm_m() {
	// EVEX_Vucomish_xmm_xmmm16_sae
	test_instr(16, |a| a.vucomish(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::EVEX_Vucomish_xmm_xmmm16_sae, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vucomiss_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vucomiss_xmm_xmmm32
		test_instr(16, |a| a.vucomiss(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::VEX_Vucomiss_xmm_xmmm32, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vucomiss_xmm_xmmm32_sae
		test_instr(16, |a| a.vucomiss(xmm2, xmm3).unwrap(),
			Instruction::with2(Code::EVEX_Vucomiss_xmm_xmmm32_sae, Register::XMM2, Register::XMM3).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vucomiss_xmm_m() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vucomiss_xmm_xmmm32
		test_instr(16, |a| a.vucomiss(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::VEX_Vucomiss_xmm_xmmm32, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vucomiss_xmm_xmmm32_sae
		test_instr(16, |a| a.vucomiss(xmm2, xmmword_ptr(si)).unwrap(),
			Instruction::with2(Code::EVEX_Vucomiss_xmm_xmmm32_sae, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vunpckhpd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vunpckhpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vunpckhpd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vunpckhpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vunpckhpd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vunpckhpd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vunpckhpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vunpckhpd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vunpckhpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vunpckhpd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vunpckhpd_zmm_zmm_zmm() {
	// EVEX_Vunpckhpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vunpckhpd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vunpckhpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vunpckhpd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vunpckhpd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vunpckhpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vunpckhpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vunpckhpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vunpckhpd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vunpckhpd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vunpckhpd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vunpckhpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vunpckhpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vunpckhpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vunpckhpd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vunpckhpd_zmm_zmm_m() {
	// EVEX_Vunpckhpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vunpckhpd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vunpckhpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vunpckhps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vunpckhps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vunpckhps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vunpckhps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vunpckhps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vunpckhps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vunpckhps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vunpckhps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vunpckhps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vunpckhps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vunpckhps_zmm_zmm_zmm() {
	// EVEX_Vunpckhps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vunpckhps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vunpckhps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vunpckhps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vunpckhps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vunpckhps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vunpckhps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vunpckhps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vunpckhps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vunpckhps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vunpckhps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vunpckhps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vunpckhps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vunpckhps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vunpckhps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vunpckhps_zmm_zmm_m() {
	// EVEX_Vunpckhps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vunpckhps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vunpckhps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vunpcklpd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vunpcklpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vunpcklpd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vunpcklpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vunpcklpd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vunpcklpd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vunpcklpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vunpcklpd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vunpcklpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vunpcklpd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vunpcklpd_zmm_zmm_zmm() {
	// EVEX_Vunpcklpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vunpcklpd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vunpcklpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vunpcklpd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vunpcklpd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vunpcklpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vunpcklpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vunpcklpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vunpcklpd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vunpcklpd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vunpcklpd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vunpcklpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vunpcklpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vunpcklpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vunpcklpd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vunpcklpd_zmm_zmm_m() {
	// EVEX_Vunpcklpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vunpcklpd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vunpcklpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vunpcklps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vunpcklps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vunpcklps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vunpcklps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vunpcklps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vunpcklps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vunpcklps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vunpcklps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vunpcklps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vunpcklps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vunpcklps_zmm_zmm_zmm() {
	// EVEX_Vunpcklps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vunpcklps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vunpcklps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vunpcklps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vunpcklps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vunpcklps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vunpcklps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vunpcklps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vunpcklps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vunpcklps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vunpcklps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vunpcklps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vunpcklps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vunpcklps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vunpcklps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vunpcklps_zmm_zmm_m() {
	// EVEX_Vunpcklps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vunpcklps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vunpcklps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vxorpd_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vxorpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vxorpd(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vxorpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vxorpd(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vxorpd_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vxorpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vxorpd(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vxorpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vxorpd(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vxorpd_zmm_zmm_zmm() {
	// EVEX_Vxorpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vxorpd(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vxorpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vxorpd_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vxorpd(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vxorpd_xmm_xmm_xmmm128
		test_instr(16, |a| a.vxorpd(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vxorpd_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64
		test_instr(16, |a| a.vxorpd(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vxorpd_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vxorpd(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vxorpd_ymm_ymm_ymmm256
		test_instr(16, |a| a.vxorpd(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vxorpd_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64
		test_instr(16, |a| a.vxorpd(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vxorpd_zmm_zmm_m() {
	// EVEX_Vxorpd_zmm_k1z_zmm_zmmm512b64
	test_instr(16, |a| a.vxorpd(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vxorpd_zmm_k1z_zmm_zmmm512b64, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vxorps_xmm_xmm_xmm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vxorps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vxorps(xmm2, xmm3, xmm4).unwrap(),
			Instruction::with3(Code::VEX_Vxorps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vxorps(xmm2.k1(), xmm3, xmm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, Register::XMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vxorps_ymm_ymm_ymm() {
	/* if self.instruction_prefer_vex() */ {
		// VEX_Vxorps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vxorps(ymm2, ymm3, ymm4).unwrap(),
			Instruction::with3(Code::VEX_Vxorps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vxorps(ymm2.k1(), ymm3, ymm4).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, Register::YMM4).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vxorps_zmm_zmm_zmm() {
	// EVEX_Vxorps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vxorps(zmm2.k1(), zmm3, zmm4).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vxorps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, Register::ZMM4).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vxorps_xmm_xmm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vxorps(xmm2.k1(), xmm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vxorps_xmm_xmm_xmmm128
		test_instr(16, |a| a.vxorps(xmm2, xmm3, xmmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vxorps_xmm_xmm_xmmm128, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32
		test_instr(16, |a| a.vxorps(xmm2.k1(), xmm3, xmmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32, Register::XMM2, Register::XMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vxorps_ymm_ymm_m() {
	/* if op2.is_broadcast() */ {
		// EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vxorps(ymm2.k1(), ymm3, dword_bcst(di)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, true, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX | TestInstrFlags::BROADCAST, DecoderOptions::NONE);
	} /* else if self.instruction_prefer_vex() */ {
		// VEX_Vxorps_ymm_ymm_ymmm256
		test_instr(16, |a| a.vxorps(ymm2, ymm3, ymmword_ptr(si)).unwrap(),
			Instruction::with3(Code::VEX_Vxorps_ymm_ymm_ymmm256, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
			TestInstrFlags::PREFER_VEX, DecoderOptions::NONE);
	} /* else */ {
		// EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32
		test_instr(16, |a| a.vxorps(ymm2.k1(), ymm3, ymmword_ptr(si)).unwrap(),
			add_op_mask(Instruction::with3(Code::EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32, Register::YMM2, Register::YMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
			TestInstrFlags::PREFER_EVEX, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn vxorps_zmm_zmm_m() {
	// EVEX_Vxorps_zmm_k1z_zmm_zmmm512b32
	test_instr(16, |a| a.vxorps(zmm2.k1(), zmm3, zmmword_ptr(si)).unwrap(),
		add_op_mask(Instruction::with3(Code::EVEX_Vxorps_zmm_k1z_zmm_zmmm512b32, Register::ZMM2, Register::ZMM3, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(), Register::K1),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vzeroall() {
	// VEX_Vzeroall
	test_instr(16, |a| a.vzeroall().unwrap(),
		Instruction::with(Code::VEX_Vzeroall),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn vzeroupper() {
	// VEX_Vzeroupper
	test_instr(16, |a| a.vzeroupper().unwrap(),
		Instruction::with(Code::VEX_Vzeroupper),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn wait() {
	// Wait
	test_instr(16, |a| a.wait().unwrap(),
		Instruction::with(Code::Wait),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn wbinvd() {
	// Wbinvd
	test_instr(16, |a| a.wbinvd().unwrap(),
		Instruction::with(Code::Wbinvd),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn wbnoinvd() {
	// Wbnoinvd
	test_instr(16, |a| a.wbnoinvd().unwrap(),
		Instruction::with(Code::Wbnoinvd),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn wrmsr() {
	// Wrmsr
	test_instr(16, |a| a.wrmsr().unwrap(),
		Instruction::with(Code::Wrmsr),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn wrmsrns() {
	// Wrmsrns
	test_instr(16, |a| a.wrmsrns().unwrap(),
		Instruction::with(Code::Wrmsrns),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn wrpkru() {
	// Wrpkru
	test_instr(16, |a| a.wrpkru().unwrap(),
		Instruction::with(Code::Wrpkru),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn wrshr_r32() {
	// Wrshr_rm32
	test_instr(16, |a| a.wrshr(edx).unwrap(),
		Instruction::with1(Code::Wrshr_rm32, Register::EDX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn wrshr_m() {
	// Wrshr_rm32
	test_instr(16, |a| a.wrshr(dword_ptr(si)).unwrap(),
		Instruction::with1(Code::Wrshr_rm32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::CYRIX);
}

#[test]
#[rustfmt::skip]
fn wrssd_m_r32() {
	// Wrssd_m32_r32
	test_instr(16, |a| a.wrssd(ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Wrssd_m32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn wrudbg() {
	// Wrudbg
	test_instr(16, |a| a.wrudbg().unwrap(),
		Instruction::with(Code::Wrudbg),
		TestInstrFlags::NONE, DecoderOptions::UDBG);
}

#[test]
#[rustfmt::skip]
fn wrussd_m_r32() {
	// Wrussd_m32_r32
	test_instr(16, |a| a.wrussd(ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Wrussd_m32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xabort_i() {
	// Xabort_imm8
	test_instr(16, |a| a.xabort(-5i32).unwrap(),
		Instruction::with1(Code::Xabort_imm8, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
	// Xabort_imm8
	test_instr(16, |a| a.xabort(-5).unwrap(),
		Instruction::with1(Code::Xabort_imm8, -5i32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xabort_u() {
	// Xabort_imm8
	test_instr(16, |a| a.xabort(0x7Fu32).unwrap(),
		Instruction::with1(Code::Xabort_imm8, 0x7Fu32).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xadd_r8_r8() {
	// Xadd_rm8_r8
	test_instr(16, |a| a.xadd(dl, bl).unwrap(),
		Instruction::with2(Code::Xadd_rm8_r8, Register::DL, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xadd_m_r8() {
	// Xadd_rm8_r8
	test_instr(16, |a| a.xadd(byte_ptr(si), bl).unwrap(),
		Instruction::with2(Code::Xadd_rm8_r8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xadd_r16_r16() {
	// Xadd_rm16_r16
	test_instr(16, |a| a.xadd(dx, bx).unwrap(),
		Instruction::with2(Code::Xadd_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xadd_m_r16() {
	// Xadd_rm16_r16
	test_instr(16, |a| a.xadd(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Xadd_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xadd_r32_r32() {
	// Xadd_rm32_r32
	test_instr(16, |a| a.xadd(edx, ebx).unwrap(),
		Instruction::with2(Code::Xadd_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xadd_m_r32() {
	// Xadd_rm32_r32
	test_instr(16, |a| a.xadd(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Xadd_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xbts_r16_r16() {
	// Xbts_r16_rm16
	test_instr(16, |a| a.xbts(dx, bx).unwrap(),
		Instruction::with2(Code::Xbts_r16_rm16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::XBTS);
}

#[test]
#[rustfmt::skip]
fn xbts_r32_r32() {
	// Xbts_r32_rm32
	test_instr(16, |a| a.xbts(edx, ebx).unwrap(),
		Instruction::with2(Code::Xbts_r32_rm32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::XBTS);
}

#[test]
#[rustfmt::skip]
fn xbts_r16_m() {
	// Xbts_r16_rm16
	test_instr(16, |a| a.xbts(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Xbts_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::XBTS);
}

#[test]
#[rustfmt::skip]
fn xbts_r32_m() {
	// Xbts_r32_rm32
	test_instr(16, |a| a.xbts(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Xbts_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::XBTS);
}

#[test]
#[rustfmt::skip]
fn xchg_r8_r8() {
	// Xchg_rm8_r8
	test_instr(16, |a| a.xchg(dl, bl).unwrap(),
		Instruction::with2(Code::Xchg_rm8_r8, Register::DL, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xchg_m_r8() {
	// Xchg_rm8_r8
	test_instr(16, |a| a.xchg(byte_ptr(si), bl).unwrap(),
		Instruction::with2(Code::Xchg_rm8_r8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xchg_r16_r16() {
	/* if op1.register() == Register::AX */ {
		// Xchg_r16_AX
		test_instr(16, |a| a.xchg(dx, ax).unwrap(),
			Instruction::with2(Code::Xchg_r16_AX, Register::DX, Register::AX).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Xchg_rm16_r16
		test_instr(16, |a| a.xchg(dx, bx).unwrap(),
			Instruction::with2(Code::Xchg_rm16_r16, Register::DX, Register::BX).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xchg_m_r16() {
	// Xchg_rm16_r16
	test_instr(16, |a| a.xchg(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Xchg_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xchg_r32_r32() {
	/* if op1.register() == Register::EAX */ {
		// Xchg_r32_EAX
		test_instr(16, |a| a.xchg(edx, eax).unwrap(),
			Instruction::with2(Code::Xchg_r32_EAX, Register::EDX, Register::EAX).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Xchg_rm32_r32
		test_instr(16, |a| a.xchg(edx, ebx).unwrap(),
			Instruction::with2(Code::Xchg_rm32_r32, Register::EDX, Register::EBX).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xchg_m_r32() {
	// Xchg_rm32_r32
	test_instr(16, |a| a.xchg(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Xchg_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xcryptcbc() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Xcryptcbc_16
		test_instr(16, |a| a.xcryptcbc().unwrap(),
			Instruction::with(Code::Xcryptcbc_16),
			TestInstrFlags::REMOVE_REP_REPNE_PREFIXES, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xcryptcfb() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Xcryptcfb_16
		test_instr(16, |a| a.xcryptcfb().unwrap(),
			Instruction::with(Code::Xcryptcfb_16),
			TestInstrFlags::REMOVE_REP_REPNE_PREFIXES, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xcryptctr() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Xcryptctr_16
		test_instr(16, |a| a.xcryptctr().unwrap(),
			Instruction::with(Code::Xcryptctr_16),
			TestInstrFlags::REMOVE_REP_REPNE_PREFIXES, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xcryptecb() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Xcryptecb_16
		test_instr(16, |a| a.xcryptecb().unwrap(),
			Instruction::with(Code::Xcryptecb_16),
			TestInstrFlags::REMOVE_REP_REPNE_PREFIXES, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xcryptofb() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Xcryptofb_16
		test_instr(16, |a| a.xcryptofb().unwrap(),
			Instruction::with(Code::Xcryptofb_16),
			TestInstrFlags::REMOVE_REP_REPNE_PREFIXES, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xend() {
	// Xend
	test_instr(16, |a| a.xend().unwrap(),
		Instruction::with(Code::Xend),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xgetbv() {
	// Xgetbv
	test_instr(16, |a| a.xgetbv().unwrap(),
		Instruction::with(Code::Xgetbv),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xor_r8_r8() {
	// Xor_rm8_r8
	test_instr(16, |a| a.xor(dl, bl).unwrap(),
		Instruction::with2(Code::Xor_rm8_r8, Register::DL, Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xor_m_r8() {
	// Xor_rm8_r8
	test_instr(16, |a| a.xor(byte_ptr(si), bl).unwrap(),
		Instruction::with2(Code::Xor_rm8_r8, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BL).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xor_r16_r16() {
	// Xor_rm16_r16
	test_instr(16, |a| a.xor(dx, bx).unwrap(),
		Instruction::with2(Code::Xor_rm16_r16, Register::DX, Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xor_m_r16() {
	// Xor_rm16_r16
	test_instr(16, |a| a.xor(word_ptr(si), bx).unwrap(),
		Instruction::with2(Code::Xor_rm16_r16, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::BX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xor_r32_r32() {
	// Xor_rm32_r32
	test_instr(16, |a| a.xor(edx, ebx).unwrap(),
		Instruction::with2(Code::Xor_rm32_r32, Register::EDX, Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xor_m_r32() {
	// Xor_rm32_r32
	test_instr(16, |a| a.xor(dword_ptr(si), ebx).unwrap(),
		Instruction::with2(Code::Xor_rm32_r32, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None), Register::EBX).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xor_r8_m() {
	// Xor_r8_rm8
	test_instr(16, |a| a.xor(dl, byte_ptr(si)).unwrap(),
		Instruction::with2(Code::Xor_r8_rm8, Register::DL, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xor_r16_m() {
	// Xor_r16_rm16
	test_instr(16, |a| a.xor(dx, word_ptr(si)).unwrap(),
		Instruction::with2(Code::Xor_r16_rm16, Register::DX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xor_r32_m() {
	// Xor_r32_rm32
	test_instr(16, |a| a.xor(edx, dword_ptr(si)).unwrap(),
		Instruction::with2(Code::Xor_r32_rm32, Register::EDX, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xor_r8_i() {
	/* if op0.register() == Register::AL */ {
		// Xor_AL_imm8
		test_instr(16, |a| a.xor(al, -5i32).unwrap(),
			Instruction::with2(Code::Xor_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Xor_rm8_imm8
		test_instr(16, |a| a.xor(dl, -5i32).unwrap(),
			Instruction::with2(Code::Xor_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AL */ {
		// Xor_AL_imm8
		test_instr(16, |a| a.xor(al, -5).unwrap(),
			Instruction::with2(Code::Xor_AL_imm8, Register::AL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Xor_rm8_imm8
		test_instr(16, |a| a.xor(dl, -5).unwrap(),
			Instruction::with2(Code::Xor_rm8_imm8, Register::DL, -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xor_r16_i() {
	/* if op0.register() == Register::AX */ {
		// Xor_AX_imm16
		test_instr(16, |a| a.xor(ax, 0x40B7i32).unwrap(),
			Instruction::with2(Code::Xor_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Xor_rm16_imm8
		test_instr(16, |a| a.xor(dx, -0x80i32).unwrap(),
			Instruction::with2(Code::Xor_rm16_imm8, Register::DX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Xor_rm16_imm8
		test_instr(16, |a| a.xor(dx, 0x7Fi32).unwrap(),
			Instruction::with2(Code::Xor_rm16_imm8, Register::DX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Xor_rm16_imm16
		test_instr(16, |a| a.xor(dx, 0x40B7i32).unwrap(),
			Instruction::with2(Code::Xor_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::AX */ {
		// Xor_AX_imm16
		test_instr(16, |a| a.xor(ax, 0x40B7).unwrap(),
			Instruction::with2(Code::Xor_AX_imm16, Register::AX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Xor_rm16_imm8
		test_instr(16, |a| a.xor(dx, -0x80).unwrap(),
			Instruction::with2(Code::Xor_rm16_imm8, Register::DX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Xor_rm16_imm8
		test_instr(16, |a| a.xor(dx, 0x7F).unwrap(),
			Instruction::with2(Code::Xor_rm16_imm8, Register::DX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Xor_rm16_imm16
		test_instr(16, |a| a.xor(dx, 0x40B7).unwrap(),
			Instruction::with2(Code::Xor_rm16_imm16, Register::DX, 0x40B7i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xor_r32_i() {
	/* if op0.register() == Register::EAX */ {
		// Xor_EAX_imm32
		test_instr(16, |a| a.xor(eax, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Xor_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Xor_rm32_imm8
		test_instr(16, |a| a.xor(edx, -0x80i32).unwrap(),
			Instruction::with2(Code::Xor_rm32_imm8, Register::EDX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Xor_rm32_imm8
		test_instr(16, |a| a.xor(edx, 0x7Fi32).unwrap(),
			Instruction::with2(Code::Xor_rm32_imm8, Register::EDX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Xor_rm32_imm32
		test_instr(16, |a| a.xor(edx, 0x7FFFFFFFi32).unwrap(),
			Instruction::with2(Code::Xor_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
	/* if op0.register() == Register::EAX */ {
		// Xor_EAX_imm32
		test_instr(16, |a| a.xor(eax, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Xor_EAX_imm32, Register::EAX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
		// Xor_rm32_imm8
		test_instr(16, |a| a.xor(edx, -0x80).unwrap(),
			Instruction::with2(Code::Xor_rm32_imm8, Register::EDX, -0x80i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Xor_rm32_imm8
		test_instr(16, |a| a.xor(edx, 0x7F).unwrap(),
			Instruction::with2(Code::Xor_rm32_imm8, Register::EDX, 0x7Fi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Xor_rm32_imm32
		test_instr(16, |a| a.xor(edx, 0x7FFFFFFF).unwrap(),
			Instruction::with2(Code::Xor_rm32_imm32, Register::EDX, 0x7FFFFFFFi32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xor_m_i() {
	/* if op0.size() == MemoryOperandSize::Qword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Skipping Xor_rm64_imm8 - Not supported by current bitness
			// Skipping Xor_rm64_imm8 - Not supported by current bitness
		} /* else */ {
			// Skipping Xor_rm64_imm32 - Not supported by current bitness
		}
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Xor_rm32_imm8
			test_instr(16, |a| a.xor(dword_ptr(di), -0x80i32).unwrap(),
				Instruction::with2(Code::Xor_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Xor_rm32_imm8
			test_instr(16, |a| a.xor(dword_ptr(di), 0x7Fi32).unwrap(),
				Instruction::with2(Code::Xor_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Xor_rm32_imm32
			test_instr(16, |a| a.xor(dword_ptr(di), 0x7FFFFFFFi32).unwrap(),
				Instruction::with2(Code::Xor_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Xor_rm16_imm8
			test_instr(16, |a| a.xor(word_ptr(di), -0x80i32).unwrap(),
				Instruction::with2(Code::Xor_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Xor_rm16_imm8
			test_instr(16, |a| a.xor(word_ptr(di), 0x7Fi32).unwrap(),
				Instruction::with2(Code::Xor_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Xor_rm16_imm16
			test_instr(16, |a| a.xor(word_ptr(di), 0x40B7i32).unwrap(),
				Instruction::with2(Code::Xor_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Xor_rm8_imm8
		test_instr(16, |a| a.xor(byte_ptr(di), -5i32).unwrap(),
			Instruction::with2(Code::Xor_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Xor_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.xor(zmmword_ptr(di), -5i32).is_err()), TestInstrFlags::NONE);
	}
	/* if op0.size() == MemoryOperandSize::Qword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Skipping Xor_rm64_imm8 - Not supported by current bitness
			// Skipping Xor_rm64_imm8 - Not supported by current bitness
		} /* else */ {
			// Skipping Xor_rm64_imm32 - Not supported by current bitness
		}
	} /* else if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Xor_rm32_imm8
			test_instr(16, |a| a.xor(dword_ptr(di), -0x80).unwrap(),
				Instruction::with2(Code::Xor_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Xor_rm32_imm8
			test_instr(16, |a| a.xor(dword_ptr(di), 0x7F).unwrap(),
				Instruction::with2(Code::Xor_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Xor_rm32_imm32
			test_instr(16, |a| a.xor(dword_ptr(di), 0x7FFFFFFF).unwrap(),
				Instruction::with2(Code::Xor_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 >= i8::MIN as i32 && op1 <= i8::MAX as i32 */ {
			// Xor_rm16_imm8
			test_instr(16, |a| a.xor(word_ptr(di), -0x80).unwrap(),
				Instruction::with2(Code::Xor_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -0x80i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Xor_rm16_imm8
			test_instr(16, |a| a.xor(word_ptr(di), 0x7F).unwrap(),
				Instruction::with2(Code::Xor_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fi32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Xor_rm16_imm16
			test_instr(16, |a| a.xor(word_ptr(di), 0x40B7).unwrap(),
				Instruction::with2(Code::Xor_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7i32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Xor_rm8_imm8
		test_instr(16, |a| a.xor(byte_ptr(di), -5).unwrap(),
			Instruction::with2(Code::Xor_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), -5i32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Xor_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.xor(zmmword_ptr(di), -5).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xor_r8_u() {
	/* if op0.register() == Register::AL */ {
		// Xor_AL_imm8
		test_instr(16, |a| a.xor(al, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Xor_AL_imm8, Register::AL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Xor_rm8_imm8
		test_instr(16, |a| a.xor(dl, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Xor_rm8_imm8, Register::DL, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xor_r16_u() {
	/* if op0.register() == Register::AX */ {
		// Xor_AX_imm16
		test_instr(16, |a| a.xor(ax, 0x40B7u32).unwrap(),
			Instruction::with2(Code::Xor_AX_imm16, Register::AX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 <= i8::MAX as u32 || (0xFF80 <= op1 && op1 <= 0xFFFF) */ {
		// Xor_rm16_imm8
		test_instr(16, |a| a.xor(dx, 0xFF80u32).unwrap(),
			Instruction::with2(Code::Xor_rm16_imm8, Register::DX, 0xFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Xor_rm16_imm8
		test_instr(16, |a| a.xor(dx, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Xor_rm16_imm8, Register::DX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Xor_rm16_imm16
		test_instr(16, |a| a.xor(dx, 0x40B7u32).unwrap(),
			Instruction::with2(Code::Xor_rm16_imm16, Register::DX, 0x40B7u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xor_r32_u() {
	/* if op0.register() == Register::EAX */ {
		// Xor_EAX_imm32
		test_instr(16, |a| a.xor(eax, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Xor_EAX_imm32, Register::EAX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else if op1 <= i8::MAX as u32 || 0xFFFF_FF80 <= op1 */ {
		// Xor_rm32_imm8
		test_instr(16, |a| a.xor(edx, 0xFFFFFF80u32).unwrap(),
			Instruction::with2(Code::Xor_rm32_imm8, Register::EDX, 0xFFFFFF80u32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
		// Xor_rm32_imm8
		test_instr(16, |a| a.xor(edx, 0x7Fu32).unwrap(),
			Instruction::with2(Code::Xor_rm32_imm8, Register::EDX, 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Xor_rm32_imm32
		test_instr(16, |a| a.xor(edx, 0x7FFFFFFFu32).unwrap(),
			Instruction::with2(Code::Xor_rm32_imm32, Register::EDX, 0x7FFFFFFFu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xor_m_u() {
	/* if op0.size() == MemoryOperandSize::Dword */ {
		/* if op1 <= i8::MAX as u32 || 0xFFFF_FF80 <= op1 */ {
			// Xor_rm32_imm8
			test_instr(16, |a| a.xor(dword_ptr(di), 0xFFFFFF80u32).unwrap(),
				Instruction::with2(Code::Xor_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFFFFFF80u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Xor_rm32_imm8
			test_instr(16, |a| a.xor(dword_ptr(di), 0x7Fu32).unwrap(),
				Instruction::with2(Code::Xor_rm32_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Xor_rm32_imm32
			test_instr(16, |a| a.xor(dword_ptr(di), 0x7FFFFFFFu32).unwrap(),
				Instruction::with2(Code::Xor_rm32_imm32, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7FFFFFFFu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Word */ {
		/* if op1 <= i8::MAX as u32 || (0xFF80 <= op1 && op1 <= 0xFFFF) */ {
			// Xor_rm16_imm8
			test_instr(16, |a| a.xor(word_ptr(di), 0xFF80u32).unwrap(),
				Instruction::with2(Code::Xor_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0xFF80u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
			// Xor_rm16_imm8
			test_instr(16, |a| a.xor(word_ptr(di), 0x7Fu32).unwrap(),
				Instruction::with2(Code::Xor_rm16_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		} /* else */ {
			// Xor_rm16_imm16
			test_instr(16, |a| a.xor(word_ptr(di), 0x40B7u32).unwrap(),
				Instruction::with2(Code::Xor_rm16_imm16, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x40B7u32).unwrap(),
				TestInstrFlags::NONE, DecoderOptions::NONE);
		}
	} /* else if op0.size() == MemoryOperandSize::Byte */ {
		// Xor_rm8_imm8
		test_instr(16, |a| a.xor(byte_ptr(di), 0x7Fu32).unwrap(),
			Instruction::with2(Code::Xor_rm8_imm8, MemoryOperand::new(Register::DI, Register::None, 1, 0x0i64, 0, false, Register::None), 0x7Fu32).unwrap(),
			TestInstrFlags::NONE, DecoderOptions::NONE);
	} /* else */ {
		// Xor_rm8_imm8
		test_invalid_instr(16, |a| assert!(a.xor(zmmword_ptr(di), 0x7Fu32).is_err()), TestInstrFlags::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xorpd_xmm_xmm() {
	// Xorpd_xmm_xmmm128
	test_instr(16, |a| a.xorpd(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Xorpd_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xorpd_xmm_m() {
	// Xorpd_xmm_xmmm128
	test_instr(16, |a| a.xorpd(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Xorpd_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xorps_xmm_xmm() {
	// Xorps_xmm_xmmm128
	test_instr(16, |a| a.xorps(xmm2, xmm3).unwrap(),
		Instruction::with2(Code::Xorps_xmm_xmmm128, Register::XMM2, Register::XMM3).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xorps_xmm_m() {
	// Xorps_xmm_xmmm128
	test_instr(16, |a| a.xorps(xmm2, xmmword_ptr(si)).unwrap(),
		Instruction::with2(Code::Xorps_xmm_xmmm128, Register::XMM2, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xresldtrk() {
	// Xresldtrk
	test_instr(16, |a| a.xresldtrk().unwrap(),
		Instruction::with(Code::Xresldtrk),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xrstor_m() {
	// Xrstor_mem
	test_instr(16, |a| a.xrstor(ptr(si)).unwrap(),
		Instruction::with1(Code::Xrstor_mem, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xrstors_m() {
	// Xrstors_mem
	test_instr(16, |a| a.xrstors(ptr(si)).unwrap(),
		Instruction::with1(Code::Xrstors_mem, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xsave_m() {
	// Xsave_mem
	test_instr(16, |a| a.xsave(ptr(si)).unwrap(),
		Instruction::with1(Code::Xsave_mem, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xsavec_m() {
	// Xsavec_mem
	test_instr(16, |a| a.xsavec(ptr(si)).unwrap(),
		Instruction::with1(Code::Xsavec_mem, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xsaveopt_m() {
	// Xsaveopt_mem
	test_instr(16, |a| a.xsaveopt(ptr(si)).unwrap(),
		Instruction::with1(Code::Xsaveopt_mem, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xsaves_m() {
	// Xsaves_mem
	test_instr(16, |a| a.xsaves(ptr(si)).unwrap(),
		Instruction::with1(Code::Xsaves_mem, MemoryOperand::new(Register::SI, Register::None, 1, 0x0i64, 0, false, Register::None)).unwrap(),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xsetbv() {
	// Xsetbv
	test_instr(16, |a| a.xsetbv().unwrap(),
		Instruction::with(Code::Xsetbv),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xsha1() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Xsha1_16
		test_instr(16, |a| a.xsha1().unwrap(),
			Instruction::with(Code::Xsha1_16),
			TestInstrFlags::REMOVE_REP_REPNE_PREFIXES, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xsha256() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Xsha256_16
		test_instr(16, |a| a.xsha256().unwrap(),
			Instruction::with(Code::Xsha256_16),
			TestInstrFlags::REMOVE_REP_REPNE_PREFIXES, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xsha512() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Xsha512_16
		test_instr(16, |a| a.xsha512().unwrap(),
			Instruction::with(Code::Xsha512_16),
			TestInstrFlags::REMOVE_REP_REPNE_PREFIXES, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xsha512_alt() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Xsha512_alt_16
		test_instr(16, |a| a.xsha512_alt().unwrap(),
			Instruction::with(Code::Xsha512_alt_16),
			TestInstrFlags::REMOVE_REP_REPNE_PREFIXES, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xstore() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Xstore_16
		test_instr(16, |a| a.xstore().unwrap(),
			Instruction::with(Code::Xstore_16),
			TestInstrFlags::REMOVE_REP_REPNE_PREFIXES, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xstore_alt() {
	/* if self.bitness() == 64 */ {
		// skip `if self.bitness() == 64` since it's not supported by the current test bitness
	} /* else if self.bitness() >= 32 */ {
		// skip `if self.bitness() >= 32` since it's not supported by the current test bitness
	} /* else */ {
		// Xstore_alt_16
		test_instr(16, |a| a.xstore_alt().unwrap(),
			Instruction::with(Code::Xstore_alt_16),
			TestInstrFlags::REMOVE_REP_REPNE_PREFIXES, DecoderOptions::NONE);
	}
}

#[test]
#[rustfmt::skip]
fn xsusldtrk() {
	// Xsusldtrk
	test_instr(16, |a| a.xsusldtrk().unwrap(),
		Instruction::with(Code::Xsusldtrk),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn xtest() {
	// Xtest
	test_instr(16, |a| a.xtest().unwrap(),
		Instruction::with(Code::Xtest),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}

#[test]
#[rustfmt::skip]
fn zero_bytes() {
	// Zero_bytes
	test_instr(16, |a| a.zero_bytes().unwrap(),
		Instruction::with(Code::Zero_bytes),
		TestInstrFlags::NONE, DecoderOptions::NONE);
}
