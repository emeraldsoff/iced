// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

use crate::MvexConvFn;
use lazy_static::lazy_static;
use std::collections::HashMap;

lazy_static! {
	pub(super) static ref TO_MVEX_CONV_FN_HASH: HashMap<&'static str, MvexConvFn> = {
		// GENERATOR-BEGIN: MvexConvFnHash
		// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
		let mut h = HashMap::with_capacity(13);
		let _ = h.insert("None", MvexConvFn::None);
		let _ = h.insert("Sf32", MvexConvFn::Sf32);
		let _ = h.insert("Sf64", MvexConvFn::Sf64);
		let _ = h.insert("Si32", MvexConvFn::Si32);
		let _ = h.insert("Si64", MvexConvFn::Si64);
		let _ = h.insert("Uf32", MvexConvFn::Uf32);
		let _ = h.insert("Uf64", MvexConvFn::Uf64);
		let _ = h.insert("Ui32", MvexConvFn::Ui32);
		let _ = h.insert("Ui64", MvexConvFn::Ui64);
		let _ = h.insert("Df32", MvexConvFn::Df32);
		let _ = h.insert("Df64", MvexConvFn::Df64);
		let _ = h.insert("Di32", MvexConvFn::Di32);
		let _ = h.insert("Di64", MvexConvFn::Di64);
		// GENERATOR-END: MvexConvFnHash
		h
	};
}
